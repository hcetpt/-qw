智能键盘 (ikbd) 协议
====================

介绍
============

Atari 公司的智能键盘 (ikbd) 是一种通用的键盘控制器，其灵活性足以在无需修改的情况下应用于多种产品中。该键盘及其微控制器提供了一个方便的接口，可以连接鼠标和开关式游戏杆。ikbd 处理器还维护一个具有秒级分辨率的实时时钟。ikbd 被设计得足够通用，可以与多种新型计算机产品配合使用。它可以适应不同数量的按键、鼠标分辨率等的变化。ikbd 通过高速双向串行接口与主处理器通信。它可以在多种模式下工作，以支持不同的键盘、游戏杆或鼠标应用。如果仅有一种单向通信介质可用，则可以通过仔细设计默认模式来实现有限的控制器功能。

键盘
========

键盘始终返回按键/松键扫描码。ikbd 对每个按键按下和释放生成键盘扫描码。按键扫描码（按键闭合）从 1 开始，并在附录 A 中定义。例如，在扫描码表中的 ISO 键位置应该存在，即使在特定键盘上该位置没有按键。每个键的松键码是通过将 0x80 与按键码进行逻辑或运算得到的。

特殊代码 0xF6 到 0xFF 被预留用于以下用途：

| 代码 | 命令 |
| --- | --- |
| 0xF6 | 状态报告 |
| 0xF7 | 绝对鼠标位置记录 |
| 0xF8-0xFB | 相对鼠标位置记录（最低有效位由鼠标按钮状态决定） |
| 0xFC | 实时时钟 |
| 0xFD | 游戏杆报告（两个游戏杆） |
| 0xFE | 游戏杆 0 事件 |
| 0xFF | 游戏杆 1 事件 |

在这种模式下，两个 Shift 键返回不同的扫描码。Enter 键和 Return 键也是不同的。

鼠标
=====

鼠标端口应能够支持分辨率为每英寸大约 200 计数（相位变化或“点击”）的鼠标。鼠标应以允许在每秒 10 英寸速度下准确跟踪的速度进行扫描。

ikbd 可以用三种完全不同的方式报告鼠标移动。它可以报告相对移动、在 ikbd 内部维护的坐标系统中的绝对移动，或者将鼠标移动转换为键盘光标控制键等效值。鼠标按钮可以被视为鼠标的一部分，也可以作为额外的键盘键。

相对位置报告
---------------------------

在相对位置模式下，每当发生鼠标事件时，ikbd 将返回相对鼠标位置记录。鼠标事件包括鼠标按钮被按下或释放，或任一轴的移动超过可设置的阈值。无论阈值如何，所有分辨率位都将返回给主机计算机。
请注意，ikbd 可能返回的鼠标相对位置报告中的 delta x 或 delta y 显著超过阈值。这可能发生在以下两种情况下：(a) 当键盘被“暂停”时（事件将被存储直到键盘通信恢复）；(b) 当任何事件正在传输时。

相对鼠标位置记录是一个三字节的记录，形式如下（无论键盘模式如何）：

    %111110xy           ; 鼠标位置记录标志
                        ; 其中 y 是右键状态
                        ; 而 x 是左键状态
    X                   ; 作为二进制补码整数的 delta x
    Y                   ; 作为二进制补码整数的 delta y

请注意，即使 MOUSE BUTTON ACTION 已经将按钮设置为像键盘的一部分那样工作，按钮状态位的值也应该是有效的。如果在生成报告数据包之前累积的运动超出 +127...-128 的范围，则将运动拆分成多个数据包。请注意，报告的 delta y 的符号取决于所选的 Y 坐标原点。

绝对位置报告
---------------------------

ikbd 还可以维护鼠标绝对位置。存在用于重置鼠标位置、设置 X/Y 缩放比例以及查询当前鼠标位置的命令。

鼠标光标键模式
---------------------

ikbd 可以将鼠标移动转换为等效的光标按键。每个轴的鼠标点击次数可以独立编程。ikbd 内部以最高分辨率维护鼠标移动信息，并且每达到缩放因子的倍数时仅生成一对光标键事件。

鼠标移动会立即产生相应的光标键按下代码，然后是释放代码。鼠标按钮产生的扫描码高于预期最大键盘通常分配的扫描码（即 LEFT=0x74 和 RIGHT=0x75）。

操纵杆
========

操纵杆事件报告
------------------------

在这种模式下，每当操纵杆位置发生变化（即每次操纵杆开关或触发器打开或关闭时），ikbd 会生成一个记录。
操纵杆事件记录为两个字节的形式：

    %1111111x           ; 操纵杆事件标记
                        ; 其中 x 是操纵杆 0 或 1
    %x000yyyy           ; 其中 yyyy 是操纵杆位置
                        ; 且 x 是扳机

操纵杆查询
----------

在本模式下，可以随时通过发送“查询操纵杆”命令到 ikbd 来查询当前的操纵杆端口状态。ikbd 对操纵杆查询的响应是一个三字节的报告，形式如下：

    0xFD                ; 操纵杆报告头
    %x000yyyy           ; 操纵杆 0
    %x000yyyy           ; 操纵杆 1
                        ; 其中 x 是扳机
                        ; 且 yyy 是操纵杆位置

操纵杆监控
----------

有一种模式几乎将所有键盘通信时间都用于以用户指定的速率报告操纵杆端口的状态。该模式会一直持续，直到被重置或切换到其他模式。在该模式下，PAUSE 命令不仅停止输出，还会暂时停止扫描操纵杆（不会排队样本）。

开火按钮监控
--------------

提供了一种模式来允许以高速监控单个输入位。在此模式下，ikbd 以串行通信通道允许的最大速率监控操纵杆 1 的开火按钮状态。数据以每字节 8 位的形式传输给主机。ikbd 在此模式下会一直保持，直到被重置或切换到其他模式。在该模式下，PAUSE 命令不仅停止输出，还会暂时停止扫描按钮（不会排队样本）。

操纵杆键码模式
--------------

可以命令 ikbd 将任一操纵杆的操作转换为等效的光标控制按键。ikbd 提供一个断点速度的操纵杆光标。操纵杆事件会产生相应的生成码，紧随其后是相应光标移动键的中断码。操纵杆的扳机或开火按钮产生伪扫描码，这些扫描码高于最大设想键矩阵中使用的值（即 JOYSTICK0=0x74, JOYSTICK1=0x75）。

实时时钟
========

ikbd 还维护系统的实时时钟。有命令可用于设置和查询实时时钟。时间保持的精度可达到一秒。

状态查询
========

可以通过发送对应于 ikbd 设置命令的状态查询命令来获取当前 ikbd 模式和参数的状态。

上电模式
========

键盘控制器会在上电时进行简单的自检以检测主要控制器故障（ROM 校验和和 RAM 测试）以及诸如卡住的按键等问题。任何在上电时按下的键都会被认为卡住了，并返回其中断码（没有前面的生成码，这是键盘错误的标志）。如果控制器自检无误完成，则返回代码 0xF0。（此代码用于指示 ikbd 控制器的版本/发布。ikbd 的第一个版本是 0xF0，如果有第二个版本则为 0xF1，依此类推。）

ikbd 默认采用带有 1 单位阈值的鼠标位置报告，并且屏幕顶部的 Y=0 作为原点，同时处于操纵杆 1 的事件报告模式，两个按钮逻辑上分配给鼠标。在任何操纵杆命令之后，ikbd 假定操纵杆连接到了操纵杆 0 和操纵杆 1。任何鼠标命令（除 MOUSE DISABLE 外）会使端口 0 再次被扫描，就像它是鼠标一样，并且两个按钮逻辑上与其相连。如果在端口 0 被认为是鼠标时收到鼠标禁用命令，则按钮逻辑上分配给操纵杆 1（直到通过另一个鼠标命令重新启用鼠标）。

ikbd 命令集
==========

本节包含可以发送到 ikbd 的命令列表。未指定的命令码（如 0x00）应执行无操作（NOP）。
重置 (RESET)
-----

::

    0x80
    0x01

注意：重置命令是 ikbd 能理解的唯一一个双字节命令。任何跟在 0x80 命令字节后面的字节，如果不是 0x01，则会被忽略（并且导致 0x80 也被忽略）。通过发送至少持续 200 毫秒的断开信号到 ikbd 也可以触发重置。执行重置命令会将键盘恢复到其默认（上电）模式和参数设置，但不会影响时钟。重置命令或功能会导致 ikbd 执行简单的自检。如果测试成功，ikbd 应在收到重置命令（或断开结束或上电）后的 300 毫秒内发送代码 0xF0。然后 ikbd 将扫描按键矩阵中的任何卡住（闭合）的按键。发现任何闭合的按键会导致生成断开扫描码（断开码未被按下码所前置是一个按键矩阵错误的标志）。

设置鼠标按钮操作 (SET MOUSE BUTTON ACTION)
-----------------------

::

    0x07
    %00000mss           ; 鼠标按钮操作
                        ;       （当处于鼠标键码模式时，假定 m = 1）
                        ; mss=0xy，鼠标按钮按下或释放会引起鼠标位置报告
                        ;  其中 y=1，鼠标键按下引起绝对报告
                        ;  x=1，鼠标键释放引起绝对报告
                        ; mss=100，鼠标按钮像按键一样工作

此命令设置 ikbd 如何处理鼠标上的按钮。默认的鼠标按钮操作模式是 %00000000，按钮被视为鼠标的一部分。当按钮像按键一样工作时，LEFT=0x74 和 RIGHT=0x75。

设置相对鼠标位置报告 (SET RELATIVE MOUSE POSITION REPORTING)
-------------------------------------

::

    0x08

设置相对鼠标位置报告。（默认）每当运动超过任一轴的可设置阈值时（参见 SET MOUSE THRESHOLD），ikbd 会异步生成鼠标位置数据包。根据鼠标键模式，在按下或释放鼠标按钮时也可能生成鼠标位置报告。否则，鼠标按钮的行为就像它们是键盘按键一样。

设置绝对鼠标定位 (SET ABSOLUTE MOUSE POSITIONING)
------------------------------

::

    0x09
    XMSB                ; X 最大值（以缩放后的鼠标点击为单位）
    XLSB
    YMSB                ; Y 最大值（以缩放后的鼠标点击为单位）
    YLSB

设置绝对鼠标位置维护。重置 ikbd 维护的 X 和 Y 坐标。
在此模式下，内部维护的坐标值不会在0和大正数之间循环。低于0的多余移动会被忽略。该命令设置了在缩放坐标系统中可以达到的最大正值。超过该值的移动也会被忽略。

设置鼠标键码模式
----------------------

::

    0x0A
    deltax              ; X轴方向上的距离（向左或向右）以点击为单位
    deltay              ; Y轴方向上的距离（向上或向下）以点击为单位

将鼠标监控程序设置为返回光标移动的键码，而不是相对或绝对运动记录。当鼠标在任一轴上移动超过用户指定的阈值时，ikbd会返回相应的光标键码。当键盘处于键扫描码模式时，鼠标移动会导致立即发送按键码，然后是释放码。请注意，此命令不受鼠标运动原点的影响。

设置鼠标阈值
-------------------

::

    0x0B
    X                   ; X轴上的鼠标阈值（以鼠标刻度为单位，正整数）
    Y                   ; Y轴上的鼠标阈值（以鼠标刻度为单位，正整数）

此命令设置生成鼠标事件前的阈值。请注意，它不会影响返回给主机的数据分辨率。此命令仅在相对鼠标定位模式下有效。默认情况下，在重置（或上电）时，阈值设为1。

设置鼠标缩放比例
-----------------

::

    0x0C
    X                   ; 每个内部X轴方向上的水平鼠标刻度
    Y                   ; 每个内部Y轴方向上的垂直鼠标刻度

此命令设置绝对鼠标定位模式下的缩放因子。在此模式下，必须有指定数量的鼠标相位变化（“点击”）发生后，内部维护的坐标才会改变一个单位（每个轴独立缩放）。请记住，除非ikbd被命令报告按钮按下或释放，否则鼠标位置信息只有通过查询ikbd在绝对鼠标定位模式下才可用（参见设置鼠标按钮动作）。

查询鼠标位置
--------------------------

::

    0x0D
    返回：
            0xF7       ; 绝对鼠标位置头
    BUTTONS
            0000dcba   ; 其中a表示自上次查询以来右键按下
                       ; b表示自上次查询以来右键抬起
                       ; c表示自上次查询以来左键按下
                       ; d表示自上次查询以来左键抬起
            XMSB       ; X坐标
            XLSB
            YMSB       ; Y坐标
            YLSB

查询鼠标位置命令在绝对鼠标定位模式下有效，无论鼠标按钮动作设置如何。

加载鼠标位置
-------------------

::

    0x0E
    0x00                ; 填充字节
    XMSB                ; X坐标
    XLSB                ; （在缩放坐标系统中）
    YMSB                ; Y坐标
    YLSB

此命令允许用户预设内部维护的绝对鼠标位置。

设置Y=0在底部
-----------------

::

    0x0F

此命令使Y轴的原点位于ikbd内部逻辑坐标系统的底部，适用于所有相对或绝对鼠标移动。这使得朝向用户的鼠标移动为负值，远离用户的鼠标移动为正值。

设置Y=0在顶部
--------------

::

    0x10

使Y轴的原点位于ikbd内部逻辑坐标系统的顶部，适用于所有相对或绝对鼠标移动。（默认）这使得朝向用户的鼠标移动为正值，远离用户的鼠标移动为负值。

恢复
------

::

    0x11

恢复向主机发送数据。由于任何接收到的命令都会导致ikbd暂停输出后的隐式恢复，因此此命令可以视为无操作命令。如果此命令由未暂停状态下的ikbd接收，则会被忽略。
禁用鼠标
------------

::

    0x12

禁用所有鼠标事件报告（内部可能也会禁用扫描）。任何有效的鼠标模式命令都会恢复鼠标运动监控。（有效的鼠标模式命令包括：设置相对鼠标位置报告、设置绝对鼠标定位和设置鼠标键码模式。）
注意：如果已命令鼠标按钮像键盘键一样工作，此命令将影响它们的操作。
暂停输出
------------

::

    0x13

停止向主机发送数据，直到收到另一个有效命令。按键矩阵活动仍然被监控，并且扫描码或ASCII字符会被排队（最多支持微控制器所能处理的数量），等待主机允许恢复输出时发送。如果处于手柄事件报告模式，手柄事件也会被排队。
应累积鼠标运动，直到输出暂停结束。如果ikbd处于相对鼠标定位报告模式，则累积的运动会超出正常阈值限制，以便在恢复输出时生成尽可能少的数据包进行传输。按下或释放任一鼠标按钮时，如果鼠标处于相对鼠标定位报告模式，累积的运动会立即作为数据包排队。
由于微控制器内存的限制，此命令应谨慎使用，每次关闭输出的时间不应超过<tbd>毫秒。
输出仅在当前‘事件’结束后停止。如果在多字节报告的中间接收到暂停输出命令，该数据包仍会完整传输，然后暂停才会生效。
当ikbd处于手柄监控模式或火键监控模式时，暂停输出命令也会暂时停止监控过程（即样本不会排队以供传输）。
设置手柄事件报告
----------------------------

::

    0x14

进入手柄事件报告模式（默认）。每次手柄开关或触发器打开或闭合时，都会生成一个手柄事件记录。
设置手柄查询模式
-------------------------------

::

    0x15

禁用手柄事件报告。主机必须发送单独的手柄查询命令来检测手柄状态。
手柄查询
--------------------

::

    0x16

返回表示当前手柄状态的记录。此命令在手柄事件报告模式或手柄查询模式下均有效。
设置手柄监控
-----------------------

::

    0x17
    rate                ; 样本之间的时间间隔（以百分之一秒为单位）
    返回：（以两个一组的数据包形式，只要处于此模式）
            %000000xy   ; 其中y是手柄1的火键
                        ; x是手柄0的火键
            %nnnnmmmm   ; 其中m是手柄1的状态
                        ; n是手柄0的状态

将ikbd设置为仅监控串行命令线、维护当前时间钟并监控手柄。rate设置手柄样本之间的间隔。
注意：用户不应将速率设置得高于串行通信信道允许的2字节数据包传输速率。

设置火灾按钮监控
-------------------

::

    0x18
    返回：（只要处于模式中）
            %bbbbbbbb   ; JOYSTICK1 火灾按钮的状态，每字节包含8位，第一位是最高有效位

设置 ikbd 仅监控串行命令行、维护时钟，并监控 JOYSTICK1 的火灾按钮。火灾按钮以这样的速率扫描：在前一个字节发送到主机所需的时间内产生8个样本（即扫描速率 = 8/10 * 波特率）。样本间隔应尽可能恒定。

设置摇杆按键码模式
--------------------

::

    0x19
    RX                  ; 水平速度断点到达所需时间（以十分之一秒为单位）
    RY                  ; 垂直速度断点到达所需时间（以十分之一秒为单位）
    TX                  ; 在 RX 到达之前，摇杆关闭时间（以十分之一秒为单位），直到生成水平光标键
    TY                  ; 在 RY 到达之前，摇杆关闭时间（以十分之一秒为单位），直到生成垂直光标键
    VX                  ; 在 RX 到达之后，摇杆关闭时间（以十分之一秒为单位），直到生成水平光标按键码
    VY                  ; 在 RY 到达之后，摇杆关闭时间（以十分之一秒为单位），直到生成垂直光标按键码

在此模式下，摇杆0以模拟光标按键码的方式进行扫描。初始关闭时，会生成一对按键码（按下/释放）。然后最多在 Rn 十分之一秒后，每隔 Tn 十分之一秒生成一对按键码。当达到 Rn 断点后，每隔 Vn 十分之一秒生成一对按键码。这提供了速度（自动重复）断点功能。
请注意，通过将 RX 和/或 RY 设置为零，可以禁用速度功能。此时 TX 和 TY 的值变得没有意义，光标按键码的生成由 VX 和 VY 控制。

禁用摇杆
---------

::

    0x1A

禁用任何摇杆事件的生成（内部可能会禁用扫描）。任何有效的摇杆模式命令都会恢复摇杆监控。（摇杆模式命令包括：设置摇杆事件报告、设置摇杆询问模式、设置摇杆监控、设置火灾按钮监控和设置摇杆按键码模式。）

设置时钟
--------

::

    0x1B
    YY                  ; 年份（最后两位数字）
    MM                  ; 月份
    DD                  ; 日
    hh                  ; 小时
    mm                  ; 分钟
    ss                  ; 秒

所有时钟数据都应以压缩BCD格式发送给 ikbd。
任何无效的BCD数字应被视为“不关心”，并且不会改变特定的日期或时间字段。这允许只设置时钟的某些子字段。

询问时钟
--------

::

    0x1C
    返回：
            0xFC        ; 时钟事件头
            YY          ; 年份（最后两位数字）
            MM          ; 月份
            DD          ; 日
            hh          ; 小时
            mm          ; 分钟
            ss          ; 秒

    所有时钟数据都以压缩BCD格式发送。

内存加载
--------

::

    0x20
    ADRMSB              ; 控制器中的地址
    ADRLSB              ; 要加载的内存
    NUM                 ; 字节数（0-128）
    { data }

此命令允许主机将任意值加载到 ikbd 控制器内存中。数据字节之间的间隔必须小于20毫秒。
### 内存读取
```
0x21
ADRMSB              ; 控制器中的地址
ADRLSB              ; 要读取的内存
返回值:
0xF6                ; 状态头
0x20                ; 内存访问
{ data }            ; 从 ADR 开始的 6 字节数据
```

此命令允许主机从 ikbd 控制器内存中读取数据。

### 控制器执行
```
0x22
ADRMSB              ; 要调用的子程序在控制器内存中的地址
ADRLSB              ;
```

此命令允许主机命令 ikbd 控制器内存中子程序的执行。

### 状态查询
```
状态命令通过将 0x80 与相关的 SET 命令进行按位或运算来形成。
示例:
0x88 (或 0x89 或 0x8A)  ; 请求鼠标模式
返回值:
0xF6                ; 状态响应头
mode                ; 0x08 是 RELATIVE
                    ; 0x09 是 ABSOLUTE
                    ; 0x0A 是 KEYCODE
param1              ; 0 是 RELATIVE
                    ; XMSB 最大值 如果是 ABSOLUTE
                    ; DELTA X 如果是 KEYCODE
param2              ; 0 是 RELATIVE
                    ; YMSB 最大值 如果是 ABSOLUTE
                    ; DELTA Y 如果是 KEYCODE
param3              ; 0 如果是 RELATIVE
                    ; 或 KEYCODE
                    ; YMSB 是 ABSOLUTE
param4              ; 0 如果是 RELATIVE
                    ; 或 KEYCODE
                    ; YLSB 是 ABSOLUTE
0                   ; 填充
0
```

状态查询命令请求 ikbd 返回当前模式或与特定命令相关联的参数。所有状态报告都填充为 8 字节长的返回包。状态请求的响应设计使得主机可以存储它们（去除状态报告头字节后），并在稍后作为命令发送回 ikbd 以恢复其状态。0 填充字节会被 ikbd 视为 NOP。

有效的状态查询命令包括：
```
0x87    鼠标按钮动作
0x88    鼠标模式
0x89
0x8A
0x8B    鼠标阈值
0x8C    鼠标缩放
0x8F    鼠标垂直坐标
0x90    （返回       0x0F Y=0 在底部
                    0x10 Y=0 在顶部）
0x92    鼠标启用/禁用
                    （返回       0x00 启用）
                    0x12 禁用）
0x94    操纵杆模式
0x95
0x96
0x9A    操纵杆启用/禁用
                    （返回       0x00 启用
                    0x1A 禁用）
```

（主机）程序员的责任是在任何时候只处理一个未回答的查询。

如果 ikbd 处于操纵杆监控模式或火控按钮监控模式，则状态查询命令无效。

### 扫描码
ikbd 返回的键扫描码选择是为了简化 GSX 的实现。
GSX 标准键盘映射表：

| 十六进制 | 键帽 |
|---------|------|
| 01      | Esc  |
| 02      | 1    |
| 03      | 2    |
| 04      | 3    |
| 05      | 4    |
| 06      | 5    |
| 07      | 6    |
| 08      | 7    |
| 09      | 8    |
| 0A      | 9    |
| 0B      | 0    |
| 0C      | -    |
| 0D      | =    |
| 0E      | BS   |
| 0F      | TAB  |
| 10      | Q    |
| 11      | W    |
| 12      | E    |
| 13      | R    |
| 14      | T    |
| 15      | Y    |
| 16      | U    |
| 17      | I    |
| 18      | O    |
| 19      | P    |
| 1A      | [    |
| 1B      | ]    |
| 1C      | RET  |
| 1D      | CTRL |
| 1E      | A    |
| 1F      | S    |
| 20      | D    |
| 21      | F    |
| 22      | G    |
| 23      | H    |
| 24      | J    |
| 25      | K    |
| 26      | L    |
| 27      | ;    |
| 28      | '    |
| 29      | `    |
| 2A      | (LEFT) SHIFT |
| 2B      | \    |
| 2C      | Z    |
| 2D      | X    |
| 2E      | C    |
| 2F      | V    |
| 30      | B    |
| 31      | N    |
| 32      | M    |
| 33      | ,    |
| 34      |      |
| 35      | /    |
| 36      | (RIGHT) SHIFT |
| 37      | { NOT USED }  |
| 38      | ALT  |
| 39      | 空格键 |
| 3A      | CAPS LOCK |
| 3B      | F1   |
| 3C      | F2   |
| 3D      | F3   |
| 3E      | F4   |
| 3F      | F5   |
| 40      | F6   |
| 41      | F7   |
| 42      | F8   |
| 43      | F9   |
| 44      | F10  |
| 45      | { NOT USED }  |
| 46      | { NOT USED }  |
| 47      | HOME |
| 48      | UP ARROW |
| 49      | { NOT USED }  |
| 4A      | KEYPAD - |
| 4B      | LEFT ARROW |
| 4C      | { NOT USED }  |
| 4D      | RIGHT ARROW |
| 4E      | KEYPAD + |
| 4F      | { NOT USED }  |
| 50      | DOWN ARROW |
| 51      | { NOT USED }  |
| 52      | INSERT |
| 53      | DEL   |
| 54      | { NOT USED }  |
| 5F      | { NOT USED }  |
| 60      | ISO KEY |
| 61      | UNDO  |
| 62      | HELP  |
| 63      | KEYPAD ( |
| 64      | KEYPAD / |
| 65      | KEYPAD * |
| 66      | KEYPAD * |
| 67      | KEYPAD 7 |
| 68      | KEYPAD 8 |
| 69      | KEYPAD 9 |
| 6A      | KEYPAD 4 |
| 6B      | KEYPAD 5 |
| 6C      | KEYPAD 6 |
| 6D      | KEYPAD 1 |
| 6E      | KEYPAD 2 |
| 6F      | KEYPAD 3 |
| 70      | KEYPAD 0 |
| 71      | KEYPAD |
| 72      | KEYPAD ENTER |
