---------------------------
Linux 游戏手柄规范
---------------------------

:作者: 2013 年 David Herrmann <dh.herrmann@gmail.com>

简介
~~~~~~~~~~~~
Linux 提供了许多不同的游戏手柄输入驱动程序。为了避免用户空间处理每个游戏手柄的不同按钮映射，本文档定义了游戏手柄应该如何报告其数据。

几何结构
~~~~~~~~
我们所定义的“游戏手柄”大致如下所示：

            ____________________________              __
           / [__ZL__]          [__ZR__] \               |
          / [__ TL __]        [__ TR __] \              | 前触发器
       __/________________________________\__         __|
      /                                  _   \          |
     /      /\           __             (N)   \         |
    /       ||      __  |MO|  __     _       _ \        | 主摇杆
   |    <===DP===> |SE|      |ST|   (W) -|- (E) |       |
    \       ||    ___          ___       _     /        |
    /\      \/   /   \        /   \     (S)   /\      __|
   /  \________ | LS  | ____ |  RS | ________/  \       |
  |         /  \ \___/ /    \ \___/ /  \         |      | 控制摇杆
  |        /    \_____/      \_____/    \        |    __|
  |       /                              \       |
   \_____/                                \_____/

       |________|______|    |______|___________|
         D-Pad    左       右   动作摇杆
                 摇杆       摇杆

                   |_____________|
                      菜单摇杆

大多数游戏手柄具有以下功能：

  - 动作摇杆
    位于右侧的四个按钮，呈钻石形状。这些按钮在大多数设备上都有不同的标签，因此我们将其定义为 NORTH（北）、SOUTH（南）、WEST（西）和 EAST（东）。
  - 方向摇杆（D-Pad）
    位于左侧的四个按钮，分别指向上、下、左和右。
  - 菜单摇杆
    不同的组合，但通常有两个按钮：SELECT 和 START。此外，许多游戏手柄有一个带有品牌标志的特殊按钮，用作系统按钮。它通常与其他按钮不同，并用于弹出系统菜单或系统设置。
  - 模拟摇杆
    模拟摇杆提供可自由移动的摇杆来控制方向。并非所有设备都具有两个或任何一个模拟摇杆，但它们通常存在。按压模拟摇杆时也可能提供数字按钮。
  - 触发器
    触发器位于手柄上方的垂直方向。并非所有设备都提供触发器，但上方的按钮通常称为左触发器和右触发器，下方的按钮称为左 Z 和右 Z。
  - 震动
    许多设备提供了力反馈功能。但通常只是简单的震动马达。

检测
~~~~~~~~
遵循本文档中描述协议的所有游戏手柄都会映射 BTN_GAMEPAD。这是 BTN_SOUTH/BTN_A 的别名。可以用来识别游戏手柄。
然而，并非所有游戏手柄都提供所有功能，因此你需要首先测试所需的所有功能。每个功能的映射方式如下所述。
旧驱动程序通常不遵守这些规则。由于我们无法为了向后兼容而更改它们，你需要在用户空间中自己提供修正映射。有些设备可能还提供了模块选项来改变映射，你可以建议用户设置这些选项。
所有新的游戏手柄都应该遵循这种映射。如果它们不遵循，请报告任何错误。
市面上有许多功能较少/性能较低的设备，它们重用了此协议中的按钮。然而，它们试图以兼容的方式这样做。例如，“Nintendo Wii Nunchuk”提供两个扳机按钮和一个模拟摇杆。它报告这些输入时，仿佛是一个只有单个模拟摇杆和右侧两个扳机按钮的游戏手柄。
这意味着，如果你只支持“真正”的游戏手柄，你必须测试设备上报的所有事件。否则，你还会得到那些仅报告部分事件的设备。
其他非游戏手柄外观或感觉的设备不应报告这些事件。
事件
~~~~~~

游戏手柄报告以下事件：

- 动作垫：

  每个游戏手柄设备至少有2个动作按钮。这意味着每个设备都会报告BTN_SOUTH（BTN_GAMEPAD是其别名）。无论按钮上的标签如何，代码根据按钮的实际位置发送。
  请注意，2键和3键的手柄相对罕见且老旧。你可能需要过滤掉那些没有报告所有四个按钮的手柄。
- 两按钮手柄：

  如果只有2个动作按钮，则它们被报告为BTN_SOUTH和BTN_EAST。对于垂直布局，上方的按钮是BTN_EAST。对于水平布局，右侧的按钮是BTN_EAST。
- 三按钮手柄：

  如果只有3个动作按钮，则从左到右依次报告为：BTN_WEST、BTN_SOUTH、BTN_EAST。如果按钮完全垂直排列，则从上到下依次报告为：BTN_WEST、BTN_SOUTH、BTN_EAST。

- 四按钮手柄：

  如果所有4个动作按钮都存在，它们可以有两种不同的排列方式。如果是菱形排列，则根据实际位置依次报告为BTN_NORTH、BTN_WEST、BTN_SOUTH、BTN_EAST。
如果形状为矩形，则左上角的按钮是 BTN_NORTH，左下角的是 BTN_WEST，右下角的是 BTN_SOUTH，右上角的是 BTN_EAST。
- 十字键（D-Pad）：

  每个游戏手柄都提供一个带有四个方向的十字键：上、下、左、右。
  其中一些作为数字按钮提供，一些作为模拟按钮提供。有些手柄甚至会同时报告两者。内核不会在这两者之间转换，
  因此应用程序应支持这两种情况，并在两者都被报告时选择更合适的方式。

- 数字按钮报告为：

      BTN_DPAD_*

    - 模拟按钮报告为：

      ABS_HAT0X 和 ABS_HAT0Y

  （对于 ABS 值，负值表示左/上，正值表示右/下）

- 模拟摇杆（Analog-Sticks）：

  左侧的模拟摇杆报告为 ABS_X 和 ABS_Y。右侧的模拟摇杆报告为 ABS_RX 和 ABS_RY。可能不存在摇杆，也可能存在一个或两个摇杆。
  如果模拟摇杆提供了数字按钮，它们将相应地映射为 BTN_THUMBL（第一个/左侧）和 BTN_THUMBR（第二个/右侧）。
  （对于 ABS 值，负值表示左/上，正值表示右/下）

- 触发器（Triggers）：

  触发器按钮可以作为数字按钮、模拟按钮或两者同时存在。用户空间必须正确处理任何情况并选择最合适的模式。
  上方触发器按钮报告为 BTN_TR 或 ABS_HAT1X（右侧），以及 BTN_TL 或 ABS_HAT1Y（左侧）。下方触发器按钮报告为 BTN_TR2 或 ABS_HAT2X（右侧/ZR），以及 BTN_TL2 或 ABS_HAT2Y（左侧/ZL）。
  如果只有一个触发器按钮组合（上方+下方），则它们被报告为“右侧”触发器（BTN_TR/ABS_HAT1X）。
  （ABS 触发器值从 0 开始，压力以正值报告）

- 菜单键（Menu-Pad）：

  菜单按钮始终为数字按钮，并根据其位置而不是标签进行映射。具体如下：

    - 单按钮垫：

      映射为 BTN_START

    - 双按钮垫：

      左侧按钮映射为 BTN_SELECT，右侧按钮映射为 BTN_START

  许多垫子还有一个第三个按钮，该按钮有特殊的品牌标志或符号及意义。这样的按钮映射为 BTN_MODE。例如，任天堂的“HOME”按钮，Xbox 的“X”按钮或索尼 PlayStation 的“PS”按钮。
- 震动（Rumble）：

  震动功能以 FF_RUMBLE 表示。
- 配置文件（Profile）：

  一些手柄提供一个多值配置文件选择开关。例如 Xbox Adaptive 和 Xbox Elite 2 控制器。当活动配置文件切换时，其新选中的值将以 ABS_PROFILE 事件的形式发出。
当然，请提供您需要翻译的文本。
