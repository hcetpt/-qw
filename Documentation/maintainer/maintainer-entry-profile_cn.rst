### 维护者条目简介

#### 维护者条目简介
维护者条目简介补充了顶级流程文档（提交补丁、提交驱动程序……）的内容，包括子系统/设备驱动器本地的惯例以及补丁提交生命周期的细节。贡献者使用此文档来调整他们的期望并避免常见的错误；维护者可以利用这些简介跨子系统寻找机会以统一通用实践。

##### 概览
提供关于子系统如何运作的介绍。虽然 `MAINTAINERS` 告诉贡献者哪些文件的补丁应该发送到哪里，但它并没有传达其他有助于开发的子系统本地基础设施和机制。
考虑的一些示例性问题：

- 当补丁被应用到本地树或合并到上游时，是否有通知？
- 子系统是否有一个 Patchwork 实例？Patchwork 状态变化是否被通知？
- 是否有监视列表的机器人或持续集成 (CI) 基础设施，或者子系统用于控制接受的自动化测试反馈？
- 被拉入 `-next` 的 Git 分支有哪些？
- 贡献者应该针对哪个分支提交？
- 任何指向其他维护者条目简介的链接？例如，一个设备驱动程序可能会指向其父级子系统的条目。这使贡献者意识到在提交链中维护者可能对其他维护者的义务。

#### 提交检查清单附加项
列出除了通用的“提交检查清单”之外，一个补丁被认为足够健康以获得维护者关注所必须遵循的强制性和建议性标准。
例如：“通过 checkpatch.pl 且没有错误或警告。通过 $URI 中详述的单元测试。”
提交检查清单附加项还可以包括关于相关硬件规范状态的详细信息。例如，子系统是否要求在考虑补丁之前公布特定修订版本的规范？

#### 关键周期日期
提交者常见的误解之一是可以在合并窗口关闭前的任何时候发送补丁，并且仍然可以考虑纳入下一个 `-rc1`。实际上，大多数补丁需要提前在 linux-next 中沉淀好，以便于合并窗口开启。为提交者澄清关键日期（按照 `-rc` 发布周计算），说明补丁何时可以考虑合并，以及何时需要等待下一个 `-rc`。至少应包括以下内容：

- 最后一个 `-rc` 用于新特性提交：
  针对下一个合并窗口的新特性提交应在这一点之前首次发布以供考虑。在这一点之后提交的补丁应当明确表示它们的目标是下一个合并窗口 (`NEXT+1`)，或者应附带充分的理由说明为什么它们应该被加速处理。一般而言，应对贡献者设定期望值，即新特性提交应在 `-rc5` 之前出现。
- 最后一个 `-rc` 合并特性：合并决策的截止日期
  向贡献者指出，尚未被应用的补丁集需要等到下一个合并窗口 (`NEXT+1`)。当然，没有任何义务必须接受任何给定的补丁集，但如果审查在此点之前未完成，则期望贡献者等待并在下一次合并窗口重新提交。

可选：

- 第一个 `-rc`，在该 `-rc` 时，概览部分列出的开发基线分支应被视为准备好接受新的提交。

#### 审查周期
贡献者最困扰的问题之一是在提交补丁集后未收到任何反馈的情况下多久之后应该询问。除了指定重新提交前应等待多长时间外，本节还可以指示首选的更新方式，如重新发送整个系列或私下发送提醒邮件。本节还可能列出该代码区域的审查方式以及获取反馈的方法，而不仅仅是直接来自维护者的方式。
现有维护者简介
-----------------

目前，现有的维护者简介列于此处；在不久的将来我们可能会采取不同的做法。
.. toctree::
   :maxdepth: 1

   ../doc-guide/maintainer-profile
   ../nvdimm/maintainer-entry-profile
   ../arch/riscv/patch-acceptance
   ../process/maintainer-soc
   ../process/maintainer-soc-clean-dts
   ../driver-api/media/maintainer-entry-profile
   ../process/maintainer-netdev
   ../driver-api/vfio-pci-device-specific-driver-acceptance
   ../nvme/feature-and-quirk-policy
   ../filesystems/xfs/xfs-maintainer-entry-profile
   ../mm/damon/maintainer-profile

这段文字描述了一个文档结构，其中包含了一系列链接到不同维护者简介或指南的部分。这些链接指向了关于特定硬件、软件组件或者系统特性的维护者准则和流程。尽管原文中使用的"toctree"是Sphinx文档生成工具中的一个指令，用于定义文档结构和导航树，在这里翻译时没有实际意义，因为这是一个特定于Sphinx的指令。
