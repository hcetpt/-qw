SPDX 许可证标识符: GPL-2.0

==============================
特性和驱动程序维护者
==============================

“维护者”这个术语涵盖了从几乎全职处理补丁和拉取请求到负责一小部分特性或驱动程序的各种参与程度。
与本章的其他部分不同，本节主要针对后者（人数较多的一组）。它提供了建议，并描述了维护一小部分代码的维护者的期望和责任。
驱动程序通常没有自己的邮件列表和 Git 仓库，而是通过更大子系统的邮件列表发送和审查补丁。

职责
================

维护工作的量通常与代码库的大小和受欢迎程度成正比。小特性和驱动程序应该需要相对较少的维护工作。尽管如此，当工作到来时（以需要审查的补丁、用户报告的错误等形式），必须及时处理。

即使某个特定驱动程序每个月或每个季度只看到一个补丁，整个子系统可能有上百个这样的驱动程序。子系统维护者不能等待很长时间才能收到审查者的回复。

对响应时间的具体期望因子系统而异。子系统的补丁审查服务级别协议（SLA）有时可以在子系统的文档中找到。如果没有，作为一般规则，审查者应尽量比子系统维护者通常的补丁审查延迟更快地回应。对于快节奏的子系统（如网络）来说，期望可能是两个工作日内，而对于较慢的部分则可能长达几周。

邮件列表参与
--------------------------

Linux 内核使用邮件列表作为主要沟通形式。维护者必须订阅并关注相应的子系统范围内的邮件列表。可以通过订阅整个列表或使用更现代的选择性设置，例如 `lei <https://people.kernel.org/monsieuricon/lore-lei-part-1-getting-started>`_。

维护者必须知道如何在邮件列表上进行沟通（纯文本，无侵入性的法律脚注，不使用顶部引用等）。

审查
-------

维护者必须审查所有仅涉及其驱动程序的补丁，无论多么微不足道。如果补丁是树范围内的更改并且修改了多个驱动程序，则是否提供审查由维护者自行决定。
当一段代码有多个维护者时，来自任一维护者的“Acked-by”或“Reviewed-by”标签（或评审意见）即可满足此要求。
如果特定变更的审查过程或验证耗时超过子系统的预期审查时间线，维护者应回复提交信息，表明正在开展工作，并告知何时可以得到完整的审查结果。

重构和核心变更
----------------

有时需要对核心代码进行变更以提高整个内核的可维护性。维护者应积极参与并帮助指导和测试其代码，以适应新的基础设施。

错误报告
---------

维护者必须确保及时解决向他们报告的代码中的严重问题：如回归、内核崩溃、内核警告、编译错误、锁定、数据丢失以及其他类似范围的错误。此外，维护者还应回应有关其他类型错误的报告，特别是如果报告质量合理或指出可能严重的错误——特别是如果他们在MAINTAINERS文件中具有*支持*状态的代码库。

开放开发
---------

关于用户报告的问题讨论以及新代码的开发应在更大子系统典型的公开方式进行。通常，在单一公司内部的开发是在保密的情况下进行的。但是，由社区成员发起的开发和讨论不得从公共论坛转到封闭论坛或私人电子邮件对话。合理的例外情况包括关于安全相关问题的讨论。

选择维护者
===========

上一节描述了对维护者的期望，本节提供选择维护者的指导，并阐述常见的误解。

作者
----

最自然且最常见的维护者选择是代码的作者。作者对代码非常熟悉，因此是最适合持续维护该代码的人。
话虽如此，维护者的角色是积极的。`MAINTAINERS` 文件并不是一个荣誉名单（实际上有一个单独的 `CREDITS` 文件），而是那些将积极帮助代码的人的名单。
如果作者没有时间、兴趣或能力来维护代码，必须选择另一位维护者。

多个维护者
--------------------

现代最佳实践规定，任何代码片段至少应有两个维护者，无论多么微不足道。这可以分散负担，帮助人们休假，防止过劳，并培训社区的新成员等等。即使有一个明显的合适人选，也应找到另一位维护者。
维护者必须是人，因此，不能将邮件列表或群组邮箱作为维护者添加。信任和理解是内核维护的基础，而无法与邮件列表建立信任。除了人类之外，有一个邮件列表是完全可以接受的。

公司结构
--------------------

对于外人来说，Linux 内核可能看起来像一个层级组织，Linus 作为 CEO。虽然代码以层级方式流动，但这里并不适用公司的模板。Linux 是由（很少表达的）相互尊重、信任和便利维系在一起的无政府状态。
所有这些都是说，管理者几乎从来不是好的维护者。
维护者的职位更接近于轮班待命，而不是权力的位置。
以下是一些被选为维护者的人员特征，这些特征是明显的警告信号：

- 社区中不为人所知，从未给列表发送过邮件
- 没有编写过任何代码
- （当开发是合同形式时）为支付开发费用的公司工作，而不是实际完成工作的公司

不合规处理
==============

子系统维护者可以从 `MAINTAINERS` 文件中移除不活跃的维护者。如果该维护者是重要的作者或在代码开发中扮演了重要角色，他们应该被移到 `CREDITS` 文件中。
移除不活跃的维护者不应被视为惩罚性措施。
拥有不活跃的维护者会产生实际成本，因为所有开发者都必须记住在讨论中包含维护者，而子系统维护者则要费心思考如何征求反馈。
子系统维护者可以因缺乏维护而移除代码。
子系统维护者可以拒绝接受那些反复忽视其维护职责的公司提供的代码。
