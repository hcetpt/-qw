SPDX 许可证标识符: GPL-2.0

=====================================
处理混乱的拉取请求差异统计
=====================================

子系统维护者经常在向上游发送工作时使用 `git request-pull`。通常，结果会包含一个很好的差异统计，显示哪些文件将被修改以及每份文件有多少内容会被更改。然而，偶尔一个具有相对复杂开发历史的仓库会产生一个庞大的差异统计，其中包含大量无关的工作。结果看起来很糟糕，并且掩盖了拉取请求实际在做什么。本文档描述了发生的情况以及如何解决问题；它来源于林纳斯·托瓦兹的智慧，可以在 Linus1_ 和 Linus2_ 中找到。
.. _Linus1: https://lore.kernel.org/lkml/CAHk-=wg3wXH2JNxkQi+eLZkpuxqV+wPiHhw_Jf7ViH33Sw7PHA@mail.gmail.com/
.. _Linus2: https://lore.kernel.org/lkml/CAHk-=wgXbSa8yq8Dht8at+gxb_idnJ7X5qWZQWRBN4_CUPr=eQ@mail.gmail.com/

Git 的开发历史是通过一系列提交进行的。简化来说，主线内核开发如下所示：

```
... vM --- vN-rc1 --- vN-rc2 --- vN-rc3 --- ... --- vN-rc7 --- vN
```

如果想查看两个点之间的变化，这样的命令可以完成任务：

```
$ git diff --stat --summary vN-rc2..vN-rc3
```

这里有两个明确的历史点；Git 基本上会“减去”起始点和结束点，并显示产生的差异。请求的操作是明确且易于理解的。

当子系统维护者创建了一个分支并在其上提交更改时，在最简单的情况下，历史记录如下所示：

```
... vM --- vN-rc1 --- vN-rc2 --- vN-rc3 --- ... --- vN-rc7 --- vN
                          |
                          +-- c1 --- c2 --- ... --- cN
```

如果该维护者现在使用 `git diff` 来查看主线分支（我们称其为“linus”）和 cN 之间发生了什么变化，仍然有两个明确的端点，结果如预期。因此，使用 `git request-pull` 生成的拉取请求也会如预期。但现在考虑一个稍微更复杂的开发历史：

```
... vM --- vN-rc1 --- vN-rc2 --- vN-rc3 --- ... --- vN-rc7 --- vN
                |         |
                |         +-- c1 --- c2 --- ... --- cN
                |                   /
                +-- x1 --- x2 --- x3
```

我们的维护者在 vN-rc1 创建了一个分支，并在 vN-rc2 创建了另一个分支；这两个分支随后被合并到 c2 中。现在，为 cN 生成的拉取请求可能会变得非常混乱，开发者经常会疑惑为什么会这样。

这里发生的情况是没有两个明确的端点供 `git diff` 操作使用。导致 cN 的开发始于两个不同的地方；为了生成差异统计，`git diff` 不得不选择其中一个并希望结果最好。如果差异统计从 vN-rc1 开始，它可能最终会包括从那里到第二个起点（vN-rc2）的所有变化，这肯定不是我们的维护者所期望的。由于差异统计中包含了额外的无关内容，可能无法判断在到达 cN 的更改过程中实际上发生了什么。

维护者们经常尝试通过例如重置分支或与 linus 分支再次合并，然后重新创建拉取请求来解决这个问题。这种做法往往不会给接收方带来喜悦；在推送上游之前进行重置和/或合并是一种众所周知的获得不满反应的方式。

那么应该怎么做呢？面对这种情况时，最佳的做法确实是与你打算将自己的工作合并进的分支进行合并，但要私下进行，就像它是羞耻的来源一样。创建一个新的临时分支，并在那里进行合并：

```
... vM --- vN-rc1 --- vN-rc2 --- vN-rc3 --- ... --- vN-rc7 --- vN
                |         |                                      |
                |         +-- c1 --- c2 --- ... --- cN           |
                |                   /               |            |
                +-- x1 --- x2 --- x3                +------------+-- TEMP
```

合并操作解决了由多个起点导致的所有复杂性问题，产生了一个连贯的结果，其中只包含与主线分支的差异。现在可以生成包含所需信息的差异统计：

```
$ git diff -C --stat --summary linus..TEMP
```

保存此命令的输出，然后简单地删除 TEMP 分支；绝对不要将其暴露给外界。将保存的差异统计输出编辑到混乱的拉取请求中，得到的结果会显示出真正发生了什么。之后就可以将这个请求发送到上游。
