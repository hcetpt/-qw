SPDX 许可证标识符: GPL-2.0

=====================================
处理混乱的拉取请求差异统计
=====================================

子系统维护者经常使用 `git request-pull` 作为将工作提交到上游过程的一部分。通常，结果会包含一个漂亮的差异统计（diffstat），显示哪些文件会被修改以及修改的程度。然而，偶尔一个开发历史相对复杂仓库会产生一个巨大的差异统计，其中包含大量不相关的工作。结果看起来很丑陋，并且掩盖了拉取请求实际所做的内容。本文档描述了发生的情况以及如何解决；它源自 Linus Torvalds 的智慧，可以在 Linus1_ 和 Linus2_ 中找到。
.. _Linus1: https://lore.kernel.org/lkml/CAHk-=wg3wXH2JNxkQi+eLZkpuxqV+wPiHhw_Jf7ViH33Sw7PHA@mail.gmail.com/
.. _Linus2: https://lore.kernel.org/lkml/CAHk-=wgXbSa8yq8Dht8at+gxb_idnJ7X5qWZQWRBN4_CUPr=eQ@mail.gmail.com/

Git 开发历史以一系列提交的形式进行。简化来说，主线内核开发如下所示::

  ... vM --- vN-rc1 --- vN-rc2 --- vN-rc3 --- ... --- vN-rc7 --- vN

如果想要查看两个点之间的变化，可以使用以下命令完成任务::

  $ git diff --stat --summary vN-rc2..vN-rc3

这里有两个明确的历史点；Git 会基本上“减去”起始点和终点，然后显示产生的差异。请求的操作是明确且容易理解的。

当子系统维护者创建了一个分支并在其上提交更改时，在最简单的情况下，历史记录如下所示::

  ... vM --- vN-rc1 --- vN-rc2 --- vN-rc3 --- ... --- vN-rc7 --- vN
                          |
                          +-- c1 --- c2 --- ... --- cN

如果该维护者现在使用 `git diff` 查看主线分支（假设称为 “linus”）与 cN 之间的变化，仍然有两个明确的端点，结果如预期。因此，使用 `git request-pull` 生成的拉取请求也会如预期。但是现在考虑一个稍微复杂的开发历史::

  ... vM --- vN-rc1 --- vN-rc2 --- vN-rc3 --- ... --- vN-rc7 --- vN
                |         |
                |         +-- c1 --- c2 --- ... --- cN
                |                   /
                +-- x1 --- x2 --- x3

我们的维护者在 vN-rc1 处创建了一个分支，在 vN-rc2 处创建了另一个分支；这两个分支随后被合并到 c2。现在为 cN 生成的拉取请求可能会非常混乱，开发者们经常会感到困惑。

这里发生的情况是没有两个明确的端点供 `git diff` 操作使用。导致 cN 的开发始于两个不同的地方；为了生成差异统计，`git diff` 必须选择其中一个并希望结果最佳。如果差异统计从 vN-rc1 开始，可能会包括从那里到第二个起始点（vN-rc2）的所有变化，这肯定不是我们的维护者所期望的。由于差异统计中包含了所有这些额外的内容，可能无法判断导致 cN 的变化中真正发生了什么。

维护者们通常试图通过例如重新基线（rebase）分支或再次与 linus 分支合并，然后重新创建拉取请求来解决这个问题。这种方法往往不会在接收端带来喜悦；在推送上游之前重新基线和/或合并是一个众所周知会导致不快反应的做法。

那么应该怎么办呢？面对这种情况的最佳回应确实是与你打算将工作拉入的分支进行合并，但要私下进行，就像它是羞于见人的来源一样。创建一个新的临时分支并在那里进行合并::

  ... vM --- vN-rc1 --- vN-rc2 --- vN-rc3 --- ... --- vN-rc7 --- vN
                |         |                                      |
                |         +-- c1 --- c2 --- ... --- cN           |
                |                   /               |            |
                +-- x1 --- x2 --- x3                +------------+-- TEMP

合并操作解决了由多个起始点导致的所有复杂问题，产生了一个只包含主线分支差异的连贯结果。现在可以生成包含所需信息的差异统计::

  $ git diff -C --stat --summary linus..TEMP

保存此命令的输出，然后简单地删除 TEMP 分支；绝对不要将其暴露给外界。将保存的差异统计输出编辑到混乱的拉取请求中，得到的结果将展示实际发生的情况。然后可以将该请求发送到上游。
