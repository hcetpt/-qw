此文档的中文翻译如下：

SPDX 许可证标识符: GPL-2.0

==========================
常见问题解答
==========================

这与Autotest、kselftest等有何不同？
==========================================================
KUnit是一个单元测试框架。而Autotest、kselftest（以及其他一些工具）则不是。
`单元测试 <https://martinfowler.com/bliki/UnitTest.html>`_ 的目的是在隔离环境中测试单一代码单元，因此得名“单元测试”。单元测试应是测试的最细粒度，并允许测试被测代码中所有可能的路径。只有当被测代码规模较小且没有超出测试控制之外的外部依赖（如硬件）时，这一点才有可能实现。
目前还没有不需要在测试机器或虚拟机上安装内核的内核测试框架。所有测试框架都需要测试用例编写在用户空间并运行在待测内核上。这一点对于Autotest、kselftest和其他一些工具都是适用的，这也使得它们都不符合单元测试框架的标准。
KUnit是否支持在UML以外的架构上运行？
===========================================================

大部分情况下可以。

总体来说，KUnit核心框架（即我们用来编写测试的部分）可以编译到任何架构上。它就像内核的一部分一样进行编译，并在内核启动或作为模块加载时运行。然而，像KUnit Wrapper (``tools/testing/kunit/kunit.py``)这样的基础设施可能不支持某些架构（参见 :ref:`kunit-on-qemu`）。
简而言之，你可以在其他架构上运行KUnit，但这可能需要比在UML上使用KUnit更多的工作。
更多信息，请参见 :ref:`kunit-on-non-uml`。
.. _kinds-of-tests:

单元测试与其他类型的测试有何区别？
====================================================================
对于Linux内核的大多数现有测试，通常会被归类为集成测试或端到端测试。
- 单元测试旨在独立地测试单一代码单元。单元测试应该是最细粒度的测试，因此能够测试被测代码中的所有可能路径。只有当被测代码规模较小且没有超出测试控制之外的外部依赖（如硬件）时，这一点才有可能实现。
- 集成测试测试最小一组组件之间的交互，通常只涉及两三个组件。例如，有人可能会编写一个集成测试来测试驱动程序和硬件之间，或是内核提供的用户空间库与内核本身之间的交互。但是，这些测试通常不会测试整个内核以及与硬件和用户空间的交互。
端到端测试通常从被测代码的角度测试整个系统。例如，某人可能会为内核编写一个端到端测试，通过在生产硬件上安装内核的生产配置，并配备生产用户空间，然后尝试执行依赖于硬件、内核和用户空间之间交互的行为。

KUnit无法工作，我该怎么办？
=======================================

不幸的是，可能会遇到各种问题，但你可以尝试以下方法：
1. 运行 ``./tools/testing/kunit/kunit.py run`` 并带上 ``--raw_output`` 参数。这可能会显示被 kunit_tool 解析器隐藏的详细信息或错误消息。
2. 试着独立运行 ``kunit.py config``、``kunit.py build`` 和 ``kunit.py exec`` 而不是直接运行 ``kunit.py run``。这样可以帮助你定位问题所在。（如果你认为是解析器的问题，可以手动使用 ``kunit.py parse`` 来解析 ``stdin`` 或文件。）
3. 直接运行 UML 内核通常可以揭示一些问题或错误消息，这些问题是 kunit_tool 忽略的。只需在构建了 UML 内核后运行 ``./vmlinux`` 即可（例如，使用 ``kunit.py build`` 构建）。
请注意，UML 有一些特殊要求（比如主机需要挂载 tmpfs 文件系统），并且在过去静态构建且主机启用 KASLR 时出现过问题。（对于较旧的主机内核版本，可能需要运行 ``setarch `uname -m` -R ./vmlinux`` 来禁用 KASLR。）
4. 确保内核的 .config 中有 ``CONFIG_KUNIT=y`` 以及至少一个测试（如 ``CONFIG_KUNIT_EXAMPLE_TEST=y``）。kunit_tool 会保留 .config 文件，因此在运行 ``kunit.py run`` 后你可以查看所使用的配置。它还会保存你所做的任何配置更改，因此你可以使用 ``make ARCH=um menuconfig`` 或类似命令来启用或禁用某些功能，然后再重新运行 kunit_tool。
5. 在运行 ``kunit.py run`` 前先运行 ``make ARCH=um defconfig``。这有助于清理可能导致问题的残留配置项。
6. 最后，尝试在 UML 外部运行 KUnit。KUnit 和 KUnit 测试可以被构建到任何内核中，也可以作为模块并在运行时加载。
这样做应该可以帮助你判断是否是 UML 导致了你遇到的问题。当测试被构建到内核时，它们会在内核启动时执行；而作为模块时，则会在加载时自动执行相关的测试。可以从 ``/sys/kernel/debug/kunit/<test suite>/results`` 收集测试结果，并使用 ``kunit.py parse`` 进行解析。更多详情，请参阅 :ref:`kunit-on-qemu`。
如果上述方法都无法解决问题，欢迎随时将问题发送至 kunit-dev@googlegroups.com。
您没有提供需要翻译的文本。请提供需要翻译成中文的英文或其他语言的文本。
