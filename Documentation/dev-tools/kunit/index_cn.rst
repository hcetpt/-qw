SPDX 许可证标识符: GPL-2.0

=================================
KUnit - Linux 内核单元测试
=================================

.. toctree::
	:maxdepth: 2
	:caption: 目录:

	start
	architecture
	run_wrapper
	run_manual
	usage
	api/index
	style
	faq
	running_tips

本节详细介绍了内核单元测试框架。

简介
============

KUnit（内核单元测试框架）为Linux内核中的单元测试提供了一个通用的框架。使用KUnit，您可以定义一组被称为测试套件的测试案例。如果构建为内置，这些测试会在内核启动时运行，或者作为模块加载。KUnit会自动在内核日志中标记并报告失败的测试案例。测试结果以 :doc:`KTAP (内核 - 测试任何协议) 格式</dev-tools/ktap>` 的形式呈现。
KUnit受到了JUnit、Python的unittest.mock以及GoogleTest/GoogleMock（C++单元测试框架）的启发。
KUnit测试是内核的一部分，用C语言编写，并测试内核实现的部分（例如：一个C语言函数）。除了构建时间外，从调用到完成，KUnit可以在不到10秒的时间内运行大约100个测试。
KUnit可以测试任何内核组件，例如：文件系统、系统调用、内存管理、设备驱动程序等。
KUnit遵循白盒测试方法。测试可以访问内部系统功能。KUnit在内核空间运行，不受限于暴露给用户空间的东西。
此外，KUnit还包括kunit_tool脚本(``tools/testing/kunit/kunit.py``)，该脚本配置Linux内核，在QEMU或UML (:doc:`User Mode Linux </virt/uml/user_mode_linux_howto_v2>`) 下运行KUnit测试，解析测试结果，并以用户友好的方式显示它们。

特点
--------

- 提供了编写单元测试的框架
- 可以在任何内核架构上运行测试
- 在毫秒级别运行测试
前置条件
-------------

- 与任何兼容 Linux 内核的硬件
- 对于测试中的内核，Linux 内核版本 5.5 或更高版本
单元测试
============

单元测试在隔离环境中测试单一代码单元。单元测试是测试的最基本单位，并允许测试被测代码中所有可能的代码路径。如果被测代码很小且没有测试控制范围之外的外部依赖（如硬件），则这是可行的。
编写单元测试
----------------

要编写良好的单元测试，有一个简单而强大的模式：安排-执行-验证。这是一种很好的结构化测试用例的方法，并定义了操作顺序：
- 安排输入和目标：在测试开始时，安排使函数能够工作的数据。例如：初始化一个语句或对象
- 执行目标行为：调用你正在测试的函数/代码
- 验证预期结果：验证结果（或产生的状态）是否符合预期
单元测试的优势
-----------------------

- 从长远来看提高了测试速度和开发效率
- 在初期阶段检测到错误，因此相比于验收测试降低了修复成本
- 提高代码质量
鼓励编写可测试的代码。

请参阅 :ref:`测试种类`
我如何使用它？
================

你可以在 `Documentation/dev-tools/kunit/start.rst` 中找到编写和运行 KUnit 测试的逐步指南。

或者，你可以自由地浏览 KUnit 文档的其余部分，
或者尝试使用 `tools/testing/kunit/kunit.py` 和位于
`lib/kunit/kunit-example-test.c` 下的示例测试。

祝你测试愉快！
