机密计算在Linux中的x86虚拟化应用
======================================

.. contents:: 目录
   :local:

作者：Elena Reshetova <elena.reshetova@intel.com> 和 Carlos Bilbao <carlos.bilbao.osdev@gmail.com>

动机
======

在x86环境中为虚拟化环境开发机密计算内核的开发者们，对于Linux内核威胁模型有一套不同于传统观点的假设。从历史上看，Linux威胁模型承认了用户空间中的攻击者以及能够通过各种网络或有限硬件特定接口（如USB、雷电接口）与内核互动的一系列外部攻击者。本文档的目标是解释机密计算领域中出现的额外攻击向量，并讨论针对Linux内核提出的保护机制。

概述和术语
================

机密计算（CoCo）是一个涵盖广泛安全技术的术语，这些技术旨在保护使用中的数据（而非静止数据或传输中的数据）的机密性和完整性。其核心在于提供一个可信执行环境（TEE），在此环境中可以进行安全的数据处理，因此通常进一步分为不同的子类型，具体取决于计划在TEE中运行的软件。本文档关注的是针对虚拟化环境的一类CoCo技术，允许在TEE内部运行虚拟机（VM）。从现在起，本文将此类CoCo称为“虚拟化环境下的机密计算（CoCo VE）”。

在虚拟化上下文中，CoCo指的是允许在CoCo VM内运行的软件具有更强安全保证的一系列硬件和/或软件技术。具体而言，机密计算使用户能够确认所有软件组件的信任度，从而将其包含在一个缩小的可信计算基础（TCB）中。虽然不同技术的具体实现细节有所不同，但所有可用机制都旨在为VM的客户内存和执行状态（vCPU寄存器）提供增强的机密性和完整性，更严格地控制客户中断注入，以及一些额外的机制来控制客户到主机的页面映射。关于x86特定解决方案的更多细节可以在 :doc:`Intel Trust Domain Extensions (TDX) </arch/x86/tdx>` 和 `AMD Memory Encryption <https://www.amd.com/system/files/techdocs/sev-snp-strengthening-vm-isolation-with-integrity-protection-and-more.pdf>`_ 中找到。

基本的CoCo客户布局包括主机、客户、主机与客户之间通信的接口、支持CoCo VM的平台，以及作为安全管理者的客户VM与底层平台之间的可信中介。主机侧的虚拟机监视器（VMM）通常包含传统VMM功能的一部分，并且仍然负责客户的生命周期管理，例如创建或销毁CoCo VM，管理其对系统资源的访问等。然而，由于它通常不在CoCo VM的TCB之内，因此其访问权限受到限制以保持安全目标。

下图中的“<--->”线代表CoCo安全管理器与其他组件（客户、主机、硬件）之间的双向通信渠道或接口：

```
    +-------------------+      +-----------------------+
    | CoCo guest VM     |<---->|                       |
    +-------------------+      |                       |
      | Interfaces |           | CoCo 安全管理器 |
    +-------------------+      |                       |
    | Host VMM          |<---->|                       |
    +-------------------+      |                       |
                               |                       |
    +--------------------+     |                       |
    | CoCo 平台          |<--->|                       |
    +--------------------+     +-----------------------+
```

CoCo安全管理器的具体细节在不同技术之间有很大差异。例如，在某些情况下，它将在硬件中实现，而在其他情况下，它可能是纯软件实现。

现有的Linux内核威胁模型
=======================

现有Linux内核威胁模型的整体组件如下：

```
     +-----------------------+      +-------------------+
     |                       |<---->| 用户空间         |
     |                       |      +-------------------+
     |   外部攻击向量        |         | 接口 |
     |                       |      +-------------------+
     |                       |<---->| Linux 内核      |
     |                       |      +-------------------+
     +-----------------------+      +-------------------+
                                    | 启动加载程序/BIOS |
                                    +-------------------+
                                    +-------------------+
                                    | 硬件平台          |
                                    +-------------------+
```

在启动过程中，启动加载程序和内核之间也存在通信，但这张图并未明确表示这一点。“接口”框代表允许内核与用户空间之间通信的各种接口，包括系统调用、内核API、设备驱动程序等。

现有的Linux内核威胁模型通常假定在受信任的硬件平台上执行，所有固件和启动加载程序都被包含在其TCB中。主要攻击者位于用户空间，来自这里的大部分数据通常被认为是不可信的，除非用户空间有足够的特权来执行受信任的操作。此外，还考虑到了外部攻击者，包括那些可以访问启用的外部网络（如以太网、无线、蓝牙）、暴露的硬件接口（如USB、雷电接口）以及能够修改磁盘内容的能力。

关于外部攻击向量，值得注意的是，在大多数情况下，外部攻击者会首先试图利用用户空间中的漏洞，但也有可能直接针对内核；特别是在主机具有物理访问权限的情况下。直接内核攻击的例子包括CVE-2019-19524、CVE-2022-0435和CVE-2020-24490等漏洞。

机密计算威胁模型及其安全目标
=================================

机密计算在此列表中增加了一种新的攻击者类型：潜在行为不当的主机（这也可以包括传统VMM的一部分或全部），通常被置于CoCo VM TCB之外，因为它的软件攻击面较大。重要的是要注意，这并不意味着主机或VMM是故意恶意的，而是拥有较小的CoCo VM TCB具有安全性价值。这种新的对手可以被视为一种更强大的外部攻击者，因为它位于同一物理机器上（与远程网络攻击者相反），并且控制着客户内核与大部分硬件的通信：

```
                                 +------------------------+
                                 |    CoCo 客户 VM       |
   +-----------------------+     |  +-------------------+ |
   |                       |<--->|  | 用户空间         | |
   |                       |     |  +-------------------+ |
   |   外部攻击向量        |     |     | 接口 |     |
   |                       |<--->|  +-------------------+ |
   |                       |     |  | Linux 内核      | |
   |                       |     |  +-------------------+ |
   +-----------------------+     |  +-------------------+ |
                                 |  | 启动加载程序/BIOS |
   +-----------------------+     |  +-------------------+ |
   |                       |<--->+------------------------+
   |                       |          | 接口 |
   |                       |     +------------------------+
   |     CoCo 安全管理器   |<--->| 主机/主机侧 VMM |
   |                       |     +------------------------+
   |                       |     +------------------------+
   |                       |<--->|   CoCo 平台        |
   +-----------------------+     +------------------------+
```

传统上，主机对客户数据具有无限访问权限，并可以利用此访问权限来攻击客户。CoCo系统通过添加诸如客户数据机密性和完整性保护等安全特性来缓解此类攻击。该威胁模型假设这些特性可用且完好无损。
**Linux 内核 CoCo 虚拟机安全目标**可以总结如下：

1. 保护 CoCo 客户端私有内存和寄存器的机密性和完整性。
2. 防止从主机向 CoCo 客户端 Linux 内核进行特权升级。
尽管主机（以及主机侧的虚拟机管理程序）确实需要一定程度的权限来创建、销毁或暂停客户机，但防止特权升级的一部分目标是确保这些操作不会为攻击者提供访问客户机内核的途径。

上述安全目标导致了两个主要的 **Linux 内核 CoCo 虚拟机资产**：

1. 客户内核执行上下文。
2. 客户内核私有内存。
主机完全控制 CoCo 客户端资源，并可随时拒绝访问。资源包括 CPU 时间、客户机可以消耗的内存、网络带宽等。因此，主机对 CoCo 客户机的拒绝服务（DoS）攻击不在本威胁模型的范围内。

**Linux CoCo 虚拟机攻击面**是指 CoCo 客户端 Linux 内核暴露给不可信主机且未被 CoCo 技术软件/硬件保护覆盖的所有接口。这包括任何可能的旁道攻击，以及瞬时执行旁道攻击。明确的（非旁道）接口示例包括对端口 I/O、MMIO 和 DMA 接口、PCI 配置空间、特定于 VMM 的超调用（面向主机侧的虚拟机管理程序）、共享内存页、允许由主机注入到客户机内核中的中断，以及如果存在的话，CoCo 技术特定的超调用。此外，在 CoCo 系统中，主机通常控制创建 CoCo 客户端的过程：它有一种方法将固件和引导加载程序镜像加载到客户端中，同时还有内核镜像及其命令行参数。所有这些数据在通过认证建立其完整性和真实性之前都应被视为不可信。

下表显示了 CoCo 客户端 Linux 内核的威胁矩阵，但没有讨论潜在的缓解策略。该矩阵指的是 CoCo 特定版本的客户端、主机和平台。

.. list-table:: CoCo Linux 客户端内核威胁矩阵
   :widths: auto
   :align: center
   :header-rows: 1

   * - 威胁名称
     - 威胁描述

   * - 客户恶意配置
     - 不良行为的主机修改了以下客户配置之一：

       1. 客户固件或引导加载程序

       2. 客户内核或模块二进制文件

       3. 客户命令行参数

       这使得主机能够破坏运行在 CoCo 客户端内部代码的完整性，并违反 CoCo 安全目标。

   * - CoCo 客户数据攻击
     - 不良行为的主机保留了对 CoCo 客户端数据的完全控制权，这些数据在客户与主机管理的物理或虚拟设备之间传输。这使得针对此类数据的机密性、完整性和新鲜性的任何攻击成为可能。
* - 不正确的运行时输入
    - 一个表现异常的宿主通过来宾内核代码使用的任何通信接口注入不正确的输入。如果该代码没有准备好正确处理这些输入，这可能导致宿主到来宾内核权限提升。这包括传统的旁道攻击和/或瞬态执行攻击向量。
* - 恶意运行时输入
    - 一个表现异常的宿主通过来宾内核代码使用的任何通信接口注入特定的输入值。与前一种攻击向量（不正确的运行时输入）不同的是，这种输入不是不正确的，但其值是经过精心设计来影响来宾内核安全的。这类输入的例子包括向来宾提供恶意时间或向来宾随机数生成器提供熵。此外，此类事件的时间点本身可能成为一个攻击向量，如果它导致某个特定的来宾内核操作（例如处理由宿主注入的中断）对外部提供的输入变得脆弱。
