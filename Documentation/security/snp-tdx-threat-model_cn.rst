保密计算在Linux中的x86虚拟化应用
====================================

.. contents:: 目录
   :local:

作者：Elena Reshetova <elena.reshetova@intel.com> 和 Carlos Bilbao <carlos.bilbao.osdev@gmail.com>

动机
====

在x86虚拟化环境中从事保密计算的内核开发人员，对于Linux内核威胁模型有着一套与传统观点不同的假设。历史上，Linux威胁模型承认用户空间中存在的攻击者，以及能够通过各种网络或有限硬件特定暴露接口（如USB、雷电接口）与内核交互的一系列外部攻击者。本文档的目标是解释保密计算领域中出现的额外攻击向量，并讨论为Linux内核提出的保护机制。

概述和术语
===========

保密计算（CoCo）是一个宽泛的术语，涵盖了旨在保护数据使用时（而非静止或传输中）的机密性和完整性的广泛安全技术。其核心，CoCo解决方案提供一个可信执行环境（TEE），其中可以安全地处理敏感数据，因此它们通常根据预期在TEE中运行的软件进一步分类为不同的子类型。本文档关注的是针对虚拟化环境的CoCo技术的一个子类，允许在TEE内部运行虚拟机（VM）。从现在起，在本文档中将把这个子类的CoCo称为“虚拟化环境（VE）下的保密计算（CoCo）”。

在虚拟化的上下文中，CoCo是指一组硬件和/或软件技术，这些技术使得在CoCo VM内部运行的软件能获得更强的安全保证。具体而言，保密计算使用户能够确认所有要包含在其缩减后的可信计算基（TCB）中的软件组件的可信度，因为该技术有能力证明这些可信组件的状态。

虽然具体实现细节因技术而异，但所有可用机制都旨在为VM的客户内存和执行状态（vCPU寄存器）提供增强的机密性和完整性，更严格控制客户中断注入，以及一些额外机制来控制客户主机页面映射。有关x86特定解决方案的更多详细信息，请参阅 :doc:`Intel Trust Domain Extensions (TDX) </arch/x86/tdx>` 和 `AMD Memory Encryption <https://www.amd.com/system/files/techdocs/sev-snp-strengthening-vm-isolation-with-integrity-protection-and-more.pdf>`_。

基本的CoCo客户布局包括主机、客户、主机与客户之间的通信接口、支持CoCo VM的平台，以及作为客户VM与底层平台之间受信任中介的安全管理器。主机侧虚拟机监视器（VMM）通常由传统VMM功能的一部分组成，并且仍然负责客户的生命周期管理，例如创建或销毁CoCo VM，管理其对系统资源的访问等。然而，由于它通常不在CoCo VM的TCB之内，因此对其访问是有限制的，以保持安全目标。

下图中的“<--->”线代表了CoCo安全管理器与其他组件（客户、主机、硬件的数据流）之间的双向通信渠道或接口：

    +-------------------+      +-----------------------+
    | CoCo 客户 VM      |<---->|                       |
    +-------------------+      |                       |
      | 接口 |                 | CoCo 安全管理器       |
    +-------------------+      |                       |
    | 主机 VMM          |<---->|                       |
    +-------------------+      |                       |
                                |                       |
    +--------------------+     |                       |
    | CoCo 平台          |<--->|                       |
    +--------------------+     +-----------------------+

CoCo安全管理器的具体细节在不同技术之间大相径庭。例如，在某些情况下，它将在硬件中实现，而在其他情况下，它可能是纯软件实现。

现有的Linux内核威胁模型
=====================

当前Linux内核威胁模型的各个组成部分如下所示：

     +-----------------------+      +-------------------+
     |                       |<---->| 用户空间         |
     |                       |      +-------------------+
     | 外部攻击向量 |            | 接口 |                   |
     |                |      +-------------------+
     |                |<---->| Linux 内核         |
     |                |      +-------------------+
     +-----------------------+      +-------------------+
                                    | 启动加载器/BIOS |
                                    +-------------------+
                                    +-------------------+
                                    | 硬件平台         |
                                    +-------------------+

在启动过程中，启动加载器与内核之间也存在通信，但这张图没有明确表示这一点。“接口”框代表允许内核与用户空间进行通信的各种接口。这包括系统调用、内核API、设备驱动程序等。

现有的Linux内核威胁模型通常假定在一个可信赖的硬件平台上执行，其中所有的固件和启动加载器都被包括在TCB中。主要攻击者位于用户空间中，并且来自那里的所有数据通常被认为是不可信的，除非用户空间有足够的权限执行可信操作。此外，还考虑到了外部攻击者，包括那些可以访问启用的外部网络（例如以太网、无线、蓝牙）、暴露的硬件接口（例如USB、雷电接口），以及能够离线修改磁盘内容的能力。

关于外部攻击向量，值得注意的是，在大多数情况下，外部攻击者会试图首先利用用户空间中的漏洞，但也有可能攻击者直接针对内核；特别是如果主机具有物理访问权。直接内核攻击的例子包括漏洞CVE-2019-19524、CVE-2022-0435和CVE-2020-24490。

保密计算威胁模型及其安全目标
================================

保密计算向上述列表中增加了一种新的攻击者类型：可能行为不当的主机（这也可能包括传统VMM的部分或全部），通常将其置于CoCo VM的TCB之外，因为它的软件攻击面较大。重要的是要注意，这并不意味着主机或VMM是有意恶意的，而是说拥有一个小型的CoCo VM TCB存在一定的安全性价值。这种新型的对手可以视为一种更强大的外部攻击者，因为它本地驻留在同一物理机器上（与远程网络攻击者相反），并且控制着客户内核与大部分硬件的通信：

                                 +------------------------+
                                 |    CoCo 客户 VM        |
   +-----------------------+     |  +-------------------+ |
   |                       |<--->|  | 用户空间         | |
   |                       |     |  +-------------------+ |
   | 外部攻击向量 |            |     | 接口 |               |
   |                |      +-------------------+ |
   |                |<--->|  | Linux 内核       | |
   |                |     |  +-------------------+ |
   +-----------------------+     |  +-------------------+ |
                                 |  | 启动加载器/BIOS   | |
   +-----------------------+     |  +-------------------+ |
   |                       |<--->+------------------------+
   |                       |          | 接口 |
   |                       |     +------------------------+
   |     CoCo 安全管理器  |<--->| 主机/主机侧 VMM |
   |                      |     +------------------------+
   |                       |     +------------------------+
   |                       |<--->|   CoCo 平台            |
   +-----------------------+     +------------------------+

虽然传统上主机对客户数据具有无限访问权，并且可以利用此访问权攻击客户，但CoCo系统通过添加诸如客户数据机密性和完整性保护等安全特性来缓解此类攻击。这个威胁模型假设这些特性是可用的并且完好无损。
**Linux 内核 CoCo 虚拟机安全目标**可以概括如下：

1. 保护 CoCo 客户端私有内存和寄存器的机密性和完整性。
2. 阻止从主机向 CoCo 客户端 Linux 内核进行特权升级。
尽管主机（及其虚拟机监视器）确实需要一定程度的权限来创建、销毁或暂停客户机，但防止特权升级的一个目的就是确保这些操作不会为攻击者提供访问客户内核的途径。

上述安全目标导致了两个主要的 **Linux 内核 CoCo 虚拟机资产**：

1. 客户内核执行上下文
2. 客户内核私有内存
主机保留对 CoCo 客户资源的完全控制，并且可以随时拒绝访问。资源的例子包括客户机可使用的 CPU 时间、内存、网络带宽等。因此，针对 CoCo 客户端的主机拒绝服务（DoS）攻击超出了本威胁模型的范围。
**Linux CoCo 虚拟机攻击面**是指来自 CoCo 客户端 Linux 内核暴露给不可信主机的任何接口，这些接口未被 CoCo 技术软件/硬件保护覆盖。这包括所有可能的旁道以及瞬态执行旁道。明确的（非旁道）接口示例包括对端口 I/O、MMIO 和 DMA 接口、PCI 配置空间、面向主机侧虚拟机监视器的特定超调用、共享内存页面、允许由主机注入到客户内核中的中断，以及如果存在的 CoCo 技术特定超调用。此外，在 CoCo 系统中，主机通常控制创建 CoCo 客户端的过程：它有一种方法将固件和引导加载程序映像、内核映像及内核命令行参数加载到客户机中。所有这些数据在通过认证建立其完整性和真实性之前都应被视为不可信。

下表展示了一个针对 CoCo 客户端 Linux 内核的威胁矩阵，但并未讨论潜在缓解策略。该矩阵涉及 CoCo 特定版本的客户机、主机和平台。
.. 列表表格:: CoCo Linux 客户端内核威胁矩阵
   :宽度: 自动
   :居中: 是
   :表头行: 1

   * - 威胁名称
     - 威胁描述

   * - 客户恶意配置
     - 行为不当的主机修改以下任一客户配置：

       1. 客户固件或引导加载程序

       2. 客户内核或模块二进制文件

       3. 客户命令行参数

       这使得主机能够破坏运行在 CoCo 客户内的代码的完整性，并违反 CoCo 安全目标。
   * - CoCo 客户数据攻击
     - 行为不当的主机完全控制 CoCo 客户的数据传输，这些数据在客户与主机管理的物理或虚拟设备之间传递。这允许对这类数据的机密性、完整性和新鲜度发起任何攻击。
* - 错误的运行时输入
     - 一个行为不当的宿主通过客人操作系统内核代码使用的任何通信接口注入错误的输入。如果该代码没有准备好正确处理这些输入，这可能会导致从宿主到客人的内核权限提升。这包括传统的侧信道攻击和/或瞬态执行攻击向量。
* - 恶意的运行时输入
     - 一个行为不当的宿主通过客人操作系统内核代码使用的任何通信接口注入特定的输入值。与前一种攻击向量（错误的运行时输入）的不同之处在于，这个输入并非错误的，但其值是精心设计来影响客人的内核安全。这类输入的例子包括向客人提供恶意的时间或向客人随机数生成器提供熵。此外，此类事件的发生时机本身可能成为一种攻击向量，如果它导致了对来自宿主的输入具有抵抗性的特定客人内核操作（例如处理由宿主注入的中断）。
