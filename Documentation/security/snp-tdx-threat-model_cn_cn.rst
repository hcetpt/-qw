机密计算在Linux中的x86虚拟化应用
======================================================

.. contents:: :local:

作者：Elena Reshetova <elena.reshetova@intel.com> 和 Carlos Bilbao <carlos.bilbao.osdev@gmail.com>

动机
======

在x86环境下为虚拟化环境进行机密计算的内核开发人员，基于对Linux内核威胁模型的一系列假设，这些假设与传统观点有所不同。历史上，Linux威胁模型承认用户空间中的攻击者以及能够通过各种网络或有限硬件特定暴露接口（如USB、雷电接口）与内核交互的有限外部攻击者。本文档的目标是解释机密计算领域中出现的额外攻击向量，并讨论提议的Linux内核保护机制。

概述和术语
==============

机密计算（CoCo）是一个广泛的术语，涵盖了一系列旨在保护数据使用时（而非静止或传输中）的机密性和完整性安全技术。其核心在于提供一个可信执行环境（TEE），在此环境中可以进行安全的数据处理。因此，它们通常进一步根据计划在TEE中运行的软件类型分类。本文档专注于针对虚拟化环境的CoCo技术子类，允许在TEE内部运行虚拟机（VM）。从现在开始，本文档将此类CoCo称为“虚拟化环境（VE）中的机密计算（CoCo）”。

在虚拟化上下文中，CoCo是指一组硬件和/或软件技术，这些技术能够为运行在CoCo VM内的软件提供更强的安全保障。具体而言，机密计算允许其用户确认所有软件组件的可信度，从而将其纳入减少的信任计算基础（TCB）中。尽管具体实现细节因技术而异，但所有可用机制都旨在提高VM的客户内存和执行状态（vCPU寄存器）的机密性和完整性，更严格地控制客户中断注入，以及一些额外机制来控制客户主机页面映射。关于x86特定解决方案的更多详细信息，请参阅 :doc:`Intel Trust Domain Extensions (TDX) </arch/x86/tdx>` 和 `AMD Memory Encryption <https://www.amd.com/system/files/techdocs/sev-snp-strengthening-vm-isolation-with-integrity-protection-and-more.pdf>`_。

基本的CoCo客户布局包括主机、客户、主机与客户之间的通信接口、支持CoCo VM的平台，以及作为安全管理者的客户VM与底层平台之间的可信中介。主机端虚拟机监视器（VMM）通常由传统VMM功能的一部分组成，并且仍然负责客户的生命周期，例如创建或销毁CoCo VM，管理其对系统资源的访问等。然而，由于它通常不在CoCo VM的TCB之内，因此其访问权限受到限制以保持安全目标。

在下图中，“<--->”线代表CoCo安全管理器与其余组件（客户、主机、硬件）之间双向通信通道或接口的数据流:: 

    +-------------------+      +-----------------------+
    | CoCo 客户 VM     |<---->|                       |
    +-------------------+      |                       |
      | 接口 |           | CoCo 安全管理器 |
    +-------------------+      |                       |
    | 主机 VMM          |<---->|                       |
    +-------------------+      |                       |
                               |                       |
    +--------------------+     |                       |
    | CoCo 平台      |<--->|                       |
    +--------------------+     +-----------------------+

CoCo安全管理器的具体细节在不同技术之间有很大差异。例如，在某些情况下，它可能在硬件中实现，而在其他情况下，它可能是纯软件。

现有的Linux内核威胁模型
======================

现有Linux内核威胁模型的整体组件如下所示::

     +-----------------------+      +-------------------+
     |                       |<---->| 用户空间         |
     |                       |      +-------------------+
     |   外部攻击     |         | 接口 |
     |       向量         |      +-------------------+
     |                       |<---->| Linux 内核      |
     |                       |      +-------------------+
     +-----------------------+      +-------------------+
                                    | 引导加载程序/BIOS   |
                                    +-------------------+
                                    +-------------------+
                                    | 硬件平台       |
                                    +-------------------+

在启动过程中，引导加载程序和内核之间也有通信，但此图未明确表示。“接口”框表示允许内核与用户空间通信的各种接口。这包括系统调用、内核API、设备驱动程序等。

现有的Linux内核威胁模型通常假设在受信任的硬件平台上执行，其中所有固件和引导加载程序都包含在其TCB中。主要攻击者位于用户空间，来自那里的所有数据通常被视为不可信的，除非用户空间具有足够的特权执行可信操作。此外，通常还会考虑外部攻击者，包括那些可以访问启用的外部网络（如以太网、无线、蓝牙）、暴露的硬件接口（如USB、雷电接口）以及能够离线修改磁盘内容的攻击者。

关于外部攻击向量，值得注意的是，在大多数情况下，外部攻击者会首先尝试利用用户空间中的漏洞，但攻击者也可以直接针对内核；特别是如果主机有物理访问权限。直接内核攻击的例子包括漏洞CVE-2019-19524、CVE-2022-0435和CVE-2020-24490。

机密计算威胁模型及其安全目标
=================================

机密计算在此列表中增加了一种新的攻击者类型：潜在的行为不当主机（这也可以包括传统VMM的一部分或全部），通常因其较大的软件攻击面而被置于CoCo VM TCB之外。重要的是要注意，这并不意味着主机或VMM故意恶意，而是拥有一个较小的CoCo VM TCB存在安全性价值。这种新的对手类型可以视为一种更强大的外部攻击者，因为它位于同一物理机器上（与远程网络攻击者相反），并且控制着客户内核与大部分硬件的通信::

                                 +------------------------+
                                 |    CoCo 客户 VM       |
   +-----------------------+     |  +-------------------+ |
   |                       |<--->|  | 用户空间         | |
   |                       |     |  +-------------------+ |
   |   外部攻击     |     |     |     | 接口 |     |
   |       向量         |     |  +-------------------+ |
   |                       |<--->|  | Linux 内核      | |
   |                       |     |  +-------------------+ |
   +-----------------------+     |  +-------------------+ |
                                 |  | 引导加载程序/BIOS   | |
   +-----------------------+     |  +-------------------+ |
   |                       |<--->+------------------------+
   |                       |          | 接口 |
   |                       |     +------------------------+
   |     CoCo 安全     |<--->| 主机/主机端 VMM |
   |      管理器       |     +------------------------+
   |                       |     +------------------------+
   |                       |<--->|   CoCo 平台        |
   +-----------------------+     +------------------------+

虽然传统上主机对客户数据具有无限访问权限，并且可以利用这种访问权限攻击客户，但CoCo系统通过添加诸如客户数据机密性和完整性保护等安全特性来缓解此类攻击。该威胁模型假定这些特性是可用且完好的。
**Linux 内核 CoCo 虚拟机安全目标** 可以总结如下：

1. 保护 CoCo 客户端私有内存和寄存器的机密性和完整性。
2. 防止从主机到 CoCo 客户端 Linux 内核的特权升级。
尽管主机（及其 VMM）确实需要一定程度的权限来创建、销毁或暂停客户端，防止特权升级的部分目标是确保这些操作不会为攻击者提供访问客户端内核的途径。

上述安全目标导致了两个主要的 **Linux 内核 CoCo 虚拟机资产**：

1. 客户端内核执行上下文。
2. 客户端内核私有内存。
主机保留对 CoCo 客户端资源的完全控制，并可以随时拒绝访问。资源示例包括 CPU 时间、客户端可消耗的内存、网络带宽等。由于这一点，主机对 CoCo 客户端的拒绝服务（DoS）攻击超出了此威胁模型的范围。

**Linux CoCo 虚拟机攻击面** 是任何由 CoCo 客户端 Linux 内核向不受信任的主机暴露的接口，这些接口不在 CoCo 技术的软件/硬件保护范围内。这包括所有可能的侧信道攻击以及瞬时执行侧信道攻击。显式（非侧信道）接口的例子包括对端口 I/O 的访问、MMIO 和 DMA 接口、PCI 配置空间的访问、特定于 VMM 的超调用（向主机侧 VMM）、共享内存页的访问、允许注入客户端内核的中断，以及如果存在的 CoCo 技术特定的超调用。此外，在 CoCo 系统中，主机通常控制创建 CoCo 客户端的过程：它有一个方法将固件和引导加载程序镜像、内核镜像及其命令行加载到客户端。所有这些数据在通过认证建立其完整性和真实性之前都应被视为不可信。

下表显示了 CoCo 客户端 Linux 内核的威胁矩阵，但没有讨论潜在的缓解策略。该矩阵涉及 CoCo 特定版本的客户端、主机和平台。

.. list-table:: CoCo Linux 客户端内核威胁矩阵
   :widths: auto
   :align: center
   :header-rows: 1

   * - 威胁名称
     - 威胁描述

   * - 客户端恶意配置
     - 行为不当的主机修改了以下任一客户端配置：

       1. 客户端固件或引导加载程序

       2. 客户端内核或模块二进制文件

       3. 客户端命令行参数

       这使得主机能够破坏在 CoCo 客户端内部运行的代码的完整性，并违反 CoCo 安全目标

   * - CoCo 客户端数据攻击
     - 行为不当的主机保留对 CoCo 客户端数据的完全控制，这些数据在客户端与主机管理的物理或虚拟设备之间传输。这允许对这类数据的机密性、完整性和时效性进行任何攻击

   * - 错误的运行时输入
     - 一个表现异常的宿主通过来宾内核代码使用的任何通信接口注入错误的输入。如果该代码没有正确处理这些输入，这可能导致宿主到来宾内核的权限提升漏洞。这包括传统的旁道攻击和/或瞬时执行攻击向量。

   * - 恶意运行时输入
     - 一个表现异常的宿主通过来宾内核代码使用的任何通信接口注入特定的输入值。与前一种攻击向量（错误的运行时输入）不同的是，这个输入并非错误的，但其值是经过精心设计以影响来宾内核的安全性。此类输入的例子包括向来宾提供恶意时间或向来宾随机数生成器提供恶意熵。此外，如果这类事件的时间点本身成为攻击向量，并导致某个特定的来宾内核操作（例如处理宿主注入的中断）对提供的宿主输入变得脆弱，那么时机本身也可能成为一个攻击向量。
