### SPDX 许可证标识符：GPL-2.0
### 版权所有 © 2017-2020 米卡埃尔·萨洛恩 <mic@digikod.net>
### 版权所有 © 2019-2020 法国国家信息系统安全局（ANSSI）

===============================
Landlock LSM：内核文档
===============================

**作者**：米卡埃尔·萨洛恩
**日期**：2022年12月

Landlock 的目标是创建有范围的访问控制（即沙箱）。为了强化整个系统，该功能应该对任何进程可用，包括非特权进程。由于这样的进程可能被攻破或植入后门（即不可信任），因此 Landlock 的特性必须从内核和其他进程的角度来看是安全使用的。因此，Landlock 的接口必须暴露一个最小的攻击面。
Landlock 被设计为可供非特权进程使用，同时遵循由其他访问控制机制（例如 DAC、LSM）强制执行的系统安全策略。确实，Landlock 规则不应与系统上实施的其他访问控制相互干扰，而只能添加更多限制。
任何用户都可以在其进程中强制执行 Landlock 规则集。这些规则集将被合并，并根据继承的规则进行评估，以确保仅能增加更多的约束。
用户空间文档可在此处找到：
Documentation/userspace-api/landlock.rst
安全访问控制的指导原则
============================

* Landlock 规则应专注于内核对象上的访问控制，而不是系统调用过滤（即系统调用参数），这是 seccomp-bpf 的目的。
* 为了避免多种类型的侧信道攻击（例如泄露安全策略、基于 CPU 的攻击），Landlock 规则不应能够与用户空间程序化地通信。
* 内核访问检查不应减慢未沙箱化进程的访问请求。
* 与 Landlock 操作相关的计算（例如强制执行规则集）只应影响请求这些操作的进程。
* 由沙箱化进程直接从内核获取的资源（例如文件描述符）在无论哪个进程使用时都应保留其限定的访问权限（在资源获取时）。
参考：`文件描述符访问权限`_
设计选择
==============

inode访问权限
-------------------

所有访问权限都与inode绑定，并决定了可以通过它访问的内容。
读取目录的内容并不意味着被允许读取列出的inode的内容。确实，文件名是其父目录本地化的，而一个inode可以借助（硬）链接被多个文件名引用。能够删除一个文件只直接影响目录，而不是被删除的inode。这就是为什么`LANDLOCK_ACCESS_FS_REMOVE_FILE`或`LANDLOCK_ACCESS_FS_REFER`不允许与文件关联，而只能与目录关联的原因。

文件描述符访问权限
-----------------------------

访问权限在打开时进行检查并与文件描述符绑定。其基本原理是在相同Landlock域下执行时，等效的操作序列应产生相同的结果。
以`LANDLOCK_ACCESS_FS_TRUNCATE`权限为例，在相关文件层次结构未授予此类访问权限的情况下，可能允许打开文件进行写入，但不允许对生成的文件描述符进行:manpage:`ftruncate`操作。以下操作序列具有相同的语义，因此应该产生相同的结果：

* `truncate(path);`
* `int fd = open(path, O_WRONLY); ftruncate(fd); close(fd);`

类似于文件访问模式（例如`O_RDWR`），与文件描述符关联的Landlock访问权限即使在它们被传递给其他进程（例如通过Unix域套接字）时也会保留。这样的访问权限将在接收进程不受Landlock沙箱限制的情况下仍然得到强制执行。实际上，这是为了在整个系统中保持一致的访问控制，并避免通过文件描述符传递的意外绕过（即混淆副手攻击）。

测试
=====

用于向后兼容性、ptrace限制和文件系统支持的用户空间测试可以在这里找到：`tools/testing/selftests/landlock/`_

内核结构
=================

对象
--------------

.. kernel-doc:: security/landlock/object.h
    :identifiers:

文件系统
------------

.. kernel-doc:: security/landlock/fs.h
    :identifiers:

规则集与域
------------------

域是一个与一组主体（即任务凭证）绑定的只读规则集。每当规则集应用于任务时，当前域都会被复制，规则集会被导入到新域中作为一个新的规则层。事实上，一旦在一个域中，每个规则都与一个层级关联。要授予对对象的访问权，每个层级至少需要有一条规则允许请求的操作。因此，任务仅能过渡到一个新的域，该域是当前域的约束与任务提供的规则集约束的交集。
对于自我沙箱的任务来说，主体的定义是隐式的，这使得推理更加容易并有助于避免陷阱。
.. kernel-doc:: security/landlock/ruleset.h
    :identifiers:

.. 链接
.. _tools/testing/selftests/landlock/:
   https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/tools/testing/selftests/landlock/
