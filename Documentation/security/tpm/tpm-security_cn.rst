SPDX 许可证标识符: GPL-2.0-only

TPM 安全性
==========

本文档的目的是描述如何使内核在面对外部窥探和数据包篡改攻击（文献中称为被动和主动中间人攻击）时对 TPM 的使用变得相对稳健。当前的安全文档适用于 TPM 2.0。

介绍
------------

TPM 通常是一个通过某种低带宽总线连接到 PC 的独立芯片。也有例外情况，例如英特尔的 PTT，这是一种运行在接近 CPU 的软件环境中的软件 TPM，它面临不同的攻击类型。但目前大多数加固的安全环境要求使用独立的硬件 TPM，这也是本文档讨论的用例。

针对总线的窥探和篡改攻击
-----------------------------------------------

当前最先进的窥探方法是使用 `TPM Genie`_ 硬件中间人设备，这是一个简单的外部设备，可以在几秒钟内在任何系统或笔记本电脑上安装。最近，针对 `Windows Bitlocker TPM`_ 系统的成功攻击已经展示出来。最近，同样的攻击也针对基于 TPM 的 Linux 磁盘加密方案。下一阶段的研究似乎是在总线上破解现有的设备以充当中间人，因此攻击者需要几秒钟物理访问的情况可能很快就会消失。然而，本文档的目标是在这种环境中尽可能地保护 TPM 密钥和完整性，并确保即使我们无法阻止攻击，至少也能检测到它。

不幸的是，大部分 TPM 功能，包括硬件重置功能，都可以被拥有总线访问权限的攻击者控制，因此我们将讨论一些可能的干扰方式。

度量（PCR）完整性
---------------------------

由于攻击者可以向 TPM 发送自己的命令，他们可以发送任意的 PCR 扩展命令，从而破坏测量系统，这将是一种令人讨厌的拒绝服务攻击。然而，还有两类更严重的攻击目标是针对信任度量密封的实体：

1. 攻击者可以拦截所有来自系统的 PCR 扩展命令并完全替换为自己的值，产生一个未被篡改状态的回放，这将导致 PCR 测量证明一个可信的状态并释放密钥。
   
2. 在某个时间点，攻击者可以重置 TPM，清除 PCR 并发送自己的测量结果，这实际上会覆盖 TPM 已经完成的引导时间测量。

第一种可以通过始终对 PCR 扩展和读取命令进行 HMAC 保护来防御，这意味着测量值不能被替换而不产生响应中的可检测的 HMAC 失败。然而，第二种只能通过依赖某种机制来检测，这种机制会在 TPM 重置后发生变化。

秘密保护
----------------

某些进出 TPM 的信息，如密钥密封、私钥导入和随机数生成，容易受到拦截的影响，而仅靠 HMAC 保护无法防止这种情况，因此对于这些类型的命令，我们还必须使用请求和响应加密来防止秘密信息的泄露。

与 TPM 建立初始信任
---------------------------------------

为了从一开始就提供安全性，必须建立一个初始共享或非对称密钥，且该密钥必须不为攻击者所知。最明显的途径是使用认证种子和存储种子，它们可用于派生非对称密钥。
然而，使用这些密钥很困难，因为唯一将它们传递给内核的方法是通过命令行，这需要启动系统中的大量支持，并且无法保证任何层次结构不会包含某种授权。Linux 内核选择的机制是从空种子（null seed）使用标准存储种子参数派生主椭圆曲线密钥。空种子有两个优点：首先，该层次结构物理上不可能具有授权，因此我们始终可以使用它；其次，空种子在 TPM 重置时会改变，这意味着如果我们从空种子建立信任，则如果 TPM 被重置且种子改变，所有用派生密钥加盐的会话都将失败。

显然，在没有任何其他预先共享的秘密的情况下使用空种子，我们必须创建并读取初始公钥，而这当然可能被总线拦截器截获和替换。然而，TPM 具有一个密钥认证机制（使用EK认证证书，创建一个证明身份密钥，并使用该密钥认证空种子主密钥），这一过程过于复杂，无法在内核中运行，因此我们保留了空主密钥名称的副本，这是通过 sysfs 导出的，以便用户空间可以在启动时运行完整的认证。这里的最终保证是，如果空主密钥认证正确，你就知道自启动以来的所有 TPM 交易都是安全的；如果不正确，你知道系统中有拦截器（并且任何在启动期间使用的秘密可能已被泄露）。

### 信任叠加

在当前的空主密钥场景中，必须在将其传递给下一个消费者之前完全清除 TPM。然而，内核向用户空间传递的是派生空种子密钥的名称，然后用户空间可以通过认证来验证这个名称。因此，这种名称传递链可以在各种引导组件之间使用（通过未指定的机制）。例如，grub 可以使用空种子方案进行安全处理，并将名称传递到内核的引导区域。内核可以自行派生密钥和名称，并确定如果它们与传递版本不同，则表明发生了篡改。因此，通过名称传递，可以将任意的引导组件（如 UEFI 到 grub 再到内核）链接在一起，前提是每个后续组件都知道如何收集名称并验证其派生密钥。

### 会话属性

内核使用的所有 TPM 命令都允许会话。HMAC 会话可用于检查请求和响应的完整性，加密和解密标志可用于保护参数和响应。HMAC 和加密密钥通常从共享授权秘密派生，但对于许多内核操作来说这是众所周知的（通常是空的）。因此，内核必须使用空主密钥作为盐密钥来创建每一个 HMAC 会话，从而为会话密钥派生提供密码学输入。因此，内核一次创建空主密钥（作为一个易失性 TPM 句柄），并在 tpm_chip 中保存的上下文中保留它，供内核内部使用 TPM 的每次操作使用。目前，由于内核资源管理器缺乏去空隙化，会话必须为每个操作创建和销毁，但未来也可以重复使用单个会话来进行内核 HMAC、加密和解密会话。

### 保护类型

对于内核中的每个操作，我们都使用空主密钥加盐的 HMAC 来保护完整性。此外，我们还使用参数加密来保护密钥封存，并使用参数解密来保护密钥解封和随机数生成。

### 用户空间中的空主密钥认证

每个 TPM 都附带几个用于主认证密钥的 X.509 证书。本文档假设椭圆曲线版本的证书位于 01C00002，但也同样适用于 RSA 证书（位于 01C00001）。认证的第一步是使用 `TCG EK 凭证配置文件` 中的模板创建主密钥，以便能够将生成的主密钥与证书中的密钥进行比较（公钥必须匹配）。请注意，生成 EK 主密钥需要 EK 层次结构密码，但应存在预生成的 EC 主密钥版本（位于 81010002），可以在此位置执行 TPM2_ReadPublic() 而无需密钥权限。接下来，必须验证证书本身以追溯到制造商根（该证书应在制造商网站上发布）。一旦完成，将在 TPM 内生成一个证明密钥（AK），并使用 EK 公钥对其名称进行加密，使用 TPM2_MakeCredential。TPM 然后运行 TPM2_ActivateCredential，只有当 TPM、EK 和 AK 之间的绑定真实时才会恢复秘密。生成的 AK 可用于对内核导出名称的空主密钥进行认证。由于 TPM2_MakeCredential/ActivateCredential 比较复杂，下面描述了一个简化的过程，涉及外部生成的私钥。

此过程是对常规隐私 CA 基于证明过程的简化。这里假设证明是由 TPM 所有者执行的，因此所有者只能访问所有者层次结构。所有者创建一个外部公钥/私钥对（假设为椭圆曲线），并使用内部包装过程将私钥包装以便导入，父对象为 EC 派生存储主密钥。TPM2_Import() 使用参数解密 HMAC 会话进行，盐为 EK 主密钥（也不需要 EK 密钥权限），这意味着内部包装密钥是加密参数，因此除非拥有经过认证的 EK，否则 TPM 无法执行导入。如果命令成功且返回时 HMAC 验证通过，我们知道我们拥有仅针对经过认证的 TPM 可加载的私钥副本。此密钥现在加载到 TPM 中，存储主密钥被刷新（以释放空间用于空密钥生成）。
空的 EC 主密钥现在是根据《TCG TPM v2.0 配置指南》_ 中概述的存储配置文件生成的；该密钥的名称（即公共区域的哈希值）被计算并与内核在 /sys/class/tpm/tpm0/null_name 中呈现的空种子名称进行比较。如果名称不匹配，则表示 TPM 被破坏。如果名称匹配，用户使用空主密钥作为对象句柄，并加载私钥作为签名句柄，提供随机化的验证数据来执行 TPM2_Certify() 操作。返回的 certifyInfo 的签名会通过加载的私钥的公钥部分进行验证，并且检查验证数据以防止重放攻击。如果所有这些测试都通过了，用户就可以确信，在整个启动过程中，TPM 的完整性和隐私得到了保护。

.. _TPM Genie: https://www.nccgroup.trust/globalassets/about-us/us/documents/tpm-genie.pdf
.. _Windows Bitlocker TPM: https://dolosgroup.io/blog/2021/7/9/from-stolen-laptop-to-inside-the-company-network
.. _针对基于 TPM 的 Linux 磁盘加密的攻击: https://www.secura.com/blog/tpm-sniffing-attacks-against-non-bitlocker-targets
.. _TCG EK 凭证配置文件: https://trustedcomputinggroup.org/resource/tcg-ek-credential-profile-for-tpm-family-2-0/
.. _TCG TPM v2.0 配置指南: https://trustedcomputinggroup.org/resource/tcg-tpm-v2-0-provisioning-guidance/
