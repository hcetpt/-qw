SPDX 许可证标识符: GPL-2.0

=============

TPM 事件日志

=============

本文档简要介绍了 TPM 日志是什么以及它是如何从预启动固件传递给操作系统的。

简介
============

预启动固件维护了一个事件日志，每当某些内容被哈希到任意一个 PCR 寄存器时就会向该日志添加新的条目。这些事件根据类型进行分类，并包含已哈希的 PCR 寄存器的值。通常，预启动固件会对那些将要执行或将控制权交给它们的组件或与引导过程相关的动作进行哈希处理。
这种做法的主要应用是远程证明（attestation），其之所以有用，在[1]的第一部分中有很好的解释：

“证明用于向挑战者提供有关平台状态的信息。然而，PCR 内容难以解释；因此，当 PCR 内容伴随有测量日志时，证明通常更为有用。虽然测量日志本身不可信任，但它包含了比 PCR 内容更丰富的信息集。PCR 内容用于验证测量日志。”

UEFI 事件日志
==============

UEFI 提供的事件日志有一些相当奇怪的特点：
在调用 `ExitBootServices()` 之前，Linux EFI 框架会将事件日志复制到由框架自身定义的自定义配置表中。不幸的是，`ExitBootServices()` 生成的事件并不会出现在这个表中。
为了解决这个问题，固件提供了所谓的最终事件配置表。首次调用 `EFI_TCG2_PROTOCOL.GetEventLog()` 之后，事件会被镜像到此表中。
这又引入了另一个问题：无法保证 `EFI_TCG2_PROTOCOL.GetEventLog()` 不会在 Linux EFI 框架运行前就被调用。因此，框架需要在运行过程中计算并保存最终事件表的大小到自定义配置表中，以便 TPM 驱动程序稍后在拼接自定义配置表和最终事件表中的两部分事件日志时可以跳过这些事件。

参考文献
==========

- [1] https://trustedcomputinggroup.org/resource/pc-client-specific-platform-firmware-profile-specification/
- [2] 最终的拼接工作是在 `drivers/char/tpm/eventlog/efi.c` 文件中完成的。
