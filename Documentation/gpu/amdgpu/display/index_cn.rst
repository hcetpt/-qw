.. _amdgpu-display-core:

===================================
drm/amd/display - 显示核心 (DC)
===================================

AMD 显示引擎部分与其它操作系统共享；因此，我们的显示核心驱动程序被分为两部分：

1. **显示核心 (DC)** 包含与操作系统无关的组件。硬件编程和资源管理等功能在此处理。
2. **显示管理器 (DM)** 包含与操作系统相关的组件。与 amdgpu 基础驱动程序和 DRM 的接口在这里实现。例如，可以查看 display/amdgpu_dm/ 文件夹。
------------------
DC 代码验证
------------------

在多个操作系统之间维护相同的代码库需要大量的仓库同步工作和详尽的验证。在 DC 情况下，我们维护一个树来集中不同部分的代码。共享仓库与我们的内部 Linux CI 农场进行了集成测试，并且我们在各种 AMD GPU/APU（主要是最近的 dGPU 和 APU）上运行了一整套 IGT 测试。我们的 CI 还检查了启用和禁用 DCN 的 ARM64/32、PPC64/32 以及 x86_64/32 编译。

当我们向上游提交新功能或一些补丁时，我们会将它们打包到一个带有前缀 **DC Patches for <DATE>** 的补丁集中，该补丁集基于最新的 `amd-staging-drm-next <https://gitlab.freedesktop.org/agd5f/linux>`_ 创建。所有这些补丁都在经过以下测试的 DC 版本下进行：

* 确保每个补丁都能编译，并且整个系列通过我们在不同硬件上的 IGT 测试集。
* 准备一个包含这些补丁的分支供我们的验证团队使用。如果出现错误，开发人员会尽快调试；通常情况下，对系列进行简单的二分查找就足以定位问题所在，此时有两种可能的操作：修复问题或放弃补丁。如果问题不易解决，则放弃有问题的补丁。
* 最后，开发人员等待几天以获取社区反馈，在合并系列之前。

需要强调的是，测试阶段是我们非常重视的环节，我们从不合并任何未通过验证的内容。以下是我们的测试集概述：

1. 手动测试
    * 多次热插拔 DP 和 HDMI 接口。
2. 使用用户界面进行多种显示配置更改的压力测试。
3. 验证 VRR 行为。
4. 检查 PSR。
* 在播放视频时验证MPO（多平面叠加）
* 测试同时连接两个以上显示器
* 检查挂起/恢复功能
* 验证FPO（全屏优化）
* 检查MST（多流传输）
1. 自动化测试
    * 在具有DCN和DCE支持的GPU和APU集群中进行IGT测试
* 使用最新LTS发行版中的GCC和Clang进行编译验证
* 对PowerPC 64/32位、ARM 64/32位和x86 32位进行交叉编译

在持续集成（CI）和手动测试的测试环境设置方面，我们通常使用：

1. 最新的Ubuntu LTS版本
2. 在用户空间方面，我们仅使用通过发行版官方包管理器提供的完全更新的开源组件
#. 关于IGT（集成图形技术），我们使用的是上游的最新代码。
#. 大多数手动测试是在GNome环境中进行的，但我们也使用KDE。
请注意，我们测试团队的成员会始终在附信中回复测试报告。

--------------
DC 信息
--------------

显示管道负责将渲染后的帧从GPU内存（也称为VRAM、帧缓冲等）“扫描输出”到显示器。换句话说，它会执行以下操作：
1. 从内存中读取帧信息；
2. 执行所需的转换；
3. 将像素数据发送到接收设备。
如果您想了解更多关于我们驱动程序的详细信息，请参阅以下目录：

.. toctree::

   display-manager.rst
   dcn-overview.rst
   dcn-blocks.rst
   mpo-overview.rst
   dc-debug.rst
   display-contributing.rst
   dc-glossary.rst
