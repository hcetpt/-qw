.. _display_todos:

==============================
AMDGPU - 显示贡献
==============================

首先，如果你来到这里，你可能想要对显示代码做出一些技术贡献，在此我们表示感谢 :)

本页面总结了一些你可以帮助解决的问题；请记住这是一个静态页面，最好尝试联系amdgfx开发者或一些维护者。最后，本页面遵循DRM创建TODO列表的方式；更多信息，请查阅'Documentation/gpu/todo.rst'

GitLab问题
=============

用户可以在以下网址报告与AMD GPU相关的问题：

- https://gitlab.freedesktop.org/drm/amd

通常，我们会尝试为所有新工单添加适当的标签以方便过滤问题。如果你能够重现任何问题，可以通过提供更多信息或修复问题来提供帮助。
难度：多样

IGT
===

`IGT`_ 提供了许多可以在你的GPU上运行的集成测试。我们总是希望通过大量的测试以增加持续集成中的测试覆盖率。如果你想为显示代码做贡献但不确定从哪里开始，我们建议你运行所有的IGT测试，并尝试修复你在硬件中看到的任何失败。请注意，这些失败可能是IGT问题或内核问题；需要逐案分析。
难度：多样

.. _IGT: https://gitlab.freedesktop.org/drm/igt-gpu-tools

编译
===========

修复编译警告
------------------------

在内核编译时启用W1或W2警告级别，并尝试修复显示侧的问题。
难度：初学者

使用um架构时修复编译问题
-------------------------------------------------

Linux具有User-mode Linux（UML）功能，内核可以被编译为**um**架构。对于测试而言，编译为**um**架构可以带来多种优势。目前我们在这一领域有一些编译问题需要解决。
难度：中级

代码重构
=============

为DC函数添加前缀以改进ftrace调试
-----------------------------------------------------------

Ftrace调试功能（详见'Documentation/trace/ftrace.rst'）是当开发者试图理解一个bug时检查代码路径的绝佳方式。Ftrace提供了过滤机制，当开发者对可能导致问题的代码部分有某些猜测时，该机制非常有用；因此，如果一组函数有适当的前缀，就很容易创建一个好的过滤器。此外，前缀还可以提高堆栈跟踪的可读性。DC代码没有遵循某些前缀规则，这使得Ftrace过滤更加复杂并降低了堆栈跟踪的可读性。如果你想做一些简单的事情来开始为显示代码做贡献，你可以制作补丁为DC函数添加前缀。为了创建这些前缀，请使用目标文件的部分名称作为该文件中所有函数的前缀。请参阅'amdgpu_dm_crtc.c'和'amdgpu_dm_plane.c'以获取一些参考。但是，我们强烈建议不要发送大量更改这些前缀的补丁；否则将难以审查和测试，可能会让维护者产生疑虑。尽量采取小步走的方法；如果有疑问，可以在投入精力之前询问。我们建议先查看dceXYZ、dcnXYZ、basics、bios、core、clk_mgr、hwss、resource和irq等目录。
难度：初学者

减少代码重复
-----------------------

AMD拥有广泛的产品组合，包括各种dGPUs和APUs，这些都得到了amdgpu的支持。为了保持新的硬件发布节奏，DCE/DCN被设计为模块化结构，使新硬件的引入变得快速。多年来，amdgpu在代码重复方面积累了一些技术债务。对于这项任务，找到一个可以发现代码重复（包括模式）的工具并将它用作减少重复的指导是一个好主意。
难度：中级

使atomic_commit_[check|tail]更易读
---------------------------------------------

负责原子提交和尾部处理的函数非常复杂且冗长。特别是'amdgpu_dm_atomic_commit_tail'函数很长，可以从拆分为较小的辅助函数中受益。在这个领域的改进是非常受欢迎的，但请记住，这个领域的更改将影响所有ASIC，这意味着重构需要全面验证；换句话说，这个努力可能需要一些时间来进行验证。
难度：高级

文档
=============

扩展kernel-doc
-----------------

许多DC函数没有适当的kernel-doc；理解一个函数并为其添加文档是学习更多关于amdgpu驱动程序的好方法，同时也是对整个社区做出巨大贡献。
难度：多样
### 级别：初学者

#### 超越 AMDGPU

AMDGPU 提供了一些尚未在用户空间中启用的功能。本节将重点介绍一些最酷的显示功能，这些功能可以通过用户空间开发者助手来启用。

##### 启用底层覆盖

AMD 显示有一个称为“底层覆盖”的功能（您可以在此处了解更多：`Documentation/gpu/amdgpu/display/mpo-overview.rst`），其目的是在播放视频时节省电力。基本思路是将视频放在底层平面的底部，并将桌面放在视频上方的平面上，在视频区域留一个洞。此功能已在 ChromeOS 中启用，并且根据我们的数据测量，它可以节省电力。
### 级别：未知

#### 适应性背光调节 (ABM)

ABM 是一种根据显示图像调整显示面板背光水平和像素值的功能。这种节能功能在系统开始使用电池供电时非常有用；由于这会影响显示输出的质量，因此最好让用户可以选择开启或关闭这个选项。
### 级别：未知

#### HDR、色彩管理和 VRR

HDR、色彩管理和 VRR 是巨大的话题，很难将其简化为简短的任务列表。如果您对这个主题感兴趣，我们建议查看社区开发者的博客文章，以更好地理解其中的一些具体挑战以及正在从事这项工作的人员。如果有人想研究某个特定部分，我们可以提供一些基本指导。最后，请记住，我们已经为这些领域准备了一些内核文档。
