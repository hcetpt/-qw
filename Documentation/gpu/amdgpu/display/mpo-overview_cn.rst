========================
多平面覆盖（MPO）
========================

.. note:: 如果您已经阅读了 'Documentation/gpu/amdgpu/display/dcn-overview.rst'，那么您将从本页获得更多内容。
多平面覆盖（MPO）允许通过显示控制器中的固定功能硬件来组合多个帧缓冲区，而不是使用图形或计算着色器进行组合。如果这意味着图形/计算管线可以进入低功耗状态，这可能会带来一些功耗节省。简而言之，MPO可以带来以下好处：

* 减少GPU和CPU的工作负载 - 不需要组合着色器，不需要额外的缓冲区复制，GPU可以保持空闲
* 平面独立的页面翻转 - 不需要与全局合成器的页面翻转呈现速率绑定，减少延迟，独立计时

.. note:: 请注意，MPO主要是为了节能；如果您想了解更多关于显示上下文中的节能信息，请查看链接：
   `节能 <https://gitlab.freedesktop.org/pq/color-and-hdr/-/blob/main/doc/power.rst>`__

多平面覆盖仅在使用DRM原子模型时可用。原子模型仅使用一个用户空间IOCTL来配置显示硬件（模式设置、页面翻转等）- drmModeAtomicCommit。为了查询硬件资源和限制，用户空间也会调用drmModeGetResources，该函数会报告平面数、CRTCs和连接器的数量。驱动程序可以注册并处理三种类型的DRM平面：

* ``DRM_PLANE_TYPE_PRIMARY``：主平面代表CRTC的一个“主要”平面，主平面是由CRTC模式设置和翻转操作操作的平面
* ``DRM_PLANE_TYPE_CURSOR``：光标平面代表CRTC的一个“光标”平面，光标平面是由光标IOCTLs操作的平面
* ``DRM_PLANE_TYPE_OVERLAY``：覆盖平面代表所有非主、非光标的平面。某些驱动程序内部称这些类型的平面为“精灵”

为了说明其工作原理，让我们来看一个向用户空间暴露以下平面的设备：

* 4个主平面（每个CRTC 1个）
* 4个光标平面（每个CRTC 1个）
* 1个覆盖平面（CRTC之间共享）

.. note:: 请注意，不同的ASIC可能会暴露其他数量的平面
对于这个硬件示例，我们有4个管道（如果你不知道AMD管道是什么，请参阅'Documentation/gpu/amdgpu/display/dcn-overview.rst'中的“AMD硬件管道”部分）。通常大多数AMD设备在单个显示输出时采用分管道配置以达到最佳效果（例如，每平面2个管道）。

一个典型的多平面覆盖（MPO）配置从用户空间来看——在一个显示器上的1个主平面+1个覆盖平面——将使用4个管道，每个平面2个。

每个平面（主平面和覆盖平面）至少需要使用1个管道。因此，对于我们作为示例的假设硬件，我们有一个绝对限制，即所有CRT控制器总共最多支持4个平面。使用超过4个平面的显示配置的原子提交将被拒绝。再次强调，每个DCN有不同的限制；在这里，我们只是试图提供一个概念性的想法。

平面限制
========

AMDGPU对驱动程序中DRM平面的使用施加了限制。不遵循这些限制的原子提交将被拒绝：

* 覆盖平面必须是ARGB8888或XRGB8888格式。
* 平面不能放置在CRT目标矩形之外。
* 平面不能缩小到其原始大小的1/4倍以下。
* 平面不能放大到其原始大小的16倍以上。

并非每个属性都适用于每个平面：

* 只有主平面支持色彩空间和非RGB格式。
* 只有覆盖平面支持alpha混合。

光标限制
======

在开始描述与光标和MPO相关的某些限制之前，请参见下面的图像：

.. kernel-figure:: mpo-cursor.svg

左侧的图表示DRM期望光标和平面如何混合。然而，AMD硬件处理光标的方式不同，如右侧所示；基本上，我们的光标不能绘制在其关联平面之外，因为它被视为平面的一部分。另一个后果是光标继承自平面的颜色和缩放设置。

由于上述行为，在使用MPO时不要使用传统API来设置光标平面；否则，可能会遇到意外行为。

简而言之，AMD硬件没有专用的光标平面。光标附着在另一个平面上，因此继承其父平面的任何缩放或颜色处理。

用例
====

画中画（PIP）播放——下层策略
--------------------------

视频播放应使用“主平面作为下层”的MPO策略。这是一个双平面配置：

* 1个YUV DRM主平面（例如，NV12视频）
* 1个RGBA DRM覆盖平面（例如，ARGB8888桌面）。合成器应为平面准备帧缓冲区如下：
  - 覆盖平面包含通用桌面UI、视频播放器控制和视频字幕。
  - 主平面包含一个或多个视频。

.. note:: 请注意，我们可以扩展此配置以支持更多平面，但这目前尚不被我们的驱动程序支持（也许将来如果有用户空间请求，我们可以改变这一点）。

请参见下面的单视频示例：

.. kernel-figure:: single-display-mpo.svg

.. note:: 我们可以扩展这种行为以支持更多平面，但这目前尚不被我们的驱动程序支持。

视频缓冲区应直接用于主平面。可以通过设置以下属性来调整视频在桌面上的大小和位置：CRTC_X、CRTC_Y、CRTC_W 和 CRTC_H。主平面还应根据源内容设置颜色编码和颜色范围属性：

* ``COLOR_RANGE``，``COLOR_ENCODING``

覆盖平面应是CRTC的本机大小。合成器必须为桌面视频所在位置绘制透明区域（即，设置alpha值为零）。主平面的视频将通过下层显示。覆盖平面的缓冲区可以保持不变，而主平面的帧缓冲区则用于标准的双缓冲播放。
合成器应创建一个与CRTC本机大小匹配的YUV缓冲区。
每个视频缓冲区都应合成到这个YUV缓冲区上，以实现直接的YUV扫描。主平面的颜色编码和色域属性应根据源内容设置：`COLOR_RANGE`、`COLOR_ENCODING`。然而，请注意，每个视频的源色彩空间和编码必须匹配，因为它们会影响整个平面。
覆盖平面应为CRTC的本机大小。合成器必须绘制一个透明的切口，用于将每个视频放置在桌面上（即，将alpha设置为零）。通过底层可以看到主平面上的视频。覆盖平面的缓冲区可以保持不变，而视频播放的合成操作将在视频缓冲区上进行。

此内核接口使用IGT GPU工具进行了验证。以下测试可用于验证在各种序列及与DPMS和S3等操作交互中的定位、混合和缩放：

- `kms_plane@plane-panning-bottom-right-pipe-*-planes`
- `kms_plane@plane-panning-bottom-right-suspend-pipe-*-`
- `kms_plane@plane-panning-top-left-pipe-*-`
- `kms_plane@plane-position-covered-pipe-*-`
- `kms_plane@plane-position-hole-dpms-pipe-*-`
- `kms_plane@plane-position-hole-pipe-*-`
- `kms_plane_multiple@atomic-pipe-*-tiling-`
- `kms_plane_scaling@pipe-*-plane-scaling`
- `kms_plane_alpha_blend@pipe-*-alpha-basic`
- `kms_plane_alpha_blend@pipe-*-alpha-transparant-fb`
- `kms_plane_alpha_blend@pipe-*-alpha-opaque-fb`
- `kms_plane_alpha_blend@pipe-*-constant-alpha-min`
- `kms_plane_alpha_blend@pipe-*-constant-alpha-mid`
- `kms_plane_alpha_blend@pipe-*-constant-alpha-max`

多显示器MPO
-------------

AMDGPU支持使用多个显示器时的显示MPO；然而，此功能的行为严重依赖于合成器的实现。请记住，用户空间可以定义不同的策略。例如，一些操作系统可能会使用MPO来保护处理视频播放的平面；请注意，对于单个显示器，我们并没有太多限制。然而，这种操纵在多显示器场景中可能会有更多的限制。下面的例子展示了一个视频播放位于两个显示器中间的情况，合成器需要定义一个处理它的策略：

.. kernel-figure:: multi-display-hdcp-mpo.svg

让我们讨论一下在处理多显示器带MPO时的一些硬件限制。
限制
~~~~~~~~~~~

为了简化讨论硬件限制，本文档假设一个示例，其中我们有两个显示器，并且视频播放会在不同的显示器之间移动。
* **硬件限制**

从DCN概述页面来看，每个显示器至少需要一条管道，每个MPO平面需要另一条管道。因此，当视频位于两个显示器中间时，我们需要使用两条管道。请参见下面的示例，我们避免了管道分割：

- 1个显示器（1条管道）+ MPO（1条管道），我们将使用两条管道
- 2个显示器（2条管道）+ MPO（1-2条管道），我们将使用四条管道。MPO位于两个显示器中间需要两条管道
- 3个显示器（3条管道）+ MPO（1-2条管道），我们需要五条管道
如果我们使用带有多个显示器的MPO，用户空间必须决定是否启用多个MPO，代价是限制支持的外部显示器数量，或者禁用它以支持多个显示器；这是一个政策决定。例如：

* 当ASIC有3条管道时，AMD硬件不能支持带有MPO的2个显示器
* 当ASIC有4条管道时，AMD硬件不能支持带有MPO的3个显示器

让我们简要探讨一下用户空间如何处理只有三条管道的ASIC上的这两种显示器配置。我们可以有：

.. kernel-figure:: multi-display-hdcp-mpo-less-pipe-ex.svg

- 总共3条管道
- 用户点亮2个显示器（使用了3条管道中的2条）
- 用户启动视频（1条管道用于MPO）
- 现在，如果用户将视频移动到2个显示器中间，视频的一部分将不会被MPO保护，因为我们已经使用了3/3的管道
* **缩放限制**

MPO无法处理小于0.25和大于x16的缩放。例如：

如果4K视频（3840x2160）以窗口模式播放，窗口的实际大小不能小于（960x540）
.. note:: 这些缩放限制可能因ASIC而异
* **尺寸限制**

最小的MPO尺寸是12像素
