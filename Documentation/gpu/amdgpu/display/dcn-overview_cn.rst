=======================
显示核心下一代（Display Core Next，简称DCN）
=======================

为了使读者了解AMD显示核心下一代（DCN）的工作原理，我们需要从硬件流水线的概览开始。下图提供了一个DCN的概览，请注意这是一个通用图示，每个ASIC可能会有所不同。
.. kernel-figure:: dc_pipeline_overview.svg

基于这个图示，我们可以逐个介绍各个模块：

* **显示控制器中心（DCHUB）**：这是可扩展数据端口（SDP）与DCN之间的网关。该组件具有多种功能，如内存仲裁、旋转和光标操作。
* **显示管道和平面（DPP）**：此模块提供预混合像素处理，例如颜色空间转换、像素数据线性化、色调映射和色域映射。
* **多平面组合（MPC）**：此组件执行多个平面的混合，可以使用全局或逐像素的alpha值。
* **输出像素处理（OPP）**：处理并格式化像素以发送到显示器。
* **输出管道时序组合器（OPTC）**：生成时间输出以组合流或分配能力。CRC值在此模块中生成。
* **显示输出（DIO）**：编码输出至连接到我们GPU的显示器。
* **显示回写（DWB）**：提供将显示管道的输出作为视频帧写回内存的能力。
* **多媒体中心（MMHUBBUB）**：为DMCUB和DWB提供内存控制器接口（请注意，DWB尚未连接）。
* **DCN管理单元（DMU）**：提供带有访问控制的寄存器，并中断SOC主机中断单元。此模块包括显示微控制器单元版本B（DMCUB），通过固件进行处理。
* **DCN 时钟生成器模块 (DCCG)**：为所有显示控制器时钟域提供时钟和复位信号。
* **Azalia (AZ)**：音频引擎。

上图是对 DCN 架构的通用描述，这意味着每个 ASIC 在这个基础模型上有不同的变体。请注意，显示流水线通过 DCHUB 连接到可扩展数据端口 (SDP)；可以将 SDP 看作是我们数据结构中向显示管道提供数据的元素。
始终将 DCN 架构视为一种灵活的架构，可以根据用户空间的需求进行配置和重新配置；换句话说，每个模块可以根据需求进行设置或忽略。例如，如果我们想要驱动一个 8K@60Hz 的显示器并且启用 DSC，我们的 DCN 可能需要 4 个 DPP 和 2 个 OPP。DC 负责为每个特定场景提供最佳配置。协调所有这些组件需要一个复杂的通信接口，在图中由连接各模块的边表示：
1. 像素数据接口（红色）：代表像素数据流；
2. 全局同步信号（绿色）：由一组同步信号组成，包括 VStartup、VUpdate 和 VReady；
3. 配置接口：负责配置模块；
4. 辅助信号：其他不符合上述类别的信号。
这些信号在 DCN 中至关重要，并且发挥着重要作用。然而，全局同步信号值得进一步详细说明，如下一节所述。
所有这些组件都由一个名为 dc_state 的数据结构表示。从 DCHUB 到 MPC，我们有一个称为 dc_plane 的表示；从 MPC 到 OPTC，我们有 dc_stream，而输出（DIO）则由 dc_link 处理。请记住，HUBP 使用特定格式从内存读取表面，我们的 dc_plane 应该工作以转换平面中的所有像素，使其可以通过 dc_stream 和 dc_link 发送到显示器。

### 前端和后端

显示流水线可以分为两个通常称为**前端 (FE)** 和**后端 (BE)** 的组件，其中 FE 包括：
- DCHUB（主要指一个名为 HUBP 的子组件）
- DPP
- MPC

另一方面，BE 包括：
- OPP
- OPTC
- DIO（DP/HDMI 流编码器和链路编码器）

OPP 和 OPTC 是 FE 和 BE 之间的连接块。顺便说一句，这是链路编码器到 PHY 的一对一映射，但我们可以配置 DCN 选择哪个链路编码器连接到哪个 PHY。FE 的主要职责是改变、混合和组合像素数据，而 BE 的任务是将通用像素流构造成特定显示器的像素流。

### 数据流

最初，数据以本机像素格式通过 VRAM 经过数据结构 (DF) 输入。这种数据格式一直保持到 DCHUB 中的 HUBP，其中 HUBP 解包不同的像素格式并通过 4 个通道（1 个用于 alpha + 3 个用于颜色）将它们以统一的流形式输出到 DPP。
DPP 中的转换器和光标 (CNVC) 会标准化数据表示并将其转换为 DCN 特定的浮点格式（即不同于 IEEE 浮点格式）。在此过程中，CNVC 还应用了一个去伽马函数，将数据从非线性空间转换到线性空间，从而简化后续的浮点计算。数据将以浮点格式从 DPP 传递到 OPP。
启动OPP，因为颜色转换和混合已经完成（即可以去掉alpha通道），并且最终的接收端不需要浮点数提供的精度和动态范围（即所有显示器都使用整数深度格式），因此会进行位深度降低/抖动处理。在OPP中，我们还会应用重新伽玛校正功能，以恢复之前移除的伽玛值。最终，我们在DIO处输出整数格式的数据。

AMD硬件流水线
---------------------

在讨论Linux上的图形时，术语“**流水线**”有时会被赋予多种含义，因此明确我们所说的“**流水线**”是非常重要的。在DCN驱动程序中，我们使用“**硬件流水线**”或“**流水线**”或简称“**管道**”这一术语来表示为解决某些特定配置而实例化的一系列DCN模块序列。DC核心将DCN模块视为独立资源，这意味着我们可以取所有单个硬件模块的资源来构建一个流水线。实际上，我们不能随意将一条管道中的任意模块连接到另一条管道中的模块；它们是线性路由的，除了DSC可以根据需要任意分配。我们引入这个流水线概念是为了优化带宽利用率。

.. kernel-figure:: pipeline_4k_no_split.svg

此外，让我们看看DTN日志的一部分（详见'Documentation/gpu/amdgpu/display/dc-debug.rst'获取更多信息），因为这些日志可以帮助我们实时看到部分流水线的行为::

 HUBP:  格式  高地址  宽度  高度 ..
[ 0]:      8h      81h   3840    2160
 [ 1]:      0h       0h      0       0
 [ 2]:      0h       0h      0       0
 [ 3]:      0h       0h      0       0
 [ 4]:      0h       0h      0       0
 ..
MPCC:  OPP  DPP ..
[ 0]:   0h   0h ..

从图示和DTN日志中首先需要注意的是，每个DCN模块的部分都有不同的时钟域。在这个例子中，我们只有一个**流水线**，数据从DCHUB流向DIO，正如我们直观预期的那样。然而，如前所述，DCN是灵活的，我们可以按不同的方式拆分这条单一的管道，如下图所示：

.. kernel-figure:: pipeline_4k_split.svg

现在，如果我们再次检查DTN日志，可以看到一些有趣的变化::

 HUBP:  格式  高地址  宽度  高度 ..
[ 0]:      8h      81h   1920    2160 ..
[4]:      0h       0h      0       0
[5]:      8h      81h   1920    2160

MPCC:  OPP  DPP
[0]:   0h   0h
[5]:   0h   5h

从上面的例子中，我们现在将显示流水线分为两个垂直的部分，每个部分的分辨率为1920x2160（即3440x2160），这样我们就可以降低DPP部分的时钟频率。这不仅有助于节省功耗，还有助于更好地处理所需的吞吐量。需要记住的关键思想是，根据显示配置的不同，管道配置可能会有很大差异，并且由DML负责设置硬件支持的各种场景所需的所有配置参数。

全局同步
---------

许多DCN寄存器是双缓冲的，最重要的是表面地址。这使得我们可以在页面翻转以及大多数不需要启用或禁用新管道的更新中，以原子方式更新DCN硬件。
（注意：在许多情况下，DC 会决定预留额外的管道，以支持需要极高像素时钟的输出或出于节能目的。）

这些原子寄存器更新是由 DCN 中的全局同步信号驱动的。为了理解原子更新如何与 DCN 硬件交互以及 DCN 如何发出翻页（page flip）和垂直同步（vblank）事件，了解全局同步信号是如何编程的非常有帮助。
全局同步由三个信号组成：VSTARTUP、VUPDATE 和 VREADY。这些信号是由显示模式库 DML（drivers/gpu/drm/amd/display/dc/dml）根据大量参数计算得出的，确保硬件能够在任何给定的系统配置下为 DCN 管道提供数据而不会出现欠流或卡死现象。
全局同步信号总是在垂直同步空白期（VBlank）期间发生，并且独立于 VSync 信号，它们之间也不会相互重叠。
VUPDATE 是唯一对驱动程序栈其他部分或用户空间客户端感兴趣的信号，因为它指示了硬件锁定到原子编程（即双缓冲）寄存器的时间点。尽管它独立于 VSync 信号，但我们使用 VUPDATE 来指示 VSync 事件，因为它提供了原子提交与硬件交互的最佳指示。
由于 DCN 硬件是双缓冲的，因此 DC 驱动程序可以在帧的任何时候对硬件进行编程。
下图说明了全局同步信号：

.. kernel-figure:: global_sync_vblank.svg

这些信号影响核心 DCN 行为。错误地编程这些信号将导致一系列负面后果，其中大部分是非常灾难性的。
下图展示了全局同步如何允许邮箱风格的更新，即它允许多次重新配置，只有在 VUPDATE 信号之前最后一次编程的配置才生效。

.. kernel-figure:: config_example.svg
