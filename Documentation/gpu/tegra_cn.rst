===============================================
drm/tegra NVIDIA Tegra GPU和显示驱动程序
===============================================

NVIDIA Tegra系统级芯片（SoC）通过host1x控制器支持一系列显示、图形和视频功能。host1x通过通道向其客户端提供从CPU直接提供的推送缓冲区中收集的命令流。软件或各个模块之间可以使用同步点进行同步。

在Tegra124（即Tegra K1）之前，但不包括Tegra124，drm/tegra驱动程序支持内置GPU，该GPU由gr2d和gr3d引擎组成。从Tegra124开始，GPU基于NVIDIA桌面GPU架构，并由drm/nouveau驱动程序支持。

drm/tegra驱动程序自Tegra20以来支持NVIDIA Tegra SoC各代产品。它包含三个部分：

- 一个host1x驱动程序，提供基础设施并访问host1x服务。
- 一个KMS驱动程序，支持显示控制器以及RGB、HDMI、DSI和DisplayPort等多种输出。
- 一组自定义用户空间IOCTLs，可以通过host1x提交任务给GPU和视频引擎。

驱动程序基础设施
=====================

为了将各种host1x客户端绑定在一起形成一个逻辑设备，以暴露其功能给用户，需要实现相应的基础设施。这个基础设施实现在host1x驱动程序中。当一个驱动程序注册到基础设施时，它会提供一个兼容字符串列表，指定所需的设备。基础设施创建一个逻辑设备，并扫描设备树中的匹配节点，将所需的客户端添加到列表中。各个客户端的驱动程序也会注册到基础设施，并被添加到逻辑host1x设备中。

一旦所有客户端都可用，基础设施将使用驱动程序提供的函数初始化逻辑设备，设置特定于子系统的位，并依次初始化每个客户端。

同样地，当某个客户端注销时，基础设施会通过回调驱动程序销毁逻辑设备，确保子系统的特定位被清除，客户端依次被销毁。

Host1x基础设施参考
-------------------------------

.. kernel-doc:: include/linux/host1x.h

.. kernel-doc:: drivers/gpu/host1x/bus.c
   :export:

Host1x同步点参考
--------------------------

.. kernel-doc:: drivers/gpu/host1x/syncpt.c
   :export:

KMS驱动程序
==========

显示硬件在各种Tegra SoC世代中基本保持向后兼容性，直到Tegra186引入了多项变化，使得使用参数化驱动程序支持变得困难。

显示控制器
-------------------

Tegra SoC有两个显示控制器，每个控制器可以关联零个或多个输出。输出也可以共享一个显示控制器，但前提是它们运行具有兼容的显示定时。两个显示控制器还可以共享一个帧缓冲区，即使两个输出的模式不匹配也能实现克隆配置。在KMS术语中，一个显示控制器被建模为一个CRTC。
在Tegra186上，显示控制器的数量增加到了三个。一个显示控制器不能再驱动所有的输出。虽然其中两个控制器可以驱动两个DSI输出和两个SOR输出，但第三个控制器不能驱动任何DSI输出。

窗口
~~~~~~~

一个显示控制器控制一组可以用来将多个缓冲区合成到屏幕上的窗口。尽管可以通过编程相应的混合寄存器为单个窗口分配任意的Z顺序，但目前驱动程序不支持这样做。相反，它会假定一个固定的窗口Z顺序（窗口A是根窗口，即最低层，而窗口B和C叠加在窗口A之上）。叠加窗口支持多种像素格式，并且可以在扫描输出时自动从YUV转换为RGB。这使得它们非常适合显示视频内容。在KMS中，每个窗口被建模为一个平面。每个显示控制器都有一个硬件光标，该光标作为光标平面暴露出来。

输出
-------

支持的输出类型和数量在不同的Tegra SoC代际之间有所不同。所有代际至少支持HDMI。虽然早期的代际支持非常简单的RGB接口（每个显示控制器一个），但最近的代际不再支持这些接口，而是提供标准接口如DSI和eDP/DP。输出被建模为复合编码器/连接器对。

RGB/LVDS
~~~~~~~~

自从Tegra124以来，此接口已不再可用。它已被更标准的DSI和eDP接口所取代。

HDMI
~~~~

所有Tegra SoC都支持HDMI。从Tegra210开始，HDMI由多功能的SOR输出提供，该输出支持eDP、DP和HDMI。SOR能够支持HDMI 2.0，但目前对此的支持尚未合并。

DSI
~~~

尽管Tegra自Tegra30起就支持DSI，但在Tegra114中控制器发生了多处变化。由于在Dalmore（Tegra114）之前的任何公开开发板都没有使用DSI，因此drm/tegra驱动程序仅支持Tegra114及其以后的版本。

eDP/DP
~~~~~~

eDP最早是在Tegra124中引入的，用于驱动笔记本电脑形式因素的显示面板。Tegra210增加了对完整DisplayPort的支持，但目前drm/tegra驱动程序中尚未实现这一功能。

用户空间接口
==================

drm/tegra提供的用户空间接口允许应用程序创建GEM缓冲区，访问和控制同步点以及向host1x提交命令流。
GEM 缓冲区
-----------

``DRM_IOCTL_TEGRA_GEM_CREATE`` IOCTL 用于创建具有特定 Tegra 标志的 GEM 缓冲区对象。这对于需要进行平铺处理或倒置扫描输出（对于 3D 内容有用）的缓冲区非常有用。创建 GEM 缓冲区对象后，应用程序可以通过使用由 ``DRM_IOCTL_TEGRA_GEM_MMAP`` IOCTL 返回的 mmap 偏移量来映射其内存。

同步点
-----------

可以通过执行 ``DRM_IOCTL_TEGRA_SYNCPT_READ`` IOCTL 来获取同步点的当前值。通过使用 ``DRM_IOCTL_TEGRA_SYNCPT_INCR`` IOCTL 可以递增同步点。
用户空间还可以请求在同步点上阻塞。为此，它需要执行 ``DRM_IOCTL_TEGRA_SYNCPT_WAIT`` IOCTL，并指定要等待的同步点值。当同步点达到该值或经过指定的超时时间后，内核将释放应用程序。

命令流提交
-------------------------
在应用程序可以向 host1x 提交命令流之前，它需要使用 ``DRM_IOCTL_TEGRA_OPEN_CHANNEL`` IOCTL 打开一个到引擎的通道。客户端 ID 用于标识通道的目标。当不再需要某个通道时，可以使用 ``DRM_IOCTL_TEGRA_CLOSE_CHANNEL`` IOCTL 关闭它。要检索与通道关联的同步点，应用程序可以使用 ``DRM_IOCTL_TEGRA_GET_SYNCPT``。
打开通道后，提交命令流变得简单。应用程序将命令写入支持 GEM 缓冲区对象的内存中，并将这些命令传递给 ``DRM_IOCTL_TEGRA_SUBMIT`` IOCTL，同时传递其他参数，如作业提交中使用的同步点或重定位信息。
