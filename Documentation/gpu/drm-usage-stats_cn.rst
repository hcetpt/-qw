.. _drm-client-usage-stats:

======================
DRM客户端使用统计
======================

DRM驱动程序可以选择通过在`struct drm_driver`对象中注册的DRM核心中的驱动程序特定文件操作`fops->show_fdinfo()`导出部分标准化的文本输出。此输出的一个目的是尽可能地支持编写像`top(1)`这样的通用用户空间监控工具。考虑到各种DRM驱动程序之间的差异，输出规范分为通用部分和驱动程序特定部分。尽管如此，在可能的情况下，仍应尽量实现标准化。

文件格式规范
=========================

- 文件中的每一行包含一个键值对
- 必须使用冒号字符（`:`）来分隔键和值
- 所有键都必须以`drm-`开头
- 在解析时，分隔符与第一个非空白字符之间的空白会被忽略
- 键不允许包含空白字符
- 数字键值对可以以可选的单位字符串结尾
- 值的数据类型是固定的，如规范中所定义
关键类型
---------

1. 必选，完全标准化
2. 可选，完全标准化
3. 驱动特定

数据类型
----------

- `<uint>` - 未定义最大值的无符号整数
- `<keystr>` - 字符串，排除所有已定义的保留字符和空白
- `<valstr>` - 字符串

必选且完全标准化的关键项
----------------------------

- `drm-driver`: `<valstr>`

字符串应包含该驱动通过相应的 `struct drm_driver` 数据结构注册的名称

可选且完全标准化的关键项
----------------------------

标识
^^^^^^^^^^^^^^

- `drm-pdev`: `<aaaa:bb.cc.d>`

对于 PCI 设备，此字符串应包含所讨论设备的 PCI 插槽地址
- `drm-client-id`: `<uint>`

与打开的 DRM 文件描述符相关的唯一值，用于区分重复和共享的文件描述符。概念上，该值应该与内核中的 `struct drm_file` 实例一一对应。

该值要么全局唯一，要么在每个设备范围内唯一，在后一种情况下，`drm-pdev` 也应存在。
用户空间应确保在使用上述描述的标准时不会重复计算任何使用统计，以便将数据关联到各个客户端。

利用率
^^^^^^^^^^^

- drm-engine-<keystr>: <uint> ns

GPU 通常包含多个执行引擎。每个引擎应具有一个稳定且唯一的名称（keystr），其可能的值应在驱动程序特定文档中进行说明。
该值应以指定的时间单位表示，这些时间单位是相应的 GPU 引擎忙于执行属于此客户端的工作负载所花费的时间。
如果简化驱动程序实现，则值不需要始终单调递增，但必须在合理的时间内赶上之前报告的较大值。当观察到的值低于之前读取的值时，用户空间应保持之前的较大值，直到看到单调更新为止。
- drm-engine-capacity-<keystr>: <uint>

引擎标识字符串必须与 drm-engine-<keystr> 标签中指定的相同，并且应包含一个大于零的数字，前提是导出的引擎对应一组相同的硬件引擎。
如果没有这个标签，解析器应假定容量为一。零容量不允许。
- drm-cycles-<keystr>: <uint>

引擎标识字符串必须与 drm-engine-<keystr> 标签中指定的相同，并且应包含给定引擎的忙碌周期数。
如果简化驱动程序实现，则值不需要始终单调递增，但必须在合理的时间内赶上之前报告的较大值。当观察到的值低于之前读取的值时，用户空间应保持之前的较大值，直到看到单调更新为止。
- drm-total-cycles-<keystr>: <uint>

引擎标识字符串必须与 drm-cycles-<keystr> 标签中指定的相同，并且应包含给定引擎的总周期数。
这是一个 GPU 未指定单位的时间戳，与 drm-cycles-<keystr> 的更新速率相匹配。对于实现了此接口的驱动程序，可以在不考虑 CPU 采样之间睡眠时间的情况下，在 GPU 时钟域内完全计算引擎利用率。
驱动程序可以实现此键或`drm-maxfreq-<keystr>`，但不能同时实现两者。
- `drm-maxfreq-<keystr>`: `<uint>` `[Hz|MHz|KHz]`

引擎标识字符串必须与`drm-engine-<keystr>`标签中指定的相同，并且应包含给定引擎的最大频率。结合`drm-cycles-<keystr>`使用时，可以计算引擎的百分比利用率；而`drm-engine-<keystr>`仅反映活动时间，而不考虑引擎运行频率占其最大频率的百分比。

驱动程序可以实现此键或`drm-total-cycles-<keystr>`，但不能同时实现两者。

内存
^^^^^^

- `drm-memory-<region>`: `<uint>` `[KiB|MiB]`

每个可能的内存类型（用于存储特定GPU缓冲对象）都应分配一个稳定且唯一的名称，并在此处作为字符串返回。名称“memory”保留用于指代普通系统内存。值应反映当前由属于该客户端的缓冲对象在相应内存区域中占用的存储量。默认单位为字节，可选单位为`KiB`（千字节）或`MiB`（兆字节）。
- `drm-shared-<region>`: `<uint>` `[KiB|MiB]`

与其他文件共享的缓冲区总大小（例如，具有多个句柄）。
- `drm-total-<region>`: `<uint>` `[KiB|MiB]`

包括共享和私有内存的缓冲区总大小。
- `drm-resident-<region>`: `<uint>` `[KiB|MiB]`

指定区域内驻留的缓冲区总大小。
- `drm-purgeable-<region>`: `<uint>` `[KiB|MiB]`

可释放的缓冲区总大小。
drm-active-<region>: <uint> [KiB|MiB]

处于一个或多个引擎上活动状态的缓冲区总大小。

实现细节
======================
驱动程序应在它们的 `struct file_operations` 中使用 drm_show_fdinfo()，如果希望提供由 drm_show_fdinfo() 未提供的任何统计信息，则应实现 &drm_driver.show_fdinfo。但是，即使对于特定于驱动程序的统计信息，也应在此处进行文档说明，并尽可能与其他驱动程序对齐。

特定于驱动程序的实现
-------------------------------

* :ref:`i915-usage-stats`
* :ref:`panfrost-usage-stats`
* :ref:`xe-usage-stats`
