SPDX 许可声明标识符：GPL-2.0

==========================================
EQL 驱动程序：串行 IP 负载均衡 HOWTO
==========================================

  西蒙 “古鲁 Aleph-Null” 简斯，simon@ncm.com

  v1.1，1995 年 2 月 27 日

  这是 EQL 设备驱动程序的手册。EQL 是一种软件设备，可以让你为增加带宽而对 IP 串行链接（SLIP 或未压缩的 PPP）进行负载均衡。除了在你已经有大量流量的情况下能有所帮助之外，它不会减少你的延迟（即 ping 时间）。此驱动程序已在 1.1.75 内核上进行了测试，并且已知可以在 1.1.86 上干净地打补丁。对于 1.1.92 的一些测试已经使用了 v1.1 补丁，该补丁仅用于在最新的内核源代码树中干净地打补丁。（是的，它运行良好。）

1. 引言
===============

  哪个更糟糕？高昂的 56K 租用线路费用还是两条电话线？可能是前者。如果你发现自己渴望更多的带宽，并且有一个灵活的 ISP，现在有可能将调制解调器绑定在一起作为单一的点到点链接以增加你的带宽。这一切都不需要在任何一方使用特殊的黑盒子。
EQL 驱动程序仅在 Livingston PortMaster-2e 终端服务器上进行了测试。我不知道其他终端服务器是否支持负载均衡，但我知道 PortMaster 支持并且几乎与 EQL 驱动程序一样出色（——不幸的是，在我的测试中，Livingston PortMaster 2e 的负载均衡比测试机器处理 28.8 Kbps 和 14.4 Kbps 连接时慢大约 1 到 2 KB/s。但是，我还不确定这真的是 PortMaster 的问题，还是 Linux 的 TCP 驱动的问题。有人告诉我 Linux 的 TCP 实现非常快。——）

  我建议 ISP 可能公平的做法是对负载均衡客户端收取第二条线路成本的 75%，第三条线路成本的 50% 等等。
嘿，我们都可以梦想你知道...
2. 内核配置
=======================

  在这里我描述了获取内核并使其与 EQL 驱动程序一起工作的基本步骤。从打补丁、构建到安装。
2.1. 给内核打补丁
------------------------

  如果你没有或无法获得包含 EQL 驱动程序的内核副本，可以从 ftp://slaughter.ncm.com/pub/Linux/LOAD_BALANCING/eql-1.1.tar.gz 获取驱动程序副本。
将此存档解压到一个显眼的地方，例如 /usr/local/src/。它将创建以下文件::

       -rw-r--r-- guru/ncm	198 Jan 19 18:53 1995 eql-1.1/NO-WARRANTY
       -rw-r--r-- guru/ncm	30620 Feb 27 21:40 1995 eql-1.1/eql-1.1.patch
       -rwxr-xr-x guru/ncm	16111 Jan 12 22:29 1995 eql-1.1/eql_enslave
       -rw-r--r-- guru/ncm	2195 Jan 10 21:48 1995 eql-1.1/eql_enslave.c

  将最近的内核（1.1.92 之后）解包到方便的位置，例如 /usr/src/linux-1.1.92.eql。使用符号链接指向此开发目录
通过运行命令应用补丁::

       cd /usr/src
       patch </usr/local/src/eql-1.1/eql-1.1.patch


2.2. 构建内核
------------------------

  打完内核补丁后，运行 make config 并根据你的硬件配置内核
配置后，按照你的习惯构建和安装
3. 网络配置
========================

  到目前为止，我只在 Matt Dillon 的 DSLIP SLIP 连接管理器中使用过 EQL 设备（——“将灵魂出售给编码如此迅速的人。”——）。你如何为其他“连接”管理器配置它取决于你自己。我所见过的大多数其他连接管理器在处理多于一个连接时表现不佳。
3.1. /etc/rc.d/rc.inet1
-----------------------

  在 rc.inet1 中，使用 ifconfig 命令将 EQL 设备配置为你通常用于你的机器的 IP 地址以及你偏好的 SLIP 线路的 MTU。可以争论说 MTU 应该大致为两个调制解调器的一半，三个调制解调器的三分之一，四个调制解调器的四分之一等等……但低于 296 太多可能就过度优化了。下面是一个设置 EQL 设备的 ifconfig 命令示例::

       ifconfig eql 198.67.33.239 mtu 1006

  一旦 EQL 设备启动并运行，使用新的 route 语法在路由表中添加一个默认静态路由，使生活变得如此轻松::

       route add default eql


3.2. 手动奴役设备
------------------------------

  手动奴役设备需要两个实用程序：eql_enslave 和 eql_emancipate （—— eql_emancipate 尚未编写，因为当被奴役的设备“死亡”时，它会自动从队列中移除。
我还没有找到一个很好的理由来编写它……除了为了完整性，但这并不是一个好的动机，对吧？--)


设备从属的语法是 "eql_enslave <主设备名> <从设备名> <估计比特率每秒>"。这里有一些从属设备的例子：

       eql_enslave eql sl0 28800
       eql_enslave eql ppp0 14400
       eql_enslave eql sl1 57600

当你想要解除一个设备的从属状态时，你可以通过ifconfig将其关闭（eql会自动处理已关闭的从属设备并将其从队列中移除），或者使用eql_emancipate来释放它。（或者直接用ifconfig关闭它，eql驱动程序将为你处理好一切。）:

       eql_emancipate eql sl0
       eql_emancipate eql ppp0
       eql_emancipate eql sl1


3.3. 对于eql设备的DSLIP配置
-------------------------------------------

一般的想法是根据需要自动建立和维持尽可能多的SLIP连接。
3.3.1.  /etc/slip/runslip.conf
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

以下是一个runslip.conf的示例：

	  name		sl-line-1
	  enabled
	  baud		38400
	  mtu		576
	  ducmd		-e /etc/slip/dialout/cua2-288.xp -t 9
	  command	 eql_enslave eql $interface 28800
	  address	 198.67.33.239
	  line		/dev/cua2

	  name		sl-line-2
	  enabled
	  baud		38400
	  mtu		576
	  ducmd		-e /etc/slip/dialout/cua3-288.xp -t 9
	  command	 eql_enslave eql $interface 28800
	  address	 198.67.33.239
	  line		/dev/cua3


3.4. 使用PPP和eql设备
---------------------------------

我还没有进行任何针对PPP设备的负载均衡测试，主要是因为我没有像DSLIP那样的PPP连接管理器。我确实找到了LinuxNET:Billy提供的一条关于提高PPP性能的好建议：确保你的asyncmap设置合理，以避免控制字符被转义。
我在1995年2月25日至26日的周末（此后被称为8小时PPP仇恨节）尝试修复一个用于重新拨号丢失的PPP连接的PPP脚本/系统，以便与eql驱动程序一起使用。也许今年晚些时候...
4. 关于从属调度算法
======================================

从属调度算法可能可以用其他十几种方法替换，并且能够更快地推送流量。当前驱动程序设置中的公式是为了处理具有极不相同的比特率“优先级”的从属设备而调整的。
我所做的所有测试都是使用两个28.8 V.FC调制解调器进行的，其中一个连接速度为28800 bps或更慢，而另一个则始终以14400 bps的速度连接。
从属调度算法的一个版本能够在28800和14400连接上推送5.3 K/s的数据，但是当链接的优先级差距非常大（例如57600 vs. 14400）时，“更快”的调制解调器接收了所有流量，而“较慢”的调制解调器则被忽视。
5. 测试者的报告
===================

一些人已经使用较新内核（比1.1.75更新）试验了eql设备。我因此更新了驱动程序，使其能在较新的内核中干净地打补丁，这是因为移除了旧的“从属平衡”驱动程序配置选项。
- LinuxNET的icee在1.1.86版中打补丁时没有遇到任何问题，并且能够启动内核并使几个ISDN PPP链接处于从属状态。
5.1. Randolph Bentson的测试报告
-----------------------------------

    来自 bentson@grieg.seaslug.org 的邮件在1995年2月8日19:08:09收到
    发送日期: 1995年2月7日22:57 PST
    发件人: Randolph Bentson <bentson@grieg.seaslug.org>
    收件人: guru@ncm.com
    主题: EQL驱动测试报告

我一直在测试你的eql驱动程序。（做得不错！）虽然你可能已经完成了这些性能测试，但这是我发现的一些数据。
Randolph Bentson
    bentson@grieg.seaslug.org

------------------------------------------------------------------

由Simon Janes编写的伪设备驱动程序EQL可以用来捆绑多个SLIP连接，使其看起来像是单一连接。这允许逐步改进拨号网络连接性，而无需购买昂贵的DSU/CSU硬件和服务。
我已经对这个软件进行了一些测试，目标有两个：首先，确保它能如描述中那样正常工作；其次，作为一种测试我的设备驱动程序的方法。
以下的性能测量数据来源于两个Linux系统（1.1.84版本）之间建立的SLIP连接，使用的硬件是带有Cyclom-8Ys的486DX2/66和带有Cyclom-16Y的486SLC/40（使用了端口0、1、2、3。后续配置将跨板上的不同Cirrus芯片选择端口）。一旦建立了连接，我计时了一个二进制FTP传输，传输的数据量为289284字节。如果没有开销（包头、字符间和包间的延迟等），传输将会花费如下时间：

      比特/秒	秒数
      345600	8.3
      234600	12.3
      172800	16.7
      153600	18.8
      76800	37.6
      57600	50.2
      38400	75.3
      28800	100.4
      19200	150.6
      9600	301.3

一条以较低速度运行且使用大数据包的线路几乎可以达到上述理论值的98%。对于较高比特率的情况（正如Cirrus数据手册所预测的那样），总的吞吐量被限制在大约160 kbit/s。下一轮测试将把负载分散到两个或更多的Cirrus芯片上。
好消息是，可以充分利用第二条、第三条和第四条线路的带宽。坏消息是，在较高比特率的情况下，连接的建立似乎不够稳定。但一旦建立起来，连接似乎足够稳健。

  ======  ========	===  ========   ======= ======= ===
  线路数  速度		MTU  秒数	理论值 实际值  百分比
	  kbit/sec	     持续时间	速度	速度	最大值
  ======  ========	===  ========   ======= ======= ===
  3	  115200	900	_	345600
  3	  115200	400	18.1	345600  159825  46%
  2	  115200	900	_	230400
  2	  115200	600	18.1	230400  159825  69%
  2	  115200	400	19.3	230400  149888  65%
  4	  57600		900	_	234600
  4	  57600		600	_	234600
  4	  57600		400	_	234600
  3	  57600		600	20.9	172800  138413  80%
  3	  57600		900	21.2	172800  136455  78%
  3	  115200	600	21.7	345600  133311  38%
  3	  57600		400	22.5	172800  128571  74%
  4	  38400		900	25.2	153600  114795  74%
  4	  38400		600	26.4	153600  109577  71%
  4	  38400		400	27.3	153600  105965  68%
  2	  57600		900	29.1	115200  99410.3 86%
  1	  115200	900	30.7	115200  94229.3 81%
  2	  57600		600	30.2	115200  95789.4 83%
  3	  38400		900	30.3	115200  95473.3 82%
  3	  38400		600	31.2	115200  92719.2 80%
  1	  115200	600	31.3	115200  92423	80%
  2	  57600		400	32.3	115200  89561.6 77%
  1	  115200	400	32.8	115200  88196.3 76%
  3	  38400		400	33.5	115200  86353.4 74%
  2	  38400		900	43.7	76800	66197.7 86%
  2	  38400		600	44	76800	65746.4 85%
  2	  38400		400	47.2	76800	61289	79%
  4	  19200		900	50.8	76800	56945.7 74%
  4	  19200		400	53.2	76800	54376.7 70%
  4	  19200		600	53.7	76800	53870.4 70%
  1	  57600		900	54.6	57600	52982.4 91%
  1	  57600		600	56.2	57600	51474	89%
  3	  19200		900	60.5	57600	47815.5 83%
  1	  57600		400	60.2	57600	48053.8 83%
  3	  19200		600	62	57600	46658.7 81%
  3	  19200		400	64.7	57600	44711.6 77%
  1	  38400		900	79.4	38400	36433.8 94%
  1	  38400		600	82.4	38400	35107.3 91%
  2	  19200		900	84.4	38400	34275.4 89%
  1	  38400		400	86.8	38400	33327.6 86%
  2	  19200		600	87.6	38400	33023.3 85%
  2	  19200		400	91.2	38400	31719.7 82%
  4	  9600		900	94.7	38400	30547.4 79%
  4	  9600		400	106	38400	27290.9 71%
  4	  9600		600	110	38400	26298.5 68%
  3	  9600		900	118	28800	24515.6 85%
  3	  9600		600	120	28800	24107	83%
  3	  9600		400	131	28800	22082.7 76%
  1	  19200		900	155	19200	18663.5 97%
  1	  19200		600	161	19200	17968	93%
  1	  19200		400	170	19200	17016.7 88%
  2	  9600		600	176	19200	16436.6 85%
  2	  9600		900	180	19200	16071.3 83%
  2	  9600		400	181	19200	15982.5 83%
  1	  9600		900	305	9600	9484.72 98%
  1	  9600		600	314	9600	9212.87 95%
  1	  9600		400	332	9600	8713.37 90%
  ======  ========	===  ========   ======= ======= ===

5.2. 安东尼·希利的报告
---------------------------

  ::

    日期: 1995年2月13日星期一 16:17:29 +1100 (EST)
    发件人: 安东尼·希利 <ahealey@st.nepean.uws.edu.au>
    收件人: 西蒙·詹斯 <guru@ncm.com>
    主题: 关于负载均衡的回复

    嗨西蒙，
    我已经安装了你的补丁，并且它工作得非常好。我在双SL/IP线路之间进行了测试，仅通过直通串口线，但我能够实现超过48Kb/s的数据传输[ISDN链接 - 西蒙]。我实现了最高7.5 Kbyte/s的传输速率，平均下来约为6.4 Kbyte/s，我认为这非常酷。 :)
