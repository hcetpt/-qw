SPDX许可证标识符: GPL-2.0

==========================================
EQL驱动程序：串行IP负载均衡手册
==========================================

西蒙“古鲁亚历夫零”詹斯，simon@ncm.com

v1.1，1995年2月27日

这是EQL设备驱动程序的手册。EQL是一个软件设备，可以让你负载均衡IP串行链路（SLIP或未压缩的PPP），以增加你的带宽。它不会减少你的延迟（即ping时间），除非你已经有大量的流量在链路上，在这种情况下，它可以提供帮助。该驱动程序已经在1.1.75内核上进行了测试，并且已知可以在1.1.86内核上干净地打补丁。对1.1.92内核进行了一些使用v1.1补丁的测试，该补丁仅为了与最新的内核源代码兼容。（是的，运行良好。）

1. 引言
===============

哪个更糟糕？一条56K租用线路的大额费用还是两条电话线？可能是前者。如果你发现自己渴望更多的带宽，并且有一个灵活的ISP，现在可以将调制解调器绑定在一起工作为一个点到点链接，以增加你的带宽。这一切都不需要在两端拥有特殊的黑盒子。
EQL驱动程序仅在Livingston PortMaster-2e终端服务器上进行了测试。我不知道其他终端服务器是否支持负载均衡，但我知道PortMaster支持它，并且几乎和EQL驱动程序一样好。（不幸的是，在我的测试中，Livingston PortMaster 2e的负载均衡比测试机器使用28.8 Kbps和14.4 Kbps连接时慢了1到2 KB/s。不过，我还不确定这是否真的是PortMaster的问题，或者是否是Linux的TCP驱动程序的问题。有人告诉我，Linux的TCP实现相当快。）

我建议ISP们，对于负载均衡客户端来说，公平的做法可能是第二条线收取75%的费用，第三条线收取50%的费用等等。
嘿，我们都可以做做梦嘛。

2. 内核配置
=======================

在此我描述了使内核与EQL驱动程序一起工作的基本步骤，从打补丁、构建到安装。

2.1. 打补丁
------------------------

如果你没有或无法获得包含EQL驱动程序的内核副本，请从ftp://slaughter.ncm.com/pub/Linux/LOAD_BALANCING/eql-1.1.tar.gz获取驱动程序副本。
将此存档解压到一个明显的位置，如/usr/local/src/。它会创建以下文件：

       -rw-r--r-- guru/ncm	198 Jan 19 18:53 1995 eql-1.1/NO-WARRANTY
       -rw-r--r-- guru/ncm	30620 Feb 27 21:40 1995 eql-1.1/eql-1.1.patch
       -rwxr-xr-x guru/ncm	16111 Jan 12 22:29 1995 eql-1.1/eql_enslave
       -rw-r--r-- guru/ncm	2195 Jan 10 21:48 1995 eql-1.1/eql_enslave.c

解压一个较新的内核（例如1.1.92之后的版本）到一个方便的位置，比如/usr/src/linux-1.1.92.eql。使用符号链接将/usr/src/linux指向这个开发目录。
通过运行以下命令来应用补丁：

       cd /usr/src
       patch </usr/local/src/eql-1.1/eql-1.1.patch

2.2. 构建内核
------------------------

打完补丁后，运行make config并根据你的硬件配置内核。
配置完成后，按照习惯进行编译和安装。

3. 网络配置
========================

到目前为止，我只在Matt Dillon的DSLIP SLIP连接管理器中使用过EQL设备。（“出售灵魂以如此快速地编写代码的人。”）如何为其他“连接”管理器配置它取决于你自己。我所见过的大多数其他连接管理器在处理多个连接时表现不佳。

3.1. /etc/rc.d/rc.inet1
-----------------------

在rc.inet1中，使用ifconfig命令将EQL设备设置为你通常用于机器的IP地址以及你偏好的SLIP线路的MTU。有人可能会说，对于两个调制解调器，MTU应该是常规大小的一半；对于三个调制解调器，应该是三分之一；对于四个调制解调器，应该是四分之一，以此类推。但是低于296可能就有点过分了。这里是一个示例ifconfig命令，用于设置EQL设备：

       ifconfig eql 198.67.33.239 mtu 1006

一旦EQL设备启动并运行，使用简化的新route语法在路由表中添加一个静态默认路由：

       route add default eql

3.2. 手动绑定设备
------------------------------

手动绑定设备需要两个实用程序：eql_enslave 和 eql_emancipate （eql_emancipate 尚未编写，因为当被绑定的设备“死亡”时，它会自动从队列中移除）。
我还没有找到一个很好的理由来写它……除了为了完整性，但这并不是一个好的动机，对吧？--)

将设备设置为从属设备的语法是“eql_enslave <master-name> <slave-name> <estimated-bps>”。以下是一些示例：

```
       eql_enslave eql sl0 28800
       eql_enslave eql ppp0 14400
       eql_enslave eql sl1 57600
```

当你想释放一个设备使其摆脱从属状态时，你可以通过ifconfig将其关闭（eql会自动处理这个已死的从属设备并将其从队列中移除），或者使用eql_emancipate来释放它。（或者直接用ifconfig将其关闭，eql驱动程序会为你处理。）：

```
       eql_emancipate eql sl0
       eql_emancipate eql ppp0
       eql_emancipate eql sl1
```

3.3. 用于eql设备的DSLIP配置
-------------------------------------------

大致的想法是根据需要自动建立和保持尽可能多的SLIP连接。

3.3.1. /etc/slip/runslip.conf
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

以下是一个runslip.conf的示例：

```
	  name		sl-line-1
	  enabled
	  baud		38400
	  mtu		576
	  ducmd		-e /etc/slip/dialout/cua2-288.xp -t 9
	  command	 eql_enslave eql $interface 28800
	  address	 198.67.33.239
	  line		/dev/cua2

	  name		sl-line-2
	  enabled
	  baud		38400
	  mtu		576
	  ducmd		-e /etc/slip/dialout/cua3-288.xp -t 9
	  command	 eql_enslave eql $interface 28800
	  address	 198.67.33.239
	  line		/dev/cua3
```

3.4. 使用PPP和eql设备
---------------------------------

对于PPP设备，我没有进行过负载均衡测试，主要是因为我没有像DSLIP那样的连接管理器。我在LinuxNET:Billy那里找到了一条关于PPP性能的好建议：确保你的asyncmap设置得当，这样控制字符不会被转义。
我在1995年2月25-26日的周末尝试修复了一个PPP脚本/系统，以便在丢失PPP连接后重新拨号以配合eql驱动程序使用（此事件被称为8小时PPP仇恨节）。也许今年晚些时候会完成。

4. 关于从属调度算法
======================

从属调度算法可能可以用其他十几个方法替换，从而更快地传输数据。当前驱动程序中的公式是为了处理具有不同比特每秒“优先级”的从属设备而调优的。
我所做的所有测试都是使用两个28.8 V.FC调制解调器进行的，其中一个连接速度为28800 bps或更慢，另一个始终连接速度为14400 bps。
调度算法的一个版本能够在28800和14400连接上推动5.3 K/s的数据量，但当链接之间的优先级差距非常大（例如57600 vs. 14400）时，“更快”的调制解调器接收了所有流量，而“较慢”的调制解调器则被饿死。

5. 测试者的报告
===================

一些人已经用更新的内核（比1.1.75更新）对eql设备进行了实验。我已经更新了驱动程序，以便在新内核中干净地打补丁，因为旧的“从属平衡”驱动程序配置选项已经被移除。
- LinuxNET的icee在1.1.86上打了补丁，并且没有任何拒绝的情况，能够启动内核并将几个ISDN PPP链路设为从属。

5.1. Randolph Bentson的测试报告
-----------------------------------

```
    From bentson@grieg.seaslug.org Wed Feb  8 19:08:09 1995
    Date: Tue, 7 Feb 95 22:57 PST
    From: Randolph Bentson <bentson@grieg.seaslug.org>
    To: guru@ncm.com
    Subject: EQL driver tests


    我一直在测试你的eql驱动程序。（做得不错！）虽然你可能已经做了这些性能测试，但我还是提供了一些我发现的数据。
Randolph Bentson
    bentson@grieg.seaslug.org
```

------------------------------------------------------------------

由Simon Janes编写的伪设备驱动程序EQL可以用于将多个SLIP连接捆绑在一起，使其看起来像是单一连接。这允许逐步改善拨号网络连接，而不必购买昂贵的DSU/CSU硬件和服务。
我已经对这个软件进行了一些测试，目标有两个：首先，确保它能够按描述那样工作；其次，作为一种锻炼我的设备驱动程序的方法。

以下性能测量数据是从两个Linux系统（1.1.84）之间运行的一组SLIP连接得出的，使用的是带有Cyclom-8Ys的486DX2/66和带有Cyclom-16Y的486SLC/40（使用了端口0、1、2、3。稍后的配置将把端口选择分布在板子上的不同Cirrus芯片上）。一旦链路建立，我测量了一个289284字节的数据二进制FTP传输时间。如果没有开销（包头、字符间和包间延迟等），传输所需的时间如下：

      比特/秒     秒
      345600      8.3
      234600     12.3
      172800     16.7
      153600     18.8
      76800      37.6
      57600      50.2
      38400      75.3
      28800     100.4
      19200     150.6
      9600      301.3

在较低速度下且使用大包的情况下，单线传输可以达到理论值的98%。对于较高速度（如Cirrus数据手册预测的那样），总吞吐量限制在大约160千比特/秒。下一轮测试将负载分布在两个或更多的Cirrus芯片上。

好消息是几乎完全利用了第二、第三和第四条线路的带宽。（坏消息是，在较高速度下连接建立似乎不太稳定。一旦建立起来，连接看起来足够稳健。）

======  ========  ===  ========   ======= ======= ===
#线路  速度      MTU  秒数  理论速度 实际速度 百分比
        千比特/秒         持续时间 速度    速度    最大
======  ========  ===  ========   ======= ======= ===
3       115200    900  _          345600
3       115200    400  18.1       345600  159825  46
2       115200    900  _          230400
2       115200    600  18.1       230400  159825  69
2       115200    400  19.3       230400  149888  65
4       57600     900  _          234600
4       57600     600  _          234600
4       57600     400  _          234600
3       57600     600  20.9       172800  138413  80
3       57600     900  21.2       172800  136455  78
3       115200    600  21.7       345600  133311  38
3       57600     400  22.5       172800  128571  74
4       38400     900  25.2       153600  114795  74
4       38400     600  26.4       153600  109577  71
4       38400     400  27.3       153600  105965  68
2       57600     900  29.1       115200  99410.3 86
1       115200    900  30.7       115200  94229.3 81
2       57600     600  30.2       115200  95789.4 83
3       38400     900  30.3       115200  95473.3 82
3       38400     600  31.2       115200  92719.2 80
1       115200    600  31.3       115200  92423   80
2       57600     400  32.3       115200  89561.6 77
1       115200    400  32.8       115200  88196.3 76
3       38400     400  33.5       115200  86353.4 74
2       38400     900  43.7       76800   66197.7 86
2       38400     600  44         76800   65746.4 85
2       38400     400  47.2       76800   61289   79
4       19200     900  50.8       76800   56945.7 74
4       19200     400  53.2       76800   54376.7 70
4       19200     600  53.7       76800   53870.4 70
1       57600     900  54.6       57600   52982.4 91
1       57600     600  56.2       57600   51474   89
3       19200     900  60.5       57600   47815.5 83
1       57600     400  60.2       57600   48053.8 83
3       19200     600  62         57600   46658.7 81
3       19200     400  64.7       57600   44711.6 77
1       38400     900  79.4       38400   36433.8 94
1       38400     600  82.4       38400   35107.3 91
2       19200     900  84.4       38400   34275.4 89
1       38400     400  86.8       38400   33327.6 86
2       19200     600  87.6       38400   33023.3 85
2       19200     400  91.2       38400   31719.7 82
4       9600      900  94.7       38400   30547.4 79
4       9600      400  106        38400   27290.9 71
4       9600      600  110        38400   26298.5 68
3       9600      900  118        28800   24515.6 85
3       9600      600  120        28800   24107   83
3       9600      400  131        28800   22082.7 76
1       19200     900  155        19200   18663.5 97
1       19200     600  161        19200   17968   93
1       19200     400  170        19200   17016.7 88
2       9600      600  176        19200   16436.6 85
2       9600      900  180        19200   16071.3 83
2       9600      400  181        19200   15982.5 83
1       9600      900  305        9600    9484.72 98
1       9600      600  314        9600    9212.87 95
1       9600      400  332        9600    8713.37 90
======  ========  ===  ========   ======= ======= ===

5.2. Anthony Healy的报告
---------------------------

```
日期：1995年2月13日 16:17:29 +1100 (EST)
发件人：Antony Healey <ahealey@st.nepean.uws.edu.au>
收件人：Simon Janes <guru@ncm.com>
主题：Re: 负载均衡

嗨，Simon，
  我安装了你的补丁，效果很好。我在双SL/IP线上进行了测试，只是通过null modem，但我能够以超过48Kb/s的速度传输数据[ISDN链接 - Simon]。我成功地实现了高达7.5 Kbyte/s的传输速度，平均约为6.4 Kbyte/s，我认为这非常棒。 :)
```
