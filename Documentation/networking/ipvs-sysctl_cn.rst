SPDX 许可证标识符: GPL-2.0

===========
IPvs-sysctl
===========

/proc/sys/net/ipv4/vs/* 变量:
==================================

am_droprate - 整数
    默认值 10

    它设置了始终模式下的丢包率，该值用于丢包率防御模式 3 中。

amemthresh - 整数
    默认值 1024

    它设置了可用内存阈值（以页为单位），该值用于自动防御模式。当没有足够的可用内存时，相应的策略将被启用，并且变量会自动设置为 2；否则，策略将被禁用，并且变量设置为 1。

backup_only - 布尔值
    - 0 - 禁用（默认）
    - 非 0 - 启用

    如果设置，则在服务器处于备份模式时禁用调度功能，以避免对于 DR/TUN 方法的数据包循环。

conn_reuse_mode - 整数
    默认值 1

    控制 IPVS 如何处理检测到端口重用的连接。这是一个位图，其值表示如下：

    0: 禁用任何特殊的端口重用处理。新的连接将被发送到处理前一个连接的真实服务器。
    位 1: 在安全的情况下启用新连接的重新调度。即，在 expire_nodest_conn 设置下，以及对于 TCP 套接字，当连接处于 TIME_WAIT 状态时（这只有在使用 NAT 模式时才可能）。
    位 2: 位 1 加上，对于 TCP 连接，当连接处于 FIN_WAIT 状态时，这是负载均衡器在直接路由模式中看到的最后一个状态。此位有助于向非常繁忙的集群添加新的真实服务器。

conntrack - 布尔值
    - 0 - 禁用（默认）
    - 非 0 - 启用

    如果设置，则为 IPVS 处理的连接维护连接跟踪条目。
    
    如果由 IPVS 处理的连接还需要通过有状态防火墙规则处理（例如，使用连接跟踪的 iptables 规则），则应启用此设置。否则，禁用此设置可以优化性能。

    无论此设置如何，由 IPVS FTP 应用模块处理的连接都将具有连接跟踪条目。
仅在编译IPVS时启用了CONFIG_IP_VS_NFCT配置项时可用
cache_bypass - 布尔值
    - 0 - 禁用（默认）
    - 非0 - 启用

    如果启用此功能，当没有缓存服务器且目标地址不是本地地址时（iph->daddr 是 RTN_UNICAST），直接将数据包转发到原始目的地。该功能主要用于透明的Web缓存集群。
debug_level - 整数
    - 0          - 传输错误消息（默认）
    - 1          - 非致命错误消息
    - 2          - 配置
    - 3          - 目标垃圾信息
    - 4          - 删除条目
    - 5          - 服务查找
    - 6          - 调度
    - 7          - 连接新建/过期、查找和同步
    - 8          - 状态转换
    - 9          - 绑定目标、模板检查和应用程序
    - 10         - IPVS数据包传输
    - 11         - IPVS数据包处理（ip_vs_in/ip_vs_out）
    - 12 或更高 - 数据包遍历

    仅在编译IPVS时启用了CONFIG_IP_VS_DEBUG配置项时可用
更高的调试级别包含较低级别的消息，因此设置调试级别为2时，包含级别0、1和2的消息。因此，级别越高，日志记录越详细。
drop_entry - 整数
    - 0  - 禁用（默认）

    drop_entry防御机制是随机删除连接哈希表中的条目，以便回收一些内存用于新连接。在当前代码中，drop_entry过程可以每秒激活一次，然后随机扫描整个哈希表的1/32，并删除处于SYN-RECV/SYNACK状态的条目，这应该能有效对抗SYN泛洪攻击。
drop_entry的有效值范围是从0到3，其中0表示始终禁用此策略；1和2表示自动模式（当可用内存不足时，启用此策略并将变量自动设置为2，否则禁用此策略并将变量设置为1）；3表示始终启用此策略。
drop_packet - 整数
    - 0  - 禁用（默认）

    drop_packet防御机制设计为在转发数据包到真实服务器之前丢弃1/rate的数据包。如果rate为1，则丢弃所有传入的数据包。
drop_packet的值定义与drop_entry相同。在自动模式下，rate由以下公式确定：rate = amemthresh / (amemthresh - available_memory)，当可用内存小于可用内存阈值时。当设置模式3时，始终模式下的丢弃率由/proc/sys/net/ipv4/vs/am_droprate控制。
est_cpulist - CPU列表
    允许的kthreads使用的CPU

    语法：标准CPU列表格式
    空列表 - 停止kthread任务和估计
    默认 - 系统为kthreads分配的维护CPU

    示例：
    "all"：所有可能的CPU
    "0-N"：所有可能的CPU，N表示最后一个CPU编号
    "0,1-N:1/2"：第一个和所有奇数编号的CPU
    ""：空列表

est_nice - 整数
    默认0
    有效范围：-20（更优先）.. 19（较不优先）

    用于估计kthreads的nice值（调度优先级）

expire_nodest_conn - 布尔值
    - 0 - 禁用（默认）
    - 非0 - 启用

    默认值为0，负载均衡器会在其目标服务器不可用时静默地丢弃数据包。这在用户空间监控程序删除目标服务器（由于服务器过载或误检测）并在稍后添加回来时可能会有用，此时连接可以继续。
如果启用了此功能，负载均衡器会在数据包到达且目标服务器不可用时立即过期连接，然后客户端程序会收到通知，告知连接已关闭。这相当于一些人要求的功能，即在目标不可用时清除连接。
### expire_quiescent_template - BOOLEAN
- **0** - 禁用（默认）
- **非 0** - 启用

当设置为非零值时，负载均衡器会在目标服务器处于静默状态时过期持久性模板。  
这在用户通过将目标服务器的权重设置为 0 来使其进入静默状态，并且希望后续其他持久性连接被发送到不同的目标服务器时可能是有用的。默认情况下，允许向静默的目标服务器建立新的持久性连接。如果启用了此功能，负载均衡器将在使用持久性模板调度新连接且目标服务器处于静默状态时过期该持久性模板。

### ignore_tunneled - BOOLEAN
- **0** - 禁用（默认）
- **非 0** - 启用

如果设置，IPVS 将为所有不可识别协议的数据包设置 `ipvs_property`。这可以防止我们路由像 `ipip` 这样的隧道协议，有助于避免将数据包重新调度到 IPVS 主机（即防止 IPVS 路由环路，尤其是在 IPVS 同时作为真实服务器的情况下）。

### nat_icmp_send - BOOLEAN
- **0** - 禁用（默认）
- **非 0** - 启用

它控制是否发送 ICMP 错误消息（ICMP_DEST_UNREACH），当负载均衡器从真实服务器接收数据包但连接条目不存在时。

### pmtu_disc - BOOLEAN
- **0** - 禁用
- **非 0** - 启用（默认）

默认情况下，无论转发方法如何，拒绝所有超过 PMTU 的 DF 数据包，并标记为 `FRAG_NEEDED`。对于 TUN 方法，可以通过禁用此标志来分片这些数据包。

### secure_tcp - INTEGER
- **0** - 禁用（默认）

`secure_tcp` 防御措施是使用更复杂的 TCP 状态转换表。对于 VS/NAT，它还延迟进入 TCP 建立状态（TCP ESTABLISHED），直到完成三次握手。

此值的定义与 `drop_entry` 和 `drop_packet` 相同。

### sync_threshold - 整数向量：sync_threshold, sync_period
- 默认值：3 50

它设置了同步阈值，即连接需要接收的最小数据包数量，在连接将被同步之前。每当连接的数据包数量模 `sync_period` 等于阈值时，连接将被同步。阈值范围是从 0 到 `sync_period`。

当 `sync_period` 和 `sync_refresh_period` 为 0 时，仅在状态改变或数据包数量匹配 `sync_threshold` 时发送同步信息。

### sync_refresh_period - 无符号整数
- 默认值：0

以秒为单位，触发新同步消息的报告连接计时器差异。如果自上次同步以来连接状态未改变，则可以在指定的时间段内（或连接超时的一半，如果较短）避免发送同步消息。
这在高流量的常规连接中减少同步率方面非常有用。此外，以 `sync_refresh_period/8` 的周期重试 `sync_retries` 次。

- `sync_retries` - 整数
  - 默认值：0
  - 定义了以 `sync_refresh_period/8` 周期进行的同步重试次数。有助于防止同步消息丢失。`sync_retries` 的范围是从 0 到 3。
  
- `sync_qlen_max` - 无符号长整型
  - 队列中尚未发送的同步消息的硬限制。默认值为内存页数量的 1/32，但实际上表示的是消息的数量。当发送速率低于队列速率时，它可以保护我们不分配大量内存。

- `sync_sock_size` - 整数
  - 默认值：0
  - 设置 SNDBUF（主节点）或 RCVBUF（备节点）套接字的大小限制。默认值是 0（保留系统默认值）。

- `sync_ports` - 整数
  - 默认值：1
  - 主服务器和备份服务器用于同步流量的线程数量。每个线程将使用一个 UDP 端口，线程 0 将使用默认端口 8848，最后一个线程将使用端口 8848 + `sync_ports` - 1。

- `snat_reroute` - 布尔值
  - 0 - 禁用
  - 不为 0 - 启用（默认）
  - 如果启用，则重新计算从真实服务器发出的 SNAT 包的路由，使其看起来像是从调度器发出的。否则，它们将被视为由调度器转发的。
  - 如果启用了策略路由，则可能从调度器发出的数据包的路由与被调度器转发的数据包的路由不同。
  - 如果未启用策略路由，则重新计算的路由始终与原始路由相同，因此禁用 `snat_reroute` 可以避免重新计算，从而优化性能。

- `sync_persist_mode` - 整数
  - 默认值：0
  - 控制使用持久性时的连接同步。
  - 0：所有类型的连接都进行同步。
  - 1：根据连接类型尝试减少同步流量。对于持久性服务，避免对常规连接进行同步，只对持久性模板进行同步。
在这种情况下，对于TCP和SCTP，可能需要在备用服务器上启用`sloppy_tcp`和`sloppy_sctp`标志。对于非持久性服务，这种优化不会应用，默认认为是模式0。

`sync_version` - 整数
默认值 1

发送同步消息时使用的同步协议版本。
- 0 选择原始同步协议（版本0）。这应该用于向仅理解原始同步协议的遗留系统发送同步消息。
- 1 选择当前同步协议（版本1）。这应在可能的情况下使用。

具有此`sync_version`条目的内核能够接收同步协议版本1和版本2的消息。

`run_estimation` - 布尔值
- 0 - 禁用
- 不为0 - 启用（默认）

如果禁用，则估算将被暂停，并且kthread任务将停止。
您可以通过将此值设置为1来随时重新启用估算，但请注意，重新启用后的第一次估算是不准确的。
