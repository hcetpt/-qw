... SPDX 许可证标识符: GPL-2.0

====================
细流与TCP
====================

使用可靠传输协议的互联网服务广泛表现出我们所称的细流特性。这意味着应用程序以如此低的数据发送速率运行，以至于传输协议的重传机制无法完全发挥效果。在时间依赖型场景（如在线游戏、控制系统、股票交易等）中，用户体验取决于数据交付的延迟，因此丢包可能会对服务质量造成毁灭性影响。极端的延迟是由TCP依赖于应用层新数据的到来来触发快速重传机制而不是等待长时间超时造成的。
通过对大量时间依赖型交互式应用进行分析后，我们发现它们通常会产生细流，并且在整个生命周期中都保持这种流量模式。时间依赖性与细流导致使用TCP时出现高延迟的结合是不幸的。
为了减少丢包情况下的应用层延迟，已经制定了一系列机制，这些机制针对细流的延迟问题。简而言之，如果内核检测到细流，则按照以下方式修改重传机制：

1) 如果流为细流，在第一个重复确认（dupACK）时启动快速重传
2) 如果流为细流，不适用指数退避
这些改进仅在检测到细流时才应用。这是通过定义飞行中的数据包数量阈值来实现的。如果飞行中的数据包少于4个，则无法触发快速重传，流将可能经历高重传延迟。
由于这些机制针对的是时间依赖型应用，必须由应用专门激活使用 `TCP_THIN_LINEAR_TIMEOUTS` 和 `TCP_THIN_DUPACK` 的IOCTLs或者 `tcp_thin_linear_timeouts` 和 `tcp_thin_dupack` 的sysctls。两种修改默认情况下都是关闭的。

参考文献
==========
关于这些修改的更多信息以及广泛的实验数据可以在这里找到：

"提高基于可靠传输的互动式细流应用的延迟"
http://simula.no/research/nd/publications/Simula.nd.477/simula_pdf_file
