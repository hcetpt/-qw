SPDX 许可证标识符: GPL-2.0

====================
细流与 TCP
====================

许多使用可靠传输协议的基于互联网的服务表现出我们称之为细流（thin-stream）的特性。这意味着应用程序发送数据的速率如此之低，以至于传输协议的重传机制无法充分发挥作用。在时间依赖型场景中（如在线游戏、控制系统、股票交易等），用户体验取决于数据传输延迟，因此丢包会对服务质量造成毁灭性的影响。极端延迟是由于 TCP 需要等待新数据从应用层到达以触发快速重传机制，而不是等待长时间的超时。

经过对大量时间依赖型交互式应用的分析，我们发现它们通常会产生细流，并且在整个生命周期中保持这种流量模式。时间依赖性和细流导致高延迟的结合是非常不幸的。为了减少在丢包情况下的应用层延迟，已经制定了一套机制来解决细流中的延迟问题。简而言之，如果内核检测到一个细流，则会按照以下方式修改重传机制：

1) 如果流是细流，在第一个重复确认（dupACK）时启用快速重传。
2) 如果流是细流，不采用指数退避。

这些增强措施仅在检测到细流时生效。这是通过定义飞行中的数据包数量阈值来实现的。如果飞行中的数据包少于 4 个，则无法触发快速重传，流可能会经历高重传延迟。由于这些机制针对的是时间依赖型应用，必须由应用通过使用 `TCP_THIN_LINEAR_TIMEOUTS` 和 `TCP_THIN_DUPACK` 的 IOCTLS 或 `tcp_thin_linear_timeouts` 和 `tcp_thin_dupack` 的 sysctls 明确激活。默认情况下，这两种修改都是关闭的。

参考文献
==========
关于这些修改的更多信息以及广泛的实验数据可以在这里找到：

“改进基于可靠传输的交互式细流应用的延迟”
http://simula.no/research/nd/publications/Simula.nd.477/simula_pdf_file
