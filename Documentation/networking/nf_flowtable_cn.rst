SPDX 许可证标识符: GPL-2.0

====================================
Netfilter 的流表基础设施
====================================

此文档描述了 Netfilter 的流表基础设施，该基础设施允许您定义一个通过流表数据路径的快速路径。此基础设施还提供了硬件卸载支持。流表支持第 3 层的 IPv4 和 IPv6 以及第 4 层的 TCP 和 UDP 协议。
概述
--------

一旦一个流的第一个数据包成功通过 IP 转发路径后，从第二个数据包开始，您可能决定将该流通过规则集卸载到流表中。流表基础设施提供了一个规则动作，允许您指定何时将流添加到流表中。如果一个数据包在流表中找到匹配项（即流表命中），则该数据包将通过 neigh_xmit() 传输到输出网络设备，因此这些数据包绕过了传统的 IP 转发路径（可见的效果是您不会从任何后入站的 Netfilter 钩子中看到这些数据包）。如果流表中没有匹配项（即流表未命中），则该数据包将继续遵循传统的 IP 转发路径。

流表使用了一个可调整大小的哈希表。查找基于以下 n 元组选择器：第 2 层协议封装（VLAN 和 PPPoE）、第 3 层源和目标、第 4 层源和目标端口以及输入接口（在存在多个连接跟踪区域的情况下有用）。

“flow add” 动作允许您填充流表，用户有选择地指定哪些流被放置到流表中。因此，除非用户明确通过策略指示流使用这个新的替代转发路径，否则数据包将遵循传统的 IP 转发路径。

流表数据路径如图 1 所示，该图描述了包括 Netfilter 钩子和流表快速路径绕过的传统 IP 转发路径：
```
                         用户空间进程
                              ^              |
                              |              |
                             _____|____     ____\/___
                            /          \   /         \
                            |   输入   |  |  输出  |
                            \__________/   \_________/
                                 ^               |
                                 |               |
       _________      __________      ---------     _____\/_____
      /         \    /          \     |路由决策|   /            \
  -->  入站  ---> 预路由 ---> |        |   | postrouting |--> neigh_xmit
      \_________/    \__________/     ----------   \____________/          ^
        |      ^                          |               ^                |
   流表  |                     ____\/___            |                |
        |                    /         \           |                |
    __\/___   |                    | 转发 |------------                |
    |-----|   |                    \_________/                            |
    |-----|   |                 '流卸载' 规则                           |
    |-----|   |                   将条目添加到                           |
    |_____|   |                     流表                                 |
        |      |                                                           |
       / \     |                                                           |
      /命中\未命中_|                                                           |
      \ ? /                                                                |
       \ /                                                                 |
        |__是_________________快速路径绕过 ____________________________|

	       图 1 Netfilter 钩子和流表交互

流表条目还存储 NAT 配置，因此所有数据包都将根据传统 IP 转发路径中指定的 NAT 策略进行修改。在调用 neigh_xmit() 之前，TTL 已经递减。分片流量将传递以遵循传统 IP 转发路径，因为缺少传输层报头，在这种情况下，无法执行流表查找。

TCP RST 和 FIN 数据包也会被传递到传统 IP 转发路径中以优雅地释放流。超过 MTU 的数据包也会被传递到传统转发路径中，以便向发送者报告包太大（ICMP 错误）。

示例配置
---------------------

启用流表绕过相对简单，您只需创建一个流表并向前链添加一条规则：

```
表 inet x {
	流表 f {
		钩子 入站 优先级 0; 设备 = { eth0, eth1 };
	}
	链 y {
		类型 过滤 钩子 转发 优先级 0; 策略 接受;
		ip 协议 tcp 流 add @f
		计数器 数据包 0 字节 0
	}
}
```

此示例将流表 'f' 添加到了 eth0 和 eth1 网络设备的入站钩子中。您可以根据需要创建任意数量的流表来进行资源分区。流表优先级定义了钩子在管道中的运行顺序，这在您已经有 nftables 入站链时很方便（确保流表优先级小于 nftables 入站链，这样流表可以在管道中先运行）。

前链 'y' 中的 '流卸载' 动作为回复方向的 TCP syn-ack 数据包在流表中添加了一个条目。一旦流被卸载，您会发现上面示例中的计数器规则不会为通过转发绕过的数据包更新。
你可以通过 [OFFLOAD] 标签识别卸载的流，当你列出你的连接跟踪表时：

	# conntrack -L
	tcp      6 src=10.141.10.2 dst=192.168.10.2 sport=52728 dport=5201 src=192.168.10.2 dst=192.168.10.1 sport=5201 dport=52728 [OFFLOAD] mark=0 use=2

第二层封装
---------------------

自从 Linux 内核 5.13 版本以来，流表基础设施能够发现 VLAN 和 PPPoE 网络设备背后的真正网络设备。流表软件数据路径解析 VLAN 和 PPPoE 的第二层头部，以提取以太类型和 VLAN ID / PPPoE 会话 ID，这些信息用于流表查找。流表数据路径还处理第二层解封装。你不需要将 PPPoE 和 VLAN 设备添加到你的流表中，而是仅需添加真正的设备就足够让流表追踪你的流。

桥接和 IP 转发
------------------------

自从 Linux 内核 5.13 版本以来，你可以将桥接端口添加到流表中。流表基础设施可以发现桥接设备后面的拓扑结构。这使得流表能够在桥接端口（在下面的例子图中表示为 eth1 和 eth2）与网关设备（表示为 eth0）之间定义一个快速路径。
::

                      快速路径绕过
               .-------------------------
/                           \
              |           IP 转发        |
              |          /             \ /\
              |       br0               eth0 ..... eth0
              .       / \                          *主机 B*
               -> eth1  eth2
                   .           *交换机/路由器*

eth0
               *主机 A*

流表基础设施还支持桥接 VLAN 过滤操作，如 PVID 和未标记。你也可以在桥接端口上叠加传统的 VLAN 设备。
如果你想让你的流表在桥接端口和 IP 转发路径之间定义一个快速路径，你需要将你的桥接端口（由实际的网络设备表示）添加到你的流表定义中。

计数器
--------

流表可以通过在流表定义中指定计数语句来与现有的连接跟踪条目的包和字节计数进行同步，例如：
```
表 inet x {
    流表 f {
        钩子 ingress 优先级 0；设备 = {eth0, eth1}；
        计数器
    }
}

自 Linux 内核 5.7 起，计数器功能可用。
硬件卸载
---------

如果您的网络设备提供了硬件卸载支持，您可以通过在流表定义中使用 'offload' 标志来启用它，例如：

```
表 inet x {
    流表 f {
        钩子 ingress 优先级 0；设备 = {eth0, eth1}；
        标志 offload；
    }
}

有一个工作队列将流添加到硬件。请注意，在工作队列有机会将流卸载到网络设备之前，可能仍有少量数据包通过流表的软件路径处理。
您可以通过 [HW_OFFLOAD] 标签识别已卸载到硬件的流，当列出您的连接跟踪表时。请注意，[OFFLOAD] 标签指的是软件卸载模式，因此 [OFFLOAD] 指的是软件流表快速路径，而 [HW_OFFLOAD] 指的是流使用的硬件卸载数据路径。
流表硬件卸载基础设施还支持 DSA（分布式交换架构）。
限制
-----------

流表表现得像一个缓存。如果目标 MAC 地址或用于传输的出站网卡发生变化，流表条目可能会变得陈旧。
这可能会成为问题的情况包括：

- 您在软件模式下运行流表，并且在配置中结合了桥接和 IP 转发
- 启用了硬件卸载
进一步阅读
------------

本文档基于 LWN.net 文章 [1]_[2]_。Rafal Milecki 还制作了一个非常完整和详尽的总结，名为“网络加速的状态”，描述了在此基础设施被合并前的情况 [3]_，并对此项工作的概要进行了粗略总结 [4]_。
.. [1] https://lwn.net/Articles/738214/
.. [2] https://lwn.net/Articles/742164/
.. [3] http://lists.infradead.org/pipermail/lede-dev/2018-January/010830.html
.. [4] http://lists.infradead.org/pipermail/lede-dev/2018-January/010829.html
```
