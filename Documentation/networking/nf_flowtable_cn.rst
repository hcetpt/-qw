### SPDX 许可证标识符：GPL-2.0

====================================
Netfilter 的流表基础设施
====================================

本文档描述了 Netfilter 的流表基础设施，它允许您定义一个通过流表数据路径的快速路径。该基础设施还提供了硬件卸载支持。流表支持第 3 层的 IPv4 和 IPv6 以及第 4 层的 TCP 和 UDP 协议。
概述
--------

一旦某个流的第一个数据包成功通过 IP 转发路径后，从第二个数据包开始，您可能会决定将该流通过规则集卸载到流表中。流表基础设施提供了一个规则动作，允许您指定何时将一个流添加到流表中。

找到与流表匹配条目的数据包（即“流表命中”）会通过 `neigh_xmit()` 发送到输出网络设备，因此这些数据包绕过了传统的 IP 转发路径（可见效果是您不会从任何在入口之后的 Netfilter 钩子看到这些数据包）。如果在流表中没有找到匹配的条目（即“流表未命中”），数据包则遵循传统的 IP 转发路径。

流表使用了一个可调整大小的哈希表。查找基于以下 n-元组选择器：第 2 层协议封装（VLAN 和 PPPoE）、第 3 层源和目标、第 4 层源和目标端口以及输入接口（在存在多个连接跟踪区域的情况下很有用）。

“添加流”动作允许您填充流表，用户可以选择性地指定哪些流放入流表。因此，除非用户通过策略明确指示某些流使用这个新的替代转发路径，否则数据包遵循传统的 IP 转发路径。

图 1 描述了流表数据路径，其中包括传统的 IP 转发路径、Netfilter 钩子以及流表快速路径的旁路：
:: 

					 用户空间进程
					  ^              |
					  |              |
				     _____|____     ____\/___
				    /          \   /         \
				    |   输入   |  |  输出  |
				    \__________/   \_________/
					 ^               |
					 |               |
      _________      __________      ---------     _____\/_____
     /         \    /          \     |路由 |   /            \
  -->  入口  ---> 预路由 ---> |决策|   | 后路由 |--> neigh_xmit
     \_________/    \__________/     ----------   \____________/          ^
       |      ^                          |               ^                |
   流表  |                     ____\/___            |                |
       |      |                    /         \           |                |
    __\/___   |                    | 转发 |------------                |
    |-----|   |                    \_________/                            |
    |-----|   |                 '流卸载' 规则                       |
    |-----|   |                   添加条目到                           |
    |_____|   |                     流表                             |
       |      |                                                           |
      / \     |                                                           |
     /命中原\_|                                                           |
     \ ? /                                                                |
      \ /                                                                 |
       |__是_________________快速路径旁路 ____________________________|

	       图 1 Netfilter 钩子与流表交互

流表条目也存储了 NAT 配置，因此所有数据包都会根据从传统 IP 转发路径指定的 NAT 策略进行修改。在调用 `neigh_xmit()` 之前会递减 TTL。分片流量会被传递以遵循传统的 IP 转发路径，因为缺少传输层头部，在这种情况下无法进行流表查找。

TCP RST 和 FIN 数据包也会被传递到传统的 IP 转发路径以优雅地释放流。超出 MTU 的数据包也被传递到传统的转发路径以向发送者报告数据包过大 ICMP 错误。
示例配置
---------------------

启用流表旁路相对简单，您只需要创建一个流表并为您的转发链添加一条规则：

```plaintext
	table inet x {
		flowtable f {
			hook 入口 优先级 0; 设备 = { eth0, eth1 };
		}
		chain y {
			type 过滤 hook 转发 优先级 0; 策略 接受;
			ip 协议 tcp 添加流 @f
			计数 帧 0 字节 0
		}
	}
```

此示例将流表 'f' 添加到 eth0 和 eth1 网络设备的入口钩子中。如果您需要执行资源分区，可以创建任意数量的流表。流表优先级定义了管道中钩子运行的顺序，这在您已经有一个 nftables 入口链时非常方便（确保流表优先级小于 nftables 入口链的优先级，以便流表在管道中先运行）。

来自转发链 'y' 的“流卸载”动作将一个条目添加到流表中，用于回复方向的 TCP SYN-ACK 数据包。一旦流被卸载，您会注意到上面示例中的计数规则不会为通过转发旁路转发的数据包更新。
您可以借助 [OFFLOAD] 标签识别已卸载的流，方法是在列出连接跟踪表时查看：

	# conntrack -L
	tcp      6 src=10.141.10.2 dst=192.168.10.2 sport=52728 dport=5201 src=192.168.10.2 dst=192.168.10.1 sport=5201 dport=52728 [OFFLOAD] mark=0 use=2


第二层封装
---------------------

自 Linux 内核 5.13 版本起，流表基础设施能够发现位于 VLAN 和 PPPoE 网络设备背后的真正网络设备。流表软件数据路径解析 VLAN 和 PPPoE 第二层报头，以提取以太类型和 VLAN ID / PPPoE 会话 ID，这些信息用于流表查找。流表数据路径还处理第二层解封装。
您无需将 PPPoE 和 VLAN 设备添加到流表中；相反，使用真实的设备就足够了，这样流表就能够追踪您的流。

桥接与 IP 转发
------------------------

自 Linux 内核 5.13 版本起，您可以将桥接端口添加到流表中。流表基础设施能够发现桥接设备背后的拓扑结构。这使得流表能够在您的交换机/路由器中的桥接端口（下图示例中表示为 eth1 和 eth2）与网关设备（表示为 eth0）之间定义快速路径。
::

                      快速路径绕过
               .-------------------------
/                           \
              |           IP 转发         |
              |          /             \ \/
              |       br0               eth0 ..... eth0
              .       / \                          *主机 B*
               -> eth1  eth2
                   .           *交换机/路由器*

eth0
               *主机 A*

流表基础设施也支持桥接 VLAN 过滤操作，例如 PVID 和无标签。您还可以在桥接端口上叠加传统 VLAN 设备。
如果您希望流表在桥接端口和 IP 转发路径之间定义快速路径，您需要将桥接端口（由实际的网络设备表示）添加到您的流表定义中。

计数器
--------

通过在您的流表定义中指定计数器语句，流表可以与现有的连接跟踪条目的包和字节计数进行同步，例如：
```plaintext
表 inet x {
    流表 f {
        钩子 ingress 优先级 0；设备 = {eth0, eth1}；
        计数器
    }
}

自 Linux 内核 5.7 版本起，计数器功能可用。
硬件卸载
---------

如果您的网络设备提供了硬件卸载支持，您可以通过在流表定义中添加 'offload' 标志来启用它，例如：
::
    表 inet x {
        流表 f {
            钩子 ingress 优先级 0；设备 = {eth0, eth1}；
            标志 offload；
        }
    }

有一个工作队列用于将流添加到硬件。请注意，在工作队列有机会将流卸载到网络设备之前，可能仍有少量数据包通过流表的软件路径处理。
您可以通过在列出连接跟踪表时显示的 [HW_OFFLOAD] 标签来识别已进行硬件卸载的流。请注意，[OFFLOAD] 标签指的是软件卸载模式，因此 [OFFLOAD] 指的是软件流表快速路径，而 [HW_OFFLOAD] 指的是流使用的硬件卸载数据路径。
流表硬件卸载基础设施还支持 DSA（分布式交换架构）。

限制
----

流表的行为类似于缓存。如果目的地 MAC 地址或用于传输的出口网络设备发生变化，则流表条目可能会变得过时。
这可能会成为一个问题：

- 如果您在软件模式下运行流表，并且在您的设置中结合使用了桥接和 IP 转发
- 如果启用了硬件卸载

更多阅读
--------

本文档基于 LWN.net 文章 [1]_[2]_。Rafal Milecki 还制作了一个非常完整和全面的总结，名为“网络加速的状态”，描述了在此基础设施被主并前的情况 [3]_，同时也对此工作进行了大致总结 [4]_。
.. [1] https://lwn.net/Articles/738214/
.. [2] https://lwn.net/Articles/742164/
.. [3] http://lists.infradead.org/pipermail/lede-dev/2018-January/010830.html
.. [4] http://lists.infradead.org/pipermail/lede-dev/2018-January/010829.html
```
