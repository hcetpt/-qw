网络动态中断调节 (Net DIM) - 通用网络动态中断调节机制

:作者: Tal Gilboa <talgi@mellanox.com>

目录
==

假设前提
=======

本文档假设读者具备网络驱动程序的基本知识以及对一般中断调节有基本的了解。

简介
====

在网络领域中的动态中断调节 (DIM) 指的是为了优化数据包处理而改变通道的中断调节配置。该机制包括一个算法，它决定是否以及如何改变通道的调节参数，通常是通过对系统运行时采样的数据进行分析来完成的。Net DIM 就是这样一种机制。在每次迭代中，它分析一组给定的数据样本，并将其与前一次样本进行比较；如果需要，它可以决定更改部分中断调节配置字段。数据样本由带宽、数据包数量和事件数量组成。两次采样之间的时间间隔也被测量。Net DIM 将当前数据与之前的数据进行比较，并返回一个调整后的中断调节配置对象。在某些情况下，算法可能决定不作任何改变。配置字段包括事件之间的最小允许持续时间（微秒）和每个事件所需的最多数据包数量。Net DIM 算法更重视提高带宽而不是降低中断率。

Net DIM 算法
==========

Net DIM 算法的每次迭代遵循以下步骤：

1. 计算新的数据样本。
2. 将其与之前的样本进行比较。
3. 做出决策——提出中断调节配置建议。
4. 应用调度工作函数，执行所建议的配置。

前两个步骤非常直接：新的和之前的样本都由注册到 Net DIM 的驱动程序提供。之前的样本就是上一次迭代中新提供的数据。比较步骤检查新旧数据之间的差异，并据此决定最后一个步骤的结果。

如果带宽增加，则认为该步骤结果为“更好”；如果带宽减少，则结果为“更差”。如果没有带宽变化，则以类似方式比较数据包速率——增加视为“更好”，减少视为“更差”。

如果数据包速率也没有变化，则比较中断率。在这里，算法试图优化较低的中断率，因此中断率的增加被视为“更差”，而减少则被视为“更好”。步骤 2 中有一个优化措施，即只有当样本间的差异超过一定百分比时才将其视为有效。此外，由于 Net DIM 本身不进行任何测量，它假定驱动程序提供的数据是有效的。

步骤 3 根据步骤 2 的结果及算法内部状态来决定建议的配置。这些状态反映了算法的“方向”：它是向左移动（减少调节），向右移动（增加调节），还是保持不动。另一个优化是在多次做出保持不变的决定后，算法迭代之间的间隔会增加，以减少计算开销。此外，在最左侧或最右侧决策“停放”后，算法可能会决定通过向相反方向迈出一步来验证这一决策。这样做是为了避免陷入“深度睡眠”的情形。一旦做出决策，就会从预定义的配置文件中选择一个中断调节配置。
最后一步是通知已注册的驱动程序它应当应用建议的配置。这是通过调度一个工作函数来完成的，该工作函数由Net DIM API定义并由已注册的驱动程序提供。

如你所见，Net DIM本身并不主动与系统交互。如果向其提供了错误的数据，它将难以做出正确的决策；如果没有工作函数来应用建议的配置，则会变得毫无用处。然而，这确实为已注册的驱动程序提供了一定的操作空间，因为它可以在某些条件下提供部分数据或忽略算法建议。

### 将网络设备注册到DIM

#### Net DIM API暴露了主要函数`net_dim()`

此函数是Net DIM算法的入口点，并且每当驱动程序想要检查是否需要更改中断节制参数时都必须调用此函数。驱动程序应当提供两个数据结构：`:c:type::struct dim <dim>` 和 `:c:type::struct dim_sample <dim_sample>`。`:c:type::struct dim <dim>` 描述了特定对象（如接收队列、发送队列、其他队列等）的DIM状态。这包括当前选定的配置文件、之前的样本数据、由驱动程序提供的回调函数等。`:c:type::struct dim_sample <dim_sample>` 描述了一个样本数据，它将与存储在`:c:type::struct dim <dim>` 中的样本数据进行比较以决定算法的下一步行动。样本应包括由驱动程序测量的字节数、数据包数和中断数。

为了从网络驱动程序中使用Net DIM，驱动程序需要调用主`net_dim()`函数。推荐的方法是在每个中断上调用`net_dim()`。由于Net DIM具有内置的节制功能，并且可能在某些条件下决定跳过迭代，因此无需对`net_dim()`调用本身进行节制。如上所述，驱动程序需要向`net_dim()`函数调用提供一个`:c:type::struct dim <dim>`类型的对象。建议每个使用Net DIM的实体在其数据结构中包含一个`:c:type::struct dim <dim>`，并将其作为主要的Net DIM API对象。

`:c:type::struct dim_sample <dim_sample>`应当持有最新的字节数、数据包数和中断计数。无需执行任何计算，只需包含原始数据即可。

`net_dim()`调用本身不会返回任何内容。相反，Net DIM依赖于驱动程序提供一个回调函数，当算法决定更改中断节制参数时会调用这个回调函数。这个回调将在单独的线程中被安排和运行，以避免给数据流增加开销。工作完成后，Net DIM算法需要设置到适当的状态以便进入下一个迭代。

### 示例

以下代码展示了如何将驱动程序注册到Net DIM。实际使用并不完整，但应该能让您清楚地了解使用方法。
```c
#include <linux/dim.h>

/* 当Net DIM决定更改节制时要调度的回调 */
void my_driver_do_dim_work(struct work_struct *work)
{
    /* 从struct work_struct获取struct dim */
    struct dim *dim = container_of(work, struct dim,
                                   work);
    /* 执行与中断节制相关的操作 */
    ..
```
### 网络 DIM 工作完成，应进入下一轮迭代
    dim->state = DIM_START_MEASURE;
  }

  /* 我的驱动程序中断处理函数 */
  int my_driver_handle_interrupt(struct my_driver_entity *my_entity, ...)
  {
    ...
    /* 一个结构体用于保存当前测量的数据 */
    struct dim_sample dim_sample;
    ...
    /* 使用当前数据初始化数据样本结构体 */
    dim_update_sample(my_entity->events,
                      my_entity->packets,
                      my_entity->bytes,
                      &dim_sample);
    /* 调用网络 DIM */
    net_dim(&my_entity->dim, dim_sample);
    ...
  }

  /* 我的实体初始化函数（my_entity 已经被分配） */
  int my_driver_init_my_entity(struct my_driver_entity *my_entity, ...)
  {
    ...
    /* 使用我的驱动程序回调函数初始化 work_struct 结构体 */
    INIT_WORK(&my_entity->dim.work, my_driver_do_dim_work);
    ...
  }

### 调整 DIM
####

网络 DIM 适用于一系列网络设备，并提供了出色的加速效果。然而，已经观察到某些预设配置的 DIM 可能无法与网络设备的多样规格无缝匹配，这种不匹配被认为是 DIM 启用的网络设备性能欠佳的一个因素，这与配置文件的不匹配有关。

为了解决这一问题，网络 DIM 引入了针对每台设备的控制功能，以修改和访问设备的 `rx-profile` 和 `tx-profile` 参数：
假设目标网络设备名为 ethx，并且 ethx 仅声明支持 RX 配置文件设置并支持修改 `usec` 字段和 `pkts` 字段（参见数据结构：`struct dim_cq_moder <dim_cq_moder>`）
您可以使用 ethtool 来修改当前 RX DIM 配置文件，其中所有值均为 64：

    $ ethtool -C ethx rx-profile 1,1,n_2,2,n_3,n_n,4,n_n,n,n

`n` 表示不修改该字段，而 `_` 用于分隔配置文件数组中的结构元素。
查询当前配置文件可使用：

    $ ethtool -c ethx
    ...
rx-profile:
    {.usec =   1, .pkts =   1, .comps = n/a,},
    {.usec =   2, .pkts =   2, .comps = n/a,},
    {.usec =   3, .pkts =  64, .comps = n/a,},
    {.usec =  64, .pkts =   4, .comps = n/a,},
    {.usec =  64, .pkts =  64, .comps = n/a,}
    tx-profile:   n/a

如果网络设备不支持 DIM 配置文件的特定字段，则会显示相应的 `n/a`。如果尝试修改 `n/a` 字段，将会报告错误信息。
动态中断调节（DIM）库 API
==============================================

.. kernel-doc:: include/linux/dim.h
    :internal: 

注意：上述内容中的 `.. kernel-doc::` 部分可能属于一种标记语言（例如 Sphinx），用于生成文档，指示要从指定的文件（在此为 `include/linux/dim.h`）中提取文档，并且 `:internal:` 标签可能是用来表示只展示内部接口。这部分在实际的中文翻译中并没有直接意义，因此通常不需要翻译。如果你需要将这部分也翻译成中文，可以按照上下文适当调整。
