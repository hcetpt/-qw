======================================================
网络DIM - 通用网络动态中断调节
======================================================

:作者: Tal Gilboa <talgi@mellanox.com>

.. contents:: :depth: 2

假设
===========

本文档假设读者具备基本的网络驱动程序知识和一般的中断调节知识。
介绍
============

在网络领域，动态中断调节（DIM）指的是通过更改通道的中断调节配置来优化数据包处理。该机制包括一个算法，用于决定是否以及如何更改通道的调节参数，通常是通过对系统中采样的运行时数据进行分析来实现的。Net DIM 就是这样一个机制。在算法的每一次迭代中，它会分析一组给定的数据样本，并将其与前一次样本进行比较，如果需要的话，可以决定更改某些中断调节配置字段。数据样本由数据带宽、数据包数量和事件数量组成。样本之间的时间间隔也被测量。Net DIM 比较当前数据和之前的数据，并返回一个调整后的中断调节配置对象。在某些情况下，算法可能决定不作任何更改。配置字段包括事件之间的最小持续时间（微秒）和每个事件所需的最多数据包数。Net DIM 算法更重视提高带宽而不是减少中断率。

Net DIM 算法
=================

Net DIM 算法的每次迭代遵循以下步骤：

1. 计算新的数据样本。
2. 将其与之前的样本进行比较。
3. 做出决策 — 提议中断调节配置字段。
4. 应用调度工作函数，应用提议的配置。

前两个步骤非常直接，新样本和之前的样本都由注册到 Net DIM 的驱动程序提供。之前的样本就是上一次迭代提供的新样本。比较步骤检查新样本与之前样本之间的差异，并根据结果决定最后一步的操作。

如果带宽增加，则认为步骤结果为“更好”；如果带宽减少，则认为结果为“更差”。如果没有带宽变化，则以类似方式比较数据包速率 — 增加 == “更好”，减少 == “更差”。如果数据包速率也没有变化，则比较中断速率。在此算法尝试优化较低的中断速率，因此中断速率的增加被认为是“更差”，而减少则被认为是“更好”。步骤#2有一个优化，避免虚假结果：只有当样本之间的差异大于一定百分比时才视为有效。此外，由于 Net DIM 自身并不进行任何测量，它假定驱动程序提供的数据是有效的。

步骤#3根据步骤#2的结果和算法的内部状态来决定提议的配置。这些状态反映了算法的方向：是在向左移动（减少调节），向右移动（增加调节）还是保持不变。另一个优化是，如果多次做出保持不变的决策，算法迭代之间的间隔将增加以减少计算开销。此外，在做出最左侧或最右侧的决策后，算法可能会决定通过向相反方向迈出一步来验证这一决策。这样做是为了避免陷入“深度睡眠”的场景。一旦做出决策，就会从预定义的配置文件中选择一个中断调节配置。
最后一步是通知注册的驱动程序应应用建议的配置。这是通过调度一个由Net DIM API定义且由注册驱动程序提供的工作函数来完成的。

如您所见，Net DIM本身并不主动与系统进行交互。如果向其提供了错误的数据，它将难以做出正确的决策，并且如果工作函数不应用建议的配置，则会变得毫无用处。然而，这也给了注册驱动程序一些操作空间，因为它可以在某些条件下提供部分数据或忽略算法的建议。

注册网络设备到DIM
==================

Net DIM API公开了主函数`net_dim()`。这个函数是Net DIM算法的入口点，每当驱动程序想要检查是否需要更改中断调节参数时都需要调用它。驱动程序应该提供两个数据结构：`:c:type:`struct dim <dim>` 和 `:c:type:`struct dim_sample <dim_sample>`。`:c:type:`struct dim <dim>` 描述了一个特定对象（例如接收队列、发送队列、其他队列等）的DIM状态。这包括当前选择的配置文件、以前的数据样本、由驱动程序提供的回调函数等。`:c:type:`struct dim_sample <dim_sample>` 描述了一个数据样本，该样本将与`:c:type:`struct dim <dim>` 中存储的数据样本进行比较以决定算法的下一步。样本应包括由驱动程序测量的字节、数据包和中断。

为了从网络驱动程序中使用Net DIM，驱动程序需要调用主函数`net_dim()`。推荐的方法是在每次中断时调用`net_dim()`。由于Net DIM具有内置的调节功能，并且在某些条件下可能会决定跳过迭代，因此无需对`net_dim()`调用进行调节。如上所述，驱动程序需要向`net_dim()`函数提供一个类型为`:c:type:`struct dim <dim>` 的对象。建议每个使用Net DIM的实体在其数据结构中持有一个`:c:type:`struct dim <dim>` 并将其作为主要的Net DIM API对象。

`:c:type:`struct dim_sample <dim_sample>` 应包含最新的字节数、数据包数和中断数。无需执行任何计算，只需包含原始数据即可。

`net_dim()`调用本身不会返回任何内容。相反，Net DIM依赖于驱动程序提供一个回调函数，在算法决定更改中断调节参数时调用该回调函数。此回调将在单独的线程中被调度和运行，以免增加数据流的开销。在工作完成后，需要将Net DIM算法设置为适当的状体以便进入下一次迭代。

示例
====

以下代码演示了如何将驱动程序注册到Net DIM。实际使用并不完整，但应能清楚地展示出使用的框架。
```c
#include <linux/dim.h>

/* 回调函数，用于在决定改变调节时调度 */
void my_driver_do_dim_work(struct work_struct *work)
{
    /* 从struct work_struct获取struct dim */
    struct dim *dim = container_of(work, struct dim, work);
    /* 执行与中断调节相关的操作 */
    ...
}
```
```c
/* 信号 net DIM 工作已完成，应进入下一次迭代 */
  dim->state = DIM_START_MEASURE;
}

/* 我的驱动程序中断处理函数 */
int my_driver_handle_interrupt(struct my_driver_entity *my_entity, ...)
{
  ...
/* 用于保存当前测量数据的结构体 */
  struct dim_sample dim_sample;
  ...

/* 使用当前数据初始化数据样本结构体 */
  dim_update_sample(my_entity->events,
                    my_entity->packets,
                    my_entity->bytes,
                    &dim_sample);
/* 调用 net DIM */
  net_dim(&my_entity->dim, dim_sample);
  ...
}

/* 我的实体初始化函数（my_entity 已经分配） */
int my_driver_init_my_entity(struct my_driver_entity *my_entity, ...)
{
  ...
/* 使用我的驱动程序回调函数初始化工作结构体 */
  INIT_WORK(&my_entity->dim.work, my_driver_do_dim_work);
  ...
}

调整 DIM
========

Net DIM 服务于一系列网络设备，并提供了出色的加速效果。然而，观察发现某些预设的 DIM 配置可能无法完美地适应不同规格的网络设备，这种不匹配已经被识别为导致启用 DIM 的网络设备性能欠佳的一个因素。为了应对这一问题，Net DIM 引入了针对每个设备的控制功能，以修改和访问设备的 `rx-profile` 和 `tx-profile` 参数。

假设目标网络设备名为 ethx，且 ethx 仅声明支持 RX 配置文件设置，并支持修改 `usec` 字段和 `pkts` 字段（参见数据结构：`struct dim_cq_moder`）。
您可以使用 ethtool 来修改当前 RX DIM 配置文件，其中所有值均为 64：

```
$ ethtool -C ethx rx-profile 1,1,n_2,2,n_3,n_n,4,n_n,n,n
```

`n` 表示不修改该字段，而 `_` 用于分隔配置文件数组中的结构元素。

查询当前配置文件可以使用以下命令：

```
$ ethtool -c ethx
...
rx-profile:
    {.usec =   1, .pkts =   1, .comps = n/a,},
    {.usec =   2, .pkts =   2, .comps = n/a,},
    {.usec =   3, .pkts =  64, .comps = n/a,},
    {.usec =  64, .pkts =   4, .comps = n/a,},
    {.usec =  64, .pkts =  64, .comps = n/a,}
    tx-profile:   n/a
```

如果网络设备不支持 DIM 配置文件的特定字段，则相应的 `n/a` 将会显示。如果尝试修改 `n/a` 字段，则会报告错误消息。
```
动态中断调节（DIM）库 API
============================

.. kernel-doc:: include/linux/dim.h
    :internal: 

这里的 ".. kernel-doc::" 是一种 Sphinx 文档字符串，用来插入内核文档中的内容。在实际的 Sphinx 文档构建过程中，这部分会被替换为 `include/linux/dim.h` 文件中的内容。
