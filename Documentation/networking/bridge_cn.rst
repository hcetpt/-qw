### SPDX 许可证标识符: GPL-2.0

=================
以太网桥接
=================

简介
============

IEEE 802.1Q-2022（桥接器和桥接网络）标准定义了计算机网络中桥接器的操作。在此标准中，桥接器是指连接两个或多个网络段并在OSI（开放式系统互联）模型的数据链路层（第2层）运行的设备。桥接器的主要功能是根据目的MAC（媒体访问控制）地址过滤并转发不同段之间的帧。

桥接kAPI
===========

以下是桥接代码的一些核心结构。请注意，kAPI处于*不稳定*状态，随时可能发生变化。
.. kernel-doc:: net/bridge/br_private.h
   :identifiers: net_bridge_vlan

桥接uAPI
===========

现代Linux桥接uAPI通过Netlink接口访问。您可以在以下文件中找到定义桥接和桥接端口Netlink属性的位置。

桥接Netlink属性
-------------------------

.. kernel-doc:: include/uapi/linux/if_link.h
   :doc: 桥接枚举定义

桥接端口Netlink属性
------------------------------

.. kernel-doc:: include/uapi/linux/if_link.h
   :doc: 桥接端口枚举定义

桥接sysfs
------------

sysfs接口已被弃用，如果添加新选项则不应扩展。

STP
===

Linux桥接驱动程序中的STP（生成树协议）是一个关键特性，它通过识别和禁用冗余链接来防止以太网网络中的环路和广播风暴。在Linux桥接环境中，STP对于网络稳定性和可用性至关重要。

STP是一种在OSI模型数据链路层运行的第2层协议。最初开发为IEEE 802.1D，并已演进为多个版本，包括快速生成树协议（RSTP）和`多重生成树协议（MSTP）<https://lore.kernel.org/netdev/20220316150857.2442916-1-tobias@waldekranz.com/>`_。

802.1D-2004移除了原始的生成树协议，而是包含了快速生成树协议（RSTP）。到2014年，所有由IEEE 802.1D定义的功能已经被合并到IEEE 802.1Q（桥接器和桥接网络）或IEEE 802.1AC（MAC服务定义）中。802.1D已在2022年正式废止。

桥接端口和STP状态
---------------------------

在STP的上下文中，桥接端口可以处于以下几种状态：
  * 阻塞：端口被禁用数据流量，仅监听来自其他设备的BPDU（桥接协议数据单元），以确定网络拓扑
* 监听：端口开始参与STP过程并监听BPDU
* 学习：端口继续监听BPDU，并开始从传入帧学习MAC地址，但不转发数据帧
* 转发：端口完全可用，并转发BPDU（桥协议数据单元）和数据帧。
* 禁用：端口被管理性地禁用，不参与STP（生成树协议）进程。数据帧的转发也被禁用。

根桥与收敛
--------------

在网络和Linux中的以太网桥接背景下，根桥是在桥接网络中指定的一个交换机，作为生成树算法的参考点来创建无环拓扑结构。以下是STP的工作原理以及如何选择根桥：
  1. 桥优先级：运行生成树协议的每个桥接器都有一个可配置的桥优先级值。值越低，优先级越高。默认情况下，桥优先级设置为一个标准值（例如，32768）。
  2. 桥ID：桥ID由两个部分组成：桥优先级和桥的MAC地址。它唯一标识网络中的每个桥接器。桥ID用于比较不同桥接器之间的优先级。
  3. 桥选举：当网络启动时，所有桥接器最初都假设自己是根桥。它们开始向邻居广播桥协议数据单元（BPDU），其中包含它们的桥ID和其他信息。
  4. BPDU比较：桥接器通过交换BPDU来确定根桥。每个桥接器检查收到的BPDU，包括桥优先级和桥ID，以决定是否需要调整自己的优先级。具有最低桥ID的桥接器将成为根桥。
  5. 根桥宣告：一旦确定了根桥，它就会向网络中的其他所有桥接器发送包含关于根桥信息的BPDU。这些信息被其他桥接器用来计算到根桥的最短路径，并以此建立无环拓扑结构。
6. 端口转发：在根桥选定并建立了生成树拓扑之后，每个桥接器都会确定其端口中哪些应该处于转发状态（用于数据流量），哪些应处于阻塞状态（用于防止环路）。根桥的所有端口都处于转发状态，而其他桥接器则有一些端口处于阻塞状态以避免环路。
7. 根端口：在根桥选定并建立了生成树拓扑之后，每个非根桥接器处理收到的BPDU，并根据接收到的BPDU中的信息确定哪个端口提供到根桥最短路径。这个端口被指定为根端口，并且处于转发状态，允许它积极地转发网络流量。
8. 指定端口：指定端口是非根桥接器用来向指定网段转发流量的端口。指定端口被置于转发状态。非根桥接器上所有未被指定用于特定网段的其他端口则被置于阻塞状态以防止网络环路。

生成树协议(STP)通过计算最短路径和禁用冗余链路来确保网络收敛。当网络拓扑发生变化时（例如链路故障），STP会重新计算网络拓扑以恢复连接性同时避免环路。正确配置STP参数，如桥接器优先级，可以影响网络性能、路径选择以及哪座桥接器成为根桥接器。

用户空间STP辅助程序
---------------------
用户空间STP辅助程序 *bridge-stp* 是一个用于控制是否使用用户模式生成树的程序。命令 `/sbin/bridge-stp <bridge> <start|stop>` 在生成树在一个桥接器上启用或禁用时由内核调用（通过 `brctl stp <bridge> <on|off>` 或 `ip link set <bridge> type bridge stp_state <0|1>`）。如果该命令返回0，则内核启用用户STP模式；如果返回任何其他值，则启用内核STP模式。

VLAN
====
局域网(LAN)是一种覆盖小地理区域的网络，通常位于单一建筑物或校园内。LAN用于将计算机、服务器、打印机和其他联网设备连接在同一局部区域内。LAN可以是有线的（使用以太网电缆）或无线的（使用Wi-Fi）。

虚拟局域网(VLAN)是物理网络的一种逻辑分割，形成多个隔离的广播域。VLAN用于将单一物理局域网分割成多个虚拟局域网，使得不同组的设备可以像在不同的物理网络上一样进行通信。

通常有两种VLAN实现方式：IEEE 802.1Q 和 IEEE 802.1ad（也称为QinQ）。IEEE 802.1Q是以太网网络中VLAN标记的标准。它允许网络管理员在物理网络上创建逻辑VLAN，并用VLAN信息标记以太网帧，这种帧被称为“带有VLAN标签的帧”。IEEE 802.1ad，通常称为QinQ或双层VLAN，是对IEEE 802.1Q标准的扩展。QinQ允许在单个以太网帧中堆叠多个VLAN标签。Linux桥接器支持IEEE 802.1Q和IEEE 802.1AD这两种VLAN标记协议。

桥接器上的VLAN过滤默认是禁用的。启用桥接器上的VLAN过滤后，它开始基于目标MAC地址和VLAN标签（两者都必须匹配）将帧转发到适当的目的地。
### 多播
=====

Linux 桥接驱动支持多播功能，允许其处理互联网组管理协议（IGMP）或多播监听发现（MLD）消息，并高效转发多播数据包。桥接驱动支持 IGMPv2/IGMPv3 和 MLDv1/MLDv2。
#### 多播监听
多播监听是一种网络技术，允许网络交换机智能地管理局域网（LAN）中的多播流量。交换机维护一个多播组表，记录多播组地址与主机加入这些组的端口之间的关联。该组表根据收到的 IGMP/MLD 消息动态更新。通过多播监听收集的多播组信息，交换机优化了多播流量的转发。它不是盲目地将多播流量广播到所有端口，而是仅根据目标 MAC 地址将多播流量发送到已订阅相应目标多播组的端口。当创建时，默认情况下 Linux 桥接设备启用多播监听。它维护一个多播转发数据库（MDB），用于跟踪端口和组的关系。
#### IGMPv3/MLDv2 明确主机追踪（EHT）支持
Linux 桥接支持 IGMPv3/MLDv2 明确主机追踪（EHT），这是由 `474ddb37fa3a ("net: bridge: multicast: add EHT allow/block handling")` 引入的。

明确主机追踪使设备能够跟踪每个加入特定组或频道的独立主机。IGMP 中明确主机追踪的主要好处是允许最小化离开延迟，当主机离开多播组或频道时。从主机想要离开到设备停止转发流量之间的时间称为 IGMP 离开延迟。配置了 IGMPv3 或 MLDv2 且启用了明确追踪的设备，如果最后一个请求接收来自设备流量的主机表明不再希望接收流量，则可以立即停止转发流量。因此，离开延迟仅受多路访问网络中的包传输延迟和设备处理时间的限制。
#### 其他多播特性
Linux 桥接还支持`每VLAN多播监听`，默认禁用但可以启用。以及`多播路由器发现`，这有助于识别多播路由器的位置。
### Switchdev
=====

Linux Bridge Switchdev 是 Linux 内核中的一项功能，扩展了传统 Linux 桥接的功能，使其能更高效地与支持 Switchdev 的硬件交换机协同工作。使用 Linux Bridge Switchdev，某些网络功能如转发、过滤和学习以太网帧可以卸载到硬件交换机上。这种卸载减轻了 Linux 内核和 CPU 的负担，从而提高了网络性能并降低了延迟。
要使用 Linux Bridge Switchdev，需要支持 Switchdev 接口的硬件交换机。这意味着交换机硬件需要有必要的驱动程序和功能来与 Linux 内核协同工作。
请参阅 :ref:`switchdev` 文档获取更多详细信息。
网过滤器（Netfilter）
=====================

桥接网过滤器模块是一个遗留功能，它允许使用 iptables 和 ip6tables 过滤桥接的数据包。不建议使用此功能。用户应考虑使用 nftables 进行数据包过滤。
较旧的 ebtables 工具相比 nftables 功能更有限，但与 nftables 类似，它也不需要此模块即可正常工作。
br_netfilter 模块拦截进入桥接器的数据包，对 IPv4 和 IPv6 数据包执行最基本的合理性检查，然后假装这些数据包正在被路由而非桥接。接着 br_netfilter 从桥接层调用 ip 和 ipv6 网过滤器挂钩，即 ip(6)tables 的规则集也会看到这些数据包。
br_netfilter 也是 iptables 中 *physdev* 匹配项存在的原因：这是在 iptables 规则集中可靠地区分路由和桥接数据包的唯一方法。
请注意，ebtables 和 nftables 即使没有 br_netfilter 模块也能正常工作；iptables/ip6tables/arptables 对于桥接流量不起作用，因为它们插入了路由堆栈。nftables 在 ip/ip6/inet/arp 家族中的规则也不会看到由桥接器转发的流量，但这正是应有的工作方式。
从历史角度来看，ebtables 的功能非常有限（现在依然如此），添加此模块是为了假装数据包正在被路由，并从桥接层调用 IPv4/IPv6 网过滤器挂钩，以便用户可以访问功能更丰富的 iptables 匹配功能（包括 conntrack）。而 nftables 并没有这个限制，几乎所有功能无论协议家族都能正常使用。
因此，只有当用户出于某种原因需要使用 ip(6)tables 来过滤桥接器转发的数据包或进行桥接流量的 NAT 时，才需要 br_netfilter 模块。对于纯粹的链路层过滤，此模块并非必需。
其他特性
==========

Linux 桥接还支持以下功能：`IEEE 802.11 代理 ARP <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=958501163ddd6ea22a98f94fa0e7ce6d4734e5c4>`_、`媒体冗余协议 (MRP) <https://lore.kernel.org/netdev/20200426132208.3232-1-horatiu.vultur@microchip.com/>`_、`媒体冗余协议 (MRP) LC 模式 <https://lore.kernel.org/r/20201124082525.273820-1-horatiu.vultur@microchip.com>`_、`IEEE 802.1X 端口认证 <https://lore.kernel.org/netdev/20220218155148.2329797-1-schultz.hans+netdev@gmail.com/>`_ 以及 `MAC 认证绕过 (MAB) <https://lore.kernel.org/netdev/20221101193922.2125323-2-idosch@nvidia.com/>`_。
常见问题解答
=============

桥接器的作用是什么？
----------------------

桥接器透明地在网络接口之间转发流量。
用简单的英语来说，这意味着一座桥连接了两个或多个物理以太网网络，从而形成了一个更大的（逻辑上的）以太网网络。
它是与L3协议无关的吗？
------------------------------

是的。桥接器能看到所有帧，但它*只使用* L2头部/信息。
因此，桥接功能是与协议无关的，并且在转发IPX、NetBEUI、IP、IPv6等协议时应该没有任何问题。
联系方式
============

当前代码由Roopa Prabhu <roopa@nvidia.com> 和 Nikolay Aleksandrov <razor@blackwall.org> 维护。关于桥接的bug和改进讨论可以在 linux-netdev 邮件列表 netdev@vger.kernel.org 或 bridge@lists.linux.dev 上进行。
该邮件列表对任何感兴趣的人开放：http://vger.kernel.org/vger-lists.html#netdev

外部链接
==============

Linux桥接的旧文档位于：
https://wiki.linuxfoundation.org/networking/bridge
