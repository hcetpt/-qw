SPDX 许可证标识符: GPL-2.0

================================================
PLIP：并行线互联网协议设备
================================================

唐纳德·贝克尔 (becker@super.org)  
I.D.A. 超级计算研究中心，马里兰州鲍伊 20715

在某个时候，T. Thorn 可能会贡献一些文字，  
汤米·索恩 (tthorn@daimi.aau.dk)

PLIP 简介
-----------------

本文档描述了用于 Net/LGX 的并行端口数据包推送器。  
该设备接口允许两个并行端口之间的点对点连接表现为一个 IP 网络接口。

什么是 PLIP？
=============

PLIP 是并行线 IP，即通过并行端口传输 IP 包。对于 PC 来说，最明显的选择是打印机端口。PLIP 是一种非标准协议，[可以使用] 使用标准的 LapLink 无打印电缆 [也可以在涡轮模式下工作，使用 PLIP 电缆]。[用于打包 IP 包的协议是由 Crynwr 发起的一个简单的协议。]

PLIP 的优势
==================

它便宜、随处可见且易于操作
只需要 PLIP 电缆即可连接两台 Linux 主机，并且成本非常低廉
连接两台 Linux 主机只需做出决定并花费几分钟的时间，无需寻找 [受支持的] 网卡。这在笔记本电脑的情况下可能尤为重要，因为网卡并不容易获得
不依赖于网卡也意味着除了连接电缆之外，其他所有配置都是软件层面的 [原则上可以做到非常简单]。

PLIP 的劣势
=====================

不能像 SLIP 和 PPP 那样通过调制解调器工作。传输范围有限，最大为 15 米
只能用来连接三台（？）Linux 主机。无法接入现有的以太网。不是标准协议（甚至不是事实上的标准，如 SLIP）
性能
===========

PLIP 轻松超越以太网卡……（哎呀，我在做梦，但确实很晚了。EOB）

PLIP 驱动程序细节
-------------------

Linux PLIP 驱动程序实现了原始的 Crynwr 协议，利用内核中的并行端口子系统来适当地在 PLIP 和其他服务之间共享并行端口。
中断和触发超时
=========================

当一个用于 PLIP 驱动程序的并行端口配置有中断请求 (IRQ) 时，当通过电缆发送数据时，PLIP 驱动程序会被信号通知，这样当没有数据可用时，驱动程序就不会被占用
然而，在某些机器上很难或不可能为特定的并行端口配置 IRQ，主要是因为它已被其他设备使用
在这些机器上，可以使用无IRQ模式的PLIP驱动程序，该模式下PLIP驱动程序会持续轮询并行端口以检查是否有待处理的数据，如果有数据可用，则进行处理。这种模式比IRQ模式效率低，因为即使没有数据传输时，驱动程序也需要每秒多次检查并行端口。一些粗略的测试表明，在数据传输速度方面，使用无IRQ模式与IRQ模式相比，并没有明显的性能下降。但是对承载驱动程序的机器来说，确实存在一定的性能损耗。
当PLIP驱动程序使用IRQ模式时，默认用于触发数据传输的超时时间（即PLIP驱动程序允许另一端完成握手过程以传输某些数据的最大时间）为500微秒。由于IRQ传递几乎是即时的，因此这个超时时间是足够的。
而在无IRQ模式下，PLIP驱动程序每秒轮询并行端口HZ次（其中HZ在大多数平台上通常是100，在Alpha平台上为1024）。两次轮询之间有10^6/HZ微秒的时间间隔。例如，在i386平台上，10^6/100 = 10000微秒。很容易看出，在两次轮询之间，触发超时可能就会过期，因为超时时间仅为500微秒。因此，需要改变PLIP连接另一端的触发超时时间为大约10^6/HZ微秒。如果PLIP连接的两端都使用无IRQ模式，则此超时时间在两端都需要设置。
实际上，在实际应用中，触发超时时间可以比上述计算结果短。除非线路有问题，否则这不是一个重要的问题。在丢包的情况下，较长的超时时间会导致机器停滞。
在Linux中，可以使用`plipconfig`工具来执行此更改，它是net-tools包的一部分（其位置可以在Documentation/Changes文件中找到）。一个示例命令是`plipconfig plipX trigger 10000`，其中`plipX`是适当的PLIP设备。
### PLIP硬件互联
----------------

PLIP使用几种不同的数据传输方法。最初版本的代码仅实现了一种方法，即使用标准打印机“空”电缆，通过将数据位输出连接到状态位输入来一次传输四个比特的数据。
第二种数据传输方法依赖于两台机器都有双向并行端口，而不是只有输出功能的“打印机”端口。这允许字节级别的传输，避免了将半字节重组为字节的过程，从而大大加快了传输速度。
### 并行传输模式0电缆
------------------------

第一种传输模式使用的电缆是标准打印机“空”电缆，它通过将第一端口（机器T）的数据位输出连接到第二端口（机器R）的状态位输入，一次传输四个比特的数据。有五个状态输入位，它们被用作四个数据输入位和一个时钟（数据脉冲）输入位，排列方式使得数据输入位作为连续的位出现在标准状态寄存器实现中。
可以商用购买到实现该协议的线缆，通常称为“空打印机”或“Turbo Laplink”线缆。这种线缆可以使用两个对称连接的DB-25公接头自行制作，具体连接方式如下：

    STROBE 输出	1* 
    D0->ERROR	2 - 15		15 - 2
    D1->SLCT	3 - 13		13 - 3
    D2->PAPOUT	4 - 12		12 - 4
    D3->ACK	5 - 10		10 - 5
    D4->BUSY	6 - 11		11 - 6
    D5, D6, D7 是   7*, 8*, 9*
    AUTOFD 输出 14*
    INIT 输出 16*
    SLCTIN	17 - 17
    额外接地为 18*,19*,20*,21*,22*,23*,24*
    接地	25 - 25

    * 这些端口两端均不应连接

如果您使用的线缆有金属屏蔽层，则只应在一端将其与金属DB-25外壳相连。

并行传输模式 1
========================

第二种数据传输方法依赖于两台机器都具有双向并行端口，而非仅输出型的“打印机”端口。这使得可以按字节进行传输，避免了将半字节重新组合成一个完整字节的过程。这条线缆不应用于单向的“打印机”（而非“并行”）端口上，也不应用于未配置PLIP的机器，否则可能会导致输出驱动冲突，并且有可能（尽管不太可能）造成损坏。
此传输模式下的线缆应按以下方式制作：

    STROBE->BUSY 1 - 11
    D0->D0	2 - 2
    D1->D1	3 - 3
    D2->D2	4 - 4
    D3->D3	5 - 5
    D4->D4	6 - 6
    D5->D5	7 - 7
    D6->D6	8 - 8
    D7->D7	9 - 9
    INIT -> ACK  16 - 10
    AUTOFD->PAPOUT 14 - 12
    SLCT->SLCTIN 13 - 17
    GND->ERROR	18 - 15
    额外接地为 19*,20*,21*,22*,23*,24*
    接地	25 - 25

    * 这些端口两端均不应连接

同样，如果您的线缆有金属屏蔽层，则只应在一端将其与金属DB-25外壳相连。

PLIP 模式 0 传输协议
=============================

PLIP 驱动程序与“Crynwr”并行端口传输标准在模式 0 下兼容。该标准规定了以下协议：

   发送头部半字节 '0x8'
   发送低位计数字节
   发送高位计数字节
   ... 数据字节
   发送校验和字节

每个字节的发送方式为：

	<等待接收信号 '0x1?' >	<发送 0x10 + (字节 & 0x0F)>
	<等待接收信号 '0x0?' >	<发送 0x00 + ((字节 >> 4) & 0x0F)>

为了开始传输，发送方机器输出半字节 0x08
这会提升 ACK 线路电平，触发接收方机器中的中断。接收方机器禁用中断并提升其自身的 ACK 线路。
换句话说：

  (OUT 表示位 0-4，OUT.j 表示 OUT 的第 j 位。IN 同样如此)
  Send_Byte:
     OUT := 低位半字节, OUT.4 := 1
     等待 IN.4 = 1
     OUT := 高位半字节, OUT.4 := 0
     等待 IN.4 = 0
