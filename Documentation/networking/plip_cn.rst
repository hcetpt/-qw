SPDX 许可证标识符: GPL-2.0

================================================
PLIP：并行线互联网协议设备
================================================

唐纳德·贝克尔 (becker@super.org)
I.D.A. 超级计算机研究中心，马里兰州鲍伊 20715

在某个时候，T. Thorn 可能会贡献一些文本，
汤米·索恩 (tthorn@daimi.aau.dk)

PLIP 简介
-----------------

本文档描述了用于 Net/LGX 的并口数据包推送器。
此设备接口使两个并口之间的点对点连接看起来像一个 IP 网络接口。

什么是 PLIP？
=============

PLIP 是并行线 IP，即通过并行端口传输 IP 数据包。对于 PC 来说，显而易见的选择是打印机端口。PLIP 是一种非标准协议，但它可以使用标准的 LapLink 无打印电缆（也可以在涡轮模式下工作，使用 PLIP 电缆）。[所使用的打包 IP 数据包的协议是由 Crynwr 发起的一个简单协议。]

PLIP 的优点
==================

它便宜、到处都有、且易于使用。
只需要一根 PLIP 电缆就可以连接两台 Linux 机器，并且只需花费很少的钱。
连接两台 Linux 机器只需要几秒钟的决定和几分钟的工作，不需要寻找[支持的]网卡。这可能对于笔记本电脑尤为重要，因为笔记本电脑不容易获得网卡。
不依赖于网卡也意味着除了连接电缆之外，其他一切都是软件配置[原则上可以做得非常简单]。

PLIP 的缺点
=====================

不能通过调制解调器工作，像 SLIP 和 PPP 一样。范围有限，最大 15 米。
只能用来连接三台（？）Linux 机器。无法连接到现有的以太网。不是标准（甚至不是事实上的标准，像 SLIP）。

性能
===========

PLIP 很容易超过以太网卡……（哎呀，我在做梦，但确实已经很晚了。EOB）

PLIP 驱动程序细节
-------------------

Linux PLIP 驱动程序实现了原始的 Crynwr 协议，该协议利用内核中的并行端口子系统来正确地在 PLIP 和其他服务之间共享并行端口。

中断和触发超时
=========================

当一个用于 PLIP 驱动程序的并行端口配置了一个中断请求 (IRQ) 时，PLIP 驱动程序会在通过电缆发送数据时被触发，这样当没有数据可用时，驱动程序不会被使用。
然而，在某些机器上，很难或不可能为特定的并行端口配置一个 IRQ，主要是因为它已经被其他设备使用。
在这些机器上，可以使用无IRQ模式的PLIP驱动程序。在这种模式下，PLIP驱动程序会不断轮询并行端口以检查是否有等待处理的数据。如果有数据可用，则进行处理。与IRQ模式相比，这种模式效率较低，因为驱动程序每秒需要多次检查并行端口，即使没有任何数据发送也是如此。一些粗略的测量表明，在数据传输速度方面，使用无IRQ模式与IRQ模式相比并没有明显的性能下降。然而，在承载驱动程序的机器上存在一定的性能下降。

当PLIP驱动程序使用IRQ模式时，默认用于触发数据传输的超时时间（即PLIP驱动程序允许对方在宣布超时之前的最大时间）为500微秒。由于IRQ传递几乎是即时的，因此这个超时时间是足够的。

在无IRQ模式下，PLIP驱动程序每秒轮询并行端口HZ次（HZ通常在大多数平台上为100，在Alpha平台上为1024）。两次轮询之间的间隔为10^6/HZ微秒。例如，在i386平台上，10^6/100 = 10000微秒。很容易看出，在两次轮询之间，触发超时有可能到期，因为超时时间为500微秒。因此，需要更改PLIP连接另一端的触发超时时间，设置为大约10^6/HZ微秒。如果PLIP连接的两端都使用无IRQ模式，则两端都需要设置这个超时时间。

实际上，触发超时时间可以比上述计算的短一些。除非线路有问题，否则这不是一个重要的问题。在某些情况下，如果数据位丢失，长时间的超时会导致机器停滞。

在Linux中，可以使用plipconfig工具来执行这一更改，它是net-tools包的一部分（其位置可以在Documentation/Changes文件中找到）。示例命令为`plipconfig plipX trigger 10000`，其中plipX是相应的PLIP设备。

### PLIP硬件互连

---

PLIP使用几种不同的数据传输方法。最初版本实现的方法之一是使用标准打印机“空”电缆，通过将数据位输出连接到状态位输入来一次传输四位数据。

第二种数据传输方法依赖于两台机器都有双向并行端口，而不是仅具有输出功能的“打印机”端口。这使得可以进行字节级传输，并避免将半字节重新组合成字节，从而显著提高传输速度。

### 并行传输模式0电缆

---

第一种传输模式使用的电缆是一种标准的打印机“空”电缆，通过第一个端口（T机器）的数据位输出连接到第二个端口（R机器）的状态位输入来一次传输四位数据。有五个状态输入，它们被用作四个数据输入和一个时钟（数据选通）输入，排列方式使数据输入位在标准状态寄存器实现中表现为连续位。
实施此协议的电缆在市面上作为“空打印机”或“Turbo Laplink”电缆出售。它可以使用两个对称连接的DB-25公头接头构建，如下所示：

    STROBE 输出  1*
    D0->ERROR  2 - 15       15 - 2
    D1->SLCT   3 - 13       13 - 3
    D2->PAPOUT 4 - 12       12 - 4
    D3->ACK    5 - 10       10 - 5
    D4->BUSY   6 - 11       11 - 6
    D5,D6,D7   7*, 8*, 9*
    AUTOFD 输出 14*
    INIT 输出 16*
    SLCTIN    17 - 17
    额外接地 18*,19*,20*,21*,22*,23*,24*
    接地      25 - 25

    * 不要在这两端连接这些引脚

如果使用的电缆有金属屏蔽层，则应仅在一端将其连接到金属DB-25外壳。

并行传输模式 1
========================

第二种数据传输方法依赖于两台机器都有双向并行端口，而不是只有输出功能的“打印机”端口。这允许字节级传输，并避免了将半字节重组为字节的过程。这种电缆不应用于单向“打印机”（而非“并行”）端口或当机器未配置为PLIP时，因为这会导致输出驱动器冲突，并且存在（不太可能的）损坏的可能性。
该传输模式的电缆应按以下方式构建：

    STROBE->BUSY  1 - 11
    D0->D0        2 - 2
    D1->D1        3 - 3
    D2->D2        4 - 4
    D3->D3        5 - 5
    D4->D4        6 - 6
    D5->D5        7 - 7
    D6->D6        8 - 8
    D7->D7        9 - 9
    INIT -> ACK   16 - 10
    AUTOFD->PAPOUT 14 - 12
    SLCT->SLCTIN  13 - 17
    GND->ERROR    18 - 15
    额外接地 19*,20*,21*,22*,23*,24*
    接地      25 - 25

    * 不要在这两端连接这些引脚

再次强调，如果使用的电缆有金属屏蔽层，则应仅在一端将其连接到金属DB-25外壳。

PLIP模式 0 传输协议
=============================

PLIP驱动程序兼容“Crynwr”并行端口传输标准中的模式 0。该标准规定了以下协议：

   发送头部半字节 '0x8'
   发送低位字节
   发送高位字节
   ... 数据字节
   发送校验和字节

每个字节的发送过程如下：

    <等待接收信号 '0x1?' >     <发送 0x10+(字节&0x0F)>
    <等待接收信号 '0x0?' >     <发送 0x00+((字节>>4)&0x0F)>

为了开始传输，发送方输出一个半字节 0x08。这会拉高ACK线，触发接收方的中断。接收方禁用中断并将自己的ACK线拉高。

重述如下：

  (OUT 是位 0-4，OUT.j 是 OUT 的第 j 位。IN 同样如此)
  发送字节：
     OUT := 低位半字节，OUT.4 := 1
     等待 IN.4 = 1
     OUT := 高位半字节，OUT.4 := 0
     等待 IN.4 = 0
