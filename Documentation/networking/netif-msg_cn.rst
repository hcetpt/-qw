... SPDX 许可证标识符: GPL-2.0

===============
网络接口消息级别
===============

网络接口消息级别的设计
历史
-------

调试消息接口的设计受到向后兼容性和先前实践的指导和限制。为了理解当前的做法并将其与较旧的驱动程序源代码联系起来，了解其历史和发展过程是有帮助的。
从Linux诞生之初起，每个网络设备驱动程序都有一个本地整型变量来控制调试消息的级别。消息级别范围从0到7，并且随着详细程度的增加而单调递增。
消息级别在级别3以上没有精确定义，但始终在指定级别上下1的范围内实现。随着驱动程序的成熟，它们往往不再保留更详细的级别消息。
- 0 最少的消息，只包括致命错误时的基本信息
- 1 标准消息，初始化状态。无运行时消息
  - 2 特殊媒体选择消息，通常是定时器驱动相关
- 3 接口启动和停止，包括正常状态消息
  - 4 发送和接收帧错误消息，以及异常驱动操作
  - 5 发送数据包队列信息，中断事件
- 6 每个完成发送的数据包和接收到的数据包的状态
  - 7 发送和接收数据包的初始内容

最初，这个消息级别变量在每个驱动程序中都使用了唯一的名称（例如“lance_debug”），这样内核符号调试器可以定位并修改设置。当内核模块变得普遍时，这些变量被一致地重命名为“debug”，并允许作为模块参数进行设置。
这种方法效果很好。然而，总是有对额外功能的需求。多年来，以下几点逐渐成为合理且易于实施的增强：

  - 使用ioctl()调用来修改级别
  - 按接口而不是按驱动程序设置消息级别
对发出消息类型的更精细的控制
netif_msg建议通过增加较小的复杂度和代码量来添加这些特性。
建议包括以下几点：

  - 保留每个驱动程序中的整型变量"debug"作为模块参数，默认级别为'1'。
- 添加一个名为"msg_enable"的每接口私有变量。该变量是一个位图而非级别，初始化方式为：

       1 << debug

或者更准确地说：

    debug < 0 ? 0 : 1 << min(sizeof(int)-1, debug)

消息的输出应从：

      if (debug > 1)
       printk(MSG_DEBUG "%s: ..

改为：

      if (np->msg_enable & NETIF_MSG_LINK)
       printk(MSG_DEBUG "%s: ..

消息级别的集合命名为


  =========   ===================	============
  旧级别   名称			位位置
  =========   ===================	============
    0         NETIF_MSG_DRV		0x0001
    1         NETIF_MSG_PROBE		0x0002
    2         NETIF_MSG_LINK		0x0004
    2         NETIF_MSG_TIMER		0x0004
    3         NETIF_MSG_IFDOWN		0x0008
    3         NETIF_MSG_IFUP		0x0008
    4         NETIF_MSG_RX_ERR		0x0010
    4         NETIF_MSG_TX_ERR		0x0010
    5         NETIF_MSG_TX_QUEUED	0x0020
    5         NETIF_MSG_INTR		0x0020
    6         NETIF_MSG_TX_DONE		0x0040
    6         NETIF_MSG_RX_STATUS	0x0040
    7         NETIF_MSG_PKTDATA		0x0080
  =========   ===================	============
