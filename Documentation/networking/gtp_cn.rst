SPDX 许可证标识符: GPL-2.0

=====================================
Linux 内核的 GTP 隧道模块
=====================================

文档作者：
         Harald Welte <laforge@gnumonks.org> 和
         Andreas Schultz <aschultz@tpip.net>

在 'drivers/net/gtp.c' 中，您会找到一个内核级别的 GTP 隧道端点实现。
什么是 GTP
===========

GTP 是通用隧道协议，这是一个 3GPP 协议，用于在移动站（如手机、调制解调器）和外部数据网络（例如互联网）之间进行用户 IP 负载的隧道传输。因此，当您从手机启动“数据连接”时，手机将使用控制平面来建立与外部数据网络之间的这种隧道。隧道的两端分别位于手机和网关上。所有中间节点只是传输封装后的数据包。

手机本身并不实现 GTP，而是使用其他技术相关的协议栈来传输用户 IP 负载，例如 LLC/SNDCP/RLC/MAC。在运营商基础设施中的某个网络元素处（GPRS/EGPRS 或经典 UMTS 中的 SGSN，3G 微小区中的 hNodeB，4G/LTE 中的 eNodeB），蜂窝协议堆栈被转换为 GTP *而不会中断端到端隧道*。因此，中间节点只执行特定的中继功能。

在某个时刻，GTP 数据包会到达所谓的 GGSN（GSM/UMTS）或 P-GW（LTE），这些设备终止隧道，解封数据包，并将其转发到外部数据网络。这可以是公共互联网，也可以是任何私有 IP 网络（理论上甚至可以是非 IP 网络，如 X.25）。

您可以在 3GPP TS 29.060 中找到该协议规范，它公开发布于 3GPP 网站：http://www.3gpp.org/DynaReport/29060.htm

为了方便起见，提供了一个直接的 PDF 链接到版本 13.6.0：
http://www.etsi.org/deliver/etsi_ts/129000_129099/129060/13.06.00_60/ts_129060v130600p.pdf

Linux 的 GTP 隧道模块
===============================

该模块实现了隧道端点的功能，即能够解封上行链路中由手机发起的封装过的 IP 数据包，并将从外部数据网络接收的原始 IP 数据包封装后向下链路发送至手机。

它*仅*实现了所谓的“用户面”，承载用户 IP 负载，称为 GTP-U。它不实现“控制面”，即用于建立和拆除 GTP 隧道的信令协议（GTP-C）。

因此，为了拥有一个工作的 GGSN/P-GW 设置，您需要一个用户空间程序来实现 GTP-C 协议，并使用 GTP-U 模块在内核中提供的 netlink 接口来配置内核模块。

这种分离架构遵循了其他协议的隧道模块，例如 PPPoE 或 L2TP，在这些协议中，您也会运行一个用户空间守护进程来处理隧道建立、认证等，而数据平面则在内核中加速。
不要被术语所迷惑：GTP 用户平面通过内核加速路径，而 GTP 控制平面则转至用户空间 :)

该模块的官方主页位于
https://osmocom.org/projects/linux-kernel-gtp-u/wiki

支持 Linux 内核 GTP-U 的用户空间程序
==================================

截至本文撰写之时，至少有两个自由软件实现支持 GTP-C，并可使用 netlink 接口来利用 Linux 内核中的 GTP-U 支持：

* OpenGGSN（经典的 2G/3G GGSN，采用 C 语言）:
  https://osmocom.org/projects/openggsn/wiki/OpenGGSN

* ergw（GGSN + P-GW，采用 Erlang 语言）:
  https://github.com/travelping/ergw

用户空间库 / 命令行工具
======================

存在一个名为 'libgtpnl' 的用户空间库，它基于 libmnl，并实现了面向由内核 GTP 模块提供的 netlink 接口的 C 语言 API：

http://git.osmocom.org/libgtpnl/

协议版本
========

存在两种不同的 GTP-U 版本：v0 [GSM TS 09.60] 和 v1 [3GPP TS 29.281]。两者均在内核 GTP 模块中实现。
版本 0 是遗留版本，在最近的 3GPP 规范中已废弃。
GTP-U 使用 UDP 进行 PDU 传输。对于 GTPv1-U，接收端 UDP 端口为 2152；对于 GTPv0-U，则为 3386。
存在三种 GTP-C 版本：v0、v1 和 v2。由于内核不实现 GTP-C，我们无需担心这一点。由用户空间中的控制平面实现负责实现 GTP-C。

IPv6
====

3GPP 规范指出，可以在内部（用户）IP 层或外部（传输）层上使用 IPv4 或 IPv6。
不幸的是，当前内核模块尚不支持用于用户 IP 负载或外部 IP 层的 IPv6。欢迎提交补丁或其他贡献以解决此问题！

邮件列表
========

如果您有关于如何从自己的软件中使用内核 GTP 模块的问题，或者想要对代码做出贡献，请使用 osmocom-net-grps 邮件列表进行相关讨论。您可以通过 osmocom-net-gprs@lists.osmocom.org 访问该列表，并且可以通过 https://lists.osmocom.org/mailman/listinfo/osmocom-net-gprs 来管理您的订阅。

问题追踪器
=============

Osmocom 项目为内核 GTP-U 模块维护了一个问题追踪器：
https://osmocom.org/projects/linux-kernel-gtp-u/issues

历史与致谢
==================

该模块最初由 Harald Welte 在 2012 年创建，但并未完成。Pablo 加入进来，接手了 Harald 留下的未完成工作。但由于缺乏用户兴趣，它从未被合并。
2015 年，Andreas Schultz 出手相助，修复了大量 bug，并增加了新功能，最终推动我们将它合并进主线内核，在 4.7.0 版本中得以实现。

架构细节
==================

本地 GTP-U 实体和隧道标识
--------------------------------------------

GTP-U 使用 UDP 传输 PDU。对于 GTPv1-U，接收端 UDP 端口为 2152；对于 GTPv0-U，则为 3386。
每个 IP 地址仅有一个 GTP-U 实体（因此只有一个 SGSN/GGSN/S-GW/PDN-GW 实例）。隧道端点标识符 (TEID) 对每个 GTP-U 实体是唯一的。
特定隧道仅由目标实体定义。由于目标端口是固定的，只有目标 IP 和 TEID 定义了一条隧道。源 IP 和端口对隧道无意义。
因此：

  * 在发送时，远程实体由远程IP和隧道端点ID定义。源IP和端口没有意义，并且可以随时更改。
  * 在接收时，本地实体由本地目标IP和隧道端点ID定义。源IP和端口没有意义，并且可以随时改变。

根据[3GPP TS 29.281]第4.3.0节的定义：

  隧道用户平面（GTP-U）头部中的TEID用于区分从远程隧道端点传入的流量，以便以一种能够复用不同用户、不同的包协议和不同的服务质量级别的方式将这些流量传递给用户平面实体。
  
因此，没有两个远程GTP-U端点应当使用相同的TEID值向同一个GTP-U协议实体发送流量，除非是作为移动性过程的一部分的数据转发。
上述定义仅说明两个远程GTP-U端点**不应该**向同一个TEID发送，但这并没有禁止或排除这种情况的发生。实际上，提及的移动性过程要求GTP-U实体接受来自多个或未知对等方的TEID流量。

因此，接收端完全基于TEID来识别隧道，而不是基于源IP！

### APN与网络设备

GTP-U驱动为每个Gi/SGi接口创建一个Linux网络设备。
根据[3GPP TS 29.281]，Gi/SGi参考点被称为接口，这可能会让人误以为GGSN/P-GW只能有一个这样的接口。
正确的理解是Gi/SGi参考点定义了3GPP分组域（基于GTP-U隧道和IP网络）之间的互操作。
在任何3GPP文档中都没有规定GGSN/P-GW实现的Gi/SGi接口数量。
根据[3GPP TS 29.061]第11.3节，特定Gi/SGi接口的选择是通过接入点名称（APN）进行的：

  2. 每个私有网络都管理自己的地址分配。通常，这会导致不同的私有网络具有重叠的地址范围。GGSN/P-GW和每个私有网络之间使用逻辑上分离的连接（例如IP over IP隧道或第二层虚拟电路）。
在这种情况下，IP地址本身不一定具有唯一性。APN（接入点名称）与IPv4地址和/或IPv6前缀的组合是唯一的。

为了支持重叠地址范围的应用案例，每个APN都映射到一个独立的Gi/SGi接口（网络设备）。
.. 注意::

   接入点名称纯粹是一个控制平面（GTP-C）的概念
在GTP-U层面上，GTP-U数据包中仅包含隧道端点标识符，并且网络设备通过这些标识符来识别。

因此，对于给定的UE（用户设备），从IP到PDN（分组数据网络）网络的映射为：

  * 网络设备 + MS IP（移动站IP）-> 对等IP + 对等TEID（隧道端点标识符），

以及从PDN到IP网络的映射为：

  * 本地GTP-U IP + TEID -> 网络设备

此外，在接收到的T-PDU被注入到网络设备之前，会检查MS IP是否与PDP上下文中记录的IP一致。
