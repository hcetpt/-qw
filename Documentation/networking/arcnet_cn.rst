### SPDX 许可证标识符: GPL-2.0

======
ARCnet
======

.. 注意::

   如果你和我们中的许多人一样，购买 ARCnet 卡时没有附带手册，那么请参阅本目录中的 arcnet-hardware.txt 文件以获取跳线设置和布线信息。
   看来没人听我说话，也许一首诗能引起你的注意::

       这个驱动变得越来越庞大，
       但我的猫仍然叫菲菲。
       
   嗯，我想我可以称那为一首诗，尽管它只有两行。嘿，我在计算机科学领域，不是文学领域。给我点宽容吧。
   
   重点是：我非常非常非常非常非常希望你如果测试了这个驱动并且成功运行，请务必告诉我。或者即使没成功。或者任何情况。
   ARCnet 0.32 ALPHA 首次被纳入 Linux 内核 1.1.80 —— 这很不错，但之后甚至更少的人给我写信了，因为他们不需要再安装补丁。哎。

   来吧，做个好人！给我发一份成功的报告！

   （嘿，这比我的原诗还好……这可真糟糕！）

.. 警告::

   如果你不尽快给我发邮件告诉我你的成功或失败，我可能不得不开始唱歌。我们都不想那样吧？

   （你知道，也许可以说我在这方面有点过分强调了。
   如果你这样认为，何不在一封快速的电子邮件中批评我？请也包括你使用的卡类型、软件、网络大小以及是否正常工作。）

   我的电子邮件地址是: apenwarr@worldvisions.ca

这些是 Linux 的 ARCnet 驱动程序。
这次新版本（2.91）是由 David Woodhouse <dwmw2@infradead.org> 整理的，目的是在添加对另一个芯片组的支持后清理驱动程序。现在，通用支持已经从各个芯片组驱动程序中分离出来，并且源文件不再那么充斥着 #ifdef 语句！我对这个文件做了一些修改，但保留了 Avery 的第一人称叙述，因为我并不想彻底重写它。
上一个版本是我（Avery Pennarun）经过数月断断续续的努力，加上其他人的许多错误报告/修复和建议，特别是 Tomasz Motylewski 的大量投入和编码工作的结果。自 ARCnet 2.10 ALPHA 开始，Tomasz 的全新的 RFC1051 支持已被包含进来，看起来运行良好！

在哪里讨论这些驱动程序？
---------------------------------

Tomasz 已经非常友善地建立了一个新的改进的邮件列表。
你可以通过向 listserv@tichy.ch.uj.edu.pl 发送带有正文 “subscribe linux-arcnet 你的真实姓名” 的邮件来订阅。然后，要向列表提交消息，请发送至 linux-arcnet@tichy.ch.uj.edu.pl。
邮件列表的归档可以在以下网址找到：

	http://epistolary.org/mailman/listinfo.cgi/arcnet

linux-net@vger.kernel.org（现已停用，由 netdev@vger.kernel.org 替代）的人们也非常乐于助人，尤其是在讨论可能正常也可能不正常的 ALPHA Linux 内核时。
其他驱动程序和信息
----------------------

您可以在万维网上访问我的 ARCNET 页面：

	http://www.qis.net/~jschmitz/arcnet/

此外，SMC（一家生产 ARCnet 卡的公司）也有一个可能让您感兴趣的万维网站点，
其中包含了针对不同卡（包括 ARCnet 卡）的多个驱动程序。请尝试访问：

	http://www.smc.com/

Performance Technologies 开发了支持 ARCnet 的各种网络软件：

	http://www.perftech.com/ 或者通过 FTP 访问 ftp.perftech.com
Novell 提供了一个包含 ARCnet 驱动程序的 DOS 网络栈。您可以尝试通过 FTP 连接到 ftp.novell.com
您还可以从 oak.oakland.edu:/simtel/msdos/pktdrvr 获取 Crynwr 包驱动程序集合（包括 arcether.com，这是与 ARCnet 卡配合使用的驱动）。不过请注意，在没有打补丁的情况下，它在 386+ 的系统上无法完美运行，并且不兼容某些卡。修复后的版本在我的万维网页上提供，或者如果您无法访问万维网，也可以通过电子邮件获取。
安装驱动程序
---------------------

为了安装该驱动程序，您需要执行以下操作：

	make config
		(确保在网络设备中选择了 ARCnet，并至少选择了一个芯片组驱动程序)
	make clean
	make zImage

如果您是将此 ARCnet 包作为对当前内核中 ARCnet 驱动程序的升级获得的，则首先需要将 arcnet.c 文件复制到 linux/drivers/net 目录中覆盖原有文件。
如果在启动进入新的 Linux 内核时看到一些 ARCnet 消息，说明驱动程序已正确安装。
有四种芯片组选项：

 1. 标准 ARCnet COM90xx 芯片组
这是普通的 ARCnet 卡，您可能拥有这种卡。这是唯一一个在未指定卡的位置时会自动探测的芯片组驱动程序。
命令行上的选项如下所示：

	com90xx=[<io>[,<irq>[,<shmem>]]][,<name>] | <name>

如果您将芯片组支持加载为模块，则选项如下：

	io=<io> irq=<irq> shmem=<shmem> device=<name>

要禁用自动探测，只需在内核命令行上指定 "com90xx="
如果只指定名称并允许自动探测，请输入 "com90xx=<name>"

 2. ARCnet COM20020 芯片组
这是 SMC 推出的新芯片组，支持混杂模式（包嗅探）、额外的诊断信息等。不幸的是，这些卡没有合理的自动探测方法。您必须在内核命令行上指定 I/O 地址。
命令行选项如下：

com20020=<io>[,<irq>[,<node_ID>[,backplane[,CKP[,timeout]]]]][,name]

如果您将芯片组支持作为模块加载，选项如下：

io=<io> irq=<irq> node=<node_ID> backplane=<backplane> clock=<CKP>
timeout=<timeout> device=<name>

COM20020 芯片组允许您在软件中设置节点 ID，从而覆盖默认设置（该默认设置仍在卡上的 DIP 开关上设定）。如果您没有 COM20020 的数据手册，并且不知道其他三个选项指的是什么，那么这些选项对您来说并不重要——可以忽略它们。
3. IO 映射模式下的 ARCnet COM90xx 芯片组
这同样适用于普通的 ARCnet 卡，但不使用共享内存。它的性能不如上述驱动程序，但在您的卡不支持共享内存的情况下，或者（奇怪的是）在您的机器中有太多 ARCnet 卡以至于用尽了共享内存插槽的情况下，提供此驱动程序。
如果您不在内核命令行中指定 IO 地址，则驱动程序将无法找到该卡。
命令行选项如下：

com90io=<io>[,<irq>][,<name>]

如果您将芯片组支持作为模块加载，选项为：

io=<io> irq=<irq> device=<name>

4. ARCnet RIM I 卡
这些都是完全内存映射的 COM90xx 芯片。对此的支持尚未经过测试。如果您有这种卡，请给作者发送成功报告。除设备名称外，必须指定所有选项。
命令行选项如下：

arcrimi=<shmem>,<irq>,<node_ID>[,<name>]

如果您将芯片组支持作为模块加载，选项为：

shmem=<shmem> irq=<irq> node=<node_ID> device=<name>

### 可加载模块支持
-----------------------

配置并重新构建 Linux。当被询问时，对于“通用 ARCnet 支持”和您要使用的 ARCnet 芯片组支持回答 'm'。您也可以对“通用 ARCnet 支持”回答 'y' 并对芯片组支持回答 'm'。

```
make config
make clean
make zImage
make modules
```

如果您正在使用可加载模块，需要使用 `insmod` 来加载它，并且可以在命令行中指定各种卡的特性。（在最近版本的驱动程序中，自动探测更加可靠并且可以作为模块工作，因此现在大部分步骤不再必要。）

例如：
```
cd /usr/src/linux/modules
insmod arcnet.o
insmod com90xx.o
insmod com20020.o io=0x2e0 device=eth1
```

### 使用驱动程序
-----------------

如果您在构建内核时包含了 ARCnet COM90xx 支持，它应该会在启动时自动探测您的卡。如果您使用了编译入内核的不同芯片组驱动程序，必须按照上面详细说明的方式在内核命令行中给出必要的选项。
请阅读《NET-2-HOWTO》和《ETHERNET-HOWTO》以了解 Linux；这些文档通常与这个驱动程序一同提供。您可以将 ARCnet 视为增强版（或降级版，视情况而定）的以太网卡。
顺便说一下，请确保在 HOWTO 中将所有 "eth0" 的引用改为 "arc0"。记住 ARCnet 不是真正的以太网，其设备名称是不同的。
### 一台计算机中的多张网卡

现在 Linux 对这种情况的支持已经相当不错了，但由于我一直很忙，ARCnet 驱动在这方面有些落后。如果将 COM90xx 支持编译到内核中，它（会尝试）自动检测所有已安装的卡。
如果你还有其他卡，并且支持已经被编译到内核中，那么你只需要在内核命令行中重复这些选项，例如：

```
LILO: linux com20020=0x2e0 com20020=0x380 com90io=0x260
```

如果你将芯片组支持作为可加载模块构建，那么你需要做类似以下的操作：

```
insmod -o arc0 com90xx
insmod -o arc1 com20020 io=0x2e0
insmod -o arc2 com90xx
```

ARCnet 驱动程序现在将自动整理它们的名称。

### 如何让它与...一起工作？

**NFS：**
    应该可以很好地支持 Linux 到 Linux 的连接，只需假装你在使用以太网卡即可。
    oak.oakland.edu:/simtel/msdos/nfs 提供了一些不错的 DOS 客户端。还有一个基于 DOS 的 NFS 服务器叫 SOSS。它不像 Linux 那样支持多任务处理（实际上，它根本不支持多任务处理），但你永远不知道你可能需要什么。
    使用 AmiTCP（以及其他一些工具），你可能需要在你的 Amiga nfstab 中设置以下选项：MD 1024 MR 1024 MW 1024
    （感谢 Christian Gottschling <ferksy@indigo.tng.oche.de> 提供的信息。）

    这些选项可能是指最大 NFS 数据/读/写块大小。我不知道为什么 Amiga 的默认设置不起作用；如果你了解更多，请写信告诉我。

**DOS：**
    如果你使用的是免费软件 arcether.com，你可能想要安装我网页上的驱动程序补丁。这有助于 PC/TCP，并且也可以使 arcether 在初始化时因超时而无法加载时正常工作。事实上，如果你在 386+ 上使用它，你确实需要这个补丁。

**Windows：**
    参考 DOS :) Trumpet Winsock 与 Novell 或 Arcether 客户端配合使用时表现良好，前提是记得加载 winpkt 当然。

**LAN Manager 和 Windows for Workgroups：**
    这些程序使用与互联网标准不兼容的协议。它们试图让网卡看起来像是以太网卡，并使网络上的其他人感到困惑。
    然而，从 2.00 版本开始，Linux 的 ARCnet 驱动程序通过 'arc0e' 设备支持这种协议。有关更多信息，请参阅“多协议支持”部分。
    使用免费软件 Samba 服务器和 Linux 客户端，你现在可以很好地与基于 TCP/IP 的 WfWg 或 Lan Manager 网络进行交互。
Windows 95:
随 Windows 95 提供的工具允许您使用 LANMAN 风格的网络驱动程序（NDIS）或 Novell 驱动程序（ODI）来处理您的 ARCnet 数据包。如果您使用 ODI，那么需要在 Linux 中使用 'arc0' 设备。如果您使用 NDIS，则尝试使用 'arc0e' 设备。
如果您需要 arc0e，或者您完全疯狂，并且/或者需要构建一种混合网络以同时使用两种封装类型，请参阅下面的“多协议支持”部分。

OS/2:
有人告诉我它可以在带有 SMC 的 ARCnet 驱动程序的 Warp Connect 下工作。您需要为此使用 'arc0e' 接口。如果您能让 SMC 驱动程序与“正常”Warp 套件中包含的 TCP/IP 组件一起工作，请告诉我。
ftp.microsoft.com 还提供了一个免费的“LAN Manager for OS/2”客户端，该客户端应使用与 WfWg 相同的协议。然而，我在 Warp 下安装时没有成功。请将任何结果邮件给我。

NetBSD/AmiTCP:
这些使用了旧版本的互联网标准 ARCnet 协议（RFC1051），它们与 Linux 驱动程序 v2.10 ALPHA 及以上版本中的 arc0s 设备兼容。（请参阅下面的“多协议 ARCnet”。）** 新版本的 NetBSD 显然支持 RFC1201。

使用多协议 ARCnet
-------------------

ARCnet 驱动程序 v2.10 ALPHA 支持三种协议，每种协议都有其自己的“虚拟网络设备”：

======  ===============================================================
arc0    RFC1201 协议，即官方的互联网标准，恰好与 Novell 的 TRXNET 驱动程序 100% 兼容
ARCnet 驱动程序 1.00 版本仅支持此协议。arc0 是这三种协议中最快的（出于某种原因），并且允许使用更大的数据包，因为它支持 RFC1201 的“数据包拆分”操作。
除非您有特定需求使用不同的协议，我强烈建议您坚持使用这一种。

arc0e   “以太网封装”，通过 ARCnet 发送的数据包实际上类似于以太网数据包，包括 6 字节的硬件地址。此协议与 Microsoft 的 NDIS ARCnet 驱动程序兼容，例如在 WfWg 和 LANMAN 中使用的那种。因为最大传输单元 (MTU) 493 实际上小于 TCP/IP 所“要求”的（576），有可能某些网络操作无法正常运行。然而，在大多数情况下，Linux 的 TCP/IP 层可以通过自动将 TCP/IP 数据包分割为适合大小来进行补偿。arc0e 也比 arc0 稍微慢一些，具体原因尚待确定。（可能是较小的 MTU 导致的。）

arc0s   “[简化的] RFC1051 协议是以前的互联网标准，与新标准完全不兼容。然而，当今的一些软件继续支持旧标准（并且只支持旧标准），包括 NetBSD 和 AmiTCP。RFC1051 也不支持 RFC1201 的数据包拆分功能，并且 507 的 MTU 仍然小于互联网的要求，因此您可能会遇到问题。它的速度也比 RFC1201 慢约 25%，原因与 arc0e 相同。
arc0s 的支持由 Tomasz Motylewski 贡献，并由我进行了部分修改。如果有 bug，那可能是因为我的缘故。
你可以选择不在驱动程序中编译arc0e和arc0s——这样做可以节省一些内存，并且在尝试使用最近的Linux内核中的"NFS-root"等功能时避免混淆。
arc0e和arc0s设备会在你首次使用ifconfig命令配置arc0设备时自动创建。但是，要实际使用它们，你还需使用ifconfig命令配置所需的其他虚拟设备。设置网络的方式有多种：

1. 单一协议
这是最简单的网络配置方式：仅使用两种可用协议中的一种。如上所述，除非有充分的理由（比如某些软件，例如WfWg，只能与arc0e配合使用），否则最好只使用arc0。
如果你只需要arc0，那么以下命令应该能帮你启动并运行：

	ifconfig arc0 我的IP地址
	route add 我的IP地址 arc0
	route add -net 子网地址 arc0
	[在此添加其他本地路由]

   如果你需要arc0e（且仅需要arc0e），则操作略有不同：

	ifconfig arc0 我的IP地址
	ifconfig arc0e 我的IP地址
	route add 我的IP地址 arc0e
	route add -net 子网地址 arc0e

   arc0s的工作方式与arc0e非常相似。
2. 在同一物理链路上使用多于一种协议
现在事情开始变得复杂了。即使尝试这种配置，你也可能需要有点疯狂。下面是我个人的做法。 :) 需要注意的是，我没有在我的家庭网络中包含arc0s；因为我没有NetBSD或AmiTCP计算机，所以我仅在有限的测试中使用arc0s。
我家里的网络中有三台计算机；两台Linux机器（由于上述原因，它们更倾向于使用RFC1201协议），以及一台无法运行Linux但安装了免费Microsoft LANMAN客户端的XT机。
更糟糕的是，其中一台Linux计算机（名为freedom）还配备了一个调制解调器，并作为我互联网服务提供商的路由器。另一台Linux机器（名为insight）也有自己的IP地址，并需要将freedom设为默认网关。然而，XT机（名为patience）并没有自己的互联网IP地址，因此我在一个“私有子网”（根据RFC1597定义）中为其分配了一个IP地址。
首先，我们考虑一个仅包含insight和freedom的简单网络：
洞察力（Insight）需要：

- 通过RFC1201 (arc0)协议与自由（Freedom）通信，因为我更喜欢这种方式并且它更快
- 使用自由作为其互联网网关
这样设置非常简单。按照以下方式配置洞察力：

```
ifconfig arc0 insight
route add insight arc0
route add freedom arc0	/* 我本想在这里使用子网地址（如我在“单一协议”部分所述），
					但不幸的是，子网的其余部分跨越了自由上的PPP
					链路，这使得情况变得复杂。 */
route add default gw freedom
```

自由则配置如下：

```
ifconfig arc0 freedom
route add freedom arc0
route add insight arc0
/* 默认网关由pppd配置 */
```

很好，现在洞察力可以直接通过arc0与自由通信，并且可以通过自由发送数据包到互联网。如果你不知道如何执行上述操作，那么你可能应该停止阅读这一部分，因为接下来的内容只会更复杂。
那么，我如何将耐心（Patience）加入到网络中呢？它会使用LANMAN客户端，这意味着我需要arc0e设备。它需要能够与洞察力和自由通信，并且使用自由作为通往互联网的网关。（回想一下，耐心有一个“私有IP地址”，在互联网上是无法使用的；没关系，我已经在自由上配置了Linux IP伪装，以支持这个子网）
因此，耐心（不可避免地；我没有从我的服务提供商那里获得其他IP地址）拥有一个与自由和洞察力不同的子网中的IP地址，但它需要使用自由作为互联网网关。更糟糕的是，大多数DOS网络程序（包括LANMAN）都有极其简单的网络方案，完全依赖于子网掩码和一个“默认网关”来确定如何路由数据包。这意味着为了到达自由或洞察力，耐心将会通过其默认网关发送数据包，而不管事实上自由和洞察力（得益于arc0e设备）都能够理解直接传输的数据包。
我通过为自由分配一个额外的IP地址来补偿这一点——这个地址别名为“守门人”——位于我的私有子网上，也就是耐心所在的子网。然后，我定义守门人为耐心的默认网关。
为了配置自由（除了上面的命令外）：

```
ifconfig arc0e gatekeeper
route add gatekeeper arc0e
route add patience arc0e
```

这样一来，自由会将所有发往耐心的数据包通过arc0e发送，并将其IP地址标识为守门人（位于私有子网上）。当它与洞察力或互联网通信时，则使用其“自由”的互联网IP地址。
你会注意到我们还没有配置洞察力上的arc0e设备。
这样做可行，但并非必需，而且还需要我从私有子网中为洞察力分配另一个特殊的IP地址。由于洞察力和耐心都使用自由作为它们的默认网关，二者已经可以相互通信。
很幸运，我第一次就这样设置了（咳咳），当我在洞察力上启动DOS时，这样的设置非常方便。在那里，它运行Novell ODI协议栈，而这仅适用于RFC1201 ARCnet。
在这种模式下，洞察（Insight）无法直接与耐心（Patience）进行通信，因为Novell堆栈与Microsoft的以太网封装（Ethernet-Encap）不兼容。我没有更改自由（Freedom）或耐心上的任何设置，只是将自由设置为洞察（现在处于DOS环境）的默认网关，并且所有转发都在这两个通常完全无法通信的主机之间“自动”发生。

对于喜欢图表的人来说，我已经在同一物理ARCnet线上创建了两个“虚拟子网”。你可以这样想象：

```
[RFC1201 网络]                       [ETHER-ENCAP 网络]
(注册的互联网子网)                       (RFC1597 私有子网)

                             (IP 隐藏)
/---------------\         *            /---------------\
|                |         *            |                |
|                +-自由-*-守门员-+                |
|                |    |    *            |                |
\-------+-------/    |    *            \-------+-------/
        |            |                         |
     洞察             |                      耐心
                     (互联网)
```

它工作了：接下来怎么办？
------------------------------

请发送邮件描述你的配置，最好包括驱动版本、内核版本、ARCnet卡型号、CPU类型、网络上的系统数量以及正在使用的软件列表给我，邮箱地址如下：

apenwarr@worldvisions.ca

我回复所有收到的邮件（有时是自动回复）。我的邮件可能很奇怪（并且在到达我之前通常会被转发到各个地方），所以如果你没有在合理的时间内收到回复，请重新发送。

它无法工作：接下来怎么办？
---------------------------------

做和上面同样的事情，但同时包括`ifconfig`和`route`命令的输出，以及任何相关的日志条目（即任何以“arcnet:”开头并在最近一次重启后出现的内容）。

如果你想自己尝试解决问题（强烈建议你先给我发邮件说明问题，因为它可能已经被解决），你可以尝试一些调试级别。对于大量测试（如D_DURING及以上），首先关闭klogd守护进程是非常必要的！D_DURING为每个发送或接收的数据包显示4-5行内容。D_TX、D_RX和D_SKB实际上会显示数据包在发送或接收时的内容，这显然是非常大的。

从v2.40 ALPHA版开始，自动探测程序发生了显著变化。特别是，除非你启用了D_INIT_REASONS调试标志，否则它们不会告诉你为什么没有找到该卡。

一旦驱动程序运行起来，你可以作为root用户运行arcdump shell脚本（可以从我这里获取或包含在完整的ARCnet包中，如果你有的话），随时列出ARCnet缓冲区的内容。要理解这些内容，你应该获取相关的RFC。（其中一些列在arcnet.c文件的顶部）。arcdump假设你的卡位于0xD0000。如果不是，请编辑脚本。

缓冲区0和1用于接收，而缓冲区2和3用于发送。
乒乓缓冲区实现了双向操作。

如果你的调试级别包含D_DURING且没有定义SLOW_XMIT_COPY，则每当卡重置时（这应该只发生在你执行ifconfig up操作或者Linux判断驱动程序已损坏时），缓冲区将被清除为一个常数值0x42。在传输过程中，未使用的缓冲区部分也会被清除为0x42。这是为了更容易地确定哪些字节被数据包使用。

无需重新编译内核即可更改调试级别，只需输入以下命令：

```
ifconfig arc0 down metric 1xxx
/etc/rc.d/rc.inet1
```

其中“xxx”是你想要的调试级别。例如，“metric 1015”将设置调试级别为15。当前默认的调试级别为7。
请注意，调试级别（从v1.90 ALPHA版本开始）是不同调试标志的二进制组合；因此调试级别7实际上是1+2+4，也就是D_NORMAL+D_EXTRA+D_INIT。若要包含D_DURING，您需要在此基础上加上16，结果就是调试级别23。
如果您不明白这一点，您可能也不想了解。
关于您的问题，请给我发邮件。
我想汇款：接下来该怎么做？

去小憩一会儿或者做点别的事情。早上醒来您会感觉好很多。
