SPDX许可证标识符: GPL-2.0

=====================
DM9000网络驱动程序
=====================

版权所有 © 2008 Simtec Electronics，

		  Ben Dooks <ben@simtec.co.uk> <ben-linux@fluff.org>

简介
------------

此文件描述了如何使用包含在文件 `drivers/net/dm9000.c` 和 `drivers/net/dm9000.h` 中的基于DM9000平台设备的网络驱动程序。该驱动程序支持三种DM9000变体，即最早的DM9000E以及较新的DM9000A和DM9000B设备。目前由Ben Dooks维护和测试，任何针对此驱动程序的补丁都应抄送给Ben Dooks。

定义平台设备
--------------

附加到平台设备上的最少资源如下：

    1) 地址寄存器的物理地址
    2) 数据寄存器的物理地址
    3) 设备中断引脚所连接的IRQ线
这些资源应按此顺序指定，因为两个地址区域的顺序很重要（驱动程序期望的是先地址后数据）。
一个来自 `arch/arm/mach-s3c/mach-bast.c` 的示例是：

```c
static struct resource bast_dm9k_resource[] = {
	[0] = {
		.start = S3C2410_CS5 + BAST_PA_DM9000,
		.end   = S3C2410_CS5 + BAST_PA_DM9000 + 3,
		.flags = IORESOURCE_MEM,
	},
	[1] = {
		.start = S3C2410_CS5 + BAST_PA_DM9000 + 0x40,
		.end   = S3C2410_CS5 + BAST_PA_DM9000 + 0x40 + 0x3f,
		.flags = IORESOURCE_MEM,
	},
	[2] = {
		.start = IRQ_DM9000,
		.end   = IRQ_DM9000,
		.flags = IORESOURCE_IRQ | IORESOURCE_IRQ_HIGHLEVEL,
	}
};

static struct platform_device bast_device_dm9k = {
	.name		= "dm9000",
	.id		= 0,
	.num_resources	= ARRAY_SIZE(bast_dm9k_resource),
	.resource	= bast_dm9k_resource,
};
```

请注意 `bast_dm9k_resource[2].flags` 中IRQ触发标志的设置，如果没有此标志将会生成警告。从flags字段传递的触发器将在注册IRQ处理器时传递给 `request_irq()` ，以确保IRQ被正确设置。

这展示了一个典型的平台设备，没有提供可选的配置平台数据。下一个示例使用相同的资源，但添加了可选的平台数据来传递额外的配置数据：

```c
static struct dm9000_plat_data bast_dm9k_platdata = {
	.flags		= DM9000_PLATF_16BITONLY,
};

static struct platform_device bast_device_dm9k = {
	.name		= "dm9000",
	.id		= 0,
	.num_resources	= ARRAY_SIZE(bast_dm9k_resource),
	.resource	= bast_dm9k_resource,
	.dev		= {
		.platform_data = &bast_dm9k_platdata,
	}
};
```

平台数据在 `include/linux/dm9000.h` 中定义，并在下面进行描述。

平台数据
------------

DM9000的额外平台数据可以描述设备的IO总线宽度、是否连接有外部PHY以及是否有外部配置EEPROM可用。
平台数据 `.flags` 字段中的标志如下：

DM9000_PLATF_8BITONLY

	应使用8位操作执行IO
DM9000_PLATF_16BITONLY

	应使用16位操作执行IO
DM9000_PLATF_32BITONLY

	应使用32位操作执行IO
DM9000_PLATF_EXT_PHY  
此芯片连接到了外部PHY

DM9000_PLATF_NO_EEPROM  
这可以用来表示板子上没有EEPROM，或者EEPROM应该对用户隐藏

DM9000_PLATF_SIMPLE_PHY  
切换到使用更简单的PHY轮询方法，该方法不会定期读取MII PHY状态。此选项仅在使用内部PHY时可用。更多信息请参阅链路状态轮询部分

配置符号DM9000_FORCE_SIMPLE_PHY_POLL，Kconfig项“强制使用基于NSR的简单PHY轮询”允许在构建时强制启用此标志

PHY 链路状态轮询
----------------------

驱动程序会跟踪链路状态，并向网络核心报告链路（载波）的可用性。这通过几种不同的方法来管理，具体取决于芯片版本以及使用的PHY类型
对于内部PHY，最初的（当前默认的）方法是读取MII状态，如果芯片中有必要的中断支持，则在状态改变时读取；如果没有，则每两秒通过一个周期性定时器读取一次

为了减少内部PHY的开销，现在可以选择使用DM9000_FORCE_SIMPLE_PHY_POLL配置，或平台数据选项DM9000_PLATF_SIMPLE_PHY，以无需昂贵的MII访问的方式读取汇总信息。这种方法更快，但提供的信息较少
当使用外部PHY时，目前驱动程序必须轮询MII链路状态，因为没有链路变化时的中断方法

DM9000A / DM9000B
-----------------

这些芯片的功能与DM9000E类似，可以轻松地由同一个驱动程序支持。其特性包括：

1) 在内部PHY状态变化时产生中断。这意味着当使用内部PHY时，可以在这些设备上禁用周期性的PHY状态轮询
2) TCP/UDP校验和卸载功能，当前驱动程序尚未支持此功能
-ethtool

驱动程序支持通过 ethtool 接口访问驱动程序状态信息、PHY 状态和 EEPROM。
