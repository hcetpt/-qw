SPDX 许可证标识符: GPL-2.0
.. include:: <isonum.txt>

===============================
DPAA2 以太网驱动程序
===============================

:版权所有: |copy| 2017-2018 NXP

本文件提供了Freescale DPAA2 以太网驱动程序的文档。
支持的平台
===================
此驱动程序为Freescale DPAA2 系统芯片（SoC）提供网络支持，例如：
LS2080A、LS2088A、LS1088A
架构概述
=====================
与常规网卡不同，在DPAA2 架构中，并没有单一的硬件模块代表网络接口；相反，几个独立的硬件资源共同协作来提供网络功能：

- 网络接口
- 队列、通道
- 缓冲池
- MAC/PHY

所有这些硬件资源都通过管理复合体（Management Complex, MC）端口进行分配和配置。MC将大部分这些资源抽象为DPAA2对象，并通过应用程序编程接口（APIs）暴露出来，以便于它们的配置和控制。一些硬件资源，如队列，并没有对应的MC对象，而是作为其他对象的内部资源处理。
对于DPAA2架构及其对象抽象更详细的描述，请参见
*Documentation/networking/device_drivers/ethernet/freescale/dpaa2/overview.rst*
每个Linux网络设备都是基于一个数据路径网络接口（DPNI）对象构建的，并使用缓冲池（DPBPs）、I/O端口（DPIOs）以及集中器（DPCONs）。
配置接口示意图如下：

```
                 -----------------------
                | DPAA2 以太网驱动程序 |
                 -----------------------
                     .      .
.      .
. . . . .      .      . . . . .
.              .
```
DPNIs 是没有直接一对一映射到物理层设备(PHYs)的网络接口；DPBPs 表示硬件缓冲池。数据包输入/输出操作在 DPCON 对象的上下文中进行，使用 DPIO 端口来管理和与硬件资源通信。

数据通路（I/O）接口如下所示：

```
------------------------------------------------------------
|           DPAA2 以太网驱动程序                           |
------------------------------------------------------------
          |          ^        ^         |            |
          |          |        |         |            |
enqueue(发送)|   dequeue(接收, 发送确认)|   数据 |  请求缓冲区 |
 (Tx)      | (Rx, TxC) |  可用通知 |  (Tx) |     缓冲区 |
          |          |          |        |            |
          |          |          |        |            |
          V          |          |        V            V
------------------------------------------------------------
|                 DPIO 驱动程序                            |
------------------------------------------------------------
          |          |        |         |            |          软件
          |          |        |         |            |  ================
          |          |        |         |            |          硬件
------------------------------------------------------------
|               I/O 硬件端口                              |
------------------------------------------------------------
          |          ^        ^         |            |
          |          |        |         |            |
          |          |        |         V            |
          V          |    ================           V
 queues  ----------------------          |     -------------
          ----------------------         |     | 缓冲池 |
          ----------------------         |      -------------
                   =======================
                                通道

```

数据通路 I/O (DPIO) 端口提供发送队列和接收队列服务、数据可用性通知以及缓冲池管理。DPIO 在所有 DPAA2 对象（以及隐式地所有 DPAA2 内核驱动程序）之间共享，这些对象处理数据帧，但必须针对 CPU 进行绑定以便于流量分配。数据帧通过硬件帧队列发送和接收，这些队列可以按通道分组以便于硬件调度。以太网驱动程序将发送(TX)的数据帧放入出口队列，在发送完成后会有一个发送确认帧回传给 CPU。
当有数据帧在入口队列上可用时，会向 CPU 发送数据可用性通知；每个通道只发送一个通知，即使同一通道中的多个队列都有可用的数据帧。通道触发通知后，必须显式重新设置。
每个网络接口可以有多个接收(Rx)、发送(Tx) 和确认队列，并且针对至少一个队列服务的每个 CPU 都有一个通道(DPCON)。
DPCONs 用于通过各个核心的关联 DPIO 将入口流量分配到不同的 CPU。硬件缓冲池的作用是存储入口帧数据。每个网络接口都拥有一个私有的缓冲池，该缓冲池由内核分配的缓冲区填充。
DPNIs 与 PHY 分离；DPNI 可以通过 DPMAC 对象连接到 PHY，或者通过内部链路连接到另一个 DPNI，但这种连接由 MC 管理，并且对以太网驱动程序完全透明。

```
---------     ---------     ---------
| eth if1 |   | eth if2 |   | eth ifn |
---------     ---------     ---------
          .           .
.           .
.           .
---------------------------
|   DPAA2 Ethernet Driver   |
---------------------------
          .           .
.           .
.           .
------      ------      ------            -------
| DPNI |    | DPNI |    | DPNI |          | DPMAC |----+
------      ------      ------            -------     |
         |           |           |                  |        |
         |           |           |                  |      -----
          ===========             ==================      | PHY |
                                                           -----
```

创建网络接口
=============
对于探测到的每个 MC 总线上的 DPNI 对象，都会创建一个网络设备。每个 DPNI 都有一系列属性，这些属性决定了网络接口配置选项及其相关的硬件资源。
DPNI 对象（以及网络接口所需的其他 DPAA2 对象）可以通过两种方式添加到 MC 总线上的容器中：一种是静态方式，通过在启动时由 MC 解析的数据路径布局二进制文件（DPL）；另一种是在运行时通过 DPAA2 对象 API 动态创建。

特性与卸载
==========
支持 TCP 和 UDP 在 IPv4/6 帧上的硬件校验和卸载。校验和卸载可以通过 ethtool 独立地在接收（RX）和发送（TX）方向上配置。
支持在接收路径上对单播和组播 MAC 过滤的硬件卸载，并且始终启用。
在接收（RX）和发送（TX）路径上都支持分散-聚集帧。对于发送（TX），可通过 ethtool 配置分散-聚集支持；而对于接收（RX），它始终启用。
DPAA2 硬件可以处理高达 10K 字节的巨型以太网帧。
以太网驱动程序定义了一个静态流哈希方案，该方案基于五元组键（源 IP、目标 IP、IP 协议、第 4 层源端口、第 4 层目标端口）来分配流量。目前不支持用户配置。
可以通过 ethtool 的 `-S` 选项查询网络接口的特定硬件统计信息以及一些非标准驱动统计信息。
