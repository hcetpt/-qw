```markdown
.. include:: <isonum.txt>

=========================================================
DPAA2（数据路径加速架构第2代）概述
=========================================================

:版权: |copy| 2015 Freescale Semiconductor Inc
:版权: |copy| 2018 NXP

本文档提供了Freescale DPAA2架构的概览及其如何集成到Linux内核中。
简介
============

DPAA2是一种为高速网络包处理设计的硬件架构。DPAA2包括复杂的机制来处理以太网包、队列管理、缓冲区管理、自主L2交换、虚拟以太网桥接以及加速器（例如加密）共享。
一个名为管理复杂数（Management Complex，简称MC）的DPAA2硬件组件负责管理DPAA2硬件资源。MC为软件驱动程序提供了使用DPAA2硬件的对象化抽象。
MC使用DPAA2硬件资源，如队列、缓冲池和网络端口来创建功能对象/设备，如网络接口、L2交换机或加速器实例。
MC提供了内存映射I/O命令接口（MC端口），DPAA2软件驱动程序通过这些接口来操作DPAA2对象。
下图展示了DPAA2资源管理架构的概览::

	+--------------------------------------+
	|                  操作系统(OS)         |
	|                        DPAA2 驱动程序 |
	|                             |        |
	+-----------------------------|--------+
	                              |
	                              | (创建、发现、连接、配置、销毁)
	                              |
	                 DPAA2        |
	+------------------------| mc portal |-+
	|                             |        |
	|   +- - - - - - - - - - - - -V- - -+  |
	|   |                               |  |
	|   |   管理复杂数 (MC)              |  |
	|   |                               |  |
	|   +- - - - - - - - - - - - - - - -+  |
	|                                      |
	| 硬件                  硬件对象       |
	| 资源                 -------       |
	| ---------                 -------   |
	| -队列                    -DPRC      |
	| -缓冲池                  -DPMCP     |
	| -以太网MAC/端口          -DPIO      |
	| -网络接口                -DPNI      |
	|  配置                    -DPMAC     |
	| -队列端口                -DPBP      |
	| -MC端口                   ...       |
	|  ...                                 |
	|                                      |
	+--------------------------------------+

MC调解诸如创建、发现、连接、配置和销毁等操作。快速路径操作，如包发送/接收，并不由MC调解，而是直接通过DPIO对象中的内存映射区域完成。
DPAA2对象概览
=========================

本节简要介绍了几个关键的DPAA2对象，并描述了一个简单的场景，说明了创建网络接口时涉及的对象。
DPRC（数据路径资源容器）
----------------------------------

DPRC是一个容器对象，包含了所有其他类型的DPAA2对象。在下面的例子图中，有8个对象，分为5种类型（DPMCP、DPIO、DPBP、DPNI 和 DPMAC）存放在该容器中。
```
### DPRC（动态可编程资源容器）

从操作系统的角度来看，DPRC 的行为类似于即插即用总线，如 PCI。DPRC 命令可以用来枚举 DPRC 中的内容，发现存在的硬件对象（包括可映射区域和中断）：

```
DPRC.1（总线）
  |
  +--+--------+-------+-------+-------+
     |        |       |       |       |
   DPMCP.1  DPIO.1  DPBP.1  DPNI.1  DPMAC.1
   DPMCP.2  DPIO.2
   DPMCP.3
```

硬件对象可以动态创建和销毁，提供了热插拔对象的能力。DPRC 拥有一个可映射的 MMIO 区域（一个 MC 端口），可用于发送 MC 命令。它有一个用于状态事件（如热插拔）的中断。容器内的所有对象共享相同的硬件“隔离上下文”。这意味着相对于 IOMMU，隔离粒度是在 DPRC（容器）级别，而不是在单个对象级别。DPRC 可以通过启动时传递给 MC 的配置文件静态定义并填充对象。

### DPAA2 以太网网络接口对象

典型的以太网 NIC 是单片式的——NIC 设备包含发送/接收队列机制、配置机制、缓冲管理、物理端口和中断。DPAA2 使用更细粒度的方法，利用多个硬件对象。每个对象提供专门的功能。这些对象的组合被软件用来提供以太网网络接口功能。这种方法提供了对有限硬件资源的有效使用、灵活性和性能优势。

下图显示了一个具有 2 个 CPU 的系统上简单网络接口配置所需的对象：

```
+---+---+ +---+---+
   CPU0     CPU1
+---+---+ +---+---+
    |         |
+---+---+ +---+---+
   DPIO     DPIO
+---+---+ +---+---+
    \     /
     \   /
      \ /
+---+---+
   DPNI  --- DPBP,DPMCP
+---+---+
    |
    |
+---+---+
  DPMAC
+---+---+
    |
port/PHY
```

下面是这些对象的描述。对于每个对象，提供了简要描述以及该对象支持的操作类型和关键资源（MMIO 区域和 IRQ）的摘要。

#### DPMAC（数据路径以太网 MAC）

表示一个以太网 MAC，一种连接到以太网 PHY 并允许物理传输和接收以太网帧的硬件设备。
### MMIO 区域：无
- 中断：DPNI 链路变更
- 命令：设置链路上/下，链路配置，获取统计信息，中断配置，启用，重置

#### DPNI (数据路径网络接口)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
包含 TX/RX 队列、网络接口配置和 RX 缓冲池配置机制。TX/RX 队列位于内存中，并通过队列编号进行标识。
- MMIO 区域：无
- 中断：链路状态
- 命令：端口配置，卸载配置，队列配置，解析/分类配置，中断配置，启用，重置

#### DPIO (数据路径 I/O)
~~~~~~~~~~~~~~~~~~~
提供包的入队和出队操作以及硬件缓冲池管理操作的接口。DPAA2 架构将访问队列的机制（DPIO 对象）与队列本身分开。DPIO 提供了一个 MMIO 接口来入队/出队包。为了入队某物，需要向 DPIO 的 MMIO 区域写入一个描述符，其中包含目标队列编号。通常每个 CPU 将分配一个 DPIO。这允许所有 CPU 同时执行入队/出队操作。DPIO 预期会被不同的 DPAA2 驱动程序共享。
- MMIO 区域：队列操作，缓冲管理
- 中断：数据可用性，拥塞通知，缓冲池耗尽
- 命令：中断配置，启用，重置

#### DPBP (数据路径缓冲池)
~~~~~~~~~~~~~~~~~~~~~~~~~~~
表示一个硬件缓冲池。
- MMIO 区域：无
- 中断：无
- 命令：启用，重置

#### DPMCP (数据路径 MC 门户)
~~~~~~~~~~~~~~~~~~~~~~~~~~
提供一个 MC 命令门户。
用于驱动程序向 MC 发送命令以管理对象。
- MMIO 区域：MC 命令门户
- 中断：命令完成
- 命令：中断配置，启用，重置

### 对象连接
==================
某些对象之间存在必须配置的明确关系：

- DPNI <--> DPMAC
- DPNI <--> DPNI
- DPNI <--> L2-switch-port

    DPNI 必须连接到某个对象，如 DPMAC、另一个 DPNI 或 L2 交换端口。DPNI 连接是通过 DPRC 命令建立的。

```
              +-------+  +-------+
              | DPNI  |  | DPMAC |
              +---+---+  +---+---+
                  |          |
                  +==========+
```

- DPNI <--> DPBP

    网络接口需要一个“缓冲池”（DPBP 对象），该对象提供一个指针列表，用于复制接收到的以太网数据。以太网驱动程序配置与网络接口关联的 DPBPs。

### 中断
==========
由 DPAA2 对象生成的所有中断都是消息中断。在硬件级别上，设备生成的消息中断通常有三个组成部分：
1) 在硬件总线上表达的不可伪造的“设备 ID”，
2) 地址，
3) 数据值。
对于 DPAA2 设备/对象，同一容器/DPRC 中的所有对象共享相同的“设备 ID”。
对于基于ARM的SoC，这与流ID相同。

DPAA2 Linux驱动程序概述
==============================

本节提供了DPAA2 Linux内核驱动程序的概述，包括：
1) 总线驱动程序及其相关的“DPAA2基础设施”驱动程序；
2) 功能对象驱动程序（例如以太网）。
如前所述，DPRC是一个容器，包含其他类型的DPAA2对象。其功能类似于一个即插即用的总线控制器。
DPRC中的每个对象都是一个Linux“设备”，并绑定到一个驱动程序。
下图展示了网络场景中涉及的Linux驱动程序以及每个驱动程序绑定的对象。以下是各驱动程序的简要说明：

```
	                                     +------------+
	                                     | OS Network |
	                                     |   Stack    |
	         +------------+              +------------+
	         | Allocator  |. . . . . . . |  Ethernet  |
	         |(DPMCP,DPBP)|              |   (DPNI)   |
	         +-.----------+              +---+---+----+
	          .          .                   ^   |
	         .            .     <data avail, |   | <enqueue,
	        .              .     tx confirm> |   | dequeue>
	+-------------+         .                |   |
	| DPRC driver |          .           +---+---V----+     +---------+
	|   (DPRC)    |           . . . . . .| DPIO driver|     |   MAC   |
	+----------+--+                      |  (DPIO)    |     | (DPMAC) |
	           |                         +------+-----+     +-----+---+
	           |<dev add/remove>                |                 |
	           |                                |                 |
	  +--------+----------+                     |              +--+---+
	  |   MC-bus driver   |                     |              | PHY  |
	  |                   |                     |              |driver|
	  |   /bus/fsl-mc     |                     |              +--+---+
	  +-------------------+                     |                 |
	                                            |                 |
	========================= HARDWARE =========|=================|======
	                                          DPIO                |
	                                            |                 |
	                                          DPNI---DPBP         |
	                                            |                 |
	                                          DPMAC               |
	                                            |                 |
	                                           PHY ---------------+
	============================================|========================

```

以下是每个驱动程序的简要说明：

### MC-bus驱动程序
MC-bus驱动程序是一个平台驱动程序，从设备树中的节点（兼容"fsl,qoriq-mc"）由引导固件传入。它负责引导DPAA2内核基础设施。
关键功能包括：

- 向内核注册一个新的总线类型"fsl-mc"，并实现总线回调（例如匹配/事件/dev_groups）。
- 实现DPAA2驱动程序注册和设备添加/移除的API。
- 创建一个MSI IRQ域。
- 执行“设备添加”以暴露“根”DPRC，进而触发将根DPRC绑定到DPRC驱动程序。

MC-bus设备树节点的绑定可以在 *Documentation/devicetree/bindings/misc/fsl,qoriq-mc.yaml* 中查阅。
MC-bus的sysfs绑定/解除绑定接口可以在 *Documentation/ABI/testing/sysfs-bus-fsl-mc* 中查阅。

### DPRC驱动程序
DPRC驱动程序绑定到DPRC对象，并在运行时管理总线实例。它执行对DPRC的初始总线扫描，并处理容器事件（如热插拔）的中断，通过重新扫描DPRC来处理这些事件。
分配器
---------
某些对象如 DPMCP 和 DPBP 是通用且可互换的，并旨在供其他驱动程序使用。例如，DPAA2 以太网驱动需要：

- DPMCP 来发送多核命令，配置网络接口
- DPBP 用于网络缓冲池

分配器驱动会注册这些可分配的对象类型，并在总线探测时将这些对象绑定到分配器上。分配器维护一个对象池，供其他 DPAA2 驱动程序分配使用。

DPIO 驱动
-----------
DPIO 驱动绑定到 DPIO 对象，并提供服务，使以太网驱动等其他驱动程序能够为其各自的对象入队和出队数据。
主要服务包括：

- 数据可用性通知
- 硬件队列操作（数据的入队和出队）
- 硬件缓冲池管理

为了传输一个数据包，以太网驱动将数据放入队列并调用 DPIO API。对于接收，以太网驱动注册了一个数据可用性通知回调。为了出队一个数据包，则使用 DPIO API。
为了达到最佳性能，通常每个物理 CPU 有一个 DPIO 对象，允许不同的 CPU 同时入队和出队数据。
DPIO 驱动代表所有内核中的 DPAA2 驱动程序工作——例如以太网、加密、压缩等。

以太网驱动
---------------
以太网驱动绑定到 DPNI 并实现了连接 DPAA2 网络接口到网络栈所需的内核接口。
每个 DPNI 对应一个 Linux 网络接口。

MAC 驱动
----------
以太网 PHY 是一个片外的板载特定组件，通过 MDIO 总线由相应的 PHY 驱动管理。MAC 驱动充当 PHY 驱动与多核控制器（MC）之间的代理。它通过向 DPMAC 对象发送多核命令来实现这种代理功能。
如果 PHY 驱动检测到链路变化，MAC 驱动会通过 DPMAC 命令通知多核控制器。如果网络接口被启动或关闭，多核控制器会通过中断通知 DPMAC 驱动，从而驱动可以采取适当的行动。
当然，请提供你需要翻译的文本。
