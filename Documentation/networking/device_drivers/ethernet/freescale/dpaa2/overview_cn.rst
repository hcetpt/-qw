包含：<isonum.txt>

=========================================================
DPAA2（数据路径加速架构第二代）概述
=========================================================

:版权所有: |copy| 2015 Freescale Semiconductor Inc
:版权所有: |copy| 2018 NXP

本文档提供了Freescale DPAA2架构及其如何集成到Linux内核中的概述。
简介
============

DPAA2是一种为高速网络包处理设计的硬件架构。DPAA2由一系列复杂的机制构成，用于处理以太网包、队列管理、缓冲区管理、自主L2交换、虚拟以太网桥接和加速器（例如加密）共享。
一个名为管理复合体（或简称MC）的DPAA2硬件组件管理DPAA2硬件资源。MC为软件驱动程序使用DPAA2硬件提供基于对象的抽象。
MC使用DPAA2硬件资源，如队列、缓冲池和网络端口来创建功能性对象/设备，如网络接口、L2交换机或加速器实例。
MC提供了内存映射I/O命令接口（MC门户），DPAA2软件驱动程序通过这些接口来操作DPAA2对象。
下图展示了DPAA2资源管理架构的概览： 

	+--------------------------------------+
	|                  操作系统(OS)         |
	|                       DPAA2驱动程序  |
	|                            |          |
	+-----------------------------|---------+
	                              |
	                              | (创建、发现、连接
	                              |  配置、使用、销毁)
	                              |
	                 DPAA2        |
	+------------------------| MC门户 |-+
	|                             |        |
	|   +- - - - - - - - - - - - -V- - -+  |
	|   |                               |  |
	|   |   管理复合体(MC)              |  |
	|   |                               |  |
	|   +- - - - - - - - - - - - - - - -+  |
	|                                      |
	| 硬件                  硬件对象   |
	| 资源                 -------    |
	| ---------                 |      |
	| -队列                    -DPRC    |
	| -缓冲池                  -DPMCP   |
	| -以太网MAC/端口           -DPIO   |
	| -网络接口                -DPNI    |
	|  配置                    -DPMAC   |
	| -队列门户                -DPBP    |
	| -MC门户                    ...    |
	|  ...                                  |
	|                                      |
	+--------------------------------------+

MC调解诸如创建、发现、连接、配置和销毁等操作。而像包发送/接收这样的快速路径操作不在MC的调解之下，并直接通过DPIO对象中的内存映射区域完成。
DPAA2对象概览
=========================

本节简要介绍了一些关键的DPAA2对象，并描述了一个简单的场景，说明了创建网络接口所涉及的对象。
DPRC（数据路径资源容器）
----------------------------------

DPRC是一个容器对象，包含了所有其他类型的DPAA2对象。在下面的示例图中，该容器中包含了8个不同类型的对象（DPMCP、DPIO、DPBP、DPNI 和 DPMAC）。
从操作系统的角度来看，DPRC（动态可编程资源容器）的行为类似于即插即用总线，如PCI。DPRC命令可用于枚举DPRC的内容、发现存在的硬件对象（包括可映射区域和中断），如下所示：

    DPRC.1（总线）
           |
           +--+--------+-------+-------+-------+
              |        |       |       |       |
            DPMCP.1  DPIO.1  DPBP.1  DPNI.1  DPMAC.1
            DPMCP.2  DPIO.2
            DPMCP.3

硬件对象可以动态创建和销毁，从而具备热插拔对象进出DPRC的能力。DPRC有一个可映射的MMIO区域（MC端口），可用于发送MC命令。它还有一个用于状态事件（如热插拔）的中断。容器内的所有对象共享相同的硬件“隔离上下文”。这意味着对于IOMMU而言，隔离粒度在DPRC（容器）级别，而不是单个对象级别。DPRC可以通过配置文件静态定义，并在固件启动时通过该配置文件填充对象。

### DPAA2以太网网络接口的对象
一个典型的以太网NIC是单块式的——NIC设备包含了TX/RX队列机制、配置机制、缓冲管理、物理端口和中断。而DPAA2采用更细致的方法，利用多个硬件对象。每个对象提供专门的功能。软件使用这些对象的组合来提供以太网网络接口功能。这种方法有效地利用了有限的硬件资源，提供了灵活性和性能优势。

下图展示了在一个具有2个CPU的系统上简单网络接口配置所需的对象：

    +---+---+ +---+---+
           CPU0     CPU1
    +---+---+ +---+---+
        |         |
    +---+---+ +---+---+
           DPIO     DPIO
    +---+---+ +---+---+
        \     /
         \   /
          \ /
    +---+---+
          DPNI  --- DPBP,DPMCP
    +---+---+
          |
          |
    +---+---+
        DPMAC
    +---+---+
          |
    port/PHY

下面描述了各个对象。对于每个对象，都提供了一个简短的描述，以及该对象支持的操作类型概要和关键资源（MMIO区域和IRQ）的概要。

#### DPMAC（数据路径以太网MAC）
代表以太网MAC，一种硬件设备，连接到以太网PHY，允许物理传输和接收以太网帧。
- MMIO 区域：无
- 中断请求（IRQs）：DPNI 链路状态变化
- 命令：设置链路上/下，链路配置，获取统计信息，中断请求（IRQ）配置，启用，重置

DPNI（数据通路网络接口）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
包含 TX/RX 队列、网络接口配置和 RX 缓冲池配置机制。TX/RX 队列位于内存中，并通过队列编号进行标识。
- MMIO 区域：无
- 中断请求（IRQs）：链路状态
- 命令：端口配置，卸载配置，队列配置，解析/分类配置，中断请求（IRQ）配置，启用，重置

DPIO（数据通路 I/O）
~~~~~~~~~~~~~~~~~~~
提供接口用于入队和出队数据包以及执行硬件缓冲池管理操作。DPAA2 架构将访问队列的机制（即 DPIO 对象）与队列本身分开。DPIO 提供了一个 MMIO 接口用于入队/出队数据包。为了入队某个项，需要向 DPIO 的 MMIO 区域写入一个描述符，其中包含了目标队列编号。
通常每个 CPU 都会分配一个 DPIO。这使得所有 CPU 可以同时执行入队/出队操作。预计不同的 DPAA2 驱动程序将共享 DPIO。
- MMIO 区域：队列操作，缓冲管理
- 中断请求（IRQs）：数据可用性，拥塞通知，缓冲池耗尽
- 命令：中断请求（IRQ）配置，启用，重置

DPBP（数据通路缓冲池）
~~~~~~~~~~~~~~~~~~~~~~~~~~~
表示一个硬件缓冲池。
- MMIO 区域：无
- 中断请求（IRQs）：无
- 命令：启用，重置

DPMCP（数据通路多核门户）
~~~~~~~~~~~~~~~~~~~~~~~~~~
提供一个多核命令门户。
被驱动程序用来发送命令到多核（MC）来管理对象。
- MMIO 区域：多核命令门户
- 中断请求（IRQs）：命令完成
- 命令：中断请求（IRQ）配置，启用，重置

对象连接
==================
一些对象之间存在必须配置的显式关系：

- DPNI ↔ DPMAC
- DPNI ↔ DPNI
- DPNI ↔ L2 交换机端口

    DPNI 必须与某些实体相连，如 DPMAC、另一个 DPNI 或 L2 交换机端口。DPNI 连接是通过 DPRC 命令建立的。
::

              +-------+  +-------+
              | DPNI  |  | DPMAC |
              +---+---+  +---+---+
                  |          |
                  +==========+

- DPNI ↔ DPBP

    网络接口需要一个“缓冲池”（DPBP 对象），该缓冲池提供一个指针列表，指向接收的以太网数据要复制到的内存位置。以太网驱动程序配置与网络接口关联的 DPBP。

中断
==========
由 DPAA2 对象生成的所有中断都是消息中断。在硬件级别上，设备生成的消息中断通常具有三个组成部分——1) 不可伪造的“设备 ID”，在硬件总线上表达；2) 地址；3) 数据值。
对于 DPAA2 设备/对象而言，同一容器/DPRC 中的所有对象都共享相同的“设备 ID”。
对于基于ARM的片上系统（SoC），这与流ID相同。
DPAA2 Linux驱动程序概览
============================

本节提供了DPAA2 Linux内核驱动程序的概述，包括：
1) 总线驱动程序及其相关的“DPAA2基础设施”驱动程序；
2) 功能对象驱动程序（例如以太网）。

如前所述，DPRC是一个容器，用于容纳其他类型的DPAA2对象。其功能类似于即插即用总线控制器。
DPRC中的每个对象都是一个Linux“设备”，并绑定到一个驱动程序。

下图展示了网络场景中涉及的Linux驱动程序以及每个驱动程序绑定的对象。下面将简要介绍每个驱动程序：
::

	                                     +------------+
	                                     | 操作系统网络 |
	                                     |   栈    |
	                                     |   (OS Network Stack)   |
	                                     +------------+
	                                     | 以太网  |
	                                     |   (DPNI)   |
	         +------------+              +---+---+----+
	         | 分配器  |. . . . . . . . |   |   |
	         |(DPMCP,DPBP)|              |   |   |
	         +-.----------+              +---+---+----+
	          .          .                   ^   |
	         .            .     <数据可用, |   | <入队列,
	        .              .     发送确认> |   | 出队列>
	+-------------+         .                |   |
	| DPRC 驱动程序 |          .           +---+---V----+     +---------+
	|   (DPRC)    |           . . . . . .| DPIO 驱动程序|     |   MAC   |
	+----------+--+                      |  (DPIO)    |     | (DPMAC) |
	           |                         +------+-----+     +-----+---+
	           |<设备添加/删除>                |                 |
	           |                                |                 |
	  +--------+----------+                     |              +--+---+
	  |   MC-总线驱动程序   |                     |              | PHY  |
	  |                   |                     |              |驱动程序|
	  |   /bus/fsl-mc     |                     |              +--+---+
	  +-------------------+                     |                 |
	                                            |                 |
	========================= 硬件 =========|=================|======
	                                          DPIO                |
	                                            |                 |
	                                          DPNI---DPBP         |
	                                            |                 |
	                                          DPMAC               |
	                                            |                 |
	                                           PHY ---------------+
	============================================|========================

下面是每个驱动程序的简要说明：

MC-总线驱动程序
-----------------
MC-总线驱动程序是一个平台驱动程序，并从设备树中的节点（兼容性为"fsl,qoriq-mc"）进行探测，该节点由启动固件传递。它负责引导DPAA2内核基础设施。
关键功能包括：

- 向内核注册名为"fsl-mc"的新总线类型，并实现总线回调（例如匹配、uevent、dev_groups）
- 实现DPAA2驱动程序注册和设备添加/移除的API
- 创建MSI中断域
- 执行“设备添加”以暴露“根”DPRC，进而触发根DPRC与DPRC驱动程序的绑定

MC-总线设备树节点的绑定可以在 *Documentation/devicetree/bindings/misc/fsl,qoriq-mc.yaml* 中查阅。
MC-总线的sysfs绑定/解绑接口可以在 *Documentation/ABI/testing/sysfs-bus-fsl-mc* 中查阅。
DPRC驱动程序
-------------
DPRC驱动程序绑定到DPRC对象，并对总线实例进行运行时管理。它执行DPRC的初始总线扫描，并处理容器事件（如热插拔）的中断，通过重新扫描DPRC来处理这些事件。
### 分配器
某些对象如 DPMCP 和 DPBP 是通用且可互换的，并旨在供其他驱动程序使用。例如，
DPAA2 以太网驱动程序需要：

- 使用 DPMCP 发送管理命令，以配置网络接口
- 使用 DPBP 为网络缓冲池

分配器驱动程序注册这些可分配的对象类型，当总线被探测时，这些对象将绑定到分配器。
分配器维护一个对象池，供其他 DPAA2 驱动程序分配使用。

### DPIO 驱动程序
DPIO 驱动程序绑定到 DPIO 对象并提供服务，使其他驱动程序（如以太网驱动程序）能够为其各自对象入队和出队数据。
关键服务包括：

- 数据可用性通知
- 硬件队列操作（数据的入队和出队）
- 硬件缓冲池管理

为了发送一个数据包，以太网驱动程序将数据放入队列并调用 DPIO API。对于接收，以太网驱动程序注册了一个数据可用性通知回调。为了出队一个数据包，使用了 DPIO API。
为了达到最优性能，通常每个物理 CPU 绑定一个 DPIO 对象，允许不同的 CPU 同时进行数据的入队和出队操作。
DPIO 驱动程序代表内核中所有活跃的 DPAA2 驱动程序运行——以太网、加密、压缩等。

### 以太网驱动程序
以太网驱动程序绑定到 DPNI，并实现了连接 DPAA2 网络接口与网络堆栈所需的内核接口。
每个 DPNI 对应一个 Linux 网络接口。

### MAC 驱动程序
以太网 PHY 是一个芯片外的、特定于主板的组件，通过 mdio 总线由相应的 PHY 驱动程序管理。MAC 驱动程序充当 PHY 驱动程序与管理控制器 (MC) 之间的代理。它通过向 DPMAC 对象发送管理命令来实现这一代理功能。
如果 PHY 驱动程序检测到链路变化，MAC 驱动程序将通过 DPMAC 命令通知管理控制器 (MC)。如果网络接口被启用或禁用，管理控制器 (MC) 将通过中断通知 DPMAC 驱动程序，驱动程序可以采取适当的行动。
您没有提供需要翻译的文本。请提供需要翻译成中文的英文或其他语言的文本。
