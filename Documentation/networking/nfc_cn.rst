### Linux NFC 子系统

#### 近场通信 (NFC) 子系统

近场通信 (NFC) 子系统用于标准化 NFC 设备驱动程序的开发，并创建一个统一的用户空间接口。本文档涵盖了架构概览、设备驱动程序接口描述和用户空间接口描述。

##### 架构概览

NFC 子系统负责以下职责：
- 管理 NFC 适配器；
- 搜索目标；
- 低级数据交换；

该子系统分为几个部分。“核心”负责提供设备驱动程序接口。同时，它还负责提供控制操作和低级数据交换的接口。
控制操作通过通用 netlink 对用户空间可用。
低级数据交换接口由新的套接字家族 PF_NFC 提供。NFC_SOCKPROTO_RAW 实现与 NFC 目标的原始通信。

```
+--------------------------------------+
|              用户空间                |
+--------------------------------------+
^                       ^
| 低级                 | 控制
| 数据交换             | 操作
|                      |
|                      v
|                  +-----------+
| AF_NFC           |  netlink  |
| 套接字           +-----------+
| 原始                    ^
|                          |
v                          v
+---------+            +-----------+
| rawsock | <--------> |   核心    |
+---------+            +-----------+
                                    ^
                                    |
                                    v
                               +-----------+
                               |  驱动     |
                               +-----------+
```

##### 设备驱动程序接口

在向 NFC 子系统注册时，设备驱动程序必须告知核心支持的 NFC 协议集以及一组回调操作。必须实现的操作回调如下：

* `start_poll` — 设置设备以搜索目标
* `stop_poll` — 停止正在进行的搜索操作
* `activate_target` — 选择并初始化找到的目标之一
* `deactivate_target` — 取消选择并去初始化已选中的目标
* `data_exchange` — 发送数据并接收响应（双向通信操作）

##### 用户空间接口

用户空间接口分为控制操作和低级数据交换操作。

**控制操作：**

通用 netlink 用于实现对控制操作的接口。这些操作由命令和事件组成，如下所示：

* `NFC_CMD_GET_DEVICE` — 获取特定设备的信息或列出所有设备
* `NFC_CMD_START_POLL` — 设置特定设备以搜索目标
* `NFC_CMD_STOP_POLL` — 停止特定设备上的搜索操作
* `NFC_CMD_GET_TARGET` — 列出特定设备找到的所有目标

* `NFC_EVENT_DEVICE_ADDED` — 报告添加了 NFC 设备
* `NFC_EVENT_DEVICE_REMOVED` — 报告移除了 NFC 设备
* `NFC_EVENT_TARGETS_FOUND` — 当找到一个或多个目标时报告 `START_POLL` 的结果

用户必须调用 `START_POLL` 来搜索 NFC 目标，并通过 `NFC_ATTR_PROTOCOLS` 属性传递所需的 NFC 协议。设备将保持搜索状态直到找到任何目标。但是，用户可以通过调用 `STOP_POLL` 命令来停止搜索操作。在这种情况下，会检查 `STOP_POLL` 请求者是否与 `START_POLL` 请求者相同。
如果搜索操作找到了一个或多个目标，则会发送 `TARGETS_FOUND` 事件（包括设备 ID）。用户必须调用 `GET_TARGET` 来获取该设备找到的所有目标列表。每个回复消息都包含有关目标的相关信息，例如支持的 NFC 协议等属性。
当关闭一个 netlink 套接字时，通过该套接字请求的所有搜索操作都将停止。
低级数据交换：

用户空间必须使用PF_NFC套接字来进行与目标的任何数据通信。所有NFC套接字都使用AF_NFC：

        结构 sockaddr_nfc {
               sa_family_t sa_family;
               __u32 dev_idx;
               __u32 target_idx;
               __u32 nfc_protocol;
        };

为了与一个目标建立连接，用户必须创建一个NFC_SOCKPROTO_RAW类型的套接字，并使用正确填充的sockaddr_nfc结构调用'connect'系统调用。所有信息都来自NFC_EVENT_TARGETS_FOUND网络链接事件。由于一个目标可能支持多种NFC协议，因此用户需要指定想要使用的协议。
内部地，'connect'将导致对驱动程序的activate_target调用；当套接字关闭时，目标将被停用。
通过套接字交换的数据格式取决于NFC协议。例如，在与MIFARE标签进行通信时，交换的数据是MIFARE命令及其响应。
收到的第一个数据包是对发送的第一个数据包的响应，依此类推。为了允许有效的“空”响应，每个接收的数据都有一个1字节的NULL头。
