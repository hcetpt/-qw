SPDX 许可证标识符: GPL-2.0

==============
6pack 协议
==============

这是 6pack-mini-HOWTO，由

安德烈亚斯·科恩根（Andreas Könsgen DG3KQ）编写

:互联网: ajk@comnets.uni-bremen.de
:AMPR 网络: dg3kq@db0pra.ampr.org
:AX.25:    dg3kq@db0ach.#nrw.deu.eu

最后更新日期：1998年4月7日

1. 什么是 6pack？它相比 KISS 的优势是什么？
======================================================

6pack 是一种用于通过串行线在 PC 和 TNC 之间进行数据交换的传输协议。它可以作为 KISS 的替代方案。6pack 有两个主要优势：

- PC 可以完全控制无线信道。PC 和 TNC 之间交换特殊的控制数据，以便 PC 在任何时候都能知道 TNC 是否正在接收数据、是否发生了 TNC 缓冲区欠溢出或过溢出、PTT 是否设置等。这种控制数据的处理优先级高于正常数据，因此可以在任何时候中断数据流以发出重要事件。这有助于改进信道访问和定时算法，因为所有计算都在 PC 中完成。甚至可以尝试一些与已知的 CSMA 和 DAMA 信道访问方法完全不同的方法。
这种实时控制尤其对于通过菊花链连接在一起并连接到 PC 的多个 TNC 非常重要（然而，这一功能尚未被 Linux 6pack 驱动支持）
- 每个通过串行线传输的数据包都带有校验和，因此很容易检测由于串行线上问题导致的错误
接收到的损坏数据包不会传递给 AX.25 层
从 PC 接收到的损坏数据包也不会由 TNC 发送
关于 6pack 的更多细节描述在位于 AX.25 工具包文档目录中的文件 6pack.ps 中。

2. 谁开发了 6pack 协议？
========================================

6pack 协议是由埃基·普利希特（Ekki Plicht DF4OR）、亨宁·雷赫（Henning Rech DF9IC）和贡特尔·约斯特（Gunter Jost DK7WJ）共同开发的。贡特尔·约斯特和马蒂亚斯·韦尔瓦斯基（Matthias Welwarsky DG2FEF）为 FlexNet 的 PC 版本编写了一个 6pack 驱动程序。他们还为 TNC 编写了执行 6pack 协议的固件（见下文第 4 节）。

3. 我在哪里可以获取最新的 6pack Linux 版本？
=========================================================

目前，可以通过匿名 FTP 从 db0bm.automation.fh-aachen.de 获取 6pack 相关资料。在目录 /incoming/dg3kq 中，有一个名为 6pack.tgz 的文件。
4. 准备 TNC 以支持 6pack 操作
========================================

要使用 6pack，需要为 TNC 安装特殊的固件。新购买的 TNC 的 EPROM 中不包含 6pack，因此您需要自己编程一个 EPROM。6pack EPROM 的映像文件应该可以在任何安装了 PC/FlexNet 的包无线电盒中找到。文件名为 6pack.bin。此文件受版权保护，并由 FlexNet 团队维护。可以在随附的许可协议下使用该文件。请不要问我有关此文件内部细节的问题，因为我对此一无所知。我根据 6pack 协议的文本描述编写了 Linux 驱动程序。

TNC 包含一个 64KB 的 EPROM，其中下半部分用于固件/KISS。上半部分通常是空的，有时会编程为名为 TAPR 的软件。在后一种情况下，TNC 会配备一个 DIP 开关，以便您可以轻松地在这两个系统之间切换。当编程新的 EPROM 时，其中一个系统会被 6pack 替换。替换 TAPR 是有用的，因为该软件现在很少使用。如果您的 TNC 没有配备上述开关，您可以自行安装一个开关来切换 EPROM 的最高地址引脚至高电平或低电平。插入新的 EPROM 并切换到 6pack 后，为 TNC 上电进行初步测试。如果固件正确初始化 TNC，则连接和状态 LED 将点亮大约一秒。

5. 构建和安装 6pack 驱动
===========================================

该驱动已在内核版本 2.1.90 上进行了测试。使用较旧的内核可能会导致编译错误，因为在 2.1.8x 内核中对内核函数接口进行了更改。

如何开启 6pack 支持：
=============================

- 在 Linux 内核配置程序中，选择代码成熟度级别选项菜单，并启用开发驱动程序的提示。
- 选择业余无线电支持菜单，并启用串行端口 6pack 驱动。
- 编译并安装内核和模块。

为了使用该驱动程序，需要修改随 AX.25 工具一起提供的 kissattach 程序：
- 进入包含 kissattach 源代码的目录。编辑 kissattach.c 文件，在顶部插入以下几行：

    ```c
    #ifndef N_6PACK
    #define N_6PACK (N_AX25+1)
    #endif
    ```

- 找到如下行：

    ```c
    int disc = N_AX25;
    ```

- 将 `N_AX25` 替换为 `N_6PACK`。
- 重新编译 kissattach。将其重命名为 spattach 以避免混淆。

安装驱动程序：
----------------------

- 运行 `insmod 6pack`。查看 `/var/log/messages` 文件以确认模块是否打印了其初始化信息。
- 执行 spattach，就像启动 KISS 端口时执行 kissattach 一样。
  检查内核是否打印了消息 '6pack: TNC found'。
- 从这里开始，一切应该像设置 KISS 端口一样工作。
  唯一的区别是表示 6pack 端口的网络设备称为 sp 而不是 sl 或 ax。因此，sp0 将是第一个 6pack 端口。
  尽管该驱动程序已在多个平台上进行了测试，但我仍然将其声明为 ALPHA 阶段。请小心！在加载 6pack 模块和执行 spattach 之前，请同步您的磁盘。如果您的计算机表现异常，请注意。阅读本文件第 6 节关于已知问题的内容。
  请注意，TNC 的连接和状态 LED 在 TNC 与 PC/FlexNet 结合使用时是以不同的方式控制的。当使用 FlexNet 时，连接 LED 在存在连接时亮起；状态 LED 在 PC 的 AX.25 引擎中有待传输的数据时亮起。在 Linux 下，6pack 层位于 AX.25 层之上，因此 6pack 驱动程序对连接或尚未传输的数据一无所知。因此，LED 以 KISS 模式的方式控制：当数据通过串行线从 PC 传输到 TNC 时，连接 LED 会亮起；当数据发送到 PC 时，状态 LED 会亮起。

6. 已知问题
=================

在使用 2.0.3x 内核测试驱动程序，并且在无线电信道上的数据速率为 9600 波特或更高时，某些系统可能会偶尔打印消息 '6pack: bad checksum'，这是由于另一站连续发送两个或更多数据包时发生数据丢失造成的。据我所知，这是由于 2.0.3x 内核中的串行驱动程序存在问题。目前还不清楚这个问题在 2.1.x 内核中是否存在，因为我听说 2.1.x 内核中的串行驱动程序代码已经更改。
当使用 ifconfig 关闭 sp 接口时，如果仍然存在一个通过该接口运行的 IP 连接（即使该 IP 连接已经关闭），内核可能会崩溃。当仅存在一个裸 AX.25 连接时不会出现此问题。我不知道这是 6pack 驱动程序的问题还是内核中的其他问题。
该驱动程序已被作为模块进行过测试，但尚未作为内建驱动程序进行测试。
6pack 协议支持在 PC 的一个串行端口上连接令牌环中的 TNC 级联，但这一功能尚未实现。至少目前我无法实现它，因为我没有机会构建 TNC 级联并进行测试。
源代码中的一些注释是不准确的。这些注释是从 SLIP/KISS 驱动程序遗留下来的，6pack 驱动程序就是从该驱动程序派生出来的。
我还没有修改或删除它们——抱歉！代码本身也需要一些清理和优化。这将在后续版本中完成。
如果您遇到任何错误，或者对驱动程序有任何问题或建议，请随时使用本文件开头提供的地址给我发邮件。
祝您玩得开心！

安德烈亚斯
