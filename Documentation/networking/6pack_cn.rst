SPDX 许可证标识符: GPL-2.0

==============
6pack 协议
==============

这是 6pack-mini-HOWTO，由以下人员编写：

安德烈亚斯·科恩根 (Andreas Könsgen) DG3KQ

:互联网: ajk@comnets.uni-bremen.de  
:AMPR 网络: dg3kq@db0pra.ampr.org  
:AX.25:    dg3kq@db0ach.#nrw.deu.eu  

最后更新日期：1998年4月7日

1. 什么是 6pack，它相比于 KISS 有哪些优势？
======================================================

6pack 是一种用于通过串行线路在 PC 和 TNC（终端节点控制器）之间进行数据交换的传输协议。它可以作为 KISS 的替代方案使用。6pack 有两个主要优点：

- PC 获得了对无线电信道的完全控制权。PC 和 TNC 之间会交换特殊的控制数据，以便 PC 在任何时候都能知道 TNC 是否正在接收数据、是否发生了 TNC 缓冲区溢出或不足的情况、PTT 是否被设置等。这种控制数据的处理优先级高于普通数据，因此可以在任何时候中断数据流以发出重要事件。这有助于改进信道接入和定时算法，因为所有计算都在 PC 中进行。甚至有可能尝试与已知的 CSMA 和 DAMA 信道接入方法完全不同的方法。这种实时控制对于提供给通过菊花链连接到彼此和 PC 的多个 TNC 尤为重要（然而，此功能目前尚未被 Linux 6pack 驱动程序支持）。
- 通过串行线传输的每个数据包都带有校验和，因此可以轻松检测由于串行线上问题导致的错误。  
收到的损坏数据包不会传递给 AX.25 层。  
TNC 从 PC 接收的损坏数据包也不会被转发。  
更多关于 6pack 的详细信息在位于 AX.25 工具包文档目录中的文件 6pack.ps 中有所描述。

2. 6pack 协议是由谁开发的？
========================================

6pack 协议由埃基·普利希特 (Ekki Plicht) DF4OR、亨宁·雷希 (Henning Rech) DF9IC 和贡特尔·约斯特 (Gunter Jost) DK7WJ 开发。贡特尔·约斯特和马蒂亚斯·韦尔瓦斯基 (Matthias Welwarsky) DG2FEF 编写的 6pack 驱动程序随同 PC 版本的 FlexNet 一同发布。他们还为 TNC 编写了执行 6pack 协议的固件（见下文第 4 节）。

3. 我在哪里可以获得最新版本的 Linux 下的 6pack？
=========================================================

目前，可以通过匿名 FTP 从 db0bm.automation.fh-aachen.de 获取 6pack 相关文件。在 /incoming/dg3kq 目录中有一个名为 6pack.tgz 的文件。
4. 为6pack操作准备TNC
========================================

要使用6pack，需要为TNC安装特殊的固件。新购买的TNC中的EPROM并不包含6pack，因此您需要自行编程EPROM。适用于6pack的EPROM映像文件应该可以在任何安装有PC/FlexNet的分组无线电盒上找到。文件名为6pack.bin。此文件受版权保护，并由FlexNet团队维护。您可以在随附的PC/FlexNet许可条款下使用该文件。请不要向我询问关于此文件内部细节的问题，因为我对此一无所知。我使用了6pack协议的文字描述来编写Linux驱动程序。
TNC中包含一个64千字节的EPROM，其下半部分用于固件/KISS。上半部分通常是空的，或者有时会被一种叫做TAPR的软件所占用。在后一种情况下，TNC会配备一个DIP开关，使您可以轻松地在这两个系统之间切换。当编程新的EPROM时，其中一个系统将被6pack取代。替换TAPR是有用的，因为这种软件现在很少使用。如果您手中的TNC没有配备上述开关，您可以自行安装一个开关，以在EPROM的最高地址引脚之间切换高电平和低电平。插入新的EPROM并切换到6pack之后，给TNC通电进行初步测试。如果固件正确初始化TNC，则连接指示灯和状态指示灯会在大约一秒内亮起。

5. 构建和安装6pack驱动程序
===========================================

该驱动程序已在内核版本2.1.90上进行了测试。使用较旧的内核可能会导致编译错误，因为在2.1.8x内核中更改了一个内核函数的接口。

如何启用6pack支持：
=============================

- 在Linux内核配置程序中，选择代码成熟度级别选项菜单，并启用开发驱动程序的提示。
- 选择业余无线电支持菜单，并启用串口6pack驱动程序。
- 编译并安装内核及模块。
为了使用该驱动程序，需要修改随AX.25工具包一起提供的kissattach程序。
- 进入存放kissattach源码的目录。编辑kissattach.c文件。在文件顶部添加以下行：

    ```c
    #ifndef N_6PACK
    #define N_6PACK (N_AX25+1)
    #endif
    ```

  然后找到如下所示的行：

    ```c
    int disc = N_AX25;
    ```

  将`N_AX25`替换为`N_6PACK`。
- 重新编译kissattach。将其重命名为spattach以避免混淆。

安装驱动程序：
----------------------

- 执行`insmod 6pack`。检查/var/log/messages文件，确认模块是否打印出了初始化信息。
按照启动 KISS 端口时启动 kissattach 的方式来执行 spattach。
检查内核是否打印了消息 '6pack: TNC 找到'
- 从这里开始，一切应该像设置 KISS 端口一样正常工作。
唯一的区别是表示 6pack 端口的网络设备称为 sp 而不是 sl 或 ax。因此，sp0 将是第一个 6pack 端口。
尽管该驱动程序已在多个平台上进行了测试，但我仍然将其标记为 ALPHA 阶段。请小心！在加载 6pack 模块和执行 spattach 之前，请同步您的磁盘。如果您的计算机表现异常，请多加注意。请阅读本文件第 6 节中关于已知问题的内容。
请注意，TNC 的连接和状态指示灯的控制方式与使用 PC/FlexNet 时不同。当使用 FlexNet 时，如果有连接，则连接指示灯亮起；如果有需要传输的数据存在于 PC 的 AX.25 引擎缓冲区中，则状态指示灯亮起。在 Linux 下，6pack 层位于 AX.25 层之上，因此 6pack 驱动程序对连接或尚未传输的数据一无所知。因此，这些指示灯的控制方式与 KISS 模式相同：当数据通过串行线路从 PC 发送到 TNC 时，连接指示灯将亮起；当数据发送到 PC 时，状态指示灯将亮起。

6. 已知问题
=============

在使用 2.0.3x 内核进行测试，并且在无线电信道上以 9600 波特或更高的数据速率运行时，该驱动程序可能会在某些系统上偶尔打印出消息 '6pack: 校验和错误'，这是由于另一端站发送两个或更多连续数据包时发生数据丢失造成的。我被告知这是 2.0.3x 内核中的串行驱动程序存在问题所导致的。目前还不清楚这个问题在 2.1.x 内核中是否存在，因为听说在 2.1.x 中串行驱动程序代码已经有所改变。
当使用 ifconfig 关闭 sp 接口时，如果仍存在通过该接口运行的 AX.25 连接（即使该 IP 连接已关闭），内核可能会崩溃。如果仅存在裸 AX.25 连接时则不会出现此问题。我目前还不确定这是否是 6pack 驱动程序的问题还是内核其他部分的问题。
该驱动程序已被作为模块进行了测试，但尚未作为内建内核驱动程序进行测试。
6pack 协议支持在一个令牌环中通过一个 PC 的串行端口串联连接多个 TNC，这一特性尚未实现。至少目前我还无法实现它，因为我没有机会构建一个 TNC 串联链并进行测试。
源代码中的一些注释不够准确。这些注释是从 SLIP/KISS 驱动程序遗留下来的，6pack 驱动程序就是基于该驱动程序开发的。我还没来得及修改或删除它们——抱歉！代码本身还需要一些清理和优化工作。这将在后续版本中完成。
如果你发现了漏洞，或者有关于驱动程序的问题或建议，欢迎随时通过本文件开头提供的地址给我发邮件。
祝你玩得开心！

安德烈亚斯
