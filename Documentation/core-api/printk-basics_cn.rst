SPDX 许可证标识符: GPL-2.0

===========================
使用 printk 进行日志记录
===========================

printk() 是 Linux 内核中最广为人知的函数之一。这是我们用于打印消息的标准工具，通常也是跟踪和调试最基本的方式。如果你熟悉 printf(3)，你就可以看出 printk() 是基于它的，尽管它在功能上有一些差异：

  - printk() 消息可以指定日志级别。
- 格式字符串虽然很大程度上与 C99 兼容，但并不遵循完全相同的规范。它具有一些扩展和一些限制（没有 `%n` 或浮点数转换指示符）。参见 :ref:`如何正确获取 printk 格式指示符 <printk-specifiers>`。
所有 printk() 消息都会被打印到内核日志缓冲区中，该缓冲区是一个通过 `/dev/kmsg` 导出到用户空间的环形缓冲区。通常的读取方式是使用 `dmesg`。
printk() 通常像这样使用： 

  ```
  printk(KERN_INFO "Message: %s\n", arg);
  ```

其中 `KERN_INFO` 是日志级别（请注意，它与格式字符串拼接在一起，日志级别不是单独的参数）。可用的日志级别如下：

+----------------+--------+-----------------------------------------------+
| 名称           | 字符串 | 别名函数                                       |
+================+========+===============================================+
| KERN_EMERG     | "0"    | pr_emerg()                                    |
+----------------+--------+-----------------------------------------------+
| KERN_ALERT     | "1"    | pr_alert()                                    |
+----------------+--------+-----------------------------------------------+
| KERN_CRIT      | "2"    | pr_crit()                                     |
+----------------+--------+-----------------------------------------------+
| KERN_ERR       | "3"    | pr_err()                                      |
+----------------+--------+-----------------------------------------------+
| KERN_WARNING   | "4"    | pr_warn()                                     |
+----------------+--------+-----------------------------------------------+
| KERN_NOTICE    | "5"    | pr_notice()                                   |
+----------------+--------+-----------------------------------------------+
| KERN_INFO      | "6"    | pr_info()                                     |
+----------------+--------+-----------------------------------------------+
| KERN_DEBUG     | "7"    | 如果定义了 DEBUG，则为 pr_debug() 和 pr_devel() |
+----------------+--------+-----------------------------------------------+
| KERN_DEFAULT   | ""     |                                               |
+----------------+--------+-----------------------------------------------+
| KERN_CONT      | "c"    | pr_cont()                                     |
+----------------+--------+-----------------------------------------------+

日志级别指定了消息的重要性。内核根据其日志级别和当前的 *console_loglevel*（一个内核变量）来决定是否立即显示消息（将其打印到当前控制台）。如果消息优先级较高（较低的日志级别值），则消息将被打印到控制台。
如果省略了日志级别，则以 `KERN_DEFAULT` 级别打印消息。
你可以使用以下命令检查当前的 *console_loglevel*：

  ```
  $ cat /proc/sys/kernel/printk
  4        4        1        7
  ```

结果展示了 *当前*、*默认*、*最小* 和 *启动时默认* 的日志级别。
要更改当前的 console_loglevel，只需将所需的级别写入 `/proc/sys/kernel/printk`。例如，要将所有消息打印到控制台：

  ```
  # echo 8 > /proc/sys/kernel/printk
  ```

另一种方法，使用 `dmesg`：

  ```
  # dmesg -n 5
  ```

设置 console_loglevel 打印 KERN_WARNING (4) 或更严重的消息到控制台。更多信息请参阅 `dmesg(1)`。
作为 printk() 的替代方案，你可以使用 `pr_*()` 别名进行日志记录。这些宏家族将日志级别嵌入到宏名称中。例如：

  ```
  pr_info("Info message no. %d\n", msg_num);
  ```

打印一条 `KERN_INFO` 消息。
除了比等效的 printk() 调用更简洁外，它们还可以通过 pr_fmt() 宏使用公共的格式字符串定义。例如，在源文件顶部（任何 `#include` 指令之前）定义：

  ```
  #define pr_fmt(fmt) "%s:%s: " fmt, KBUILD_MODNAME, __func__
  ```

会使该文件中的每个 pr_*() 消息前缀包含生成消息的模块和函数名称。
出于调试目的，还有两个条件编译的宏：pr_debug() 和 pr_devel()，除非定义了 `DEBUG`（对于 pr_debug() 还需要定义 `CONFIG_DYNAMIC_DEBUG`），否则不会被编译。
功能参考
==================

.. kernel-doc:: include/linux/printk.h
   :functions: printk pr_emerg pr_alert pr_crit pr_err pr_warn pr_notice pr_info
      pr_fmt pr_debug pr_devel pr_cont

（注：这段文档似乎是用于说明内核打印功能的引用，但其格式并不符合常规的文本内容。这里是将其直接翻译，保持原有的格式不变）

功能参考
==================

.. 内核文档:: include/linux/printk.h
   :functions: printk pr_emerg pr_alert pr_crit pr_err pr_warn pr_notice pr_info
      pr_fmt pr_debug pr_devel pr_cont
请注意，这里的"kernel-doc"和"functions"可能是指向特定文档生成工具的标签或指令，这些在中文环境中可能不需要或者有不同的表示方法。如果你需要一个更贴近实际含义的翻译，请告知我。
