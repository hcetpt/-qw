### SPDX 许可证标识符: GPL-2.0

#### PCI NTB 功能

**作者:** Kishon Vijay Abraham I <kishon@ti.com>

PCI 非透明桥接（NTB）允许两个主机系统通过将每个主机暴露为另一主机上的设备来进行相互通信。通常，NTB 支持在远程机器上生成中断、将内存范围暴露为基址寄存器（BARs），以及执行直接内存访问（DMA）。它们还支持共享存储区，即位于 NTB 内的内存区域，可以从两台机器访问。

PCI NTB 功能允许通过配置端点实例的方式使两个不同的系统（或主机）能够相互通信，从而将一个系统的事务路由到另一个系统。

下图中，PCI NTB 功能以一种方式配置了包含多个 PCI 端点（EP）实例的片上系统（SoC），使得来自一个 EP 控制器的事务被路由到另一个 EP 控制器。一旦 PCI NTB 功能使用多个 EP 实例配置了 SoC，HOST1 和 HOST2 就可以使用 SoC 作为桥梁进行相互通信。

```
+-------------+                                   +-------------+
|             |                                   |             |
|    HOST1    |                                   |    HOST2    |
|             |                                   |             |
+------^------+                                   +------^------+
       |                                                 |
       |                                                 |
+-------|-------------------------------------------------|-------+
|  +------v------+                                   +------v------+  |
|  |             |                                   |             |  |
|  |     EP      |                                   |     EP      |  |
|  | CONTROLLER1 |                                   | CONTROLLER2 |  |
|  |             <----------------------------------->             |  |
|  |             |                                   |             |  |
|  |             |                                   |             |  |
|  |             |  SoC With Multiple EP Instances   |             |  |
|  |             |  (Configured using NTB Function)  |             |  |
|  +-------------+                                   +-------------+  |
+---------------------------------------------------------------------+
```

用于实现 NTB 的结构
======================

1. 配置区域
2. 自身共享存储区寄存器
3. 对端共享存储区寄存器
4. 门铃（DB）寄存器
5. 内存窗口（MW）

配置区域：
------------

配置区域是通过 NTB 端点功能驱动程序实现的 NTB 中特有的结构。主机侧和端点侧的 NTB 功能驱动程序将利用该区域交换信息。配置区域包含了用于配置端点控制器的控制/状态寄存器。主机可以写入此区域来配置出站地址转换单元（ATU），并指示连接状态。端点可以通过此区域指示由主机发出的命令的状态，并向主机指示共享存储区偏移量和内存窗口的数量。
以下是配置区域的格式。此处的所有字段均为 32 位。

```
+------------------------+
|         COMMAND        |
+------------------------+
|         ARGUMENT       |
+------------------------+
|         STATUS         |
+------------------------+
|         TOPOLOGY       |
+------------------------+
|    ADDRESS (LOWER 32)  |
+------------------------+
|    ADDRESS (UPPER 32)  |
+------------------------+
|           SIZE         |
+------------------------+
|   NO OF MEMORY WINDOW  |
+------------------------+
|  MEMORY WINDOW1 OFFSET |
+------------------------+
|       SPAD OFFSET      |
+------------------------+
|        SPAD COUNT      |
+------------------------+
|      DB ENTRY SIZE     |
+------------------------+
|         DB DATA        |
+------------------------+
|            :           |
+------------------------+
|            :           |
+------------------------+
|         DB DATA        |
+------------------------+
```

**COMMAND：**

NTB 功能支持三种命令：

- CMD_CONFIGURE_DOORBELL (0x1)：用于配置门铃的命令。在发出此命令之前，主机应分配并初始化 MSI/MSI-X 向量（即，在端点中初始化 MSI/MSI-X 能力）。端点收到此命令后，会配置出站 ATU，使得对门铃 BAR 的事务会被路由到主机编程的 MSI/MSI-X 地址。ARGUMENT 寄存器应填充要配置的门铃数量（低 16 位）以及是否配置 MSI 或 MSI-X（第 16 位）
- CMD_CONFIGURE_MW (0x2)：用于配置内存窗口（MW）的命令。主机应在分配一个可供远程主机访问的缓冲区之后发出此命令。分配的地址应编程到 ADDRESS 寄存器（64 位），大小应编程到 SIZE 寄存器，内存窗口索引应编程到 ARGUMENT 寄存器。端点收到此命令后，会配置出站 ATU，使得对 MW BAR 的事务被路由到主机提供的地址
- CMD_LINK_UP (0x3)：用于指示主机侧的 NTB 应用程序已绑定到 EP 设备的命令。一旦端点从双方主机接收到此命令，端点将向双方主机触发 LINK_UP 事件，以指示主机 NTB 应用程序可以开始相互通信

**ARGUMENT：**

此寄存器的值取决于在命令寄存器中发出的命令。更多详细信息请参见 COMMAND 部分。
拓扑结构：

主接口设置为 NTB_TOPO_B2B_USD
次接口设置为 NTB_TOPO_B2B_DSD

地址/大小：

在配置内存窗口时所使用的地址和大小。
更多信息请参见 "CMD_CONFIGURE_MW"。
内存窗口1偏移量：

内存窗口1 和 门铃寄存器被打包在同一 BAR 中。该区域的起始部分包含门铃寄存器，而区域的后部用于内存窗口1。
此寄存器指定了内存窗口1的偏移量。
内存窗口数量：

指定了NTB设备支持的内存窗口数量。
自用暂存区偏移量：

自用暂存区和配置区域被打包在同一 BAR 中。该区域的起始部分包含配置区域，而区域的后部用于自用暂存区。
此寄存器指定了自用暂存区寄存器的偏移量。
暂存区数量：

指定了NTB设备支持的暂存区寄存器数量。
门铃条目大小：

用于确定应写入到门铃BAR中的偏移量以触发门铃。EPF NTB可以使用MSI或MSI-X来触发门铃（稍后会添加对MSI-X的支持）。MSI对于所有中断使用相同的地址，而MSI-X可以为不同的中断提供不同的地址。MSI/MSI-X地址由主机提供，主机给出的地址基于其支持的MSI/MSI-X实现。例如，在使用GIC ITS的ARM平台上，所有中断将具有相同的MSI-X地址。
为了支持所有的组合并为MSI和MSI-X使用相同机制，EPF NTB为每个中断在输出地址空间中分配了一个单独的区域。这些区域将映射到主机提供的MSI/MSI-X地址。如果主机为所有中断提供了相同的地址，则所有区域都将映射到相同的地址；如果主机提供了不同的地址，则区域将映射到不同的地址。这确保了触发门铃时没有差异。
门铃数据：

EPF NTB支持32个中断，因此有32个门铃数据寄存器。
这段英文描述可以翻译为如下中文：

这包含了必须写入MSI地址的MSI/MSI-X数据，以触发门铃中断。这部分数据会在调用CMD_CONFIGURE_DOORBELL时由EPF NTB填充。

暂存寄存器：
---------------------
每个主机在NTB终端控制器的内存中都有自己的寄存器空间分配。这些寄存器可以从桥接器的两侧进行读取和写入。
它们被构建在NTB之上的应用程序使用，并可用于传递控制和状态信息到设备的两侧。
暂存寄存器分为两部分：
1) 自身暂存区：主机自身的寄存器空间；
2) 对端暂存区：远程主机的寄存器空间。

门铃寄存器：
---------------------
门铃寄存器用于主机间互相中断对方。

内存窗口：
---------------------
实际的数据传输将在两个主机之间通过内存窗口完成。

模型构造：
====================
为了实现NTB功能，需要建模五个或更多的独立区域（配置、自身暂存区、对端暂存区、门铃、一个或多个内存窗口）。至少需要一个内存窗口，但允许使用多个。所有这些区域都应该映射到BARs以便主机能够访问这些区域。
如果为这些区域中的每一个分配一个32位的BAR，则方案可能如下所示：

======  ===============
BAR编号  使用的构造
======  ===============
BAR0    配置区域
BAR1    自身暂存区
BAR2    对端暂存区
BAR3    门铃
BAR4    内存窗口1
BAR5    内存窗口2
======  ===============

然而，如果我们为每个区域分配单独的BAR，在只支持64位BAR的平台上将不会有足够的BAR来容纳所有的区域。
为了大多数平台的支持，这些区域应该被打包并映射到BARs，这样既能提供NTB的功能性，也能确保主机不会访问它不应该访问的任何区域。
EPF NTB功能采用以下方案：

======  ===============================
BAR编号  使用的构造
======  ===============================
BAR0    配置区域 + 自身暂存区
BAR1    对端暂存区
BAR2    门铃 + 内存窗口1
BAR3    内存窗口2
BAR4    内存窗口3
BAR5    内存窗口4
======  ===============================

使用这个方案，对于基本的NTB功能来说，三个BAR应该是足够的。
### 建模配置/暂存区域：
----------------------------------

```text
+-----------------+------->+------------------+        +-----------------+
|       BAR0      |        |  CONFIG REGION   |        |       BAR0      |
+-----------------+----+   +------------------+<-------+-----------------+
|       BAR1      |    |   |SCRATCHPAD REGION |        |       BAR1      |
+-----------------+    +-->+------------------+<-------+-----------------+
|       BAR2      |            本地内存            |       BAR2      |
+-----------------+                                    +-----------------+
|       BAR3      |                                    |       BAR3      |
+-----------------+                                    +-----------------+
|       BAR4      |                                    |       BAR4      |
+-----------------+                                    +-----------------+
|       BAR5      |                                    |       BAR5      |
+-----------------+                                    +-----------------+
   EP 控制器 1                                          EP 控制器 2
```

上图展示了为 HOST1（连接到 EP 控制器 1）在本地内存中分配的配置区域和暂存区域。HOST1 可以通过 EP 控制器 1 的 BAR0 访问配置区域和暂存区域（自用暂存区）。对等主机（HOST2，连接到 EP 控制器 2）也可以通过 EP 控制器 2 的 BAR1 访问该暂存区域（对等暂存区）。此图展示的是为 HOST1 分配了配置区域和暂存区域的情况，但同样的情况也适用于 HOST2。

### 建模门铃/内存窗口 1：
----------------------------------

```text
+-----------------+    +----->+----------------+-----------+-----------------+
|       BAR0      |    |      |   门铃 1   |-----------> MSI-X 地址 1 |
+-----------------+    |      +----------------+           +-----------------+
|       BAR1      |    |      |   门铃 2   |---------+ |                 |
+-----------------+----+      +----------------+         | |                 |
|       BAR2      |           |   门铃 3   |-------+ | +-----------------+
+-----------------+----+      +----------------+       | +-> MSI-X 地址 2 |
|       BAR3      |    |      |   门铃 4   |-----+ |   +-----------------+
+-----------------+    |      |----------------+     | |   |                 |
|       BAR4      |    |      |                |     | |   +-----------------+
+-----------------+    |      |      MW1       |---+ | +-->+ MSI-X 地址 3||
|       BAR5      |    |      |                |   | |     +-----------------+
+-----------------+    +----->-----------------+   | |     |                 |
   EP 控制器 1             |                |   | |     +-----------------+
                               |                |   | +---->+ MSI-X 地址 4 |
                               +----------------+   |       +-----------------+
                                EP 控制器 2     |       |                 |
                                  （OB 空间）      |       |                 |
                                                    +------->      MW1        |
                                                            |                 |
                                                            |                 |
                                                            +-----------------+
                                                            |                 |
                                                            |                 |
                                                            |                 |
                                                            |                 |
                                                            |                 |
                                                            +-----------------+
                                                             PCI 地址空间
                                                             （由 HOST2 管理）
```

上图展示了如何映射门铃和内存窗口 1，使得 HOST1 可以向 HOST2 发出门铃中断，并且 HOST1 如何使用内存窗口 1（MW1）访问 HOST2 暴露的缓冲区。这里门铃和内存窗口 1 区域被分配在 EP 控制器 2 的外出（OB）地址空间中。在 NTB 终端功能驱动程序初始化阶段完成门铃和内存窗口 1 的 BAR 分配和配置。
从 EP 控制器 2 的 OB 空间到 PCI 地址空间的映射是在 HOST2 发送 CMD_CONFIGURE_MW/CMD_CONFIGURE_DOORBELL 时完成的。

### 建模可选内存窗口：
---------------------------------

这与 MW1 的建模方式相同，但是每个额外的内存窗口都映射到单独的 BAR 上。
