SPDX 许可声明标识符: GPL-2.0

=================
PCI NTB 功能
=================

:作者: Kishon Vijay Abraham I <kishon@ti.com>

PCI 非透明桥接 (NTB) 允许两台主机系统通过将每个主机呈现为另一台主机上的设备进行通信。NTB 通常支持在远程机器上生成中断、将内存范围作为基址寄存器 (BAR) 暴露以及执行直接内存访问 (DMA) 的功能。它们还支持共享存储区（scratchpads），即位于 NTB 内且两台机器都可以访问的内存区域。PCI NTB 功能允许通过配置端点实例，使得一个系统的事务被路由到另一个系统，从而使两个不同的系统（或主机）能够相互通信。

如下图所示，PCI NTB 功能以一种方式配置了片上系统 (SoC)，使来自一个 EP 控制器的事务被路由到另一个 EP 控制器。一旦 PCI NTB 功能通过多个 EP 实例配置了 SoC，HOST1 和 HOST2 就可以使用 SoC 作为桥梁进行通信。
.. code-block:: text

    +-------------+                                   +-------------+
    |             |                                   |             |
    |    HOST1    |                                   |    HOST2    |
    |             |                                   |             |
    +------^------+                                   +------^------+
           |                                                 |
           |                                                 |
 +---------|-------------------------------------------------|---------+
 |  +------v------+                                   +------v------+  |
 |  |             |                                   |             |  |
 |  |     EP      |                                   |     EP      |  |
 |  | CONTROLLER1 |                                   | CONTROLLER2 |  |
 |  |             <----------------------------------->             |  |
 |  |             |                                   |             |  |
 |  |             |                                   |             |  |
 |  |             |  SoC With Multiple EP Instances   |             |  |
 |  |             |  (Configured using NTB Function)  |             |  |
 |  +-------------+                                   +-------------+  |
 +---------------------------------------------------------------------+

用于实现 NTB 的构造
====================

1) 配置区域
2) 自身共享存储区寄存器
3) 对端共享存储区寄存器
4) 门铃 (DB) 寄存器
5) 内存窗口 (MW)

配置区域：
--------------

配置区域是使用 NTB 端点功能驱动程序实现 NTB 的特定构造。主机和端点侧的 NTB 功能驱动程序将通过此区域交换信息。配置区域包含用于配置端点控制器的控制/状态寄存器。主机可以在此区域内写入以配置出站地址转换单元 (ATU) 并指示链接状态。端点可以在该区域内指示由主机发出的命令的状态。端点还可以使用此区域向主机指示共享存储区偏移量及内存窗口的数量。以下是配置区域的格式。所有字段均为 32 位。
.. code-block:: text

	+------------------------+
	|         COMMAND        |
	+------------------------+
	|         ARGUMENT       |
	+------------------------+
	|         STATUS         |
	+------------------------+
	|         TOPOLOGY       |
	+------------------------+
	|    ADDRESS (LOWER 32)  |
	+------------------------+
	|    ADDRESS (UPPER 32)  |
	+------------------------+
	|           SIZE         |
	+------------------------+
	|   NO OF MEMORY WINDOW  |
	+------------------------+
	|  MEMORY WINDOW1 OFFSET |
	+------------------------+
	|       SPAD OFFSET      |
	+------------------------+
	|        SPAD COUNT      |
	+------------------------+
	|      DB ENTRY SIZE     |
	+------------------------+
	|         DB DATA        |
	+------------------------+
	|            :           |
	+------------------------+
	|            :           |
	+------------------------+
	|         DB DATA        |
	+------------------------+

  COMMAND:

NTB 功能支持以下三个命令：

  - CMD_CONFIGURE_DOORBELL (0x1)：配置门铃的命令。在调用此命令之前，主机应分配并初始化 MSI/MSI-X 向量（即，在端点中初始化 MSI/MSI-X 能力）。端点在收到此命令后将配置出站 ATU，使得对门铃 BAR 的事务将被路由到由主机编程的 MSI/MSI-X 地址。ARGUMENT 寄存器应填充要配置的 DB 数量（在低 16 位）以及是否应配置 MSI 或 MSI-X（第 16 位）
  - CMD_CONFIGURE_MW (0x2)：配置内存窗口 (MW) 的命令。主机在分配了一个远程主机可以访问的缓冲区后调用此命令。分配的地址应在 ADDRESS 寄存器（64 位）中编程，大小应在 SIZE 寄存器中编程，并且内存窗口索引应在 ARGUMENT 寄存器中编程。端点在收到此命令后将配置出站 ATU，使得对 MW BAR 的事务将被路由到主机提供的地址。
  - CMD_LINK_UP (0x3)：指示主机侧的 NTB 应用程序已绑定到 EP 设备的命令。一旦端点从两个主机收到此命令，端点将向两个主机发起 LINK_UP 事件，以指示主机 NTB 应用程序可以开始相互通信。
  
ARGUMENT:

此寄存器的值基于在命令寄存器中发布的命令。有关更多信息，请参阅 COMMAND 部分。
拓扑结构（TOPOLOGY）：

- 主接口设置为 NTB_TOPO_B2B_USD
- 辅助接口设置为 NTB_TOPO_B2B_DSD

地址/大小（ADDRESS/SIZE）：

- 在配置内存窗口时使用的地址和大小。更多信息请参见“CMD_CONFIGURE_MW”

内存窗口1偏移（MEMORY WINDOW1 OFFSET）：

- 内存窗口1和门铃寄存器打包在同一BAR中。区域的初始部分包含门铃寄存器，而区域的后一部分用于内存窗口1。此寄存器将指定内存窗口1的偏移量。

内存窗口数量（NO OF MEMORY WINDOW）：

- 指定NTB设备支持的内存窗口数量。

自用scratchpad偏移（SPAD OFFSET）：

- 自用scratchpad区域和配置区域打包在同一BAR中。区域的初始部分包含配置区域，而区域的后一部分用于自用scratchpad。此寄存器将指定自用scratchpad寄存器的偏移量。

scratchpad数量（SPAD COUNT）：

- 指定NTB设备支持的scratchpad寄存器数量。

门铃条目大小（DB ENTRY SIZE）：

- 用于确定在触发门铃时应写入的DB BAR内的偏移量。EPF NTB可以使用MSI或MSI-X来触发门铃（对MSI-X的支持将在以后添加）。MSI对所有中断使用相同的地址，而MSI-X可以为不同的中断提供不同的地址。MSI/MSI-X地址由主机提供，并且它提供的地址基于主机支持的MSI/MSI-X实现。例如，在使用GIC ITS的ARM平台上，所有中断都有相同的MSI-X地址。
为了支持所有组合并使用相同机制处理MSI和MSI-X，EPF NTB在出站地址空间中为每个中断分配了一个单独的区域。这些区域将映射到主机提供的MSI/MSI-X地址。如果主机为所有中断提供了相同的地址，则所有区域都将被映射到相同的地址；如果主机提供了不同的地址，则区域将被映射到不同的地址。这确保了触发门铃时没有差异。

门铃数据（DB DATA）：

- EPF NTB支持32个中断，因此有32个DB DATA寄存器。
这包含了必须写入MSI/MSI-X地址以触发门铃中断的数据。在调用CMD_CONFIGURE_DOORBELL时，这些数据将由EPF NTB填充。

Scratchpad 寄存器：
---------------------
每个主机在其NTB端点控制器的内存中都有自己的寄存器空间。这些寄存器可以从桥接器的两侧进行读取和写入。
它们被构建在NTB之上的应用程序使用，可以用来在设备的两侧之间传递控制和状态信息。
Scratchpad 寄存器分为两部分：
1) 自身 Scratchpad：主机自身的寄存器空间；
2) 对等 Scratchpad：远程主机的寄存器空间。

门铃寄存器：
-------------------
门铃寄存器用于主机之间互相中断。

内存窗口：
------------------
实际的数据传输将在两个主机之间通过内存窗口完成。

建模构造：
====================
为了实现NTB功能，需要建模五个或更多不同的区域（配置、自身 Scratchpad、对等 Scratchpad、门铃、一个或多个内存窗口）。至少需要一个内存窗口，而允许存在多个。所有这些区域都应该映射到BARs以便主机能够访问这些区域。
如果为这些区域中的每一个分配一个32位BAR，则方案如下：

======  ===============
BAR 编号  使用的构造
======  ===============
BAR0    配置区域
BAR1    自身 Scratchpad
BAR2    对等 Scratchpad
BAR3    门铃
BAR4    内存窗口1
BAR5    内存窗口2
======  ===============

然而，如果我们为每个区域分配一个单独的BAR，在仅支持64位BAR的平台上将没有足够的BAR来覆盖所有区域。
为了得到大多数平台的支持，这些区域应该以一种既能提供NTB功能又能确保主机不会访问其不应访问的任何区域的方式进行打包和映射到BARs上。
EPF NTB功能使用的方案如下：

======  ===============================
BAR 编号  使用的构造
======  ===============================
BAR0    配置区域 + 自身 Scratchpad
BAR1    对等 Scratchpad
BAR2    门铃 + 内存窗口1
BAR3    内存窗口2
BAR4    内存窗口3
BAR5    内存窗口4
======  ===============================

根据这个方案，对于基本的NTB功能，三个BAR就足够了。
建模配置/暂存区：
------------------------------

.. code-block:: text

 +-----------------+------->+------------------+        +-----------------+
 |       BAR0      |        |  配置区域    |        |       BAR0      |
 +-----------------+----+   +------------------+<-------+-----------------+
 |       BAR1      |    |   | 暂存区     |        |       BAR1      |
 +-----------------+    +-->+------------------+<-------+-----------------+
 |       BAR2      |            本地内存            |       BAR2      |
 +-----------------+                                    +-----------------+
 |       BAR3      |                                    |       BAR3      |
 +-----------------+                                    +-----------------+
 |       BAR4      |                                    |       BAR4      |
 +-----------------+                                    +-----------------+
 |       BAR5      |                                    |       BAR5      |
 +-----------------+                                    +-----------------+
   EP 控制器 1                                          EP 控制器 2

上图展示了为 HOST1（连接到 EP 控制器 1）分配在本地内存中的配置区域和暂存区。HOST1 可以通过 EP 控制器 1 的 BAR0 访问配置区域和暂存区（自用暂存区）。对等主机（HOST2 连接到 EP 控制器 2）也可以通过 EP 控制器 2 的 BAR1 访问该暂存区（对等暂存区）。此图显示了为 HOST1 分配配置区域和暂存区的情况，但同样适用于 HOST2。
建模门铃/内存窗口 1：
------------------------------

.. code-block:: text

 +-----------------+    +----->+----------------+-----------+-----------------+
 |       BAR0      |    |      |   门铃 1   +-----------> MSI-X 地址 1 |
 +-----------------+    |      +----------------+           +-----------------+
 |       BAR1      |    |      |   门铃 2   +---------+ |                 |
 +-----------------+----+      +----------------+         | |                 |
 |       BAR2      |           |   门铃 3   +-------+ | +-----------------+
 +-----------------+----+      +----------------+       | +-> MSI-X 地址 2 |
 |       BAR3      |    |      |   门铃 4   +-----+ |   +-----------------+
 +-----------------+    |      |----------------+     | |   |                 |
 |       BAR4      |    |      |                |     | |   +-----------------+
 +-----------------+    |      |      MW1       +---+ | +-->+ MSI-X 地址 3||
 |       BAR5      |    |      |                |   | |     +-----------------+
 +-----------------+    +----->-----------------+   | |     |                 |
   EP 控制器 1             |                |   | |     +-----------------+
                               |                |   | +---->+ MSI-X 地址 4 |
                               +----------------+   |       +-----------------+
                                EP 控制器 2     |       |                 |
                                  （OB 空间）       |       |                 |
                                                     +------->      MW1        |
                                                                 |                 |
                                                                 |                 |
                                                                 +-----------------+
                                                                 |                 |
                                                                 |                 |
                                                                 |                 |
                                                                 |                 |
                                                                 |                 |
                                                                 +-----------------+
                                                                  PCI 地址空间
                                                                  （由 HOST2 管理）

上图展示了门铃和内存窗口 1 如何映射，以便 HOST1 可以向 HOST2 发出门铃中断，并且 HOST1 如何使用内存窗口 1（MW1）访问 HOST2 暴露的缓冲区。这里的门铃和内存窗口 1 区域分配在 EP 控制器 2 的出站（OB）地址空间中。在 NTB 终端功能驱动程序初始化阶段，为门铃和内存窗口 1 分配和配置 BAR。从 EP 控制器 2 的 OB 空间映射到 PCI 地址空间是在 HOST2 发送 CMD_CONFIGURE_MW/CMD_CONFIGURE_DOORBELL 时完成的。
建模可选内存窗口：
------------------------------

这与 MW1 的建模方式相同，但每个额外的内存窗口都映射到单独的 BAR。
