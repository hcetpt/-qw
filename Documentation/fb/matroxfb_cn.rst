什么是 matroxfb？
=================

.. [此文件是从 VesaFB 克隆的。感谢 Gerd Knorr]

这是一个为 Alpha、Intel 和 PPC 平台上的 Matrox 设备提供图形帧缓冲的驱动程序。
优点：

 * 它可以提供一个很大的控制台（例如在 1024x768 分辨率下有 128 列和 48 行），而不会使用小到无法阅读的字体。
 * 您可以在 `/dev/fb0` 上运行 XF{68,86}_FBDev 或 XFree86 的 fbdev 驱动程序。
 * 最重要的是：启动时的 Logo。

缺点：

 * 图形模式比文本模式慢一些……但如果您使用与文本模式相同的分辨率，您应该不会注意到这种差异。

如何使用它？
=============

切换模式可以通过使用 `video=matroxfb:vesa:...` 引导参数或使用 `fbset` 程序来完成。
例如，如果您想启用 1280x1024x24bpp 的分辨率，您应该向内核传递命令行 `"video=matroxfb:vesa:0x1BB"`。
您应该编译入 vgacon（以防您移除 Matrox 卡）和 matroxfb（用于图形模式）。除非您的主显示器连接在非 Matrox 的 VBE2.0 设备上，否则不要编译入 vesafb（详情请参阅 `Documentation/fb/vesafb.rst`）。
目前支持的视频模式（通过 vesa:... 接口，PowerMac 有[作为附加项]兼容代码）如下：

图形模式
--------

===  =======  =======  =======  =======  =======
bpp  640x400  640x480  768x576  800x600  960x720
===  =======  =======  =======  =======  =======
  4             0x12             0x102
  8   0x100    0x101    0x180    0x103    0x188
 15            0x110    0x181    0x113    0x189
 16            0x111    0x182    0x114    0x18A
 24            0x1B2    0x184    0x1B5    0x18C
 32            0x112    0x183    0x115    0x18B
===  =======  =======  =======  =======  =======

图形模式（续）
-------------

===  ======== ======== ========= ========= =========
bpp  1024x768 1152x864 1280x1024 1408x1056 1600x1200
===  ======== ======== ========= ========= =========
  4    0x104             0x106
  8    0x105    0x190    0x107     0x198     0x11C
 15    0x116    0x191    0x119     0x199     0x11D
 16    0x117    0x192    0x11A     0x19A     0x11E
 24    0x1B8    0x194    0x1BB     0x19C     0x1BF
 32    0x118    0x193    0x11B     0x19B
===  ======== ======== ========= ========= =========

文本模式
--------

==== =======  =======  ========  ========  ========
text 640x400  640x480  1056x344  1056x400  1056x480
==== =======  =======  ========  ========  ========
 8x8   0x1C0    0x108     0x10A     0x10B     0x10C
8x16 2, 3, 7                        0x109
==== =======  =======  ========  ========  ========

您可以输入这些数字为十六进制（前缀 `0x`）或十进制（0x100 = 256）。您也可以使用值 + 512 来实现与传递给 vesafb 的旧数值的兼容性。
未列出的数字可以通过更复杂的命令行来实现，例如 1600x1200x32bpp 可以通过 `video=matroxfb:vesa:0x11C,depth:32` 来指定。

X11
===

XF{68,86}_FBDev 应该可以正常工作，但它是非加速的。在非 Intel 架构上，对于 24bpp 视频模式存在一些问题。8、16 和 32bpp 工作良好。
运行另一个（加速的）X 服务器如 XF86_SVGA 也是可行的。但是（至少）XFree 服务器在多头配置中存在很大问题（即使是在第一个头，更不用说第二个头了）。运行 XFree86 4.x 加速 mga 驱动程序是可能的，但您不能启用 DRI — 如果启用了 DRI，则您的 X 桌面的分辨率和颜色深度必须与虚拟控制台的分辨率和颜色深度匹配，否则 X 将会破坏加速器设置。
### SVGALib

驱动程序包含 SVGALib 兼容代码。通过选择控制台的文本模式可以启用它。你可以在启动时使用视频模式 2、3、7、0x108-0x10C 或 0x1C0 来实现这一点。在运行时，`fbset -depth 0` 也可以实现这一功能。不幸的是，在 SVGALib 应用程序退出后，屏幕内容会被破坏。切换到另一个控制台再切回来可以修复这个问题。我希望这是 SVGALib 的问题而不是我的问题，但我不确定。

### 配置

你可以通过内核命令行选项将参数传递给 matroxfb，格式为 `video=matroxfb:option1,option2:value2,option3`（多个选项之间用逗号分隔，值与选项之间用冒号分隔）。

接受的选项：

============ ===================================================================
mem:X        内存大小（X 可以是兆字节、千字节或字节）
             由于驱动程序总是会探测内存，因此你只能减少由驱动程序确定的值。默认情况下使用所有可检测到的可用于屏幕上显示的内存（即最多 8 MB）
disabled     不加载驱动程序；你也可以使用 `off`，但 `disabled` 也在这里
enabled      加载驱动程序。如果你在 LILO 配置中设置了 `video=matroxfb:disabled`，可以通过这个选项覆盖它（你不能覆盖 `off`）。这是默认设置
noaccel      不使用加速引擎。在 Alpha 系统上不工作
accel        使用加速引擎。这是默认设置
nopan        创建初始控制台时使 vyres = yres，从而禁用虚拟滚动
============ ===================================================================
pan          创建尽可能高的初始控制台（vyres = 内存 / vxres）
这是默认设置
nopciretry   禁用 PCI 重试。对于某些有问题的芯片组是必需的，
             对于 Intel 的 82437，会自动检测。在这种情况下设备不符合
             PCI 2.1 规范（它不能保证每个事务以成功或重试在 32 个 PCLK 内结束）
pciretry     启用 PCI 重试。这是默认设置，除了 Intel 的 82437 以外
novga        禁用 VGA I/O 端口。如果 BIOS 没有启用设备，这是默认设置。
             你不应该使用这个选项，因为有些主板如果不关机就无法重启
vga          保持 VGA I/O 端口的状态。这是默认设置。驱动程序不会
             启用 VGA I/O，除非 BIOS 已经启用了它（在大多数情况下启用它是不安全的）
nobios       禁用 BIOS ROM。如果 BIOS 没有启用自身，这是默认设置。
             你不应该使用这个选项，因为有些主板如果不关机就无法重启
bios         保持 BIOS ROM 的状态。这是默认设置。驱动程序不会启用
             BIOS，除非 BIOS 之前已经被启用了
noinit       告诉驱动程序，设备已经初始化。如果你有 G100 和/或驱动程序无法检测内存，
             你在屏幕上看到奇怪的图案等情况下，你应该使用它。未被 BIOS 启用的设备
             仍然会被初始化。这是默认设置
init         驱动程序初始化其了解的所有设备
memtype 指定内存类型，意味着使用 'init'。这仅对 G200 和 G400 有效，并有以下含义：

- G200：
  - 0 -> 2x128Kx32 芯片，2MB 板载内存，可能是 SGRAM
  - 1 -> 2x128Kx32 芯片，4MB 板载内存，可能是 SGRAM
  - 2 -> 2x256Kx32 芯片，4MB 板载内存，可能是 SGRAM
  - 3 -> 2x256Kx32 芯片，8MB 板载内存，可能是 SGRAM
  - 4 -> 2x512Kx16 芯片，8/16MB 板载内存，可能是 SDRAM
  - 5 -> 同上
  - 6 -> 4x128Kx32 芯片，4MB 板载内存，可能是 SGRAM
  - 7 -> 4x128Kx32 芯片，8MB 板载内存，可能是 SGRAM
- G400：
  - 0 -> 2x512Kx16 SDRAM，16/32MB
  - 2x512Kx32 SGRAM，16/32MB
  - 1 -> 2x256Kx32 SGRAM，8/16MB
  - 2 -> 4x128Kx32 SGRAM，8/16MB
  - 3 -> 4x512Kx32 SDRAM，32MB
  - 4 -> 4x256Kx32 SGRAM，16/32MB
  - 5 -> 2x1Mx32 SDRAM，32MB
  - 6 -> 预留
  - 7 -> 预留

您应该在 memtype 参数之外使用 sdram 或 sgram 参数。

nomtrr 禁用帧缓冲区的写入组合。这会降低驱动程序的速度，但在高负载下启用写入组合时，据报告 GUS DMA 和 XFree 之间存在轻微的不兼容（声音中断）。

mtrr 启用帧缓冲区的写入组合。它大大加快了视频访问速度。这是默认设置。您必须在内核中启用 MTRR 支持，并且您的 CPU 必须具有 MTRR（例如 Pentium II 具有此功能）。

sgram 告诉驱动程序您使用的是带有 SGRAM 内存的 Gxx0。如果没有 'init'，则无效。

sdram 告诉驱动程序您使用的是带有 SDRAM 内存的 Gxx0。这是默认设置。

inv24 更改 Millennium 和 Millennium II 的 24bpp 模式的定时参数。如果您看到字符周围有奇怪的颜色阴影，请指定此参数。

noinv24 使用标准定时。这是默认设置。

inverse 反转屏幕上的颜色（用于 LCD 显示器）。

noinverse 在屏幕上显示真实颜色。这是默认设置。

dev:X 将驱动程序绑定到设备 X。驱动程序从 0 到 N 编号设备，其中设备 0 是找到的第一个“已知”设备，1 是第二个，依此类推。
`lspci` 按以下顺序列出设备：
默认为列出所有已知设备
- nohwcursor：禁用硬件光标（使用软件光标代替）
- hwcursor：启用硬件光标。这是默认设置。如果您使用非加速模式（`noaccel` 或 `fbset -accel false`），则使用软件光标（文本模式除外）
- noblink：禁用光标闪烁。文本模式下的光标始终闪烁（硬件限制）
- blink：启用光标闪烁。这是默认设置
- nofastfont：禁用快速字体功能。这是默认设置
- fastfont:X：启用快速字体功能。X 指定为字体数据预留的内存大小，必须满足 X >= (fontwidth * fontheight * chars_in_font) / 8。在 Gx00 系列上更快，但在旧显卡上较慢
- grayscale：启用灰度叠加。它在 PSEUDOCOLOR 模式下工作（文本、4bpp、8bpp）。在 DIRECTCOLOR 模式下，它仅限于通过 putc/putcs 显示的字符。直接访问帧缓冲区可以绘制颜色
nograyscale  禁用灰度累加。这是默认设置。
cross4MB     启用像素行跨越4MB边界。对于非Millennium设备，这是默认设置。
nocross4MB   像素行不得跨越4MB边界。对于Millennium I或II设备，这是默认设置，因为这些设备存在硬件限制，不允许这样做。但此选项与某些（如果尚未发布的所有版本）XF86_FBDev不兼容。
dfp          启用数字平板接口。此选项与辅助（电视）输出不兼容——如果DFP处于活动状态，则电视输出必须处于非活动状态，反之亦然。DFP始终使用与主（显示器）输出相同的时序。
dfp:X        使用数字平板接口的设置X。X是从0到0xFF的数字，每个单独位的含义在G400手册中描述的DAC寄存器0x1F中有详细说明。对于正常操作，您应该将所有位设置为零，除了最低位。这个最低位选择显示时钟的来源，是G400还是面板。默认值现在从硬件读取——因此，只有在您同时使用`init`参数时才需要指定该值。
outputs:XYZ  设置CRTC和输出之间的映射关系。每个字母可以是0（表示没有CRTC）、1（CRTC1）或2（CRTC2），第一个字母对应于主模拟输出，第二个字母对应于辅助模拟输出，第三个字母对应于DVI输出。
对于低于G400的卡或没有DFP的G400，默认设置为100；对于带有DFP的G400，默认设置为101；对于G450和G550，默认设置为111。您只能在第一张卡上设置映射，使用matroxset来设置其他设备。
vesa:X       选择启动视频模式。X是从0到0x1FF的数字，详细解释请参见上面的表格。如果驱动程序支持8bpp，默认值为640x480x8bpp。否则，依次选择可用的640x350x4bpp、640x480x15bpp、640x480x24bpp、640x480x32bpp或80x25文本（80x25文本始终可用）。

================== ==================================================================================

如果您对`vesa`选项选择的视频模式不满意，可以通过以下选项进行修改：

================== ==================================================================================
xres:X       水平分辨率，以像素为单位。默认值由`vesa`选项决定。
yres:X       垂直分辨率，以像素行为单位。默认值由`vesa`选项决定。
upper:X      上边界：VSYNC 脉冲结束与图像第一个像素行开始之间的行数。默认值由 `vesa` 选项推导得出。
top boundary: VSYNC 脉冲结束与图像第一个像素行开始之间的行数。默认值由 `vesa` 选项推导得出。
lower:X      下边界：图像结束与 VSYNC 脉冲开始之间的行数。默认值由 `vesa` 选项推导得出。
vslen:X      VSYNC 脉冲的长度，以行数计。默认值由 `vesa` 选项推导得出。
left:X       左边界：HSYNC 脉冲结束与第一个像素之间的像素数。默认值由 `vesa` 选项推导得出。
right:X      右边界：图像结束与 HSYNC 脉冲开始之间的像素数。默认值由 `vesa` 选项推导得出。
hslen:X      HSYNC 脉冲的长度，以像素数计。默认值由 `vesa` 选项推导得出。
pixclock:X   点时钟，以皮秒 (ps) 计。默认值由 `vesa` 选项以及 `fh` 和 `fv` 选项推导得出。
sync:X       同步脉冲 — 位 0 反转 HSYNC 极性，位 1 反转 VSYNC 极性。如果设置了位 3（值为 0x08），则生成复合同步信号而不是 HSYNC。如果设置了位 5（值为 0x20），则开启绿信号同步。请注意，如果您想要绿信号同步，您可能也需要复合同步。
默认取决于 `vesa`
深度:X      每像素位数: 0=文本, 4, 8, 15, 16, 24 或 32。默认取决于 `vesa`
============ ===================================================================

如果您知道显示器的能力，可以指定 `maxclk`, `fh` 和 `fv` 中的一些（或全部）。在这种情况下，`pixclock` 将被计算为 pixclock <= maxclk, real_fh <= fh 和 real_fv <= fv。
============ ==================================================================
maxclk:X     最大点时钟。X 可以用 MHz、kHz 或 Hz 表示。默认是 "不关心"
fh:X         最大水平同步频率。X 可以用 kHz 或 Hz 表示。默认是 "不关心"
fv:X         最大垂直频率。X 必须用 Hz 表示。对于从 `vesa` 衍生的模式，默认是 yres <= 400 时为 70Hz，yres > 400 时为 60Hz。
============ ==================================================================

限制
===========

已知和未知的错误、功能及误功能
目前有以下已知的问题：

- SVGALib 在退出时不恢复屏幕
- 通用的 fbcon-cfbX 过程在 Alpha 上不起作用。由于这个问题，`noaccel`（和 cfb4 加速）驱动程序在 Alpha 上无法工作。因此，任何能够访问 `/dev/fb*` 的用户都可以使机器挂起（您应该限制对 `/dev/fb*` 的访问 - 任何能够访问该设备的用户都可能破坏您的显示器，请相信我）
- 在大端字节序架构上，24bpp 不正确地支持 XF-FBDev
- 不支持交错文本模式；这看起来像是硬件限制，但我不确定
- Gxx0 SGRAM/SDRAM 未自动检测到
- 可能还有更多...

以下是一些错误功能：

- SVGALib 在退出时不会恢复屏幕
- 文本模式下的像素时钟受硬件限制如下：
  - G200：83 MHz
  - Millennium I：66 MHz
  - Millennium II：60 MHz

  由于我没有其他设备的访问权限，我不知道它们的具体频率。因此，驱动程序不会检查这一点，并允许您设置高于这些值的频率。这会导致屏幕上出现火花、黑点和其他有趣的效果。在测试过程中设备没有被损坏。:)
- 我的 Millennium G200 振荡器的频率范围为 35 MHz 至 380 MHz（并且它可以在约 320 MHz 的像素时钟下使用 8bpp 和修改后的 mclk）
但 Matrox 在产品说明书中称 VCO 限值为 50-250 MHz，所以我相信他们（可能是该芯片过热，但它有一个非常大的散热器（G100 没有），所以应该可以正常工作）
- Mystique 和 Gx00 的特殊混合视频/图形视频模式（2G8V16 和 G16V16）不受支持
- 不支持颜色键控
- Mystique 和 Gx00 的功能连接器被设置为 VGA 模式（BIOS 中禁用了该功能）
- 通过双头驱动程序支持 DDC（显示器检测）
- 对输入值的一些检查不够严格（您可以指定 vslen=4000 等）
- 可能还有更多...

以下是一些特性：

- 4bpp 仅在 Millennium I 和 Millennium II 上可用。这是硬件限制
- 选择 1:5:5:5 和 5:6:5 的 16bpp 视频模式通过 fbset 的 `-rgba` 选项实现：“fbset -depth 16 -rgba 5,5,5” 选择 1:5:5:5，其他任何选项选择 5:6:5 模式
- 文本模式使用 6 位 VGA 调色板而不是 8 位（262144 种颜色之一而不是 1600 万种颜色之一）。这是 Millennium I/II 的硬件限制以及与 SVGALib 的兼容性问题
### 基准测试
在 1024x768、60Hz 的分辨率下重新绘制整个屏幕 1000 次。通过 `/dev/vcsa` 在屏幕上绘制 6144000 个字符（对于 32bpp，大约是 3GB 数据，即 3000 MB）；使用 8x16 字体在 16 秒内完成，即每秒 187 MB。

这些时间是从一个较旧版本的驱动程序获得的，现在的时间大约快了 3%。这是在 P-II/350 MHz 上仅内核空间的时间，Millennium I 在 33 MHz PCI 插槽中，G200 在 AGP 2x 插槽中。我没有测试 vgacon：

#### 无加速（NOACCEL）
|           | 8x16          | 12x22         |
|-----------|---------------|---------------|
| Millennium I | G200       | Millennium I | G200       |
| 8bpp      | 16.42        | 9.54          | 12.33      | 9.13        |
| 16bpp     | 21.00        | 15.70         | 19.11      | 15.02       |
| 24bpp     | 36.66        | 36.66         | 35.00      | 35.00       |
| 32bpp     | 35.00        | 30.00         | 33.85      | 28.66       |

#### 加速，不使用快速字体（ACCEL, nofastfont）
|           | 8x16          | 12x22         | 6x11        |
|-----------|---------------|---------------|-------------|
| Millennium I | G200       | Millennium I | G200       | Millennium I | G200       |
| 8bpp      | 7.79         | 7.24          | 13.55       | 7.78         | 30.00      | 21.01       |
| 16bpp     | 9.13         | 7.78          | 16.16       | 7.78         | 30.00      | 21.01       |
| 24bpp     | 14.17        | 10.72         | 18.69       | 10.24        | 34.99      | 21.01       |
| 32bpp     | 16.15        | 16.16         | 18.73       | 13.09        | 34.99      | 21.01       |

#### 加速，使用快速字体（ACCEL, fastfont）
|           | 8x16          | 12x22         | 6x11        |
|-----------|---------------|---------------|-------------|
| Millennium I | G200       | Millennium I | G200       | Millennium I | G200       |
| 8bpp      | 8.41         | 6.01          | 6.54        | 4.37         | 16.00      | 10.51       |
| 16bpp     | 9.54         | 9.12          | 8.76        | 6.17         | 17.52      | 14.01       |
| 24bpp     | 15.00        | 12.36         | 11.67       | 10.00        | 22.01      | 18.32       |
| 32bpp     | 16.18        | 18.29*        | 12.71       | 12.74        | 24.44      | 21.00       |

| TEXT      | 8x16          |
|-----------|---------------|
| Millennium I | G200       |
| TEXT      | 3.29         | 1.50         |

* 是的，它比 Millennium I 慢

### 双头 G400
驱动支持双头 G400，但有一些限制：
+ 第二个头与主头共享视频内存。如果你有 32MB 视频内存，这不是问题，但如果你只有 16MB，你可能需要三思而后行选择视频模式（例如两次 1880x1440x32bpp 是不可能的）。
+ 由于硬件限制，第二个头只能使用 16 和 32bpp 视频模式。
+ 第二个头没有加速功能。当第二个头使用加速时，XFree 曾经出现过严重的问题。
+ 第二个头始终以 640x480@60-32 视频模式启动。你需要使用 `fbset` 来更改此模式。
+ 第二个头始终以监视器模式启动。你需要使用 `fbmatroxset` 将其更改为电视模式。此外，你必须为 NTSC 输出选择至少 525 行，为 PAL 输出选择至少 625 行。
+ 内核尚未完全准备好支持多头。因此有些事情是不可能做到的。
+ 如果你将其编译为模块，则必须将 `i2c-matroxfb`、`matroxfb_maven` 和 `matroxfb_crtc2` 插入内核。

### 双头 G450
驱动支持双头 G450，但有一些限制：
+ 第二个头与主头共享视频内存。如果你有 32MB 视频内存，这不是问题，但如果你只有 16MB，你可能需要三思而后行选择视频模式。
+ 由于硬件限制，次显示器只能使用 16 位和 32 位色彩的视频模式
+ 次显示器没有加速功能
+ 次显示器始终以 640x480@60-32 视频模式启动。您需要使用 fbset 来更改此模式
+ 不支持电视输出
+ 内核尚未完全准备好支持多头显示，因此有些操作无法完成
+ 如果您将其编译为模块，必须将 matroxfb_g450 和 matroxfb_crtc2 加载到内核中

Petr Vandrovec <vandrove@vc.cvut.cz>
