================================
Intel 810/815 帧缓冲驱动
================================

Tony Daplas <adaplas@pol.net>

http://i810fb.sourceforge.net

2002年3月17日

首次发布：2001年7月  
最后更新：2005年9月12日

A. 引言
===============

这是一个适用于各种Intel 810/815兼容图形设备的帧缓冲驱动。这些设备包括：

- Intel 810
- Intel 810E
- Intel 810-DC100
- Intel 815 内置显卡，100MHz FSB
- Intel 815 内置显卡
- Intel 815 内置显卡和AGP

B. 特性
============

- 可选择使用离散视频时序、VESA通用时序公式或帧缓冲特定数据库来设置视频模式

- 如果启用了VESA通用时序公式，则支持可变范围的水平和垂直分辨率以及垂直刷新率
- 支持每像素8位、16位、24位和32位的颜色深度
- 支持伪彩色、直接色彩或真彩色视觉效果
- 在8位、16位和24位每像素颜色深度下提供完全优化的硬件加速
- 强健的视频状态保存和恢复功能
- 支持MTRR
- 利用用户输入的监视器规格自动计算所需的视频模式参数
- 可与使用原生i810驱动的xfree86同时运行
- 支持硬件光标
- 支持通过DDC/I2C或BIOS进行EDID探测

C. 可用选项列表
=============================

a. "video=i810fb"
启用i810驱动

建议：必需

b. "xres:<value>"
选择水平分辨率（以像素为单位）。如果指定了'mode_option'，此参数将被忽略（见下面的'o'）
建议：根据用户偏好设置
（默认 = 640）

c. "yres:<value>"
选择垂直分辨率（以扫描线为单位）。如果启用了离散视频时序，此参数将被忽略并计算为3*xres/4。（如果指定了'mode_option'，此参数将被忽略，见下面的'o'）

建议：根据用户偏好设置
（默认 = 480）

d. "vyres:<value>"
选择虚拟垂直分辨率（以扫描线为单位）。如果指定为（0）或未指定，则将根据可用的最大内存进行计算
建议：不设置
（默认 = 480）

e. "vram:<value>"
选择分配给视频内存的系统RAM数量（以MB为单位）

建议：1 - 4 MB
（默认 = 4）

f. "bpp:<value>"
选择所需的像素深度

建议：8
（默认 = 8）

g. "hsync1/hsync2:<value>"
选择监视器的最小和最大水平同步频率（以kHz为单位）。如果使用固定频率监视器，hsync1必须等于hsync2。如果EDID探测成功，这些值将被忽略，并从EDID块中获取
建议：检查监视器手册以获得正确的值
（默认 = 29/30）

h. "vsync1/vsync2:<value>"
选择监视器的最小和最大垂直同步频率（以Hz为单位）。您也可以使用此选项锁定监视器的刷新率。如果EDID探测成功，这些值将被忽略，并从EDID块中获取
建议：检查监视器手册以获得正确的值
（默认 = 60/60）

重要提示：如果您需要限制时序，请尽量留出一些余地以防止计算错误（溢出/欠流）。例如，如果使用vsync1/vsync2 = 60/60，请确保hsync1/hsync2至少有一个单位的差异，反之亦然

i. "voffset:<value>"
选择在逻辑内存中的哪个偏移量（以MB为单位）分配帧缓冲内存。目的是避免标准图形应用程序（如XFree86）使用的内存块。默认偏移量（对于64 MB孔径为16 MB，对于32 MB孔径为8 MB）将避免XFree86的使用，并允许最多7 MB/15 MB的帧缓冲内存。根据您的使用情况调整该值（向上或向下调整，0表示最大使用，31/63 MB表示最少使用）。请注意，任意设置可能会与XFree86冲突
建议：不设置
（默认 = 8 或 16 MB）

j. "accel"
启用文本加速。可以随时使用'fbset -accel true/false'启用/重新启用

希望这些信息对您有所帮助！如果有任何问题，请随时告诉我。
### 推荐：启用
（默认 = 未设置）

   k. "mtrr"
   启用 MTRR。这允许数据传输到帧缓冲区内存时以突发方式发生，可以显著提高性能。
   对于 i810/i815 并不是很有帮助，因为存在“共享内存”问题。
   推荐：不设置
   （默认 = 未设置）

   l. "extvga"
   如果指定，则始终启用次级/外部 VGA 输出。
   在 BIOS 关闭没有连接显示器的 VGA 端口时非常有用。这样可以在不重启的情况下连接外部 VGA 显示器。
   推荐：不设置
   （默认 = 未设置）

   m. "sync"
   强制硬件引擎执行“同步”或等待硬件完成后再开始另一个指令。这将产生更稳定的设置，但会更慢。
   推荐：不设置
   （默认 = 未设置）

   n. "dcolor"
   对于大于 8 bpp 的像素深度，使用直接颜色模式而不是真彩色模式。这对于颜色调整（如伽马控制）很有用。
   推荐：不设置
   （默认 = 未设置）

   o. `<xres>x<yres>[-<bpp>][@<refresh>]`
   驱动程序现在接受启动模式选项的指定。如果指定了这个选项，则忽略 `xres` 和 `yres` 选项。请参阅 `Documentation/fb/modedb.rst` 了解用法。

### D. 内核启动
=================

每个选项/选项对之间用逗号（,）分隔，并且选项与其值之间用冒号（:）分隔，如下所示：

```
video=i810fb:option1,option2:value2
```

### 示例用法
-------------

在 `/etc/lilo.conf` 中添加以下行：

```
append="video=i810fb:vram:2,xres:1024,yres:768,bpp:8,hsync1:30,hsync2:55, \
	vsync1:50,vsync2:85,accel,mtrr"
```

这将初始化帧缓冲区为 1024x768，8bpp。帧缓冲区将使用 2 MB 的系统内存。启用 MTRR 支持。刷新率将根据 `hsync1/hsync2` 和 `vsync1/vsync2` 的值计算得出。

**重要提示：**
  必须包含 `hsync1`、`hsync2`、`vsync1` 和 `vsync2` 才能启用高于 640x480@60Hz 的视频模式。然而，如果你的芯片组/显示组合支持 I2C 并且有 EDID 块，你可以安全地排除这些参数。这些参数将从 EDID 块中获取。
E. 模块选项
==================

模块参数基本上与内核参数相似。主要区别在于，对于那些不需要值的选项，你需要包含一个布尔值（1 表示 TRUE，0 表示 FALSE）。例如，要启用 MTRR，请包含 "mtrr=1"。
示例用法
------------

使用上述相同的设置，可以这样加载模块：

```
modprobe i810fb vram=2 xres=1024 bpp=8 hsync1=30 hsync2=55 vsync1=50 \
        vsync2=85 accel=1 mtrr=1
```

或者将以下内容添加到 `/etc/modprobe.d/` 目录下的配置文件中：

```
options i810fb vram=2 xres=1024 bpp=16 hsync1=30 hsync2=55 vsync1=50 \
vsync2=85 accel=1 mtrr=1
```

然后执行：

```
modprobe i810fb
```

F. 设置
=========

a. 使用你通常的方法来配置内核

   ```
   make menuconfig/xconfig/config
   ```

b. 在“代码成熟度级别选项”下，启用“提示开发和/或不完整的代码/驱动程序”

c. 启用 Intel 810/815 板载图形的 AGPGART 支持。这是必需的。此选项位于“字符设备”下。

d. 在“图形支持”下选择“Intel 810/815”，可以静态编译或作为模块。如果你需要最大化显示功能，请选择“使用 VESA 通用时序公式”。为安全起见，你可以不选此项。

e. 如果你需要支持 DDC/I2C 探测（即插即用显示器），请将 '启用 DDC 支持' 设置为 'y'。要使此选项出现，请将 '使用 VESA 通用时序公式' 设置为 'y'。

f. 如果你需要帧缓冲控制台，请在“控制台驱动程序”下启用它。

g. 编译你的内核。

h. 根据 D 和 E 部分描述加载驱动程序。
i. 尝试使用 DirectFB（http://www.directfb.org）+ i810 图形驱动补丁，看看芯片组的实际效果（或者无效果 :-)

G. 致谢：
===================

    1. Geert Uytterhoeven — 他出色的教程和虚拟帧缓冲驱动代码使这一切成为可能
    2. Jeff Hartmann — 他的 agpgart 代码
    3. X 开发者们 — 通过阅读 XFree86 源代码获得了许多启示
    4. Intel 公司 — 提供了面向价值的芯片组驱动以及相关文档
    5. Matt Sottek — 他的意见和想法帮助实现了一些优化

H. 主页：
==============

    更完整且可能更新的信息可以在 http://i810fb.sourceforge.net 找到
Tony
