开发流程简介

简介
=============

执行摘要
-----------------

本节其余部分涵盖了内核开发流程的范围，以及开发者及其雇主可能遇到的各种挫折。内核代码应当合并到官方（“主线”）内核中的原因有很多，包括对用户的自动可用性、多种形式的社区支持，以及影响内核发展方向的能力。贡献给Linux内核的代码必须在GPL兼容许可下提供。 :ref:`development_process` 介绍了开发流程、内核发布周期和合并窗口的机制。涵盖了补丁开发、审查和合并周期的各个阶段。讨论了一些工具和邮件列表。希望开始内核开发的开发者被鼓励追踪并修复bug作为初步练习。 :ref:`development_early_stage` 讨论了项目早期规划，重点在于尽早地让开发社区参与进来。 :ref:`development_coding` 关于编码过程；讨论了其他开发者遇到的一些陷阱。涵盖了一些对补丁的要求，并简要介绍了可以帮助确保内核补丁正确的工具。 :ref:`development_posting` 讨论了提交补丁以供审查的过程。为了得到开发社区的认真对待，补丁必须正确格式化和描述，并且必须发送到正确的地方。遵循本节中的建议有助于确保你的工作得到最好的反馈。 :ref:`development_followthrough` 讨论了提交补丁后发生的事情；此时任务远未完成。与审查者合作是开发过程的重要组成部分；本节提供了一些如何避免在这个重要阶段出现问题的提示。告诫开发者不要假设当补丁合并到主线时任务就完成了。 :ref:`development_advancedtopics` 介绍了一些“高级”主题：使用git管理补丁和审查他人发布的补丁。 :ref:`development_conclusion` 通过指向更多关于内核开发信息来源来结束本文档。

本文档的主题
---------------------------

Linux内核，拥有超过8百万行代码，每版有1000多名贡献者，是现存最大和最活跃的自由软件项目之一。自1991年谦逊的开端以来，这个内核已经发展成为一个最佳的操作系统组件，运行在口袋大小的数字音乐播放器、桌面PC、世界上最大的超级计算机和各种类型的中间系统上。它是一个几乎适用于任何情况下的强大、高效和可扩展的解决方案。
随着Linux的发展，越来越多的开发者（和公司）希望参与到其开发中来。硬件供应商希望确保Linux能够良好支持他们的产品，从而使这些产品对Linux用户更具吸引力。嵌入式系统供应商将Linux作为集成产品的一部分，他们希望Linux能够尽可能地胜任并适合手头的任务。基于Linux构建产品的发行版和其他软件供应商对Linux内核的能力、性能和可靠性有着明确的兴趣。终端用户也会经常希望能够修改Linux以更好地满足他们的需求。

Linux最吸引人的特点之一就是它对这些开发者开放；任何具备相应技能的人都可以改进Linux并影响其发展方向。专有产品无法提供这种开放性，这是自由软件流程的一个特征。但事实上，内核比大多数其他自由软件项目更加开放。一个典型的三个月内核开发周期可能涉及超过1000名来自100多家不同公司（或不属于任何公司）的开发者。

与内核开发社区合作并不特别困难。尽管如此，许多潜在贡献者在尝试进行内核工作时遇到了困难。内核社区已经发展出自己独特的运作方式，使其能够在每天都有数千行代码被更改的环境中平稳运行（并产生高质量的产品）。因此，Linux内核开发过程与专有开发方法有很大不同也就不足为奇了。

对于新开发者来说，内核的开发过程可能会显得陌生且令人望而生畏，但这背后有很好的理由和坚实的经验支撑。不理解内核社区运作方式（或者更糟的是，试图违反或绕过这些方式）的开发者将会面临令人沮丧的经历。虽然开发社区乐于帮助那些愿意学习的人，但对于不愿意倾听或不关心开发过程的人来说，它几乎没有时间。

希望阅读本文档的人能够避免这种令人沮丧的经历。这里有很多材料，但阅读它们的努力会很快得到回报。开发社区总是需要帮助改进内核的开发者；以下文字应该能帮助你——或者为你工作的人——加入我们的社区。

鸣谢
---

本文档由Jonathan Corbet撰写，邮箱：corbet@lwn.net。它通过Johannes Berg、James Berry、Alex Chiang、Roland Dreier、Randy Dunlap、Jake Edge、Jiri Kosina、Matt Mackall、Arthur Marsh、Amanda McPherson、Andrew Morton、Andrew Price、Tsugikazu Shibata和Jochen Voß的评论得到了改进。

这项工作得到了Linux基金会的支持；特别是感谢Amanda McPherson，她看到了这个工作的价值并使之成为现实。

将代码合并到主线的重要性
----------------------------------

一些公司和开发者偶尔会疑惑为什么他们应该费心去学习如何与内核社区合作并将代码合并到主线内核（“主线”指的是由Linus Torvalds维护并被Linux发行版用作基础的内核）。从短期来看，贡献代码似乎是一种可以避免的成本；直接保持代码分离并直接支持用户似乎更容易。实际上，将代码保持分离（“树外”）是一种虚假的经济节省。

为了说明树外代码的成本，以下是内核开发过程中的一些相关方面；其中大部分将在本文档后面的部分详细讨论。考虑：

- 已经合并到主线内核的代码对所有Linux用户都可用。它将自动出现在所有启用它的发行版中。无需驱动盘、下载或支持多个版本的多个发行版的麻烦；一切都只是正常工作，无论是对开发者还是对用户。合并到主线解决了大量的分发和支持问题。
- 尽管内核开发者努力保持用户空间接口的稳定性，但内部内核API始终处于变化之中。缺乏稳定的内部接口是一个有意为之的设计决策；它允许随时进行根本性的改进，并最终导致更高质量的代码。
但是一项政策的结果是，任何树外的代码如果要与新内核一起工作就需要持续维护。维护树外的代码需要大量的工作来确保该代码能够正常运行。

相比之下，主线内的代码不需要这样的工作，因为有一条简单的规则要求任何进行API更改的开发者也要修复因此而破坏的任何代码。因此，已经合并到主线中的代码具有显著较低的维护成本。

除此之外，在内核中的代码通常会被其他开发者改进。赋予用户社区和客户改进您产品的权力可能会带来令人惊讶的结果。

内核代码在合并前和合并后都会经过审查。无论原始开发者的技能有多强，这个审查过程总是会发现可以改进代码的方法。审查常常会发现严重的错误和安全问题。对于在封闭环境中开发的代码来说尤其如此；此类代码从外部开发者的审查中受益匪浅。树外的代码质量较低。

参与开发过程是影响内核发展方向的方式之一。旁观者虽然也会被听到，但活跃开发者的声音更加强烈——并且有能力实现改变以使内核更好地满足他们的需求。

当代码被单独维护时，第三方贡献类似功能的不同实现的可能性始终存在。如果发生这种情况，将您的代码合并将会变得更加困难——甚至不可能。那时您将面临两个不愉快的选择：（1）无限期地在树外维护非标准特性，或者（2）放弃您的代码并将用户迁移到树内的版本。

代码贡献是整个过程得以运作的基础行动。通过贡献您的代码，您可以为内核添加新功能，并提供对其他内核开发者有用的能力和示例。如果您已经为Linux开发了代码（或正在考虑这样做），显然您对这个平台的持续成功感兴趣；贡献代码是确保这种成功的一种最佳方式。

上述所有理由适用于任何树外的内核代码，包括以专有、仅二进制形式分发的代码。
然而，在考虑任何形式的仅二进制内核代码分发之前，还应该考虑其他因素。这些因素包括：

- 分发专有内核模块的法律问题至少是模糊不清的；相当多的内核版权所有者认为大多数仅二进制模块是内核的衍生产品，因此它们的分发违反了GNU通用公共许可证（关于这一点将在下面进一步说明）。本文档的作者不是律师，文档中的任何内容都不应被视为法律建议。闭源模块的真实法律地位只能由法院确定。但困扰这些模块的不确定性是存在的，不论如何。

- 二进制模块极大地增加了调试内核问题的难度，以至于大多数内核开发者甚至不会尝试。因此，分发仅二进制模块会使您的用户更难从社区获得支持。
- 对于仅提供二进制模块的发行商来说，支持工作也更为艰难。他们必须为想要支持的每个发行版和每个内核版本提供一个模块版本。为了实现相对全面的覆盖，可能需要构建数十个同一模块的不同版本。而且，每当用户升级内核时，都必须单独升级你的模块。
- 上面关于代码审查的所有论述对于闭源代码来说更是双倍适用。由于这些代码根本不可获取，因此不可能经过社区的审查，并且毫无疑问会存在严重的问题。
特别地，嵌入式系统的制造商可能会倾向于忽视本节中的许多内容，认为他们发布的是一个自包含的产品，使用固定版本的内核，并且在发布后不需要进一步开发。这种观点忽略了广泛代码审查的价值以及允许用户为产品添加功能的重要性。但这些产品的商业寿命也是有限的，在某个时刻必须发布新版本。这时，那些将代码贡献到主线并得到良好维护的供应商将处于更有利的位置，能够更快地让新产品准备好上市。
许可
------

贡献给Linux内核的代码遵循多种许可协议，但是所有代码都必须与GNU通用公共许可证第2版（GPLv2）兼容，这是整个内核发行版所遵循的许可协议。
实际上，这意味着所有代码贡献要么遵循GPLv2（可选地允许根据以后版本的GPL分发），要么遵循三条款BSD许可。任何不遵循兼容许可的贡献都不会被接受进入内核。
对于贡献给内核的代码，不需要（也不要求）进行版权转让。所有合并到主线内核的代码保留其原始所有权；因此，现在内核拥有数千名所有者。
这种所有权结构的一个含义是，任何试图改变内核许可的努力几乎注定要失败。几乎没有实际情景下可以取得所有版权所有者的同意（或从内核中移除他们的代码）。因此，特别是，在可预见的未来内核迁移到GPL第3版的可能性很小。
至关重要的是，所有贡献给内核的代码必须是合法的自由软件。出于这个原因，来自匿名（或化名）贡献者的代码不会被接受。所有贡献者都需要对其代码“签字确认”，声明代码可以在GPL下随内核分发。未经版权所有者授权为自由软件的代码，或者可能给内核带来版权相关问题的代码（例如源自缺乏适当保障措施的逆向工程的代码）不能被贡献。
关于版权问题的疑问在Linux开发邮件列表中很常见。这类问题通常会收到很多回答，但需要注意的是，回答这些问题的人并不是律师，无法提供法律建议。如果你有关于Linux源代码的法律问题，没有什么可以替代与了解这一领域的律师交谈。依赖技术邮件列表上的答案是一种冒险的行为。
