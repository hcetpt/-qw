.. _development_process_intro:

简介
============

执行摘要
-----------------

本节的其余部分涵盖了内核开发过程的范围以及开发者及其雇主可能遇到的各种挫折。内核代码应该合并到官方（“主线”）内核中有许多原因，包括对用户的自动可用性、多种形式的社区支持以及影响内核发展方向的能力。贡献给Linux内核的代码必须在GPL兼容的许可下提供。:ref:`development_process`介绍了开发过程、内核发布周期和合并窗口的技术细节。涵盖了补丁开发、审查和合并周期中的各个阶段。讨论了一些工具和邮件列表。希望开始内核开发的开发者被鼓励通过追踪并修复错误作为初步练习。:ref:`development_early_stage`涵盖了项目早期规划，强调尽可能早地让开发社区参与进来。:ref:`development_coding`讨论了编码过程；提到了其他开发者所遇到的一些陷阱。涵盖了一些对补丁的要求，并介绍了一些有助于确保内核补丁正确的工具。:ref:`development_posting`讨论了发布补丁以供审查的过程。为了得到开发社区的认真对待，补丁必须正确格式化和描述，并且必须发送到正确的地方。遵循本节中的建议应有助于确保您的工作获得最佳的接受度。:ref:`development_followthrough`讨论了发布补丁后的后续工作；此时任务远未完成。与审阅者合作是开发过程的关键部分；本节提供了一些如何在这个重要阶段避免问题的小贴士。告诫开发者不要认为当补丁合并到主线时任务就完成了。:ref:`development_advancedtopics`介绍了一些“高级”主题：使用git管理补丁和审阅他人发布的补丁。:ref:`development_conclusion`总结了文档，并提供了关于内核开发更多信息来源的指引。

本书内容
---------------------------

Linux内核拥有超过800万行代码，每版有超过1000名贡献者，是目前最大且最活跃的自由软件项目之一。自1991年其谦逊的开端以来，这个内核已经演变成一个顶级的操作系统组件，运行在口袋大小的数字音乐播放器、桌面PC、世界上最大的超级计算机以及各种类型的系统上。它是一个几乎适用于任何情况的强大、高效且可扩展的解决方案。
随着Linux的发展，越来越多的开发者（和公司）希望参与其开发。硬件供应商希望确保Linux能够良好地支持他们的产品，从而使这些产品对Linux用户更具吸引力。嵌入式系统供应商将Linux作为集成产品的一部分，希望Linux能够尽可能地胜任当前的任务。基于Linux构建产品的发行商和其他软件供应商对其内核的能力、性能和可靠性有着明确的兴趣。终端用户也常常希望能够修改Linux以更好地满足他们的需求。

Linux最吸引人的特点之一就是它对这些开发者的开放性；任何具备相应技能的人都可以改进Linux并影响其发展方向。专有产品无法提供这种开放性，这是自由软件过程的一个特征。但事实上，内核甚至比大多数其他自由软件项目更为开放。一个典型的三个月内核开发周期可能涉及超过1000名来自100多家不同公司（或没有公司背景）的开发者。

与内核开发社区合作并不特别困难。但是，尽管如此，许多潜在的贡献者在尝试进行内核工作时遇到了困难。内核社区已经发展出自己独特的运作方式，使其能够在每天数千行代码发生变化的环境中顺利运行（并生产高质量的产品）。因此，Linux内核开发过程与专有开发方法存在很大差异也就不足为奇了。

对于新开发者来说，内核的开发过程可能会显得陌生且令人望而生畏，但这背后有很好的理由和坚实的经验。不理解内核社区运作方式（或者更糟的是，试图违反或绕过这些方式）的开发者将会面临令人沮丧的经历。虽然开发社区会帮助那些努力学习的人，但对于那些不愿倾听或不关心开发过程的人来说，他们几乎没有时间去理会。

希望阅读这份文档的人能够避免这种令人沮丧的经历。这里有很多材料，但花时间阅读它们很快就会得到回报。开发社区始终需要帮助改进内核的开发者；以下内容应该能够帮助你——或为你工作的人员——加入我们的社区。

致谢
----

本文件由Jonathan Corbet撰写，电子邮件：corbet@lwn.net。该文件得到了Johannes Berg、James Berry、Alex Chiang、Roland Dreier、Randy Dunlap、Jake Edge、Jiri Kosina、Matt Mackall、Arthur Marsh、Amanda McPherson、Andrew Morton、Andrew Price、Tsugikazu Shibata 和 Jochen Voß 的评论改进。

这项工作得到了Linux基金会的支持；特别感谢Amanda McPherson，她看到了这项工作的价值并使这一切得以实现。

将代码合并到主线的重要性
------------------------------

一些公司和开发者偶尔会疑惑为什么他们应该费心学习如何与内核社区合作并将他们的代码合并到主线内核（“主线”指的是由Linus Torvalds维护并被Linux发行版用作基础的内核）。短期内，贡献代码似乎是一种可以避免的成本；直接保持代码独立并直接支持用户似乎更容易。事实是，保持代码分离（“树外”）实际上是一种虚假的经济行为。

为了说明树外代码的成本，以下是内核开发过程中的一些相关方面；其中大部分将在本文档后面详细讨论。考虑以下几点：

- 已经合并到主线内核中的代码可供所有Linux用户使用。它将自动出现在启用了它的所有发行版中。无需驱动磁盘、下载或处理支持多个版本的多个发行版的麻烦；一切都只是简单地工作，对开发者和用户都是如此。合并到主线解决了大量的分发和支持问题。
- 尽管内核开发者致力于维护用户空间的稳定接口，但内部内核API一直在变化。内部接口不稳定是有意的设计决策；这允许随时进行根本性的改进，并最终产生更高质量的代码。
但是一项政策的结果是，任何树外代码如果要与新内核兼容，都需要持续维护。维护树外代码需要大量的工作才能确保这些代码继续正常工作。

相反，主线内的代码由于一个简单的规则而不需要这种工作：任何对API进行更改的开发者也必须修复因此受到影响的代码。因此，已经合并到主线中的代码具有显著较低的维护成本。

除此之外，内核中的代码通常会被其他开发者改进。赋予用户社区和客户改进你产品的权力会带来意想不到的效果。

内核代码在合并前后都会经过审查。无论原始开发者的技能多么强大，这一审查过程总会发现代码可以改进的地方。审查经常能发现严重的漏洞和安全问题。这一点对于在封闭环境中开发的代码尤其重要；这类代码从外部开发者的审查中受益匪浅。树外代码的质量较低。

参与开发过程是你影响内核发展方向的方式。旁观者的意见会被听到，但积极参与的开发者有更强的声音——并且有能力实现改变，使内核更好地满足他们的需求。

当代码独立维护时，第三方贡献类似功能的不同实现的可能性始终存在。如果这种情况发生，将你的代码合并将会变得更加困难，甚至不可能。那时你将面临两个不愉快的选择：（1）无限期地维护一个非标准的功能；或者（2）放弃你的代码并迁移你的用户到树内版本。

代码贡献是使整个过程运作的根本行动。通过贡献你的代码，你可以向内核添加新的功能，并提供对其他内核开发者有用的能力和示例。如果你为Linux开发了代码（或正在考虑这样做），你显然对这个平台的持续成功感兴趣；贡献代码是帮助确保这一成功的最佳方式之一。

上述所有理由适用于任何树外内核代码，包括以专有二进制形式分发的代码。

然而，在考虑任何形式的二进制代码分发之前，还有一些额外的因素需要考虑。这些因素包括：

- 分发专有内核模块的法律问题至少是模糊不清的；很多内核版权持有者认为大多数二进制模块是内核的衍生产品，因此其分发违反了GNU通用公共许可证（关于此问题将在下面进一步讨论）。本文档作者不是律师，本文档中的任何内容都不应被视为法律建议。只有法院能够确定闭源模块的真实法律地位。但是，这些模块所面临的不确定性依然存在。
- 二进制模块极大地增加了调试内核问题的难度，以至于大多数内核开发者甚至都不会尝试。因此，分发仅二进制模块会使你的用户更难从社区获得支持。
### 支持

对于仅提供二进制模块的分发商而言，支持工作更加困难，因为他们必须为希望支持的每个发行版和内核版本提供一个模块版本。为了提供合理的全面覆盖，可能需要构建数十个单个模块版本，并且每当用户升级内核时，他们必须单独升级你的模块。

### 代码审查

上述关于代码审查的内容对于闭源代码来说更为适用。由于这些代码完全不可见，因此无法接受社区的审查，毫无疑问，这些代码会存在严重问题。

特别是嵌入式系统的制造商可能会倾向于忽视本节中的许多内容，认为他们发布的是一个自包含的产品，使用的是固定版本的内核，在发布后不需要进一步开发。这种观点忽略了广泛代码审查的价值以及允许用户为其产品添加功能的重要性。然而，这些产品的商业寿命是有限的，之后必须发布新版本。在这种情况下，那些代码在主线中并得到良好维护的厂商将能够更快地让新产品上市。

### 许可证

代码贡献给Linux内核时遵循多种许可证，但所有代码都必须与GNU通用公共许可证第2版（GPLv2）兼容，这是整个内核发行版所采用的许可证。

实际上，这意味着所有代码贡献要么受GPLv2的保护（可选择性地允许按照GPL的后续版本进行分发），要么受三条款BSD许可证保护。任何不遵守兼容许可证的贡献都不会被接受进入内核。

对于贡献给内核的代码，无需（也不要求）进行版权转让。所有合并到主线内核中的代码保留其原始所有权；因此，现在内核有数千个所有者。

这种所有权结构的一个重要含义是，任何试图更改内核许可证的努力几乎注定会失败。很难在实际场景中获得所有版权持有者的同意（或者从内核中移除他们的代码）。因此，特别是在可预见的未来，迁移到GPL第3版是没有希望的。

所有贡献给内核的代码必须是合法的自由软件。因此，匿名或化名贡献者的代码不会被接受。所有贡献者都需要对其代码“签署”，声明该代码可以在GPL下随内核分发。未由所有者授权作为自由软件分发的代码，或可能给内核带来版权相关问题的代码（例如缺乏适当保护措施的逆向工程代码）不能被贡献。

关于版权相关问题的问题在Linux开发邮件列表中很常见。这类问题通常会收到很多回答，但需要注意的是，回答这些问题的人不是律师，也无法提供法律建议。如果你有关于Linux源代码的法律问题，最好咨询了解这个领域的律师。依赖技术邮件列表上的答案是一种冒险的行为。
