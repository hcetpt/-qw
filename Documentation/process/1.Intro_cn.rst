开发流程简介

简介
=============

执行摘要
-----------------

本节其余部分涵盖了内核开发流程的范围，以及开发者及其雇主可能遇到的各种挫折。内核代码应当合并到官方（“主线”）内核中的原因有很多，包括对用户的自动可用性、多种形式的社区支持，以及影响内核发展方向的能力。贡献给Linux内核的代码必须在GPL兼容许可下提供。 :ref:`development_process` 介绍了开发流程、内核发布周期和合并窗口的机制。涵盖了补丁开发、审查和合并周期的各个阶段。讨论了一些工具和邮件列表。希望开始内核开发的开发者被鼓励追踪并修复bug作为初步练习。 :ref:`development_early_stage` 讨论了项目早期规划，重点在于尽早地让开发社区参与进来。 :ref:`development_coding` 关于编码过程；讨论了其他开发者遇到的一些陷阱。涵盖了一些对补丁的要求，并介绍了一些有助于确保内核补丁正确的工具。 :ref:`development_posting` 讨论了发布补丁以供审查的过程。要让开发社区认真对待，补丁必须正确格式化和描述，并且必须发送到正确的地方。遵循本节中的建议应该能帮助您的工作获得尽可能好的接受。 :ref:`development_followthrough` 讨论了发布补丁后发生的事情；此时任务远未完成。与审查者合作是开发过程的重要组成部分；本节提供了一些如何避免在这个重要阶段出现问题的提示。告诫开发者不要假设当补丁合并到主线时任务就完成了。 :ref:`development_advancedtopics` 介绍了一些“高级”主题：使用git管理补丁和审查他人发布的补丁。 :ref:`development_conclusion` 通过指向更多关于内核开发信息来源来结束本文档。

本文档的主题
---------------------------

Linux内核，拥有超过8百万行代码，每版有1000多名贡献者，是现存最大和最活跃的自由软件项目之一。自1991年谦逊的开端以来，这个内核已经发展成为一个最佳的操作系统组件，运行在口袋大小的数字音乐播放器、桌面PC、世界上最大的超级计算机以及各种类型的中间系统上。它是一个几乎适用于任何情况下的强大、高效和可扩展的解决方案。
随着Linux的成长，越来越多的开发者（和公司）希望参与到其开发中来。硬件供应商希望确保Linux能良好地支持他们的产品，使这些产品对Linux用户更具吸引力。嵌入式系统供应商，将Linux作为集成产品的一部分，希望Linux能够尽可能地胜任并适合手头的任务。基于Linux构建产品的发行版和其他软件供应商对其能力、性能和可靠性有着明确的兴趣。终端用户也常常希望修改Linux，以更好地满足自己的需求。

Linux最吸引人的特点之一就是它对这些开发者开放；任何具备相应技能的人都可以改进Linux，并影响其发展方向。专有产品无法提供这种开放性，这是自由软件过程的特点。但如果说有什么不同的话，内核甚至比大多数其他自由软件项目更加开放。一个典型的三个月内核开发周期可能涉及超过1000名开发者为100多家不同的公司工作（或完全不为任何公司工作）。

与内核开发社区合作并不特别困难。然而，尽管如此，许多潜在贡献者在尝试进行内核工作时还是遇到了困难。内核社区已经形成了自己独特的运作方式，这使得它能在每天数千行代码被更改的环境下平稳运行（并产生高质量的产品）。因此，Linux内核开发流程与专有开发方法大相径庭并不令人惊讶。

内核的开发流程对新开发者来说可能显得陌生且令人望而生畏，但这背后有充分的理由和坚实的经验。不理解内核社区方式的开发者（更糟的是，试图无视或规避这些方式的人）将面临令人沮丧的经历。虽然开发社区乐于帮助那些试图学习的人，但对于那些不愿倾听或不关心开发流程的人来说，时间却不多。

希望阅读这份文档的人能够避免那种令人沮丧的经历。这里有很多材料，但阅读它们的努力很快就会得到回报。开发社区总是需要帮助内核变得更好的开发者；以下文字应该能帮助你——或者为你工作的人——加入我们的社区。

致谢

---

本文档由Jonathan Corbet撰写，邮箱：corbet@lwn.net。它得到了Johannes Berg、James Berry、Alex Chiang、Roland Dreier、Randy Dunlap、Jake Edge、Jiri Kosina、Matt Mackall、Arthur Marsh、Amanda McPherson、Andrew Morton、Andrew Price、Tsugikazu Shibata和Jochen Voß等人的评论而得以改进。

这项工作得到了Linux基金会的支持；特别是要感谢Amanda McPherson，她看到了这项工作的价值并使之成为现实。

将代码合并到主线的重要性
------------------------------

有些公司和开发者偶尔会疑惑为什么他们应该费心去学习如何与内核社区合作并将代码合并到主线内核（“主线”是指由Linus Torvalds维护并被Linux发行版用作基础的内核）。短期内，贡献代码看起来像是可以避免的开销；直接保持代码分离并直接支持用户似乎更容易。事实是，保持代码分离（“树外”）是一种虚假的经济行为。

为了说明树外代码的成本，以下是内核开发过程中的一些相关方面；其中大部分将在本文档后面的章节中详细讨论。考虑一下：

- 已经合并到主线内核中的代码可供所有Linux用户使用。它将自动出现在所有启用它的发行版中。无需驱动程序磁盘、下载或支持多个版本的多个发行版的麻烦；一切都只是正常工作，对于开发者和用户都是如此。合并到主线解决了大量分发和支持问题。
- 虽然内核开发者努力保持稳定的用户空间接口，但内核内部API却处于不断变化中。内部接口的不稳定是有意为之的设计决策；它允许随时进行根本性的改进，并导致更高质量的代码。
但这一政策的一个结果是，任何树外代码如果要与新内核兼容，就需要持续的维护。维护树外代码需要大量的工作，仅仅是为了让这些代码能够继续运行。

相比之下，主线内的代码不需要这种工作，因为有一条简单的规则：任何进行API更改的开发者也必须修复因该更改而破坏的任何代码。因此，已经合并到主线中的代码具有显著降低的维护成本。

除此之外，内核中的代码往往会得到其他开发者的改进。赋予用户社区和客户改进你产品的权力，可能会带来令人惊讶的结果。

内核代码在合并到主线之前和之后都会受到审查。无论原始开发者的技能有多强，这个审查过程总是会发现代码可以改进的地方。经常，审查会发现严重的bug和安全问题。对于在封闭环境中开发的代码尤其如此；这类代码从外部开发者的审查中受益匪浅。树外代码的质量较低。

参与开发过程是你影响内核发展方向的方式。旁观并抱怨的用户会被听到，但活跃的开发者有更强的声音——以及实施改变的能力，使内核更好地满足他们的需求。

当代码被单独维护时，第三方可能贡献一个类似功能的不同实现的可能性始终存在。如果这种情况发生，将你的代码合并将会变得非常困难，甚至不可能。那么你将面临两个不愉快的选择：要么（1）无限期地在树外维护一个非标准特性，要么（2）放弃你的代码，将你的用户迁移到树内版本。

代码贡献是整个过程得以运作的根本行动。通过贡献你的代码，你可以为内核添加新功能，并为其他内核开发者提供有用的功能和示例。如果你已经为Linux开发了代码（或正在考虑这样做），你显然对这个平台的持续成功感兴趣；贡献代码是确保这种成功最好的方式之一。

上述所有理由都适用于任何树外内核代码，包括以专有、仅二进制形式分发的代码。

然而，在考虑任何形式的仅二进制内核代码分发之前，应该考虑到一些额外因素，包括：

- 分发专有内核模块的法律问题至少是模糊不清的；相当多的内核版权持有者认为，大多数仅二进制模块都是内核的衍生产品，因此，它们的分发违反了GNU通用公共许可证（关于这一点，下文会有更多论述）。本文档的作者不是律师，文档中的任何内容都不应被视为法律建议。只有法院才能确定闭源模块的真实法律状态。但无论怎样，围绕这些模块的不确定性确实存在。
- 二进制模块极大地增加了调试内核问题的难度，以至于大多数内核开发者甚至都不会尝试。因此，分发仅二进制模块会使你的用户更难从社区获得支持。
- 对于仅提供二进制模块的发行商而言，支持工作变得更为艰难。他们必须为想要支持的每个发行版和内核版本提供相应的模块版本。为了实现合理的全面覆盖，一个模块可能需要构建数十个版本，而每当用户升级内核时，都得单独升级你的模块。
- 上述关于代码审查的所有讨论，在封闭源码的情况下更是双倍适用。由于这类代码完全不可见，因此无法接受社区的审查，毫无疑问，其中会存在严重的问题。
特别对于嵌入式系统的制造商而言，可能会倾向于忽视本节中的大部分内容，认为自己发布的是一个使用固定内核版本的自包含产品，发布后无需进一步开发。然而，这种观点忽略了广泛代码审查的价值以及允许用户为其产品添加功能的重要性。但这些产品的商业寿命有限，之后需要发布新版本。届时，那些将代码贡献至主线并维护良好的厂商，将更有可能快速准备好新产品推向市场。

许可协议
----------

向Linux内核贡献的代码遵循多种许可协议，但所有代码都必须与GNU通用公共许可证第2版（GPLv2）兼容，这是覆盖整个内核分发的许可协议。
实际上，这意味着所有代码贡献要么被GPLv2覆盖（可选地允许根据后续版本的GPL进行分发），要么遵循三条款BSD许可。任何不遵循兼容许可的贡献将不会被内核接受。
对于贡献至内核的代码，并不要求（或请求）版权转让。所有合并到主线内核的代码保留其原始所有权；因此，内核现在拥有数千名所有者。
这一所有权结构的一个含义是，任何尝试更改内核许可协议的行为几乎注定失败。在实践中，几乎不可能获得所有版权所有者的同意（或从内核中移除他们的代码）。因此，特别是，在可预见的未来，迁移到GPL第3版的可能性微乎其微。
所有贡献至内核的代码必须合法地属于自由软件，这一点至关重要。因此，来自匿名（或化名）贡献者的代码将不会被接受。所有贡献者都被要求对他们的代码“签名确认”，表明该代码可以在GPL下随内核分发。未经所有者许可作为自由软件发布的代码，或可能给内核带来版权相关问题的代码（如源于缺乏适当保障措施的逆向工程努力的代码）不能被贡献。
关于版权问题的疑问在Linux开发邮件列表中很常见。此类问题通常会收到不少回答，但应记住，回答这些问题的人并非律师，无法提供法律建议。如果你有关于Linux源代码的法律问题，与了解该领域的律师交谈是无可替代的。依赖技术邮件列表上获得的答案是一种冒险行为。
