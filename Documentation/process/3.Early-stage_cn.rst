早期规划
========

在考虑进行 Linux 内核开发项目时，可能会有直接开始编码的冲动。
但是，就像任何重大项目一样，在编写第一行代码之前，最好先做好大部分的基础工作。
在早期规划和沟通上花费一些时间可以为后期节省更多的时间。
问题定义
---------

与任何工程项目一样，成功的内核增强始于对要解决的问题的清晰描述。
在某些情况下，这一步骤很简单：例如，当需要针对特定硬件设备编写驱动程序时。
但在其他情况下，很容易将实际问题与提出的解决方案混淆，这可能导致困难。

以几年前的一个例子为例：与 Linux 音频相关的开发者们寻求一种方法，使应用程序能够在没有系统过度延迟导致的中断或其它缺陷的情况下运行。
他们找到的解决方案是一个旨在接入 Linux 安全模块（LSM）框架的内核模块；该模块可以配置为赋予特定应用程序实时调度器的访问权限。
这个模块被实现，并发送到了 linux-kernel 邮件列表，但很快就遇到了问题。

对于音频开发者而言，这个安全模块足以解决他们面临的具体问题。
但对于更广泛的内核社区来说，它被视为对 LSM 框架的误用（该框架并非用于授予进程本不应有的特权），并且可能给系统稳定性带来风险。
社区更倾向于通过rlimit机制提供短期的实时调度器访问权限，以及长期减少延迟的工作作为解决方案。

然而，音频社区无法接受他们已实现的特定解决方案之外的替代方案；
他们不愿意接受其他建议。由此产生的分歧让这些开发者对整个内核开发过程感到失望；
其中一位返回到音频邮件列表中并发表了如下言论：

> 有许多非常优秀的 Linux 内核开发者，但他们往往被一群傲慢的傻瓜盖过声音。试图向这些人传达用户需求是浪费时间。他们太“聪明”了，根本听不进普通人的话。（[来源](https://lwn.net/Articles/131776/)）

实际情况与此有所不同；内核开发者更加关注系统的稳定性、长期维护以及寻找解决问题的正确方法，而不是某个具体的模块。

这个故事的教训是要专注于问题本身——而不是特定的解决方案——并在投入大量编码工作之前与开发社区讨论问题。

因此，在考虑进行内核开发项目时，应该回答以下一组简短的问题：

- 究竟需要解决什么问题？

- 受此问题影响的用户是谁？解决方案应解决哪些使用案例？

- 当前内核在解决这个问题方面有何不足？

只有在回答了这些问题之后，才应该开始考虑可能的解决方案。
早期讨论
---------

在规划内核开发项目时，最好是在开始实施之前与社区进行讨论。
早期沟通可以在多个方面节省时间和麻烦：

- 很可能问题已经通过内核以你尚未理解的方式得到了解决。
  Linux 内核庞大且拥有一些并不明显的特点和能力。
  并非所有的内核功能都如人们所愿地得到充分记录，因此很容易遗漏一些东西。
  作者曾看到一个完整的驱动程序被发布出来，而这个新驱动实际上复制了一个现有驱动程序的功能，新作者对此并不知情。
  重新发明轮子的代码不仅是浪费；也不会被接受进入主线内核。
可能存在所提议解决方案中的一些元素是不适合合并到主线的。最好是在编写代码之前就发现这类问题。

完全有可能其他开发者已经考虑过这个问题；他们可能有更好的解决方案的想法，并且愿意帮助创建这一解决方案。
多年与内核开发社区的经验教会了我们一个明确的教训：在封闭环境中设计和开发的内核代码不可避免地会存在问题，这些问题只有在代码向社区发布时才会暴露出来。有时这些问题非常严重，需要数月甚至数年的时间才能将代码提升到内核社区的标准。一些例子包括：

- Devicescape网络堆栈最初是为单处理器系统设计和实现的。直到它适合多处理器系统后才能被合并到主线。在代码中添加锁定等特性是一项艰巨的任务；因此，该代码（现称为mac80211）的合并被推迟了一年多。
- Reiser4文件系统包含了一些核心内核开发者认为应该在虚拟文件系统层实现的功能。此外，它还具有一些可能会使系统暴露于用户引发的死锁风险中的特性。这些问题的晚期揭露——以及拒绝解决其中一些问题——导致Reiser4一直未能进入主线内核。
- AppArmor安全模块以被认为不安全和不可靠的方式使用了内部虚拟文件系统的数据结构。这种担忧（以及其他因素）使得AppArmor多年无法进入主线。

在所有这些案例中，如果能够提前与内核开发者进行讨论，本可以避免大量的麻烦和额外的工作。
与谁交流？
--------------

当开发者决定公开他们的计划时，接下来的问题就是：从哪里开始？答案是找到合适的邮件列表和合适的维护者。对于邮件列表，最好的方法是查看MAINTAINERS文件，寻找相关的地方发布信息。如果有合适的子系统列表，通常在那里发布比在linux-kernel上发布更可取；你更有可能接触到对该子系统有专长的开发者，并且环境可能会更加支持性。

找到维护者可能稍微困难一些。同样，MAINTAINERS文件是一个好的起点。不过，这个文件并不总是最新的，并非所有的子系统都在那里有所代表。实际上，MAINTAINERS文件中列出的人可能并不是当前实际担任该角色的人。因此，在不确定联系谁的情况下，一个有用的技巧是使用git（特别是"git log"命令）来查看在感兴趣的子系统中目前活跃的是谁。看看谁在编写补丁，以及是否有任何人给这些补丁加上了“Signed-off-by”行。这些人是最能帮助新开发项目的人。

寻找正确的维护者的任务有时足够具有挑战性，以至于内核开发者为此增加了一个脚本来简化这一过程：

::

	.../scripts/get_maintainer.pl

当使用"-f"选项时，此脚本可以根据给定的文件或目录返回当前的维护者。如果通过命令行传递一个补丁，它将列出应该收到该补丁副本的维护者。这是获取你补丁应抄送人员列表的首选方式（与"-f"选项不同）。get_maintainer.pl有几个选项可以调节搜索维护者的努力程度；请注意谨慎使用更积极的选项，因为你可能会包括那些对你修改的代码没有真正兴趣的开发者。

如果其他方法都失败了，与Andrew Morton交谈可以是一种有效的追踪特定代码维护者的方法。
### 何时发布？

如果可能，在项目早期阶段发布计划只会有所帮助。描述所解决的问题以及已制定的实施计划。你能提供的任何信息都有助于开发社区为该项目提供有用的反馈。
在这个阶段可能会遇到一个令人沮丧的情况，不是敌对反应，而是几乎没有或完全没有反应。实际情况的悲哀之处在于（1）内核开发者往往很忙，（2）有许多人有着宏伟的计划却很少有实际代码（甚至代码的可能性也很小），（3）没有人有义务审查或评论他人发布的观点。除此之外，高层设计往往会隐藏一些问题，这些问题只有当有人试图实现这些设计时才会暴露出来；因此，内核开发者更愿意看到实际的代码。
如果请求评论的帖子没有得到多少反馈，不要假设这意味着大家对你的项目不感兴趣。
不幸的是，你也不能假设你的想法没有任何问题。在这种情况下最好的做法是继续推进，并在整个过程中让社区了解进展。

### 获得官方支持

如果你的工作是在企业环境中进行——大多数Linux内核工作都是如此——显然你需要获得有权限的管理层的许可，才能将公司的计划或代码发布到公共邮件列表中。未经许可在GPL兼容许可证下发布代码可能会特别麻烦；公司管理层和法律团队越早同意发布内核开发项目，所有相关人员就会越好。
一些读者此时可能在想，他们的内核工作旨在支持一个尚未正式公开的产品。在公共邮件列表上透露雇主的计划可能不是一个可行的选择。在这种情况下，值得考虑一下这种保密是否真的有必要；通常情况下，没有必要把开发计划藏在幕后。
话虽如此，也有一些情况是公司在开发过程早期确实不能披露其计划。拥有经验丰富的内核开发者的公司可能会选择以开放循环的方式推进，假设他们以后能够避免严重的集成问题。对于没有这类内部专业知识的公司来说，最佳选择往往是聘请外部开发者在保密协议下审查计划。Linux基金会运营着一项NDA计划，旨在帮助处理这种情况；更多信息可以在这里找到：

    https://www.linuxfoundation.org/nda/

这种审查通常足以避免后续出现严重问题，而无需公开披露项目详情。
