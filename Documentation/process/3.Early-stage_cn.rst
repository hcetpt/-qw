.. _development_early_stage:

早期规划
=========

在考虑进行Linux内核开发项目时，可能会忍不住立即动手编写代码。然而，与任何重要的项目一样，许多成功的前期工作最好是在写出第一行代码之前完成的。花一些时间进行早期规划和沟通可以节省更多的时间。
问题定义
---------

如同任何工程项目一样，一个成功的内核增强始于对要解决的问题有一个清晰的描述。在某些情况下，这一步骤是简单的：例如，当需要为特定硬件编写驱动程序时。但在其他情况下，很容易将实际问题与提出的解决方案混淆，这可能导致困难。

以几年前Linux音频开发者遇到的一个例子为例：他们希望找到一种方法，在不出现系统过度延迟导致的中断或其他瑕疵的情况下运行应用程序。他们想到的解决方案是一个旨在连接到Linux安全模块（LSM）框架的内核模块；该模块可以配置为让特定的应用程序访问实时调度器。该模块实现后被发送到了linux-kernel邮件列表，在那里它立刻遇到了问题。

对于音频开发者来说，这个安全模块足以解决他们当前的问题。但对更广泛的内核社区而言，这被视为对LSM框架的误用（该框架并非设计用于赋予进程它们本不应拥有的特权），并且对系统稳定性构成风险。他们偏好的解决方案包括短期内通过rlimit机制提供实时调度访问权限，以及长期上持续减少延迟的工作。

然而，音频社区无法超越他们已经实现的具体解决方案；他们不愿意接受替代方案。由此产生的分歧使这些开发者对整个内核开发过程感到失望；其中一位回到音频列表中发帖说：

	有很多优秀的Linux内核开发者，但他们往往被一大群傲慢的傻瓜盖过了声音。试图向这些人传达用户需求是浪费时间。他们太“聪明”了，根本不会听普通人的意见。
(https://lwn.net/Articles/131776/)
实际情况有所不同；内核开发者更关心系统的稳定性、长期维护以及找到正确的问题解决方案，而不是某个特定的模块。

这个故事的教训是关注问题本身——而不是具体的解决方案——并在投入大量编码工作之前与开发社区讨论。

因此，在考虑内核开发项目时，应该先回答以下简短的问题集：

 - 究竟需要解决什么问题？

 - 受此问题影响的用户是谁？解决方案应解决哪些使用案例？

 - 内核现在如何未能解决这个问题？

只有在回答这些问题之后，才有意义开始考虑可能的解决方案。
早期讨论
---------

在规划内核开发项目时，在着手实施之前与社区进行讨论是非常有意义的。早期沟通可以在多个方面节省时间和麻烦：

 - 也许问题已经通过内核以你尚未理解的方式解决了。Linux内核庞大且有许多并不显而易见的功能和能力。并不是所有内核功能都像我们希望的那样得到了充分的文档说明，很容易遗漏一些东西。作者曾看到有人发布了一个完整的驱动程序，结果发现它复制了一个新作者未曾意识到的现有驱动程序。重新发明轮子不仅浪费资源；这样的代码也不会被接受进入主线内核。
### 可能提案中的某些部分不会被主线合并所接受。最好在编写代码之前就发现这些问题。

完全有可能其他开发者已经考虑过这个问题；他们可能有更佳的解决方案，并且愿意帮助创建该解决方案。

多年与内核开发社区的合作经验告诉我们一个明确的教训：闭门设计和开发的内核代码在发布到社区时，总会暴露出一些问题。有时这些问题非常严重，需要数月甚至数年的时间才能使代码达到内核社区的标准。以下是一些例子：

- Devicescape 网络栈是为单处理器系统设计和实现的。直到它适合多处理器系统后，才能合并到主线。将锁定等机制后期添加到代码中是一项艰巨的任务；因此，该代码（现称为 mac80211）的合并延迟了一年以上。
- Reiser4 文件系统包含了一些核心内核开发者认为应该在虚拟文件系统层实现的功能。此外，它还包含了一些容易导致用户引发死锁的特性。这些问题的晚发现以及拒绝解决其中一些问题，导致 Reiser4 一直未能进入主线内核。
- AppArmor 安全模块以被认为不安全和不可靠的方式使用了内部虚拟文件系统的数据结构。这一担忧（以及其他原因）使得 AppArmor 多年来无法进入主线内核。

在所有这些案例中，如果能在早期与内核开发者进行讨论，本可以避免大量的痛苦和额外工作。

### 你该找谁？

当开发者决定公开他们的计划时，下一个问题是：我们从哪里开始？答案是找到合适的邮件列表和合适的维护者。对于邮件列表，最好的方法是查看 MAINTAINERS 文件，找到一个合适的地方发布信息。如果有合适的子系统列表，通常在那里发布比在 linux-kernel 上发布更好；你更有可能联系到具有相关子系统专业知识的开发者，而且环境可能更为支持。

寻找维护者可能会稍微困难一些。同样，MAINTAINERS 文件是起点。然而，这个文件并不总是最新的，并不是所有子系统都在其中列出。MAINTAINERS 文件中列出的人可能并不是目前实际担任该角色的人。因此，当不确定该联系谁时，一个有用的技巧是使用 git（特别是“git log”命令），查看当前在感兴趣的子系统中活跃的人。看看谁在编写补丁，以及谁在这些补丁上添加了 Signed-off-by 行。这些人是最适合帮助新开发项目的人。

寻找合适的维护者有时会足够挑战，以至于内核开发者增加了一个脚本来简化这一过程：

```
.../scripts/get_maintainer.pl
```

此脚本在给定“-f”选项时，将返回给定文件或目录的当前维护者。如果在命令行上传递了一个补丁，它将列出应接收该补丁副本的维护者。这是获取补丁抄送列表的首选方式（不同于“-f”选项）。有许多选项可以调节 get_maintainer.pl 寻找维护者的范围；请谨慎使用更具侵略性的选项，以免包括那些对你修改的代码没有真正兴趣的开发者。

如果其他方法都无效，与 Andrew Morton 联系通常是找到特定代码维护者的有效方式。
何时发布？
-------------

如果可能，在项目早期阶段发布计划只会有所帮助。描述正在解决的问题以及实施计划。你提供的任何信息都可以帮助开发社区对项目提供有用的反馈。
在这个阶段令人沮丧的事情不是敌对的反应，而是几乎没有反应。事实上，（1）内核开发者通常都很忙，（2）有很多人有宏伟的计划但几乎没有代码（甚至没有实现代码的前景），（3）没有人有义务审查或评论他人发布的观点。除此之外，高层次的设计常常会隐藏一些问题，只有当有人尝试实现这些设计时这些问题才会暴露出来；因此，内核开发者更愿意看到实际的代码。
如果请求评论的帖子没有得到多少回复，不要假设这意味着项目没有兴趣。
不幸的是，你也无法假设你的想法没有任何问题。在这种情况下，最好的做法是继续推进，并在整个过程中保持与社区的沟通。

获得官方认可
--------------------

如果你的工作是在企业环境中进行的——大多数Linux内核工作都是如此——显然，你需要得到有权经理的许可，才能将公司的计划或代码发布到公共邮件列表中。未经过GPL兼容许可证批准的代码发布可能会特别棘手；公司管理层和法律团队越早同意发布内核开发项目，所有相关人员都会越好。
一些读者此时可能在想，他们的内核工作是为了支持一个尚未正式承认的产品。在公共邮件列表上透露雇主的计划可能不是一个可行的选择。在这种情况下，值得考虑保密是否真的必要；通常情况下，没有必要将开发计划保密。
话虽如此，也有一些情况是公司在开发过程的早期确实不能公开其计划。拥有经验丰富的内核开发者的公司可能会选择以开放的方式推进，假设他们能够避免后期严重的集成问题。对于没有这种内部专业知识的公司来说，最佳选择通常是雇用外部开发者在保密协议下审查计划。Linux基金会运营了一个NDA项目，旨在帮助这种情况；更多信息可以在以下网址找到：

    https://www.linuxfoundation.org/nda/

这种审查通常足以避免后期的重大问题，而无需公开项目。
