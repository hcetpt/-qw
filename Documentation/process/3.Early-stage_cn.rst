早期规划
========

在考虑进行 Linux 内核开发项目时，可能会有直接开始编码的冲动。
但是，就像任何重要的项目一样，在编写第一行代码之前，最好先做好大部分的基础工作。
在早期规划和沟通上花费一些时间可以为后期节省更多的时间。

问题定义
---------

与任何工程项目一样，成功的内核增强始于对要解决的问题的清晰描述。
在某些情况下，这一步骤很简单：例如，当需要针对特定硬件设备编写驱动程序时。
但在其他情况下，很容易将实际问题与提出的解决方案混淆，这可能导致困难。

以几年前的一个例子为例：与 Linux 音频相关的开发者们寻求一种方法来运行应用程序，而不会因为系统中过高的延迟导致音频断流或产生其他问题。
他们得出的解决方案是一个旨在接入 Linux 安全模块（LSM）框架的内核模块；这个模块可以配置为给予特定的应用程序实时调度器的访问权限。
该模块被实现并发送到了 linux-kernel 邮件列表，但很快就遇到了问题。

对于音频开发者来说，这个安全模块足以解决他们的即时问题。
但对于更广泛的内核社区来说，它被视为对 LSM 框架的误用（该框架不是为了赋予进程它们本不应有的特权而设计的），并且可能对系统稳定性构成风险。
他们更倾向于通过 rlimit 机制提供短期的实时调度访问权限，并长期致力于减少延迟的工作。

然而，音频社区无法超越他们已经实施的具体解决方案；他们不愿意接受替代方案。
由此产生的分歧让这些开发者感到对整个内核开发过程感到失望；其中一位回到音频邮件列表中发帖说：

> 有许多非常好的 Linux 内核开发者，但他们往往被一群傲慢的蠢货压倒。试图向这些人传达用户需求是浪费时间。他们太“聪明”了，不会听取普通人的意见。
>
>(https://lwn.net/Articles/131776/)

实际情况并非如此；内核开发者更加关注系统的稳定性、长期维护以及找到解决问题的最佳方案，而不是某个特定的模块。

这个故事的寓意是专注于问题本身——而不是具体的解决方案——并在投入大量编码工作之前与开发社区讨论这些问题。

因此，在考虑内核开发项目时，应该回答以下一系列简短的问题：

- 究竟需要解决什么问题？

- 受此问题影响的用户是谁？解决方案应解决哪些使用案例？

- 当前内核在处理该问题方面存在哪些不足？

只有在回答了这些问题后，才有意义开始考虑可能的解决方案。

早期讨论
---------

在规划内核开发项目时，在着手实现之前与社区进行讨论是非常明智的。
早期沟通可以在多个方面节省时间和麻烦：

- 很可能问题是通过内核中你尚未理解的方式得到解决的。Linux 内核庞大且具有一些不那么显而易见的功能和能力。并非所有内核功能都得到了理想的文档说明，很容易错过一些东西。本文作者曾经见过一个完整的驱动程序发布出来，结果它复制了一个新作者未曾注意到的现有驱动程序。重复造轮子不仅浪费资源；这样的代码也不会被接受合并到主线内核中。
可能存在所提议解决方案中的一些元素是不适合合并到主线的。最好是在编写代码之前就发现这类问题。

完全有可能其他开发者已经考虑过这个问题；他们可能有更好的解决方案的想法，并且愿意帮助创建这一解决方案。
多年与内核开发社区的经验教会了我们一个明确的教训：在封闭环境中设计和开发的内核代码不可避免地会存在问题，这些问题只有在代码向社区发布时才会暴露出来。有时这些问题非常严重，需要数月甚至数年的时间才能将代码提升到内核社区的标准。一些例子包括：

- Devicescape 网络栈最初是为单处理器系统设计和实现的。直到它被适配为适合多处理器系统后，才能够合并到主线。在代码中添加锁等机制是一项艰巨的任务；因此，这段代码（现在被称为 mac80211）的合并被推迟了一年多。
- Reiser4 文件系统包含了一些功能，在核心内核开发者的观点中，这些功能本应实现在虚拟文件系统层中。它还包含了无法轻易实现的功能，否则会让系统暴露于用户导致的死锁风险之下。这些问题的晚期揭示——以及拒绝解决其中的一些问题——导致 Reiser4 一直未能进入主线内核。
- AppArmor 安全模块以被认为不安全且不可靠的方式使用了内部虚拟文件系统的数据结构。这一担忧（以及其他一些因素）使得 AppArmor 多年来无法进入主线内核。

在所有这些案例中，如果能够在早期与内核开发者进行讨论，本来可以避免大量的痛苦和额外工作。

你该找谁谈？
---------------

当开发者决定公开他们的计划时，接下来的问题就是：从哪里开始？答案是找到合适的邮件列表和合适的维护者。对于邮件列表，最好的做法是从 MAINTAINERS 文件中查找相关的地方来发布信息。如果有合适的子系统列表，通常在那里发布比在 linux-kernel 上发布更可取；你更有可能接触到对该子系统有专长的开发者，而且环境可能更加支持友好。

寻找维护者可能会稍微困难些。同样地，MAINTAINERS 文件是开始的地方。然而，这个文件并不总是最新的，也不是所有的子系统都列在其中。在 MAINTAINERS 文件中列出的人实际上可能并不是目前实际履行这一角色的人。因此，当对联系谁存在疑问时，一个有用的技巧是使用 git（特别是 "git log" 命令）来看谁目前在感兴趣的子系统中活跃。看看谁在编写补丁，以及谁（如果有）在这些补丁上附加了 Signed-off-by 标记。这些人是最适合帮助新开发项目的人。

寻找正确的维护者的任务有时候挑战性足够大，以至于内核开发者增加了一个脚本来简化这一过程：

::

    .../scripts/get_maintainer.pl

这个脚本在给定 "-f" 选项时，可以根据指定的文件或目录返回当前的维护者。如果在命令行中传递了一个补丁，它将列出应该收到该补丁副本的维护者。这是获取你的补丁要抄送人员列表的首选方式（不同于 "-f" 选项）。get_maintainer.pl 有许多选项来调节其寻找维护者的努力程度；请小心使用更积极的选项，因为这样可能会将对你的代码修改没有真正兴趣的开发者也包括进来。

如果所有方法都失败了，与 Andrew Morton 联系通常是找到特定代码片段的维护者的有效方式。
### 何时发布？

如果可能的话，在项目的早期阶段发布你的计划只会有所帮助。描述你要解决的问题以及已经制定的关于如何实施的计划。你能提供的任何信息都有助于开发社区为项目提供有用的反馈。
在这个阶段可能会遇到的一个令人沮丧的情况不是敌对的反应，而是几乎没有或完全没有反应。事实的悲哀真相是（1）内核开发者往往很忙，（2）不缺有宏伟计划但很少有代码（甚至没有代码的前景）的人，（3）没有人有义务审查或评论别人发布的点子。除此之外，高层次的设计往往会隐藏一些问题，这些问题只有在有人真正尝试实现这些设计时才会暴露出来；因此，内核开发者更愿意看到实际的代码。
如果一个征求评论的帖子没有得到多少评论，不要假设这意味着项目没有兴趣。
不幸的是，你也无法假设你的想法没有任何问题。在这种情况下最好的做法是继续前进，并在整个过程中让社区了解进展。

### 获得官方支持

如果你的工作是在企业环境中进行的——就像大多数Linux内核工作一样——显然，你需要得到适当授权的管理层的许可，才能将公司的计划或代码发布到公共邮件列表中。未被批准以GPL兼容许可证发布的代码的发布尤其成问题；公司管理层和法律团队越早就内核开发项目的发布达成一致，所有相关人员就会越好。
一些读者此时可能在想，他们的内核工作是为了支持尚未正式承认的产品。在公共邮件列表上公开雇主的计划可能不是一个可行的选择。在这种情况下，值得考虑一下这种保密是否真的有必要；通常没有真正的必要将开发计划关起门来。
话虽如此，也有一些情况下，公司在开发过程的早期确实不能透露其计划。拥有经验丰富的内核开发者的公司可能会选择以开放的方式推进，假设他们以后能够避免严重的集成问题。对于没有这种内部专业知识的公司来说，最好的选择往往是聘请外部开发者根据保密协议审查计划。Linux基金会运营了一个NDA计划，旨在帮助处理这种情况；更多信息可以在以下网址找到：

    https://www.linuxfoundation.org/nda/

这种审查往往足以避免后期出现严重问题，而无需公开披露项目。
