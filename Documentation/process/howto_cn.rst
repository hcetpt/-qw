### 如何进行 Linux 内核开发
=================================

这是关于这个主题的全面文档。它包含了如何成为一名 Linux 内核开发者以及如何与 Linux 内核开发社区合作的指导。本文档尽量不包含任何与内核编程技术方面相关的内容，但会指引你去正确的地方获取这些信息。如果本文档中的任何内容过时，请向文档维护者提交补丁，维护者的联系方式在文档底部。

#### 引言
---

所以，你想学习如何成为一名 Linux 内核开发者？或者你的经理告诉你：“为这个设备写一个 Linux 驱动。”本文档的目标是通过描述你需要经历的过程以及如何与社区合作来教你所需的一切知识。它还将试图解释为什么社区会以这种方式运作。

内核主要用 C 语言编写，一些架构相关的部分用汇编语言编写。对于内核开发来说，良好的 C 语言基础是必需的。除非你打算为特定架构做低级开发，否则不需要掌握汇编语言（任何架构）。尽管以下书籍不能完全替代扎实的 C 语言教育和多年经验，但它们作为参考书还是不错的：

- 《C 程序设计语言》by Kernighan 和 Ritchie [Prentice Hall]
- 《实用 C 程序设计》by Steve Oualline [O'Reilly]
- 《C：参考手册》by Harbison 和 Steele [Prentice Hall]

内核使用 GNU C 和 GNU 工具链编写。虽然它遵循 ISO C11 标准，但也使用了许多标准中没有包含的扩展。内核是一个独立的 C 环境，不依赖于标准 C 库，因此某些 C 标准的部分不被支持。不允许使用任意长度的长整数除法和浮点运算。有时很难理解内核对工具链及其使用的扩展所作的假设，不幸的是并没有一个权威的参考资料。请查阅 gcc 的信息页面 (`info gcc`) 获取相关信息。

请记住，你正在尝试学习如何与现有的开发社区合作。这是一个多样化的群体，对编码、风格和流程有着高标准。这些标准是根据他们在大规模且地理分散的团队中发现的最佳实践而制定的。尽量提前了解这些标准，因为它们已经很好地记录下来了；不要期望人们适应你或你公司的做事方式。

#### 法律问题
---

Linux 内核源代码是在 GPL 许可证下发布的。请参阅源树主目录中的文件 COPYING。Linux 内核许可规则以及如何在源代码中使用 `SPDX <https://spdx.org/>` 标识符在 :ref:`Documentation/process/license-rules.rst <kernel_licensing>` 中进行了说明。

如果你有关于许可证的进一步问题，请咨询律师，并不要在 Linux 内核邮件列表上提问。邮件列表上的人员不是律师，你不应该依赖他们关于法律问题的陈述。

对于关于 GPL 的常见问题和答案，请参见：

https://www.gnu.org/licenses/gpl-faq.html

#### 文档
---

Linux 内核源树中有大量的文档，对于学习如何与内核社区互动非常有价值。当新功能添加到内核时，建议同时添加新的文档文件来解释如何使用该功能。

当内核变更导致内核暴露给用户空间的接口发生变化时，建议将相关信息或补丁发送给手册页维护者 alx@kernel.org，并抄送邮件列表 linux-api@vger.kernel.org。

以下是内核源树中需要阅读的文件列表：

:ref:`Documentation/admin-guide/README.rst <readme>`
  - 这个文件简要介绍了 Linux 内核并描述了配置和构建内核所需的步骤。新接触内核的人应从此处开始。
:ref:`Documentation/process/changes.rst <changes>`
    本文件列出了成功构建和运行内核所需的各类软件包的最低版本。
:ref:`Documentation/process/coding-style.rst <codingstyle>`
    本文件描述了Linux内核的编程风格及其背后的某些理由。所有新代码都应遵循本文档中的指南。大多数维护者只有在遵循这些规则的情况下才会接受补丁，而许多人只会在代码符合正确的风格时进行审查。
:ref:`Documentation/process/submitting-patches.rst <submittingpatches>`
    本文件详细说明了如何成功创建并发送补丁，包括但不限于：

       - 邮件内容
       - 邮件格式
       - 发送给谁

    遵循这些规则并不能保证成功（因为所有补丁都要经过内容和风格的审查），但不遵循它们几乎总是会导致失败。
其他关于如何正确创建补丁的优秀描述有：

    "The Perfect Patch"
        https://www.ozlabs.org/~akpm/stuff/tpp.txt

    "Linux kernel patch submission format"
        https://web.archive.org/web/20180829112450/http://linux.yyz.us/patch-format.html

:ref:`Documentation/process/stable-api-nonsense.rst <stable_api_nonsense>`
    本文件描述了有意决定不在内核中保持稳定API的理由，包括：

      - 子系统的适配层（为了兼容性？）
      - 在不同操作系统之间驱动的可移植性
      - 缓解内核源代码树中的快速变化（或防止快速变化）

    该文档对于理解Linux开发哲学至关重要，并且对于从其他操作系统转向Linux开发的人来说非常重要。
:ref:`Documentation/process/security-bugs.rst <securitybugs>`
    如果您认为在Linux内核中发现了安全问题，请按照本文档中的步骤来帮助通知内核开发者，并帮助解决问题。
:ref:`Documentation/process/management-style.rst <managementstyle>`
    本文件描述了Linux内核维护者的运作方式以及其方法背后共享的理念。对于任何新加入内核开发的人（或对此感兴趣的人）来说，这是重要的阅读材料，因为它澄清了许多关于内核维护者独特行为的常见误解和困惑。
:ref:`Documentation/process/stable-kernel-rules.rst <stable_kernel_rules>`
    本文件描述了稳定内核发布的规则，以及如何将更改纳入这些发布的方法。
:ref:`Documentation/process/kernel-docs.rst <kernel_docs>`
    列出了与内核开发相关的外部文档。如果在内核文档中找不到所需的信息，请查阅此列表。
:ref:`Documentation/process/applying-patches.rst <applying_patches>`
    一个很好的介绍，详细说明了补丁是什么以及如何将其应用到不同的内核开发分支上。
内核还包含大量文档，这些文档可以从源代码本身或从ReStructuredText（ReST）标记自动生成，例如本文档。这包括对内核API的完整描述以及如何正确处理锁定规则的相关说明。
所有这些文档都可以通过以下命令生成为PDF或HTML格式：

```
make pdfdocs
make htmldocs
```

分别在主内核源码目录下运行。

使用ReST标记的文档将生成在`Documentation/output`目录下。
它们也可以生成LaTeX和ePub格式：

```
make latexdocs
make epubdocs
```

成为一名内核开发者
--------------------

如果你对Linux内核开发一无所知，你应该查看Linux KernelNewbies项目：

<https://kernelnewbies.org>

该项目包含一个非常有帮助的邮件列表，在这里你可以提出几乎任何类型的关于基本内核开发的问题（确保先搜索存档，以避免重复提问）。它还有一个IRC频道，可以用来实时提问，并且有很多有助于学习Linux内核开发的有用文档。
该网站提供了关于代码组织、子系统和当前项目的（包括树内和树外）基本信息。它还描述了一些基本的操作信息，如如何编译内核和应用补丁。
如果你不知道从哪里开始，但希望找到一些任务来加入内核开发社区，请访问Linux Kernel Janitor项目：

<https://kernelnewbies.org/KernelJanitors>

这是一个很好的起点。它列出了一组相对简单的需要在Linux内核源码中清理和修复的问题。与负责此项目的开发者合作，你将学会如何将你的补丁提交到Linux内核树中，并可能得到下一步工作的指导（如果你还没有想法的话）。
在实际修改Linux内核代码之前，理解相关代码的工作原理至关重要。为此，直接阅读代码（大多数复杂部分都有良好的注释）是最好的方法，甚至可以借助专门工具的帮助。特别推荐的一个工具是Linux Cross-Reference项目，它可以将源代码以自引用、索引的网页格式呈现。一个优秀的、最新的内核代码库可以在以下网址找到：

<https://elixir.bootlin.com/>

开发流程
--------------

Linux内核开发流程目前由几个主要内核分支和大量的特定子系统的内核分支组成。这些不同的分支包括：

- Linus的主要主线树
- 具有多个主版本号的各种稳定树
- 特定子系统的树
- linux-next集成测试树

主线树
~~~~~~~~~~~~~

主线树由Linus Torvalds维护，可以在<https://kernel.org>或repo中找到。其开发流程如下：

- 新内核发布后立即开启两周窗口期，在此期间，维护者可以向Linus提交大改动，通常这些补丁已经在linux-next中包含了几周。提交大改动的首选方式是使用git（内核的源代码管理工具，更多信息请参见<https://git-scm.com/>），但普通的补丁也完全可以。
- 两周后发布-rc1内核，并重点在于使新内核尽可能稳定。此时大多数补丁应解决回归问题。一直存在的错误不属于回归，因此只有在重要的情况下才推送这类修复。
请注意，整个新的驱动程序（或文件系统）可能在-rc1之后被接受，因为只要变化是自包含的并且不影响添加代码之外的区域，这种变化不会导致回归。-rc1发布后可以使用git向Linus发送补丁，但补丁还需要发送到公共邮件列表进行审核。
- 当Linus认为当前的git树处于足够合理且适合测试的状态时，会发布一个新的-rc。目标是每周发布一个新的-rc内核。
过程将持续到内核被认为“准备就绪”，整个过程大约需要六周的时间。
值得一提的是，Andrew Morton 在 linux-kernel 邮件列表中关于内核发布的观点：

    “没有人知道何时发布内核，因为它是根据已知的错误状态来发布的，而不是按照预先设定的时间表。”

多个具有主要版本号的稳定分支
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

具有三部分版本号的内核是-stable 内核。它们包含了针对特定主要主线版本中发现的安全问题或重大倒退的小而关键的修复。每个主要稳定系列中的发布都会递增版本号的第三部分，而前两部分保持不变。
这是对于希望使用最新稳定内核且不打算帮助测试开发/实验性版本的用户的推荐分支。
稳定分支由“稳定”团队 <stable@vger.kernel.org> 维护，并根据需求进行发布。正常发布周期大约为两周，但如果没有什么紧急问题，这个周期可能会更长。然而，一个与安全相关的问题可能会导致几乎立即发布。
内核树中的文件 :ref:`Documentation/process/stable-kernel-rules.rst <stable_kernel_rules>` 文档记录了哪些类型的更改可以被接受进入-stable分支，以及发布流程如何运作。

子系统特定的分支
~~~~~~~~~~~~~~~~~~~~~~~~

各种内核子系统的维护者——以及许多内核子系统开发者——在源代码仓库中公开了他们当前的开发状态。这样，其他人可以看到内核各个领域的进展情况。在开发快速的领域，可能会要求开发者基于某个子系统的内核树提交代码，以避免提交内容与其他正在进行的工作发生冲突。
这些仓库大多数是git树，但也有一些其他SCM（软件配置管理）系统在使用，或者作为quilt系列发布的补丁队列。这些子系统仓库的地址列在MAINTAINERS文件中。其中很多可以在 https://git.kernel.org/ 浏览。
在某个提议的补丁被提交到这样的子系统树之前，它会经过审查，这主要通过邮件列表完成（见下面的相关章节）。对于几个内核子系统，这个审查过程是用patchwork工具跟踪的。Patchwork提供了一个网页界面，显示补丁发布、任何对补丁的评论或修订，以及维护者可以标记补丁为正在审查、已接受或拒绝。大多数这些patchwork站点都列在 https://patchwork.kernel.org/

linux-next集成测试树
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

在来自子系统树的更新合并到主线树之前，它们需要经过集成测试。为此，存在一个特殊的测试仓库，几乎所有子系统树的内容几乎每天都会被拉取到这里：

    https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git

这样，linux-next 提供了一个对未来将要合并进主线内核的内容的概览。
欢迎勇敢的测试者运行测试linux-next。
### Bug 报告

在主内核源码目录中的文件 'Documentation/admin-guide/reporting-issues.rst' 描述了如何报告一个可能的内核 bug，并详细说明了内核开发者需要哪些信息来帮助追踪问题。

### 管理 bug 报告

通过修复他人报告的 bug 来实践你的编程技能是最佳方式之一。这不仅有助于提高内核的稳定性，还能让你学会解决实际问题，提升自己的技能，同时其他开发者也会注意到你的存在。修复 bug 是在其他开发者中获得认可的最佳途径之一，因为并不是每个人都喜欢花时间去修复别人的 bug。

要处理已经报告的 bug 报告，请找到你感兴趣的子系统。检查 MAINTAINERS 文件，了解该子系统的 bug 应该报告给谁；通常是一个邮件列表，很少是 bug 跟踪器。搜索该地方的存档，查找最近的报告并在适当的地方提供帮助。你也可以查看 https://bugzilla.kernel.org 上的 bug 报告；尽管只有少数内核子系统积极使用它进行报告或跟踪，但整个内核的 bug 都会在这里提交。

### 邮件列表

正如上述文档所述，大多数核心内核开发者都参与了 Linux Kernel Mailing List。有关如何订阅和取消订阅此列表的详细信息，请访问：

    https://subspace.kernel.org/subscribing.html

邮件列表的存档可以在多个不同的地方找到。使用搜索引擎查找这些存档。例如：

    https://lore.kernel.org/linux-kernel/

在向列表发帖之前，强烈建议你先搜索相关主题的存档。许多已经详细讨论过的内容只记录在邮件列表存档中。

大多数独立的内核子系统也有各自的邮件列表，在那里进行开发工作。请参阅 MAINTAINERS 文件，了解不同组的这些列表是什么。

许多邮件列表托管在 kernel.org 上。有关它们的信息可以在此处找到：

    https://subspace.kernel.org

请记住在使用邮件列表时遵循良好的行为习惯。虽然有点俗套，但以下 URL 提供了一些与列表（或其他列表）互动的简单指南：

    https://subspace.kernel.org/etiquette.html

如果多人回复了你的邮件，CC 列表中的收件人可能会很多。除非有充分的理由，否则不要从 CC 列表中删除任何人，也不要仅回复列表地址。习惯接收两份邮件，一份来自发件人，一份来自列表，不要尝试通过添加复杂的邮件头来调整这一点，人们不喜欢这样。

请记住保持回复的上下文和归属完整，保留“John Kernelhacker 写道：……”这样的行，并在引用的部分之间添加你的陈述，而不是在邮件顶部书写。
如果你在邮件中添加补丁，请确保它们是纯文本格式，如 :ref:`Documentation/process/submitting-patches.rst <submittingpatches>` 中所述。内核开发者不希望处理附件或压缩的补丁；他们可能需要对你的补丁中的每一行进行评论，而这只有通过纯文本才能实现。请确保你使用的是不会破坏空格和制表符的邮件程序。一个好的初步测试是将邮件发送给自己，并尝试自己应用自己的补丁。如果不起作用，请修复你的邮件程序或更换直到能够正常工作。

最重要的是，请记得尊重其他订阅者。
与社区合作
--------------

内核社区的目标是提供最好的内核。当你提交一个补丁供接受时，它将仅根据其技术价值进行审查。那么你应该期待什么呢？

- 批评
- 评论
- 修改请求
- 理由请求
- 沉默

请记住，这是将你的补丁纳入内核的一部分。你必须能够接受对你补丁的批评和评论，在技术层面上评估它们，并且要么修改你的补丁，要么提供清晰简洁的理由说明为什么不应做出这些更改。

如果你的帖子没有得到回应，请等待几天再试一次，有时候信息会在大量邮件中丢失。

你不应该做什么？

- 期望你的补丁毫无问题地被接受
- 变得防御性
- 忽略评论
- 在未做任何请求的更改的情况下重新提交补丁

在一个寻求最佳技术解决方案的社区中，总会有关于某个补丁的价值存在不同意见。你必须保持合作态度，并愿意让你的想法适应内核，或者至少愿意证明你的想法值得采纳。

请记住，犯错是可以接受的，只要你愿意朝着正确的解决方案努力。

通常情况下，你的第一个补丁可能会收到一长串你需要修正的问题列表。这**并不**意味着你的补丁不会被接受，也**不是**针对你个人。只需修正所有针对你的补丁提出的问题并重新发送即可。

内核社区与企业结构之间的差异
--------------------------------

内核社区的工作方式与大多数传统的企业开发环境有所不同。以下是一些你可以尝试做的事情以避免问题：

关于你提议的变更可以说的好话：

- “这解决了多个问题。”
- “这删除了2000行代码。”
- “这里有一个补丁解释了我想要描述的内容。”
- “我在5种不同的架构上进行了测试……”
- “这是一系列小补丁……”
- “这在典型机器上提高了性能……”

你不应该说的坏话：

- “我们在AIX/ptx/Solaris中就是这样做的，所以一定是好的……”
- “我已经做了20年了，所以……”
- “这是我的公司赚钱所必需的。”
- “这是为了我们的企业产品线。”
- “这是我长达1000页的设计文档，描述了我的想法。”
- “我已经为此工作了6个月……”
- “这是一个5000行代码的补丁……”
- “我把现有的混乱重写了一遍，这就是结果……”
- “我有一个截止日期，这个补丁现在就需要应用。”

内核社区与大多数传统软件工程工作环境的另一个不同之处在于互动的匿名性质。使用电子邮件和IRC作为主要沟通形式的一个好处是没有基于性别或种族的歧视。
Linux 内核工作环境对女性和少数群体持开放态度，因为在这里你只是一个电子邮件地址。国际化的特性也有助于拉平竞争的起跑线，因为你无法通过一个人的名字来猜测其性别。一个男性可能叫 Andrea，而一个女性可能叫 Pat。大多数参与过 Linux 内核开发并表达过意见的女性都有积极的经历。

语言障碍可能会给一些不熟悉英语的人带来问题。为了在邮件列表中恰当地传达你的想法，良好的英语掌握能力是必要的，因此建议你在发送邮件之前检查一下，确保它们在英语语境下是有意义的。

分解你的变更
--------------

Linux 内核社区并不欢迎一次性提交大量代码。变更需要被适当地引入、讨论，并且分解为小的独立部分。这几乎与公司通常的做法完全相反。你应该在开发过程的早期就提出你的提案，以便能够收到对你所做工作的反馈。这也让社区感到你是在与他们合作，而不是仅仅将你的功能丢给他们处理。但是，不要一次向邮件列表发送五十封邮件，你的补丁系列通常应该比这更少。

分解变更的原因如下：

1. 小的补丁增加了你的补丁被采用的可能性，因为验证其正确性不需要花费太多时间和精力。一个五行的补丁可以被维护者几乎一眼扫过就接受。然而，一个五百行的补丁可能需要数小时来审查其正确性（所需时间与补丁大小呈指数关系）。
   小的补丁也使得当出现问题时调试变得非常容易。逐个撤销补丁比拆解一个大的补丁后发现它破坏了某些东西要容易得多。
2. 不仅要发送小的补丁，还要在提交前重写、简化（或重新排序）这些补丁。
   以下是内核开发者 Al Viro 的一个类比：

    *“想象一个教师在批改数学学生的作业。教师不想看到学生在找到答案前的各种尝试和错误。他们想看到的是最干净、最优雅的答案。一个好学生知道这一点，在提交最终解决方案之前绝不会提交中间步骤。”

    *在内核开发中也是如此。维护者和评审者不想看到你解决问题时的思考过程。他们想要看到的是简单且优雅的解决方案。”*

保持呈现优雅解决方案与与社区合作讨论未完成工作的平衡可能是具有挑战性的。因此，最好在过程中尽早获得反馈以改进你的工作，同时保持你的变更为小块，这样即使整个任务尚未准备好合并，这些小块也可能被接受。

另外，请意识到提交那些不完整并且将在以后“修复”的补丁是不可接受的。

证明你的变更
--------------

除了分解你的补丁外，非常重要的一点是你需要让 Linux 社区知道为什么他们应该添加这个变更。新功能必须被证明是需要的且有用的。

记录你的变更
--------------

在发送你的补丁时，特别注意你在邮件文本中所说的内容。这些信息将成为补丁的变更日志信息，并将永久保存供所有人查看。它应全面描述补丁，包括：

- 变更是必要的原因
- 补丁中的总体设计方法
- 实现细节
- 测试结果

有关这些内容的具体格式，请参阅文档中的“变更日志”部分：

  “完美的补丁”
      https://www.ozlabs.org/~akpm/stuff/tpp.txt

所有这些事情有时都非常难以做到。掌握这些实践可能需要多年的时间（如果能够完全掌握的话）。这是一个需要大量耐心和决心的持续改进过程。但不要放弃，这是可能的。许多人都曾做到过，每个人都是从你现在的位置开始的。
感谢Paolo Ciarrocchi的允许，使本文的“开发过程”部分（https://lwn.net/Articles/94386/）能够基于他所写的内容。同时感谢Randy Dunlap和Gerrit Huizenga提供了部分你应该说和不应该说的话的清单。还要感谢Pat Mochel、Hanna Linder、Randy Dunlap、Kay Sievers、Vojtech Pavlik、Jan Kara、Josh Boyer、Kees Cook、Andrew Morton、Andi Kleen、Vadim Lobanov、Jesper Juhl、Adrian Bunk、Keri Harris、Frans Pop、David A. Wheeler、Junio Hamano、Michael Kerrisk和Alex Shepard对本文的审阅、评论和贡献。没有他们的帮助，这份文档是不可能完成的。
维护者：Greg Kroah-Hartman <greg@kroah.com>
