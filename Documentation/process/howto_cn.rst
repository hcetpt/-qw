### 如何进行 Linux 内核开发
#### ======================

这是关于这一主题的全面指南。它包含了如何成为一名 Linux 内核开发者以及如何与 Linux 内核开发社区合作的指导。本指南尽量不涉及内核编程的技术方面，但会帮助你找到正确的方向。如果文档中的任何内容过时，请向文档维护者提交补丁，维护者的联系方式位于文档底部。

##### 引言

你想学习如何成为一名 Linux 内核开发者吗？或者你的经理对你说：“去为这个设备写一个 Linux 驱动程序。”本文档的目标是通过描述你需要经历的过程及与社区合作的提示来教会你所需的一切知识。同时，它还会尝试解释社区运作方式背后的一些原因。

内核主要用 C 语言编写，一些架构相关的部分用汇编语言编写。对于内核开发而言，良好的 C 语言基础是必需的。除非计划进行特定架构的底层开发，否则通常不需要掌握汇编语言（任何架构）。尽管这些书籍不能完全替代扎实的 C 语言教育和/或多年经验，但它们作为参考书籍还是不错的：

- 《C 程序设计语言》Kernighan 和 Ritchie 著 [Prentice Hall]
- 《实用 C 编程》Steve Oualline 著 [O'Reilly]
- 《C：参考手册》Harbison 和 Steele 著 [Prentice Hall]

内核使用 GNU C 和 GNU 工具链编写。虽然它遵循 ISO C11 标准，但也使用了一些标准中未包含的扩展功能。内核是一个独立的 C 环境，不依赖于标准 C 库，因此 C 标准的某些部分不受支持。不允许使用任意长度的长整数除法和浮点运算。有时很难理解内核对工具链的假设以及所使用的扩展功能，不幸的是，并没有一个权威的参考资料。请参阅 gcc 的信息页面 (`info gcc`) 获取相关信息。

请记住，你正在尝试了解如何与现有的开发社区合作。这是一个由不同背景的人组成的群体，他们对编码、风格和流程有着高标准的要求。这些标准是根据他们认为最适合如此大规模且地理位置分散团队的最佳实践逐渐形成的。尽量在事前多学习这些标准，因为它们已经被充分记录；不要期望人们适应你或你公司的做法。

##### 法律问题

Linux 内核源代码是在 GPL 许可下发布的。请参阅源代码主目录中的文件 COPYING。Linux 内核许可规则以及如何在源代码中使用 `SPDX <https://spdx.org/>`_ 标识符在 :ref:`Documentation/process/license-rules.rst <kernel_licensing>` 中有详细说明。

如果你有关于许可证的进一步问题，请咨询律师，不要在 Linux 内核邮件列表中提问。邮件列表上的人员不是律师，你不应该依赖他们在法律事务上的陈述。

对于 GPL 常见问题及其解答，请参见：
https://www.gnu.org/licenses/gpl-faq.html

##### 文档

Linux 内核源码树中包含大量有助于学习如何与内核社区互动的文档。当新特性被加入内核时，建议添加新的文档文件来解释如何使用这些特性。

当内核变更导致内核暴露给用户空间的接口发生变化时，建议将信息或解释该变化的手册页补丁发送给手册页维护者 alx@kernel.org，并抄送给列表 linux-api@vger.kernel.org。

以下是内核源码树中必读文件的列表：

  :ref:`Documentation/admin-guide/README.rst <readme>`
    这个文件简要介绍了 Linux 内核，并描述了配置和构建内核所需的步骤。初学者应该从这里开始。
以下是给定英文文本的中文翻译：

`Documentation/process/changes.rst <changes>`_
    此文件列出了构建和成功运行内核所必需的各种软件包的最低级别。

`Documentation/process/coding-style.rst <codingstyle>`_
    这里描述了Linux内核的编程风格及其背后的一些理由。所有新代码都应遵循此文档中的指南。大多数维护者只有在遵守这些规则的情况下才会接受补丁，而许多人只有在代码符合适当风格的情况下才会审查代码。

`Documentation/process/submitting-patches.rst <submittingpatches>`_
    此文件详细说明了如何成功创建并发送补丁，包括但不限于：

       - 邮件内容
       - 邮件格式
       - 发送给谁

    遵守这些规则并不能保证成功（因为所有补丁都要经过内容和风格的严格审查），但不遵守它们几乎总是会阻止成功。
其他关于如何正确创建补丁的优秀描述包括：

	"完美补丁"
		https://www.ozlabs.org/~akpm/stuff/tpp.txt

	"Linux内核补丁提交格式"
		https://web.archive.org/web/20180829112450/http://linux.yyz.us/patch-format.html

`Documentation/process/stable-api-nonsense.rst <stable_api_nonsense>`_
    此文件描述了有意识地决定不在内核中拥有稳定API的理由，包括：

      - 子系统适配层（为了兼容性？）
      - 不同操作系统之间的驱动程序可移植性
      - 缓解内核源代码树中的快速变化（或防止快速变化）

    该文档对于理解Linux开发哲学至关重要，对于从其他操作系统转向Linux的人非常重要。

`Documentation/process/security-bugs.rst <securitybugs>`_
    如果您认为在Linux内核中发现了安全问题，请按照此文档中的步骤来帮助通知内核开发者，并帮助解决问题。

`Documentation/process/management-style.rst <managementstyle>`_
    此文档描述了Linux内核维护者的运作方式以及他们方法背后的共享理念。对于任何新的内核开发者（或对它好奇的任何人）来说，这是重要的阅读材料，因为它消除了许多关于内核维护者独特行为的常见误解和困惑。

`Documentation/process/stable-kernel-rules.rst <stable_kernel_rules>`_
    此文件描述了稳定内核版本发布时的规则，以及如果您想将更改引入这些版本之一应该怎么做。

`Documentation/process/kernel-docs.rst <kernel_docs>`_
    与内核开发相关的外部文档列表。如果您在内核文档中找不到所需的内容，请参阅此列表。

`Documentation/process/applying-patches.rst <applying_patches>`_
    对于补丁是什么以及如何将其应用到内核的不同开发分支上，这是一个很好的介绍。
内核还包含大量文档，这些文档可以从源代码本身或从ReStructuredText标记（ReST）自动生成，就像本文档一样。这包括内核API的完整描述以及如何正确处理锁定规则的所有文档。

所有这些文档都可以通过以下命令分别生成为PDF或HTML格式：

```
make pdfdocs
make htmldocs
```

从主内核源目录运行上述命令即可。

使用ReST标记的文档将在Documentation/output目录下生成。它们也可以通过以下命令以LaTeX和ePub格式生成：

```
make latexdocs
make epubdocs
```

成为内核开发者
-------------------

如果你对Linux内核开发一无所知，你应该查看Linux KernelNewbies项目：

   https://kernelnewbies.org

该项目包含一个非常有帮助的邮件列表，在这里你可以询问几乎所有类型的初级内核开发问题（在提问前，请确保先搜索存档，避免重复已回答过的问题）。它还有一个IRC频道，你可以实时提问，以及大量有助于学习Linux内核开发的有用文档。

网站上有关于代码组织、子系统和当前项目（无论是树内还是树外）的基本信息。它还描述了一些基本的后勤信息，如如何编译内核和应用补丁。

如果你不知道从哪里开始，但想寻找一些任务来开始参与内核开发社区，可以去Linux Kernel Janitors项目：

   https://kernelnewbies.org/KernelJanitors

这是一个很好的起点。它列出了需要在Linux内核源树中清理和修复的一系列相对简单的问题。与负责此项目的开发者合作，你将学会如何将你的补丁合并到Linux内核树中，并可能被指导下一步该做什么，如果你还没有主意的话。

在实际修改任何Linux内核代码之前，理解所涉及代码的工作原理至关重要。为此，直接阅读代码（大部分棘手部分都有良好的注释）是最好的方法，甚至可以在专业工具的帮助下进行。特别推荐的一个工具是Linux Cross-Reference项目，它能够以自我参照、索引的网页格式展示源代码。一个优秀的、最新的内核代码仓库可在此处找到：

   https://elixir.bootlin.com/

开发流程
-------------------

Linux内核开发流程目前由几个主要内核“分支”和许多不同的子系统特定内核分支组成。这些不同分支包括：

  - Linus的主要树
  - 具有多个主要版本号的各种稳定树
  - 子系统特定树
  - linux-next集成测试树

主要树
~~~~~~~~~~~~~

主要树由Linus Torvalds维护，可在https://kernel.org或repo中找到。其开发流程如下：

  - 每当发布新内核后，会开放两周窗口期，在此期间，维护者可以向Linus提交大块差异，通常是那些已经在linux-next中包含几周的补丁。提交重大更改的首选方式是使用git（内核的源管理工具，更多信息请访问https://git-scm.com/），但纯文本补丁也是可以接受的。
  - 两周后，发布-rc1内核，此时的重点是尽可能使新内核更加稳固。此时的大多数补丁应修正回归错误。并非回归的旧有bug不应视为回归，除非它们非常重要，否则不要推送此类修复。
请注意，全新的驱动程序（或文件系统）可能在-rc1之后被接受，因为只要更改是自包含的且不影响添加代码之外的区域，就不会带来回归风险。-rc1发布后，可以使用git向Linus发送补丁，但补丁也需发送至公共邮件列表进行审查。
  - 当Linus认为当前git树处于足够合理且适合测试的状态时，会发布新的-rc。目标是每周发布一个新的-rc内核。
过程持续到内核被认为“准备就绪”，整个过程大约需要6周的时间。
值得一提的是，Andrew Morton在linux-kernel邮件列表中关于内核发布的观点：

	*"没有人知道何时发布内核，因为它是根据已知的bug状态来发布的，而不是按照预先设定的时间表。"*

具有多个主要版本号的不同稳定分支
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

具有三部分版本号的内核是-稳定版内核。它们包含了针对特定主要主线版本中发现的安全问题或重大倒退的小规模且关键的修复。在每个主要稳定系列中的每次发布都会递增版本号的第三部分，而保持前两部分不变。
这是推荐给希望使用最新稳定内核、而不愿意帮助测试开发/实验性版本的用户的分支。
稳定分支由“稳定”团队<stable@vger.kernel.org>维护，并按需发布。通常的发布时间间隔约为两周，但如果没有什么迫切的问题，则可能更长。相反，如果存在与安全相关的问题，则可能会立即发布。
内核树中的文件:ref:`Documentation/process/stable-kernel-rules.rst <stable_kernel_rules>`记录了哪些类型的更改可以被接受进入-stable分支以及发布流程如何进行。

子系统特定的分支
~~~~~~~~~~~~~~~~~~~~~~~~

各种内核子系统的维护者——以及许多内核子系统开发者——在源代码仓库中公开他们当前的开发状态。这样，其他人可以看到内核各个领域的进展。在开发快速的领域，开发者可能被要求基于某个子系统内核分支提交工作，以避免提交内容与其他正在进行的工作产生冲突。
这些仓库大多数是git树，但也有一些使用其他SCM（源代码管理系统），或者通过quilt系列发布补丁队列。这些子系统仓库的地址可以在MAINTAINERS文件中找到。其中许多仓库可以在https://git.kernel.org/上浏览。
在提议的补丁被提交到此类子系统分支之前，它将受到审查，这一过程主要在邮件列表中进行（见下面的相关章节）。对于几个内核子系统，这一审查过程使用patchwork工具进行跟踪。Patchwork提供了一个网页接口，用于显示补丁的发布情况、对补丁的任何评论或修改，以及维护者可以标记补丁的状态为正在审查、已接受或拒绝。大部分这些patchwork站点可以在https://patchwork.kernel.org/上找到。

linux-next集成测试分支
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

在来自子系统分支的更新合并到主线分支之前，需要进行集成测试。为此，存在一个特殊的测试仓库，几乎所有子系统分支都会几乎每天被拉取到该仓库：

	https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git

这样，linux-next提供了对下一个合并周期预期进入主线内核的内容的整体预览。
欢迎敢于冒险的测试人员运行测试linux-next。
### 错误报告
--------------

在主内核源代码目录中的文件 'Documentation/admin-guide/reporting-issues.rst' 描述了如何报告可能的内核错误，并详细说明了内核开发者为了追踪问题所需的信息类型。

### 管理错误报告
-------------------

实践你的编程技能的最佳方式之一就是修复他人报告的错误。这不仅能帮助提高内核的稳定性，而且你也将学习解决实际问题的方法，提升你的技能，同时其他开发者也会注意到你的存在。
修复错误是获得其他开发者认可的最佳途径之一，因为并不是很多人喜欢花时间修复别人的错误。

要处理已报告的错误报告，找到你感兴趣的子系统。检查 MAINTAINERS 文件，了解该子系统的错误报告应提交至何处；通常是一个邮件列表，偶尔是一个错误跟踪器。在这些地方的归档中搜索近期的报告，并在你觉得合适的地方提供帮助。你也可以访问 https://bugzilla.kernel.org 查看错误报告；虽然只有少数内核子系统积极使用它来报告或追踪错误，但整个内核的错误仍然会被提交到这里。

### 邮件列表
--------------

正如上述文档所述，大多数核心内核开发者参与了 Linux 内核邮件列表。订阅和退订此列表的详细信息可以在以下网址找到：

    https://subspace.kernel.org/subscribing.html

网络上有许多不同地方的邮件列表归档。使用搜索引擎查找这些归档。例如：

    https://lore.kernel.org/linux-kernel/

强烈建议你在向列表发布内容之前，在归档中搜索相关主题。很多已经详细讨论过的内容只记录在邮件列表归档中。

大多数单独的内核子系统都有自己的独立邮件列表，用于进行开发工作。请参阅 MAINTAINERS 文件，了解针对不同小组的这些列表是什么。

许多列表托管在 kernel.org 上。关于它们的信息可以在这里找到：

    https://subspace.kernel.org

请记住在使用列表时保持良好的行为习惯。

尽管有点老套，但以下网址提供了一些与列表（或任何列表）互动的简单准则：

    https://subspace.kernel.org/etiquette.html

如果多人回复你的邮件，收件人列表可能会变得相当长。除非有充分的理由，否则不要从 CC: 列表中删除任何人，也不要仅回复列表地址。习惯接收两次邮件，一次来自发件人，一次来自列表，不要试图通过添加复杂的邮件头来调整这一点，人们不会喜欢这样。

记得保持回复的上下文和归属完整，保留 "John Kernelhacker wrote ...:" 这样的行在你的回复顶部，并在引用的部分之间添加你的陈述，而不是在邮件顶部书写。
如果你在邮件中添加补丁，请确保它们是纯可读文本，如在 :ref:`文档/流程/提交补丁.rst <submittingpatches>` 中所述。内核开发者不想处理附件或压缩的补丁；他们可能希望对你的补丁中的个别行进行评论，而这只有通过纯文本的方式才能实现。请确保你使用的邮件程序不会破坏空格和制表符。一个不错的初步测试是将邮件发送给自己，并尝试自己应用自己的补丁。如果这样做不行，请修复你的邮件程序或更换它，直到能够正常工作。

最重要的是，请记得尊重其他订阅者。
与社区合作
-----------

内核社区的目标是提供尽可能优秀的内核。当你提交补丁以供采纳时，它将仅基于其技术价值进行审查。那么你应该期待什么呢？

- 批评
- 评论
- 改变的要求
- 需要解释的要求
- 沉默

请记住，这是让你的补丁进入内核的一部分过程。你必须能够接受对你补丁的批评和评论，在技术层面上评估它们，并要么修改你的补丁，要么提供清晰而简洁的理由说明为何不应做出这些改变。

如果没有收到对你发布的补丁的回应，请等待几天后再次尝试，有时信息会在巨大的邮件量中被遗漏。
你不应该做什么？

- 期望你的补丁不加质疑地被接受
- 变得防御性
- 忽略评论
- 在未做任何要求的更改的情况下重新提交补丁

在一个寻找最佳技术解决方案的社区里，总会有关于补丁的价值存在不同的意见。你必须保持合作的态度，并愿意调整你的想法以适应内核，或者至少愿意证明你的想法值得采纳。

请记住，犯错是可以接受的，只要你愿意朝着正确的解决方案努力。
通常情况下，你首次提交的补丁可能会得到一长串需要纠正的问题清单。这**并不**意味着你的补丁不会被接受，也**不是**针对你个人。只需纠正所有针对你补丁提出的问题并重新发送即可。
内核社区与企业结构之间的差异
--------------------------------------------------

内核社区的工作方式与大多数传统的公司开发环境不同。以下是一些你可以尝试做的事情来避免问题：

关于你提议变更的好的说法包括：

- “这解决了多个问题。”
- “这删除了2000行代码。”
- “这里有一个补丁，解释了我试图描述的内容。”
- “我在5种不同的架构上进行了测试……”
- “这里有一系列小补丁……”
- “这在典型机器上提高了性能……”

你应该避免说的一些不好的事情包括：

- “我们在AIX/ptx/Solaris中就是这样做的，所以一定是好的……”
- “我已经做了20年这样的工作，所以……”
- “这是我公司赚钱所必需的。”
- “这是为了我们的企业产品线。”
- “这里是我1000页的设计文档，描述了我的想法。”
- “我已经为此工作了6个月……”
- “这是一个5000行代码的补丁……”
- “我重写了所有的混乱代码，这就是结果……”
- “我有截止日期，这个补丁现在就需要被采纳。”

内核社区与大多数传统软件工程工作环境的另一个不同之处在于互动的匿名性质。使用电子邮件和IRC作为主要沟通形式的一个好处是减少了性别或种族方面的歧视。
Linux内核工作环境对女性和少数群体持欢迎态度，因为在这里你只是一个电子邮件地址。国际化的特性也有助于创造一个公平的竞争环境，因为你无法仅凭名字猜测一个人的性别。男性可能名叫Andrea，而女性可能名叫Pat。大多数在Linux内核工作并表达过意见的女性都拥有积极的经历。

语言障碍可能会给一些不擅长英语的人带来问题。为了在邮件列表上恰当地传达你的想法，良好的英语掌握能力是必要的，因此建议你在发送邮件前检查，确保它们在英语中是有意义的。

拆分你的变更
---------------------

Linux内核社区并不乐于一次性接受大量代码。变更需要被适当地引入、讨论，并拆分成小的、独立的部分。这几乎与公司习惯的做法完全相反。你的提案也应在开发过程的早期阶段提出，以便你能收到对你正在做的事情的反馈。这也让社区感觉你是在与他们合作，而不仅仅是将你的功能倾倒给他们。但是，请不要一次向邮件列表发送50封邮件，你的补丁系列应几乎总是小于这个数量。

拆分的原因如下：

1）小的补丁增加了你的补丁被采纳的可能性，因为它们不需要花费太多时间或精力来验证正确性。一个5行的补丁可以由维护者几乎一眼就应用。然而，一个500行的补丁可能需要数小时来审查其正确性（所需时间与补丁大小成指数级正比，或者说类似这样）
小的补丁也使得当出现问题时调试变得非常容易。逐个撤销补丁比在补丁应用后（并破坏了某些东西）对其进行解剖要容易得多。
2）不仅发送小的补丁很重要，而且在提交补丁之前重写、简化（或仅仅是重新排序）补丁也很重要。
以下是来自内核开发者Al Viro的一个类比：

*"想象一下数学老师的批改作业的情景。老师不想看到学生在找到解决方案前的尝试和错误。他们想看到最干净、最优雅的答案。一个好的学生知道这一点，永远不会在最终解决方案出来前提交她的中间工作。"

"在内核开发中也是如此。维护者和评审者不想看到你解决问题背后的思想过程。他们想要看到的是简单且优雅的解决方案。"

保持呈现优雅解决方案与社区合作讨论未完成工作的平衡可能是具有挑战性的。因此，在过程的早期获取反馈以改进你的工作是好的，但也要保持你的变更以小块的形式，这样即使整个任务现在还不适合加入，它们也可能已经被接受。
同时要意识到，发送那些不完整且将来会“稍后修复”的补丁以供纳入是不可接受的。

证明你的变更
-------------------

除了拆分你的补丁，让你的变更得到Linux社区的认可同样非常重要。新特性必须被证明是需要的和有用的。

记录你的变更
-------------------

在发送你的补丁时，特别注意你邮件中的文字描述。这些信息将成为补丁的变更日志信息，并将被永久保存供所有人查看。它应该全面描述补丁，包括：

- 变更的必要性
- 补丁中的整体设计方法
- 实现细节
- 测试结果

关于这些内容的具体格式，请参阅文档：

"完美的补丁"
    https://www.ozlabs.org/~akpm/stuff/tpp.txt

所有这些事情有时是非常难以做到的。可能需要多年的时间才能完善这些实践（如果能的话）。这是一个持续改进的过程，需要大量的耐心和决心。但不要放弃，这是可能的。许多人都曾做到过，每个人都是从你现在的位置开始的。
感谢Paolo Ciarrocchi允许本文档中的“开发流程”部分（https://lwn.net/Articles/94386/）基于他所撰写的文本。同时也要感谢Randy Dunlap和Gerrit Huizenga提供了你应该说和不应该说的一些话语的列表。还要感谢Pat Mochel、Hanna Linder、Randy Dunlap、Kay Sievers、Vojtech Pavlik、Jan Kara、Josh Boyer、Kees Cook、Andrew Morton、Andi Kleen、Vadim Lobanov、Jesper Juhl、Adrian Bunk、Keri Harris、Frans Pop、David A. Wheeler、Junio Hamano、Michael Kerrisk和Alex Shepard对本文档的审阅、评论和贡献。没有他们的帮助，这份文档是不可能完成的。
维护者：Greg Kroah-Hartman <greg@kroah.com>
