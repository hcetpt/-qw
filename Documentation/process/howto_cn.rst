### 如何进行 Linux 内核开发
#### ======================

这是关于这一主题的全面指南。它包含了如何成为一名 Linux 内核开发者以及如何与 Linux 内核开发社区合作的指导。本指南尽量不涉及内核编程的技术方面，但会帮助你找到正确的方向。如果文档中的任何内容过时，请向文档维护者提交补丁，维护者的联系方式位于文档底部。

##### 引言

你想学习如何成为一名 Linux 内核开发者吗？或者你的经理告诉你：“为这个设备写一个 Linux 驱动。”本文档的目标是通过描述你需要经历的过程和与社区合作的提示来教你所需的一切知识。它还会尝试解释社区为何以这样的方式运作。

内核主要用 C 语言编写，一些架构相关的部分用汇编语言编写。对于内核开发来说，良好的 C 语言基础是必须的。除非你打算为特定架构做低级别的开发，否则通常不需要了解汇编（任何架构）。尽管这些书籍不能完全替代扎实的 C 语言教育或多年的经验，但以下书籍仍然可以作为很好的参考资料：

- 《C 程序设计语言》Kernighan 和 Ritchie 著 [Prentice Hall]
- 《实用 C 程序设计》Steve Oualline 著 [O'Reilly]
- 《C：参考手册》Harbison 和 Steele 著 [Prentice Hall]

内核使用 GNU C 和 GNU 工具链编写。虽然它遵循 ISO C11 标准，但它使用了一些标准中没有包含的扩展。内核是一个独立的 C 环境，不依赖于标准 C 库，因此某些 C 标准的部分不被支持。不允许使用任意长整数除法和浮点运算。有时很难理解内核对工具链的假设以及它使用的扩展，不幸的是，没有一个确定的参考资料。请查阅 gcc 的信息页面 (`info gcc`) 获取相关信息。

请记住，你正在尝试学习如何与现有的开发社区合作。这是一个由具有高标准编码、风格和程序的人组成的多样化群体。这些标准是随着时间的推移根据他们发现最适合如此大规模且地理分布广泛的团队的方式而建立起来的。尽可能提前学习这些标准，因为它们已经被充分记录；不要期望人们适应你或你公司的做事方式。

##### 法律问题

Linux 内核源代码是在 GPL 许可下发布的。请参阅源代码主目录中的文件 COPYING。Linux 内核许可规则以及如何在源代码中使用 `SPDX <https://spdx.org/>`_ 标识符在 :ref:`Documentation/process/license-rules.rst <kernel_licensing>` 中有描述。

如果你有关于许可的进一步问题，请咨询律师，不要在 Linux 内核邮件列表上提问。邮件列表上的人员不是律师，你不应该依赖他们关于法律事项的陈述。

关于 GPL 的常见问题及答案，请参见：
https://www.gnu.org/licenses/gpl-faq.html

##### 文档

Linux 内核源码树中包含大量有价值的文档，对于学习如何与内核社区互动非常重要。当新特性添加到内核时，建议同时添加新的文档文件来解释如何使用这些特性。

当内核更改导致内核暴露给用户空间的接口发生变化时，建议将变更信息或补丁发送给手册页维护者 alx@kernel.org，并抄送列表 linux-api@vger.kernel.org。

以下是内核源码树中必需阅读的一些文件：

  :ref:`Documentation/admin-guide/README.rst <readme>`
    该文件简要介绍了 Linux 内核，并描述了配置和构建内核所需的步骤。新接触内核的人应该从这里开始。
以下是对提供的英文文档引用的中文翻译：

:ref:`Documentation/process/changes.rst <changes>`
    本文件列出了构建和成功运行内核所必需的各种软件包的最低版本。
:ref:`Documentation/process/coding-style.rst <codingstyle>`
    本文件描述了Linux内核的编程风格及其背后的一些原因。所有新代码都应遵循本文档中的指导原则。大多数维护者只有在这些规则被遵守的情况下才会接受补丁，而且许多人只会在代码符合正确风格时才对其进行审查。
:ref:`Documentation/process/submitting-patches.rst <submittingpatches>`
    本文件详细说明了如何成功创建并发送补丁，包括但不限于：

       - 邮件内容
       - 邮件格式
       - 发送给谁

    遵循这些规则并不能保证成功（因为所有的补丁都会因内容和风格而受到审查），但不遵循它们几乎总是会导致失败。
其他关于如何正确创建补丁的优秀指南包括：

    “完美的补丁”
        https://www.ozlabs.org/~akpm/stuff/tpp.txt

    “Linux内核补丁提交格式”
        https://web.archive.org/web/20180829112450/http://linux.yyz.us/patch-format.html

:ref:`Documentation/process/stable-api-nonsense.rst <stable_api_nonsense>`
    本文件描述了有意识地决定不在内核中拥有稳定API的理由，包括如下内容：

      - 子系统的适配层（为了兼容性？）
      - 驱动程序在不同操作系统之间的可移植性
      - 减缓内核源码树中的快速变化（或防止快速变化）

    本文档对于理解Linux开发理念至关重要，并且对于从其他操作系统转向Linux开发的人来说非常重要。
:ref:`Documentation/process/security-bugs.rst <securitybugs>`
    如果您认为在Linux内核中发现了安全问题，请按照本文档中的步骤操作以帮助通知内核开发者并协助解决问题。
:ref:`Documentation/process/management-style.rst <managementstyle>`
    本文档描述了Linux内核维护者的运作方式以及他们方法背后的共同理念。对于任何新加入内核开发的人（或对它感到好奇的人）来说，这是重要的阅读材料，因为它解决了很多关于内核维护者独特行为的常见误解和困惑。
:ref:`Documentation/process/stable-kernel-rules.rst <stable_kernel_rules>`
    本文件描述了稳定内核发布的方式以及如果您希望将更改纳入其中一个发布的做法。
:ref:`Documentation/process/kernel-docs.rst <kernel_docs>`
    一份与内核开发相关的外部文档列表。如果您在内核文档中找不到所需的信息，请查阅此列表。
:ref:`Documentation/process/applying-patches.rst <applying_patches>`
    一个很好的入门指南，详细介绍了什么是补丁以及如何将其应用于内核的不同开发分支。
内核还包含大量文档，这些文档可以从源代码本身或从ReStructuredText标记（ReST）自动生成，就像这篇文档一样。这包括对内核API的完整描述以及如何正确处理锁定规则等内容。
所有这类文档都可以通过以下命令分别生成为PDF或HTML格式：

```
make pdfdocs
make htmldocs
```

从内核源码主目录运行上述命令即可。

使用ReST标记的文档将被生成在`Documentation/output`目录下。
它们也可以被生成为LaTeX和ePub格式，使用如下命令：

```
make latexdocs
make epubdocs
```

成为一名内核开发者
----------------------

如果你对Linux内核开发一无所知，你应该访问Linux KernelNewbies项目：

    https://kernelnewbies.org

该项目包括一个非常有用的邮件列表，在这里你可以几乎询问任何与基础内核开发相关的问题（请先搜索归档，避免重复提问）。此外，它还有一个IRC频道，可用于实时提问，并且提供大量有助于学习Linux内核开发的有用文档。
该网站提供了关于代码组织、子系统及当前项目的（树内外）基本信息。同时，它也描述了一些基本的后勤信息，比如如何编译内核和应用补丁等。
如果你不知道从何开始，但希望寻找一些任务来加入内核开发社区，可以访问Linux Kernel Janitors项目：

    https://kernelnewbies.org/KernelJanitors

这是一个非常好的起点。它列出了Linux内核源代码中需要清理和修复的一系列相对简单的问题。通过与负责此项目的开发者合作，你将学会如何将自己的补丁合并到Linux内核树中，并可能得到下一步工作方向的建议，如果你还没有具体想法的话。
在对Linux内核代码进行实际修改之前，理解所涉及代码的工作原理至关重要。为此，没有什么比直接阅读代码更好的了（大多数复杂的部分都有很好的注释），甚至可以借助专门工具的帮助。特别推荐的一个工具是Linux Cross-Reference项目，它可以以自引用、索引的网页格式展示源代码。一个优秀的、最新的内核代码库可以在以下网址找到：

    https://elixir.bootlin.com/

开发流程
--------------

目前，Linux内核开发流程包括几个不同的主要内核“分支”和大量的特定于子系统的内核分支。这些不同分支包括：

  - Linus的主要分支
  - 具有多个主要版本号的稳定分支
  - 特定于子系统的分支
  - linux-next集成测试分支

主要分支
~~~~~~~~~~

主要分支由Linus Torvalds维护，可以在https://kernel.org或代码仓库中找到。其开发流程如下：

  - 新内核发布后立即开启两周窗口期，在这段时间内，维护者可以向Linus提交大型变更，通常是那些已经在linux-next中包含几周的补丁。提交大型变更的首选方式是使用git（内核的源码管理工具，更多信息可在https://git-scm.com/获取），但纯文本补丁也是可以接受的。
  - 两周后发布-rc1版本，此后的工作重点是尽可能确保新内核的稳定性。此时大部分补丁应该修复回归问题。如果问题是长期存在的，而非回归，则只有在重要时才应推动此类修复。
请注意，整个新的驱动程序（或文件系统）可能会在-rc1之后被接受，因为只要变更自包含且不影响新增代码之外的区域，就不会引起回归问题。-rc1发布后可以通过git向Linus发送补丁，但补丁也需要发送到公共邮件列表以供审查。
  - 当Linus认为当前git树处于足够稳定的状态以供测试时，会发布新的-rc版本。目标是每周发布一个新的-rc内核。
过程持续到内核被认为“准备就绪”，整个过程大约需要6周的时间。
值得一提的是，Andrew Morton在linux-kernel邮件列表中关于内核发布的观点：

	*"没有人知道何时发布内核，因为它是根据已知的bug状态来发布的，而不是按照预先设定的时间表。"*

具有多个主要版本号的不同稳定分支
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

具有三部分版本号的内核是-稳定版内核。它们包含了针对特定主要主线版本中发现的安全问题或重大倒退的小规模且关键的修复。在每个主要稳定系列中的每次发布都会递增版本号的第三部分，同时保持前两部分不变。
这是推荐给希望使用最新稳定内核、而不愿意参与测试开发/实验性版本的用户的分支。
稳定分支由“稳定”团队<stable@vger.kernel.org>维护，并按需发布。通常的发布时间间隔约为两周，但如果没有什么迫切的问题，则可能更长。而一旦出现与安全相关的问题，则可能会立即进行发布。
内核树中的文件 :ref:`Documentation/process/stable-kernel-rst <stable_kernel_rules>` 记录了哪些类型的更改可以被接受进入-stable分支以及发布流程如何运作。

子系统特定的分支
~~~~~~~~~~~~~~~~~~~~~~~~

各种内核子系统的维护者——以及许多内核子系统开发者——在源代码仓库中公开他们当前的开发状态。这样，其他人可以看到内核各个领域的进展。在开发速度较快的领域，开发者可能会被要求基于某个子系统内核分支提交他们的工作，以避免提交与正在进行的其他工作之间产生冲突。
这些仓库大多数为git树，但也有一些采用其他的SCM（软件配置管理）系统，或者作为quilt系列发布的补丁队列。这些子系统仓库的地址可以在MAINTAINERS文件中找到。其中许多可以在https://git.kernel.org/上浏览。
在提案补丁被提交到子系统分支之前，它会经历一个主要在邮件列表中进行的审查过程（参见下面的相关章节）。对于多个内核子系统，这个审查过程通过名为Patchwork的工具进行追踪。Patchwork提供了一个网络界面，显示补丁发布、对补丁的任何评论或修订，以及维护者可以标记补丁为正在审查、已接受或被拒绝。大多数这些Patchwork站点列在https://patchwork.kernel.org/上。

linux-next集成测试分支
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

在子系统分支的更新合并到主线分支之前，需要经过集成测试。为此，存在一个特殊的测试仓库，几乎所有子系统分支几乎每天都会被拉入该仓库：

	https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git

这样一来，linux-next提供了下一个合并周期时预期将并入主线内核的内容概览。
欢迎勇于尝试的测试者运行测试linux-next。
### 错误报告
-------------

主内核源代码目录中的文件 'Documentation/admin-guide/reporting-issues.rst' 描述了如何报告可能的内核错误，并详细说明了内核开发者为追踪问题所需的信息。

### 管理错误报告
--------------------

实践你的编程技能的最佳方式之一就是修复他人报告的错误。这不仅能帮助提高内核的稳定性，而且还能让你学习解决实际问题的方法，提升自己的技能，同时其他开发者也会注意到你的存在。修复错误是获得其他开发者认可的好方法之一，因为并不是每个人都喜欢花时间去修复别人的错误。

要处理已报告的错误，请找到你感兴趣的子系统。检查 MAINTAINERS 文件，了解该子系统的错误报告到何处；通常是一个邮件列表，偶尔是一个错误跟踪器。在这些地方的存档中搜索近期的报告，并在适当的地方提供帮助。你还可以访问 https://bugzilla.kernel.org 查看错误报告；虽然只有少数内核子系统积极使用它来报告或追踪错误，但整个内核的错误报告都会被提交到这里。

### 邮件列表
-------------

正如上述文档所述，大多数核心内核开发者都参与了 Linux 内核邮件列表。订阅和退订此列表的详情可在此处找到：

    https://subspace.kernel.org/subscribing.html

在很多不同的地方都有邮件列表的存档。使用搜索引擎查找这些存档。例如：

    https://lore.kernel.org/linux-kernel/

强烈建议你在向列表发送之前先搜索相关存档，以确保你的主题没有被重复讨论过。许多已经详细讨论过的内容只记录在邮件列表的存档中。

大多数独立的内核子系统也有自己的专门邮件列表来进行开发工作。请参阅 MAINTAINERS 文件，了解不同小组对应的邮件列表。

许多列表托管在 kernel.org 上。相关信息可在以下网址找到：

    https://subspace.kernel.org

使用这些列表时，请遵守良好的行为习惯。
虽然有些老套，但以下网址提供了一些与列表（或其他任何列表）互动的基本准则：

    https://subspace.kernel.org/etiquette.html

如果多人回复了你的邮件，收件人列表可能会变得非常长。除非有充分的理由，否则不要从抄送列表中移除任何人，也不要只回复给列表地址。习惯接收两份邮件，一份来自发件人，另一份来自列表，不要试图通过添加复杂的邮件头来调整这种情况，人们不会喜欢这样做的。
记住保持回复的上下文和归属完整，保留“John Kernelhacker 写道：...”这样的开头行，并在引用部分之间添加你的陈述，而不是将内容写在邮件顶部。
如果你在邮件中添加补丁，请确保它们是纯可读文本，如在 :ref:`文档/流程/提交补丁.rst <submittingpatches>` 中所述。内核开发者不想处理附件或压缩的补丁；他们可能希望对你的补丁中的个别行进行评论，而这只有通过纯文本的方式才能实现。请确保你使用的邮件程序不会破坏空格和制表符。一个不错的初步测试是将邮件发送给自己，并尝试自己应用自己的补丁。如果这样做不行，请修复你的邮件程序或更换它，直到能够正常工作。

最重要的是，请记得尊重其他订阅者。
与社区合作
-----------

内核社区的目标是提供尽可能优秀的内核。当你提交补丁以供采纳时，它将仅基于其技术价值进行审查。那么你应该期待什么呢？

- 批评
- 评论
- 修改请求
- 理由要求
- 沉默

请记住，这是让你的补丁进入内核的一部分过程。你必须能够接受对你补丁的批评和评论，在技术层面上评估它们，并根据这些反馈重新修改你的补丁，或者提供清晰而简洁的理由说明为何不应做出这些更改。

如果没有收到对你发布的补丁的回应，请等待几天后再次尝试，有时信息会在巨大的邮件量中被遗漏。
你不应该做什么？

- 期望你的补丁不加质疑地被接受
- 变得防御性
- 忽略评论
- 在未做任何要求的更改的情况下重新提交补丁

在一个寻找最佳技术解决方案的社区里，对于补丁的价值总是会有不同的看法。你必须保持合作态度，愿意调整你的想法以适应内核，或者至少愿意证明你的想法值得采纳。

请记住，犯错是可以接受的，只要你愿意努力朝着正确的解决方案前进。
对于你的第一个补丁，你可能会得到一长串需要修正的问题列表，这**并不意味着**你的补丁不会被接受，也**不是针对个人**。只需修正所有关于你的补丁提出的问题并重新发送即可。
内核社区与企业结构之间的差异
-----------------------------------

内核社区的工作方式与大多数传统的公司开发环境不同。以下是一些你可以尝试避免问题的做法：

对于你提议的更改，可以这样说：

- “这解决了多个问题。”
- “这删除了2000行代码。”
- “这里有一个补丁，解释了我试图描述的内容。”
- “我在5种不同的架构上进行了测试…”
- “这里有一系列小补丁…”
- “这提高了典型机器上的性能…”

不应该这样说：

- “我们在AIX/ptx/Solaris中就是这样做的，所以它一定是好的…”
- “我已经这样做了20年，所以…”
- “这对我的公司赚钱是必要的”
- “这是为我们企业产品线设计的。”
- “这是我1000页的设计文档，描述了我的想法”
- “我为此已经工作了6个月…”
- “这是一个5000行的补丁…”
- “我把现有的混乱全部重写了，这就是结果…”
- “我有一个截止日期，这个补丁现在就需要被采用。”

内核社区与大多数传统软件工程工作环境的另一个不同之处在于互动的匿名性质。使用电子邮件和IRC作为主要沟通形式的一个好处就是可以避免基于性别或种族的歧视。
Linux 内核的工作环境对女性和少数群体持开放态度，因为在这里你只是一个电子邮件地址。国际化的特性也有助于创造一个更为公平的竞争环境，因为你无法仅凭一个人的名字来猜测其性别。男性可能名叫 Andrea，而女性可能名叫 Pat。大多数在 Linux 内核工作中表达过意见的女性都有过积极的经历。

语言障碍可能会给一些不擅长英语的人带来问题。为了在邮件列表中正确传达你的想法，良好的英语掌握能力是必要的，因此建议你在发送邮件前检查确保它们在英语语境下是有意义的。

拆分你的更改
--------------

Linux 内核社区并不乐于一次性接受大量的代码。更改需要被恰当地引入、讨论，并且拆分成小的、独立的部分。这几乎与企业习惯的做法完全相反。你应该在开发过程的早期阶段就提出你的提议，这样你可以获得关于你正在做的事情的反馈。这也让社区感受到你是与他们合作，而不仅仅是将你的功能倾倒给他们。但是，不要一次性向邮件列表发送 50 封邮件，你的补丁系列绝大多数情况下应该更小。

拆分的原因如下：

1) 小补丁增加了你的补丁被采纳的可能性，因为它们不需要太多的时间或精力来验证正确性。一个五行的补丁可以被维护者几乎一眼扫过就应用。然而，一个五百行的补丁可能需要数小时来审查其正确性（所需时间与补丁大小成指数关系，或者说类似的关系）。小补丁也使得出现问题时调试变得非常容易。逐个回退补丁比在应用后（并导致某些问题）剖析一个很大的补丁要简单得多。
2) 不仅要发送小补丁，而且在提交之前重写、简化（或仅仅重新排序）补丁也很重要。以下是内核开发者 Al Viro 的一个类比：

    *“想象一下数学老师的批改作业的情景。老师不想看到学生在找到解决方案前的尝试和错误。他们想看到最干净、最优雅的答案。一个好的学生知道这一点，永远不会在最终解决方案出来前提交她的中间工作。”

    *对于内核开发来说也是同样的道理。维护者和审阅者不想看到你解决问题时的思考过程。他们希望看到的是简单且优雅的解决方案。”*

保持呈现优雅解决方案和与社区一起工作、讨论未完成工作的平衡可能具有挑战性。因此，在早期阶段获取反馈以改进你的工作是好的，同时也要保持你的更改足够小，即使整个任务还未准备好合并进来也可能已经被接受。
同时要注意不可发送那些未完成并且将来会“修复”的补丁。

证明你的更改
--------------

除了拆分你的补丁外，非常重要的一点是你需要告诉 Linux 社区为什么他们应该添加这个更改。新功能必须证明其必要性和有用性。

记录你的更改
--------------

当你发送补丁时，请特别注意邮件中的文本内容。这些信息将成为补丁的变更日志信息，并将永久保存供所有人查看。它应该全面描述补丁，包括：

  - 更改为何必要
  - 补丁中的总体设计方法
  - 实现细节
  - 测试结果

有关这些内容的具体格式，请参阅文档“完美的补丁”中的变更日志部分：

  “The Perfect Patch”
      https://www.ozlabs.org/~akpm/stuff/tpp.txt

所有这些事情有时都很难做到。可能需要多年才能完善这些实践（如果能的话）。这是一个持续改进的过程，需要极大的耐心和决心。但不要放弃，这是有可能做到的。许多人都已经做到了，每个人都必须从你现在所处的位置开始。
感谢Paolo Ciarrocchi允许本文档中的“开发流程”部分（https://lwn.net/Articles/94386/）基于他所撰写的文本。同时也要感谢Randy Dunlap和Gerrit Huizenga提供了你应该说和不应该说的一些话语的列表。还要感谢Pat Mochel、Hanna Linder、Randy Dunlap、Kay Sievers、Vojtech Pavlik、Jan Kara、Josh Boyer、Kees Cook、Andrew Morton、Andi Kleen、Vadim Lobanov、Jesper Juhl、Adrian Bunk、Keri Harris、Frans Pop、David A. Wheeler、Junio Hamano、Michael Kerrisk和Alex Shepard对本文档的审阅、评论和贡献。没有他们的帮助，这份文档是不可能完成的。
维护者：Greg Kroah-Hartman <greg@kroah.com>
