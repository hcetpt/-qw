### SPDX 许可证标识符：GPL-2.0

### 研究者指南

#### 研究者指南
Linux 内核社区欢迎对 Linux 内核、与其开发相关的活动以及由此产生的任何副产品的透明研究。这类研究极大地促进了 Linux 的发展，而 Linux 的许多方面都是以某种形式的研究为驱动力的。如果研究者能够在公开结果之前分享初步发现，尤其是涉及安全性的研究，社区将非常感激。早期参与有助于提高研究质量，并使 Linux 能够从中得到改进。无论如何，建议与社区分享已发表研究的开放访问副本。

本文件旨在澄清 Linux 内核社区认为在进行此类研究时哪些做法是可接受的，哪些是不可接受的。至少，此类研究及相关活动应遵循标准的研究伦理规则。有关一般研究伦理、技术伦理以及对开发者社区研究的更多背景资料，请参阅：

* [研究伦理的历史](https://www.unlv.edu/research/ORI-HSR/history-ethics)
* [IEEE 伦理](https://www.ieee.org/about/ethics/index.html)
* [开发者和研究者关于开源项目实验伦理的观点](https://arxiv.org/pdf/2112.13217.pdf)

Linux 内核社区期望所有与项目互动的人都是出于诚信以使 Linux 更好。欢迎对由 Linux 内核社区产生的任何公开可用的产品（包括但不限于源代码）进行研究，但对开发者的研究所必须明确地征得同意。

基于完全公开来源的被动研究（包括公开邮件列表上的帖子和公共仓库中的提交记录）显然是允许的。然而，按照任何研究的标准，仍然需要遵守基本的伦理规范。

对于开发者行为的主动研究，则必须获得相关开发者的明确同意并全面披露研究详情。未经同意不得与开发者互动或对其进行实验；这也是标准的研究伦理要求。

#### 调查
研究常常采取向维护者或贡献者发送调查问卷的形式。但是，通常情况下，内核社区从这些调查中获得的价值有限。内核开发过程之所以有效是因为每位开发者都能从他们的参与中获益，即使与其他目标不同的开发者合作也是如此。而回答调查则是一种单向的要求，忙碌的开发者们没有从中获得相应的利益，对整个内核社区也没有直接的好处。因此，这种研究方法不被鼓励。

社区成员已经收到太多电子邮件，他们可能会把调查请求视为额外的时间负担。发送这样的请求会剥夺社区宝贵的贡献者时间，并且不太可能获得统计学上有用的反馈。

作为替代方案，研究者应该考虑参加开发者活动，举办介绍研究项目及其对参与者好处的会议，并直接与社区互动。这样获得的信息要比电子邮件调查丰富得多，同时社区也能从你的见解中受益。

#### 补丁
为了澄清：向开发者发送补丁是与他们互动的一种方式，但他们已经同意接收“诚意贡献”。故意发送有缺陷或存在漏洞的补丁，或者在讨论中提供误导性信息是没有得到同意的。这样的沟通可能对开发者造成伤害（例如消耗时间和精力、影响士气），并对项目造成损害，因为它会侵蚀整个开发者社区对贡献者的信任（以及贡献者的组织整体的信任），破坏为贡献者提供建设性反馈的努力，并使最终用户面临软件缺陷的风险。

研究人员参与到 Linux 的开发中，如同其他人一样，是受欢迎和鼓励的。对 Linux 代码的研究是一种常见的实践，特别是在开发或运行能够产生实际操作结果的分析工具时。
与开发者社区互动时，传统上提交补丁是产生影响的最佳方式。Linux已经存在大量已知的漏洞——更有帮助的是提供经过验证的修复方案。在贡献之前，请仔细阅读相关文档：

* [开发流程](Documentation/process/development-process.rst)
* [提交补丁](Documentation/process/submitting-patches.rst)
* [报告问题指南](Documentation/admin-guide/reporting-issues.rst)
* [安全漏洞处理](Documentation/process/security-bugs.rst)

然后发送补丁（包括下面列出的所有详细信息的提交日志），并关注其他开发者的反馈。当发送从研究中产生的补丁时，提交日志应该至少包含以下细节，以便开发者能够理解贡献的上下文。回答如下：

* 发现的具体问题是什么？
* 在运行系统中如何复现该问题？
* 遇到该问题会对系统产生什么影响？
* 如何发现这个问题？特别是要包括有关测试、静态或动态分析程序以及用于执行工作的任何其他工具或方法的详细信息。
* 在哪个版本的Linux上发现了这个问题？强烈建议使用最新的发布版本或最近的`linux-next`分支（参见[如何操作文档](Documentation/process/howto.rst)）。
* 为了修复这个问题做了哪些更改，为什么认为这些更改是正确的？
* 这些更改是如何进行构建测试和运行时测试的？
* 此更改修复了哪个之前的提交？这应该按照文档所述放入“Fixes:”标签中。
* 谁还审查了这个补丁？这应该放入适当的“Reviewed-by:”标签中；参见下面的示例。

例如：

```
From: 作者 <author@email>
Subject: [PATCH] drivers/foo_bar: 添加缺失的kfree()

foo_bar驱动程序中的错误路径没有正确释放分配的struct foo_bar_info。如果连接的foo_bar设备拒绝初始化阶段发送的包，则可能会发生这种情况。这会导致每次设备连接时泄漏64字节的内存，随着时间的推移浪费内存资源。
此缺陷是使用我们正在开发的一个实验性静态分析工具LeakMagic[1]发现的，它在分析v5.15内核版本时报告了以下警告：

   path/to/foo_bar.c:187: 缺失的kfree()调用？

向错误路径添加缺失的kfree()。除了probe函数之外，没有对该内存的其他引用，因此这是唯一可以释放它的位置。
使用GCC 11.2对x86_64和arm64的defconfig构建，将CONFIG_FOO_BAR设置为y，没有出现新的警告，并且LeakMagic不再对此代码路径发出警告。由于我们没有FooBar设备进行测试，因此无法进行运行时测试。

[1] https://url/to/leakmagic/details

Reported-by: 研究者 <researcher@email>
Fixes: aaaabbbbccccdddd ("引入对FooBar的支持")
Signed-off-by: 作者 <author@email>
Reviewed-by: 审查者 <reviewer@email>
```

如果你是首次贡献者，建议在公开列表上发布之前，先私下让其他人审核你的补丁。
（如果已明确告知您的补丁需要更仔细的内部审查，则此步骤是必需的。）期望这些人能在最终的补丁中包含他们的 "Reviewed-by" 标签。在将补丁发送到公共邮件列表之前，找到另一位熟悉Linux贡献流程的开发者，尤其是在您所在组织内，并请他们协助审查，通常能显著提高最终补丁的质量，从而减轻其他开发者的负担。
如果找不到合适的人进行内部审查且您需要帮助寻找这样的人，或者如果您有任何与本文件及开发者社区期望相关的问题，请联系私有的技术咨询委员会邮件列表：<tech-board@groups.linuxfoundation.org>。
