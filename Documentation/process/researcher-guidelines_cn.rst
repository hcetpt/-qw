### SPDX 许可证标识符：GPL-2.0

### 研究者指南

#### 研究者指南
Linux 内核社区欢迎对 Linux 内核、与其开发相关的活动以及由此产生的任何副产品的透明研究。这类研究极大地促进了 Linux 的发展，而 Linux 的许多方面都是以某种形式的研究为驱动力的。如果研究者能够在公开结果之前分享初步发现，尤其是涉及安全性的研究，社区将非常感激。早期参与有助于提高研究质量，并使 Linux 能够从中得到改进。无论如何，建议与社区分享已发表研究的开放访问副本。

本文件旨在澄清 Linux 内核社区认为在进行此类研究时哪些做法是可接受的，哪些是不可接受的。至少，此类研究及相关活动应遵循标准的研究伦理规则。有关一般研究伦理、技术伦理以及对开发者社区研究的更多信息，请参阅：

* [研究伦理的历史](https://www.unlv.edu/research/ORI-HSR/history-ethics)
* [IEEE 伦理](https://www.ieee.org/about/ethics/index.html)
* [开源项目实验中的开发者和研究者关于伦理的观点](https://arxiv.org/pdf/2112.13217.pdf)

Linux 内核社区期望所有与项目互动的人都是出于善意来改善 Linux。欢迎对 Linux 内核社区产生的任何公开可用的成果（包括但不限于源代码）进行研究，但对开发者的直接研究必须明确选择加入。
基于完全公开来源的被动研究，包括公开邮件列表的帖子和公共仓库的提交，显然是允许的。但是，必须遵循标准的伦理规则。
然而，对开发者行为的主动研究必须获得涉及的个体开发者的明确同意并充分告知他们。未经同意不得对开发者进行互动或实验，这也是标准的研究伦理要求。

#### 调查
研究常常采用向维护者或贡献者发送调查表的形式。然而，一般来说，内核社区从这些调查中获得的价值很小。内核开发过程之所以有效是因为每位开发者都能从参与中获益，即使与其他目标不同的开发者合作也是如此。而回答调查则是一种单向的需求，对于忙碌的开发者来说没有相应的个人或整体社区的利益，因此这种研究方法不被鼓励。
内核社区成员已经收到了太多的电子邮件，可能会把调查请求视为另一种时间需求。发送这样的请求会剥夺社区宝贵的贡献者时间，且不太可能获得统计上有用的反馈。
作为替代方案，研究者应该考虑参加开发者活动，在活动中解释研究项目及其对参与者的好处，并直接与社区互动。这样获得的信息远比通过电子邮件调查丰富得多，社区也能从你的见解中受益。

#### 补丁
为了澄清：向开发者发送补丁被视为与他们互动，但他们已经同意接收出于善意的贡献。发送故意存在缺陷或漏洞的补丁或在讨论中提供误导信息并未得到同意。此类沟通可能损害开发者（例如浪费时间和精力，影响士气）并对项目造成损害，因为它侵蚀了整个开发者社区对贡献者的信任（以及贡献者的组织），破坏了向贡献者提供建设性反馈的努力，并使最终用户面临软件缺陷的风险。
研究人员参与 Linux 开发本身，如同任何人一样，是受到欢迎和鼓励的。对 Linux 代码的研究是一种常见做法，特别是在开发或运行产生可操作结果的分析工具时。
当与开发者社区互动时，发送补丁历来是产生影响的最佳方式。Linux系统中已知的bug已经很多——更有帮助的是提供经过验证的修复方案。在贡献之前，请仔细阅读以下相关文档：

* 文档/过程/开发流程.rst
* 文档/过程/提交补丁.rst
* 文档/管理指南/报告问题.rst
* 文档/过程/安全漏洞.rst

然后发送一个补丁（包括下面列出的所有细节的提交日志），并跟进其他开发者可能提供的任何反馈。当从研究中产生的补丁被发送时，提交日志应至少包含以下细节，以便开发者能够适当地理解这个贡献的上下文。回答如下：

* 发现的具体问题是什么？
* 在运行系统上如何触发这个问题？
* 遇到这个问题会对系统产生什么影响？
* 这个问题是如何发现的？特别地，包括关于任何测试、静态或动态分析程序，以及用于执行工作的任何其他工具或方法的详细信息。
* 问题是在哪个版本的Linux上发现的？强烈建议使用最新的发布版本或最近的linux-next分支（参见文档/过程/如何操作.rst）。
* 是什么改变了来修复这个问题，为什么认为这是正确的？
* 这个改变是如何进行构建测试和运行时测试的？
* 此改变修复了之前的哪个提交？这应该按照文档描述放入“修复：”标签中。
* 谁还审查过这个补丁？这应该放入适当的“审查通过：”标签中；参见下文。

例如：

  来自：作者 <author@email>
  主题：[PATCH] 驱动/foobaz：添加缺失的kfree()

  foobaz驱动中的错误路径没有正确释放分配的struct foobaz_info结构。如果连接的foobaz设备拒绝在foobaz_probe()期间发送的初始化数据包，就会发生这种情况。这将导致每次设备连接时有64字节的slab内存泄漏，随时间推移浪费内存资源。

  这个缺陷是使用我们正在开发的一个实验性静态分析工具LeakMagic[1]发现的，它在分析v5.15内核发布版本时报告了以下警告：

   path/to/foobaz.c:187: 缺失的kfree()调用？

  在错误路径中添加缺失的kfree()。除了probe函数之外，没有对这块内存的其他引用，因此这是唯一可以释放它的位置。
  
  使用GCC 11.2编译的x86_64和arm64 defconfig构建，配置CONFIG_FOO_BAR=y，显示没有新的警告，并且LeakMagic不再警告这条代码路径。由于我们没有FooBar设备进行测试，因此无法进行运行时测试。

[1] https://url/to/leakmagic/details

  报告者：研究员 <researcher@email>
  修复：aaaabbbbccccdddd ("引入FooBar支持")
  签名确认：作者 <author@email>
  审查通过：评审员 <reviewer@email>

如果你是首次贡献者，建议在公开列表上发布之前，先私下让其他人审核补丁本身。
（如果你被明确告知你的补丁需要更仔细的内部审查，这是必要的。）这些人员应当在最终的补丁中包含他们的“已审核”标签。在将补丁发送到公共邮件列表之前，找到另一位熟悉Linux贡献的开发者，特别是在你自己的组织内，并让他们协助进行审查，这往往能显著提高最终补丁的质量，从而减轻其他开发者的负担。

如果找不到可以内部审查补丁的人，或者你需要帮助寻找这样的人，或者如果你对本文件和开发者社区的期望有任何其他疑问，请联系私密的技术顾问委员会邮件列表：<tech-board@groups.linuxfoundation.org>。

请注意，对于那些需要更仔细内部审查的补丁，确保有适当的人员在补丁中添加“已审核”标签是很重要的。此外，在将补丁提交至公共邮件列表前，如果能够找到一位熟悉Linux贡献流程的开发者，尤其是来自同一组织的同事，来协助进行初步的审查工作，通常能够有效提升补丁的质量，进而减少其他开发者后续处理的工作量。

如果你无法找到合适的内部审查人员，或者在寻找过程中需要帮助，亦或你对本文档内容或开发者社区的相关期待有任何疑问，欢迎向技术顾问委员会的私密邮件列表寻求支持： <tech-board@groups.linuxfoundation.org>。在这里，你可以获得进一步的指导和帮助。
