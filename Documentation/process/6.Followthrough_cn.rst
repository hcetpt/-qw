跟进工作
=============

到这一步，您已经遵循了迄今为止给出的指导原则，并结合自己的工程技能提交了一组完美的补丁。即使是经验丰富的内核开发者也可能会犯的一个重大错误就是认为他们的工作现在已经完成了。实际上，提交补丁标志着进入了下一个阶段，可能还有大量的工作需要完成。很少有补丁在首次发布时就如此完美以至于没有改进的空间。内核开发过程认识到了这一事实，因此非常注重对已提交代码的改进。作为该代码的作者，您将被期望与内核社区合作以确保您的代码达到内核的质量标准。不参与这个过程很可能导致您的补丁无法被合并到主线中。

### 与评审者合作

任何具有一定意义的补丁都会从其他开发者那里收到许多评论，因为他们正在审查代码。对于许多开发者来说，与评审者合作可能是内核开发过程中最令人畏惧的部分。但是，如果您记住以下几点，可以让事情变得简单很多：

- 如果您已经很好地解释了自己的补丁，评审者会理解其价值以及为什么您要费心编写它。但是这种价值并不能阻止他们提出一个根本性的问题：十年后拥有这段代码的内核将会怎样维护？您可能被要求做出的许多更改——从编码风格调整到重大重写——都基于一种理解，即Linux在未来十年仍将存在并持续开发。
- 代码评审是一项艰苦的工作，而且相对缺乏回报；人们会记得谁写了内核代码，但对于那些评审过这些代码的人来说，几乎没有持久的名声。因此，评审者可能会变得脾气暴躁，特别是当他们反复看到同样的错误时。如果得到的评审似乎很生气、侮辱人或完全冒犯，抵制以相同方式回应的冲动。代码评审是关于代码本身，而不是人，代码评审者并不是针对您个人进行攻击。
- 同样地，代码评审者并不是试图为了推广自己雇主的利益而牺牲您的利益。内核开发者通常期望多年后仍能继续从事内核开发，但他们明白自己的雇主可能会改变。他们几乎无一例外都在努力创建最好的内核；他们并不是试图给竞争对手制造不适。
- 准备好接受看似愚蠢的编码风格更改请求和要求将您的一部分代码提炼到内核共享部分的要求。维护者的职责之一就是保持代码的一致性。有时候这意味着您驱动程序中的巧妙黑客技术为了绕过某个问题实际上需要成为一个通用的内核特性，为下一次遇到类似问题做好准备。

归根结底，当评审者向您发送评论时，您需要关注他们所提出的实际的技术观察。不要让他们的表达方式或您的自尊心阻碍这一点。当您收到关于补丁的评审意见时，花时间去理解评审者想要说什么。如果可能的话，修复评审者要求您修复的内容。并且回复评审者：感谢他们，并描述您将如何回答他们的问题。

请注意，您不必同意评审者提出的每一个更改建议。如果您认为评审者误解了您的代码，请解释实际发生的情况。如果您对建议的更改有技术上的异议，请描述并证明您解决问题的方法。如果您的解释合理，评审者会接受它们。但如果您的解释未能说服对方，尤其是当其他人开始同意评审者的观点时，花些时间重新思考一下。很容易因为过于专注于自己的解决方案而没有意识到某些基本的东西出了问题，或者可能您甚至没有解决正确的问题。

Andrew Morton 建议每个没有导致代码更改的评审意见都应该以添加额外的代码注释的形式体现；这有助于未来的评审者避免再次出现第一次出现的问题。

一个致命的错误是忽视评审意见，希望它们会消失。它们不会消失。如果您重新发布代码而不回应之前的评论，您可能会发现自己的补丁无法推进。
说到转发代码：请记住，审阅者不会记得你上次发布的所有代码细节。因此，最好提醒审阅者之前提出的问题以及你是如何处理这些问题的；补丁的日志是一个记录这类信息的好地方。审阅者不应该需要去搜索邮件列表来熟悉上次讨论的内容；如果你帮助他们快速上手，当他们再次审查你的代码时心情会更好。

如果已经尽力做到一切正确但事情仍然没有进展怎么办？大多数技术分歧可以通过讨论解决，但有时确实需要有人做出决定。如果你真诚地认为这个决定对你不公，你可以尝试向上级求助。截至本文撰写之时，上级通常是安德鲁·莫顿。安德鲁在内核开发社区中享有极高的尊重；他常常能够解决看似陷入僵局的情况。然而，向安德鲁求助不应轻率行事，在此之前应穷尽所有其他途径。并且，请记住，他也可能不同意你的观点。

接下来会发生什么
------------------

如果一个补丁被认为是对内核有益的添加，并且大部分审查问题都已解决，下一步通常是进入子系统维护者的树中。不同子系统的方式各不相同；每个维护者都有自己的做法。特别是，可能有不止一棵树——其中一棵可能专门用于计划在下一个合并窗口中使用的补丁，而另一棵则用于长期工作。

对于那些没有明显子系统树适用的领域（例如内存管理补丁），默认的树往往是-mm。影响多个子系统的补丁也可能通过-mm树进行处理。

进入子系统树可以为补丁带来更高的可见度。现在使用该树的其他开发者将默认获得这些补丁。子系统树通常也会向linux-next供稿，使它们的内容对整个开发社区可见。此时，你有很大可能会从一组新的审阅者那里收到更多评论；这些评论需要像前一轮一样得到回答。

根据你的补丁性质，在这个阶段可能出现的情况是与其他人的工作产生冲突。最坏的情况下，严重的补丁冲突可能导致一些工作被暂时搁置，以便剩余的补丁能够整理好并合并。

其他时候，解决冲突可能涉及与其他开发者合作，可能还需要在不同的树之间移动一些补丁以确保所有内容都能顺利应用。这项工作可能会很麻烦，但你应该感到幸运：在linux-next树出现之前，这些冲突往往只会在合并窗口期间出现，并且必须迅速解决。

现在它们可以在合并窗口打开之前从容解决。

总有一天，如果一切顺利，你会登录并发现你的补丁已经被合并到主线内核中。恭喜！一旦庆祝活动结束（并且你已经把自己添加到了MAINTAINERS文件中），值得记住一个重要事实：工作还没有完成。

合并到主线带来了其自身的挑战。
首先，你的补丁的可见度再次提高。可能会有一轮新的开发者评论出现，这些开发者之前可能并未注意到你的补丁。你可能会想要忽略这些评论，因为你的代码已经被合并的问题已经不存在了。但请抵制这种诱惑；你仍然需要对提出问题或建议的开发者做出回应。

更重要的是：并入主线意味着你的代码将被更多测试者使用。即使你提交的是一个尚未上市的硬件驱动，你也会惊讶于有多少人会将你的代码编译进他们的内核中。当然，只要有测试者，就会有错误报告。

最糟糕的一类错误报告是回归问题。如果你的补丁导致了回归问题，你会发现有很多目光集中在你身上；回归问题需要尽快解决。如果你不愿意或无法修复这个问题（且没有其他人帮你修复），那么在稳定化阶段，你的补丁几乎肯定会从主线中移除。这不仅使你为将补丁并入主线所做的所有努力付诸东流，而且由于未能修复回归问题而导致补丁被撤回，未来你可能更难让自己的工作被合并。

处理完所有回归问题后，还可能存在其他普通错误。稳定化阶段是你修正这些问题、确保你的代码在主线内核版本中的首次亮相尽可能稳固的最佳时机。因此，请回复错误报告，并尽可能地解决问题。这就是稳定化阶段的目的；在解决了旧问题之后，你可以开始创造新的酷炫补丁。

别忘了还有其他里程碑也可能产生错误报告：例如下一个主线稳定版本发布时，或者当知名发行版开始采用包含你的补丁的内核版本时等。持续响应这些报告是对工作基本的自豪感。如果这还不足以成为动力的话，也值得考虑的是，开发社区会记住那些在代码合并后就失去兴趣的开发者。下次你发布补丁时，他们将会基于你不会继续维护它的假设来评估你的补丁。

可能发生的事情

有一天，你可能会打开邮件客户端，看到有人给你发来了针对你的代码的补丁。毕竟，这就是公开你的代码所带来的好处之一。如果你同意这个补丁，你可以将其转发给子系统的维护者（一定要包含正确的 From: 行以正确归功，并添加你自己的确认签名），或者发送一条 Acked-by: 的回复，让原作者向上发送。

如果你不同意这个补丁，请礼貌地回复解释原因。如果可能的话，告诉作者需要做哪些更改才能让你接受这个补丁。通常情况下，反对代码作者和维护者的补丁合并会遇到一定的阻力，但这并不是绝对的。如果你被认为是在无谓地阻挠优秀的工作，这些补丁最终还是会绕过你并入主线。在 Linux 内核中，除了可能是 Linus 外，没有人拥有对任何代码的绝对否决权。

在极少数情况下，你可能会看到完全不同的情况：另一位开发者提出了对你问题的不同解决方案。这时，两个补丁中的一个很可能不会被合并，“我的先提出的”并不是一个有说服力的技术论点。如果别人的补丁取代了你的并且并入了主线，只有一种方式来回应：高兴地看到你的问题得到了解决，并继续你的工作。以这种方式被排挤开的工作可能会让人感到受伤和沮丧，但社区会记得你的反应，远比记得到底是谁的补丁被合并的时间要长得多。
