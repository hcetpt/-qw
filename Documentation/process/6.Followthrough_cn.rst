跟进工作
=============

到这一步，您已经遵循了迄今为止给出的指导原则，并结合自己的工程技能提交了一组完美的补丁。即使是经验丰富的内核开发者也可能会犯的一个重大错误就是认为他们的工作现在已经完成了。实际上，提交补丁标志着进入了下一个阶段，可能还有大量的工作需要完成。很少有补丁在首次提交时就如此完美以至于没有改进的空间。内核开发过程认识到了这一事实，因此非常注重对已提交代码的改进。作为该代码的作者，您将被期望与内核社区合作以确保您的代码达到内核的质量标准。不参与这个过程很可能导致您的补丁无法被合并到主线中。

### 与评审者合作

任何重要的补丁都会引起其他开发者在审查代码时提出许多评论。对于许多开发者来说，与评审者合作可能是内核开发过程中最令人生畏的部分。但如果您能记住以下几点，会让事情变得容易得多：

- 如果您很好地解释了自己的补丁，评审者会理解其价值以及为什么您要费心编写它。但是这种价值并不能阻止他们提出一个根本性的问题：十年后，维护包含这段代码的内核会是什么样子？许多您被要求做出的更改——从编码风格的调整到实质性的重写——都是基于这样的理解：Linux在未来十年仍将继续存在并得到开发。
- 代码评审是一项艰苦的工作，而且是一项相对缺乏感激的职业；人们记得谁写了内核代码，但对于那些评审过这些代码的人来说，几乎没有持久的名声。因此，评审者可能会变得脾气暴躁，特别是当他们反复看到同样的错误时。如果收到的评审意见显得愤怒、侮辱人或完全冒犯，不要冲动地以同样的方式回应。代码评审是关于代码本身，而不是人，评审者并不是针对您个人进行攻击。
- 同样，评审者并不是试图为了推广自己雇主的利益而牺牲您的利益。内核开发者通常希望多年后仍在开发内核，但他们明白自己的雇主可能会改变。他们几乎无一例外地都在努力创建最好的内核；他们并不是想给雇主的竞争者制造麻烦。
- 准备好应对一些看似愚蠢的编码风格更改请求和将部分代码抽象为内核共享部分的要求。维护者的一项工作就是保持代码的一致性。有时候这意味着您驱动程序中的巧妙解决方法实际上需要变成一个通用的内核功能，以便下一次使用。

所有这一切归结为一点：当评审者向您发送评论时，您需要关注他们所提出的的技术观察。不要让他们的表达方式或您自己的骄傲阻碍这一点。当您收到补丁的评审意见时，请花时间去理解评审者想要说什么。尽可能地修复评审者要求您修复的内容。并回复评审者：感谢他们，并描述您将如何回答他们的问题。

请注意，您不必同意评审者提出的每一个更改建议。如果您认为评审者误解了您的代码，请解释真正的情况。如果您对某个建议的更改有技术上的异议，请描述它并证明您解决问题的方法。如果您的解释合理，评审者会接受它们。但如果您的解释未能说服评审者，尤其是其他人也开始赞同评审者的观点时，请花些时间重新考虑。很容易因为过于专注于自己的解决方案而导致没有意识到问题的根本错误，或者甚至没有解决正确的问题。

安德鲁·莫顿（Andrew Morton）建议，每个没有导致代码变更的评审意见都应该通过增加代码注释来响应；这可以帮助未来的评审者避免第一次出现的问题。

一个致命的错误是忽略评审意见，寄希望于它们会消失。它们不会消失。如果您重新发布代码而没有回应之前收到的意见，很可能会发现您的补丁无法得到进一步处理。
关于重新发布代码：请记住，评审者不会记得你上次发布的所有代码细节。因此，总是个好主意提醒评审者之前提出的问题以及你是如何处理的；补丁的变更日志是记录这类信息的好地方。评审者不应该需要翻阅邮件列表归档来熟悉上次讨论的内容；如果你能帮助他们快速进入状态，当他们再次审查你的代码时，他们会更开心。

如果已经尽力而为，事情却仍然没有进展，该怎么办？大多数技术分歧可以通过讨论解决，但有时确实需要某人做出决定。如果你真诚地认为这个决定错误地对你不利，你可以尝试向上级求助。在撰写本文时，这个上级往往是Andrew Morton。Andrew在内核开发社区中享有极高的尊重；他经常能够解决看似无法突破的僵局。但是，向Andrew申诉不应轻率行事，在穷尽所有其他途径前不应采取此行动。并且请记住，他可能也不会同意你的观点。

接下来会发生什么

如果一个补丁被认为是有益于加入内核的，并且解决了大部分评审问题后，下一步通常是将其纳入子系统的维护者的代码树。具体操作因子系统而异；每个维护者都有自己的工作方式。特别是，可能不止一棵树——可能有一棵树专门用于计划下一次合并窗口的补丁，另一棵则用于长期工作。

对于那些没有明显子系统树归属的领域（如内存管理补丁），默认的树通常是-mm。影响多个子系统的补丁也可能会通过-mm树。

将补丁纳入子系统树可以提高其可见度。现在，与该树合作的其他开发者将默认获得该补丁。子系统树通常也会向linux-next供稿，使其内容对整个开发者社区可见。此时，你有可能会从一组新的评审者那里得到更多评论；这些评论需要像上一轮一样回答。

根据你的补丁性质，此时可能出现的情况是与其他人的工作产生冲突。在最坏的情况下，严重的补丁冲突可能导致某些工作被暂时搁置，以便剩余的补丁能够被整理并合并。

其他时候，解决冲突可能涉及与其他开发者合作，可能包括在树之间移动一些补丁，以确保一切都能干净地应用。这项工作可能很痛苦，但请感恩：在linux-next树出现之前，这些冲突往往只在合并窗口期间出现，必须匆忙解决。

现在它们可以在合并窗口打开前，从容地解决。

有一天，如果一切顺利，你会登录并发现你的补丁已经被合并到主线内核中。恭喜！庆祝过后（并把自己添加到MAINTAINERS文件中），请记住一个重要的事实：工作仍未完成。

合并到主线带来了它自身的挑战。
首先，你的补丁的可见度再次提升。可能会有新的一轮来自之前未曾注意到此补丁的开发者们的评论。你可能会有忽略这些评论的冲动，因为你的代码被合并已无悬念。但请抵制这种诱惑；你仍然需要对那些有疑问或建议的开发者做出回应。

更重要的是：主流内核的接纳将你的代码置于更广泛的测试者群体手中。即使你贡献的驱动程序针对的是尚未上市的硬件，你也会惊讶于有多少人会将你的代码编译进他们的内核中。当然，只要有测试者，就会有错误报告。

最糟糕的错误报告是倒退（regressions）。如果你的补丁导致了倒退，你会发现有众多的目光聚焦在你身上；倒退问题需要尽快得到解决。如果你不愿意或无法修复这个倒退问题（并且也没有其他人替你解决），在稳定化阶段，你的补丁几乎肯定会遭到移除。这不仅否定了你为将补丁并入主流所做的所有努力，由于未能解决倒退问题而被撤销补丁，可能还会使你在未来合并工作时更加困难。

处理完任何倒退问题后，还可能有其他常规的bug需要解决。稳定化阶段是你修复这些问题、确保你的代码在主流内核版本中的首次亮相尽可能稳固的最佳时机。因此，请回复错误报告，并尽可能地解决问题。稳定化阶段就是为此而设；一旦旧的问题得到解决，你就可以开始创造酷炫的新补丁了。

别忘了，还有其他里程碑事件也可能产生错误报告：下一个主流稳定版发布，当知名发行版采用包含你补丁的内核版本等。持续响应这些报告是对自己工作的基本自豪感的体现。如果这还不足以成为动力，那么值得考虑的是，开发社区会记住那些在代码合并后就失去兴趣的开发者。下次你发布补丁时，他们将假设你之后不会维护它来进行评估。

可能发生的事情

有一天，你可能打开邮件客户端，发现有人给你发了一封关于你代码的补丁邮件。毕竟，让你的代码公开在外就有这样的好处。如果你同意该补丁，你可以将其转发给子系统维护者（一定要包含正确的From:行以确保归功正确，并添加你自己的签署），或者发送一个Acked-by:的回复让原作者向上提交。

如果你不同意该补丁，礼貌地回复解释原因。如果可能，告诉作者需要做哪些修改才能使你接受这个补丁。存在一定程度上的抵触，即不合并遭到代码作者和维护者反对的补丁，但这只是到一定程度。如果你被视为无端阻止优秀工作，这些补丁最终还是会绕过你，进入主流内核。在Linux内核中，除了可能的Linus外，没有人对任何代码拥有绝对的否决权。

在非常罕见的情况下，你可能会看到完全不同的情况：另一位开发者发布了针对你问题的不同解决方案。这时，很可能两个补丁中只有一个会被合并，“我的先到”并不是一个有力的技术论点。如果其他人的补丁取代了你的，并进入了主流内核，唯一的应对方式就是高兴你的问题得到了解决，然后继续你的工作。以这种方式被推到一边的工作虽然令人痛苦和沮丧，但社区会记得你的反应，远远超过他们忘记到底是谁的补丁真正被合并的时间。
