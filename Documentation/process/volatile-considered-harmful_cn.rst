为什么不应使用 `volatile` 类型修饰符
------------------------------------------

C 程序员经常认为 `volatile` 意味着变量可能在当前执行线程之外被更改；因此，他们有时会被诱惑在内核代码中使用它来处理共享数据结构。换句话说，他们习惯于将 `volatile` 类型视为一种简易的原子变量，但实际上它并不是。在内核代码中使用 `volatile` 几乎总是不正确的；本文档解释了原因。

理解 `volatile` 的关键在于它的目的是抑制优化，而这几乎从来不是真正想要做的事情。在内核中，必须保护共享数据结构免受不必要的并发访问，这是一项完全不同的任务。保护数据结构免受并发访问的过程也会以更有效的方式避免几乎所有与优化相关的问题。

像 `volatile` 一样，内核提供的使数据并发访问安全的原语（自旋锁、互斥锁、内存屏障等）也是设计用来防止不必要的优化的。如果这些原语被正确使用，则无需再使用 `volatile`。如果仍然需要使用 `volatile`，则代码中很可能存在错误。在正确编写的内核代码中，`volatile` 只会减慢程序运行速度。

考虑一段典型的内核代码：

```c
spin_lock(&the_lock);
do_something_on(&shared_data);
do_something_else_with(&shared_data);
spin_unlock(&the_lock);
```

如果所有代码都遵循锁定规则，则当持有 `the_lock` 锁时，`shared_data` 的值不会意外改变。任何可能想要操作该数据的其他代码都会等待锁。自旋锁原语充当内存屏障——它们是明确为此目的编写的——这意味着数据访问不会被优化跨越它们。因此，编译器可能会认为它知道 `shared_data` 中的内容，但由于 `spin_lock()` 调用本身就是一个内存屏障，它会迫使编译器忘记之前所知的一切。因此，对该数据的访问不会出现优化问题。

即使 `shared_data` 被声明为 `volatile`，锁定仍然是必要的。但编译器也会被阻止优化临界区内的 `shared_data` 访问，而我们知道此时没有其他代码在操作它。在持有锁期间，`shared_data` 不是 `volatile` 的。在处理共享数据时，正确的锁定使得 `volatile` 成为不必要的，并且可能是有害的。

`volatile` 存储类最初是为内存映射的 I/O 寄存器设计的。在内核中，寄存器访问也应受到锁的保护，但同样不希望编译器在临界区内“优化”寄存器访问。但在内核中，I/O 内存访问始终通过访问函数完成；直接通过指针访问 I/O 内存是不推荐的做法，并且在所有架构上都无法工作。这些访问函数是为了防止不必要的优化，因此，再次证明 `volatile` 是不必要的。

另一种可能使用 `volatile` 的情况是处理器在忙等待一个变量的值。正确的忙等待方法如下：

```c
while (my_variable != what_i_want)
    cpu_relax();
```

`cpu_relax()` 调用可以降低 CPU 功耗或让出超线程双处理器；它同时也作为编译器屏障，因此，再一次，`volatile` 是不必要的。当然，忙等待通常是一种反社会的行为。

尽管如此，在内核中仍然有一些罕见的情况适合使用 `volatile`：

- 上述提到的访问函数可能会在那些支持直接 I/O 内存访问的架构上使用 `volatile`。基本上，每次访问调用都成为一个独立的小临界区，并确保访问按照程序员预期进行。
- 修改内存的内联汇编代码，如果没有其他可见的副作用，可能会被 GCC 删除。在 asm 语句中添加 `volatile` 关键字可以防止这种删除。
- `jiffies` 变量是一个特例，每次引用时其值可能不同，但可以无需特殊锁定即可读取。因此 `jiffies` 可以是 `volatile` 的，但强烈反对添加其他此类变量。`jiffies` 在这方面被认为是一个“愚蠢的历史遗留问题”（Linus 的话）；修复它比它带来的麻烦更大。
### 指向连贯内存中数据结构的指针有时可以合法地声明为易变（volatile）。例如，网络适配器使用的环形缓冲区，其中适配器会更改指针以指示哪些描述符已被处理，这就是一种需要使用易变变量的情况。

对于大多数代码来说，上述关于使用易变变量的理由都不适用。因此，使用易变变量很可能被视为一个错误，并且会引起对代码的额外审查。那些倾向于使用易变变量的开发人员应该退一步思考他们真正想要实现的目标。

移除易变变量的补丁通常是受欢迎的——前提是这些补丁附有充分的理由，证明并发问题已经得到了妥善考虑。

### 参考资料
1. [https://lwn.net/Articles/233481/](https://lwn.net/Articles/233481/)
2. [https://lwn.net/Articles/233482/](https://lwn.net/Articles/233482/)

### 致谢
最初的动议和研究由 Randy Dunlap 提出。

由 Jonathan Corbet 撰写。

通过 Satyam Sharma、Johannes Stezenbach、Jesper Juhl、Heikki Orsila、H. Peter Anvin、Philipp Hahn 和 Stefan Richter 的评论进行了改进。
