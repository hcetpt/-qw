=============================================
Linux 电压和电流调节器框架
=============================================

关于
=====

此框架旨在提供一个标准的内核接口来控制电压和电流调节器。其目的是允许系统动态地控制调节器的功率输出，以节省电力并延长电池寿命。这适用于电压调节器（可以控制电压输出）和电流负载（可以控制电流限制）。
(C) 2008 Wolfson Microelectronics PLC
作者：Liam Girdwood <lrg@slimlogic.co.uk>

术语说明
============

本文档中使用的一些术语：

  - 调节器
                 - 向其他设备供电的电子设备
大多数调节器可以启用或禁用其输出，而有些可以控制其输出电压和/或电流
输入电压 -> 调节器 -> 输出电压

  - PMIC（电源管理集成电路）
                 - 包含多个调节器的集成电路，并且通常还包含其他子系统
- 用电设备
                 - 由调节器供电的电子设备
用电设备可分为两类：-

                   静态：用电设备不会改变其供电电压或电流限制。它只需要启用或禁用其电源供应。其供电电压由硬件、引导程序、固件或内核板初始化代码设置
动态：用电设备需要根据操作需求更改其供电电压或
                   电流限制
- 电源域
                 - 由调节器、开关或其他电源域输出功率供电的电子电路
供电调节器可能位于一个或多个开关之后，例如：

                     调节器 -+-> 开关-1 -+-> 开关-2 --> [消费者 A]
                                |             |
                                |             +-> [消费者 B], [消费者 C]
                                |
                                +-> [消费者 D], [消费者 E]

这意味着有一个调节器和三个供电域：

- 域 1：开关-1，消费者 D 和 E
- 域 2：开关-2，消费者 B 和 C
- 域 3：消费者 A

这表示了一种“供电”关系：

                   域 1 --> 域 2 --> 域 3

一个供电域可能有由其他调节器供电的调节器。例如：

                     调节器-1 -+-> 调节器-2 -+-> [消费者 A]
                                  |
                                  +-> [消费者 B]

这给我们带来了两个调节器和两个供电域：

- 域 1：调节器-2，消费者 B
- 域 2：消费者 A

以及一种“供电”关系：

                   域 1 --> 域 2

- 约束条件
                 - 约束条件用于定义性能和硬件保护所需的供电水平。约束条件存在于三个级别上：

                   调节器级别：这是由调节器硬件操作参数定义的，并在调节器的数据手册中指定。例如：
- 输出电压范围为 800mV 到 3500mV
- 调节器输出电流限制为 5V 时 20mA，但在 10V 时为 10mA
供电域级别：这是通过内核级别的板载初始化代码在软件中定义的。它用于将一个供电域限定在一个特定的供电范围内。例如：
- 域1的电压为3300mV
- 域2的电压从1400mV调整到1600mV
- 域3的电流限制从0mA调整到20mA
消费者级别：这是由消费者驱动程序定义的
动态设置电压或电流限制级别
例如，一个消费者背光驱动程序请求将电流从5mA增加到10mA以提高LCD亮度。这一过程如下：

- 消费者：需要增加LCD亮度。查找并请求亮度表中的下一个电流mA值（该消费者驱动程序可以用于基于同一参考设备的不同特性）
电源域：新的电流限制是否在此域的操作限制内以及当前系统状态（例如电池供电、USB供电）

- 调节器域：新的电流限制是否在调节器输入/输出电压的操作参数范围内
如果调节器请求通过所有约束测试，则应用新的调节器值

设计
====

该框架针对SoC设备进行设计，但可能也适用于非SoC设备，并分为以下四个接口：

1. 消费者驱动接口
此接口使用类似于内核时钟接口的API，消费者驱动程序可以获取和释放调节器（就像现在处理时钟一样），并可以获取/设置电压、电流限制、模式、启用和禁用。这应该允许消费者完全控制其电源电压和电流限制。此外，如果不使用该接口，则不会编译进内核，因此可以在没有基于调节器的电源控制系统的环境中重用驱动程序。
详见Documentation/power/regulator/consumer.rst

2. 调节器驱动接口
此接口允许调节器驱动程序注册其调节器并向核心提供操作。它还包含一个通知链，用于将调节器事件传播给客户端
### 查看文档：`Documentation/power/regulator/regulator.rst`

3. 机器接口
此接口用于特定于机器的代码，允许为每个调节器创建带有约束条件的电压/电流域。它可以提供调节器约束，以防止由于客户端驱动程序中的错误导致过压或过流而损坏设备。它还允许创建一个调节器树，其中一些调节器由其他调节器供电（类似于时钟树）。
请参阅：`Documentation/power/regulator/machine.rst`

4. 用户空间 ABI
该框架还通过 sysfs 向用户空间导出了大量有用的电压/电流/操作模式数据。这可用于帮助监控设备的功耗和状态。
请参阅：`Documentation/ABI/testing/sysfs-class-regulator`
