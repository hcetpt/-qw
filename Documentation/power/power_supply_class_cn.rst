========================
Linux 电源供应类别
========================

概览
~~~~~~~~
电源供应类别用于向用户空间表示电池、UPS、交流或直流电源供应的属性。
它定义了一组核心属性集，这些属性应该适用于（几乎）所有电源供应。这些属性可以通过sysfs和uevent接口获取。
每个属性都有明确的含义，包括使用的度量单位。虽然提供的属性被认为普遍适用于任何电源供应，但特定的监控硬件可能无法提供所有这些属性，因此可以跳过其中任何一个。
电源供应类别是可扩展的，并允许定义驱动程序自身的属性。
核心属性集遵循标准Linux演进（即如果发现某些属性适用于多种电源供应类型或其驱动程序，它可以被添加到核心集）。
它还与LED框架集成，以提供电池充电/完全充电状态以及交流/USB电源供应在线状态的通常预期反馈。（请注意，指示的具体细节（包括是否使用它）完全由用户和/或特定机器默认值控制，这符合LED框架的设计原则。）

属性/特性
~~~~~~~~~~~~~~~~~~~~~
电源供应类别有一组预定义的属性，这消除了跨驱动程序的代码重复。电源供应类别坚持重用其预定义的属性及其单位。
因此，用户空间对于任何类型的电源供应都获得了一组可预测的属性及其单位，并且可以以一致的方式处理/呈现给用户。不同电源供应和机器的结果也是直接可比较的。
请参阅`drivers/power/supply/ds2760_battery.c`了解如何声明和处理属性的示例。
### 引用自 include/linux/power_supply.h：

所有电压、电流、电量、能量、时间和温度的单位，除非另有说明，否则均以微伏（µV）、微安（µA）、微安时（µAh）、微瓦时（µWh）、秒和十分之一摄氏度为单位。驱动程序负责将其原始值转换为本类所使用的单位。

### 属性/属性详解

+--------------------------------------------------------------------------+
|              **电量/能量/容量 —— 如何避免混淆**                           |
+--------------------------------------------------------------------------+
| **由于“电量”（µAh）和“能量”（µWh）都代表电池的“容量”，因此本类区分这两个术语。请勿混淆使用！** |
|                                                                          |
| - `CHARGE_*`                                                             |
|   这些属性仅表示以 µAh 计量的容量。                                   |
| - `ENERGY_*`                                                             |
|   这些属性仅表示以 µWh 计量的容量。                                   |
| - `CAPACITY`                                                             |
|   此属性表示以百分比（从 0 到 100）计量的容量。                       |
+--------------------------------------------------------------------------+

### 后缀

_AVG
  硬件平均值，如果您的硬件确实能够报告平均值，请使用此后缀。
_NOW
  瞬时值。

### 状态
此属性表示运行状态（充电、满电、放电即为供电等）。这对应于 `BATTERY_STATUS_*` 的定义，如 battery.h 中所定义。

### 充电类型
电池通常可以以不同的速率充电。此定义包括涓流充电和快速充电。对于已经充满或正在放电的电池，可以显示‘不适用’（或‘未知’，如果状态未知）。

### 真实性
指示连接到平台的电源供应（电池或充电器）是否真实（1）或非真实（0）。

### 健康状况
表示电池的健康状况，其值对应于 `POWER_SUPPLY_HEALTH_*`，如 battery.h 中定义。

### 电压
- `VOLTAGE_OCV`
  电池的开路电压。
- `VOLTAGE_MAX_DESIGN`, `VOLTAGE_MIN_DESIGN`
  最大和最小电源电压的设计值。
最大/最小电压值是指在正常条件下，当认为电池“充满”/“耗尽”时的电压值。是的，电压与电池容量之间没有直接关系，但一些简单的电池会使用电压来进行大致的容量估算。
电池驱动程序也可以利用这些属性来告知用户空间关于给定电池的最大和最小电压阈值。
- VOLTAGE_MAX, VOLTAGE_MIN：与设计电压值相同，只是这些值应该在硬件只能猜测（测量并保留）给定电源供应的阈值时使用。
- VOLTAGE_BOOT：报告启动期间测量到的电压。
- CURRENT_BOOT：报告启动期间测量到的电流。
- CHARGE_FULL_DESIGN, CHARGE_EMPTY_DESIGN：当认为电池充满/耗尽时的设计充电值。
- ENERGY_FULL_DESIGN, ENERGY_EMPTY_DESIGN：与上述相同，但针对能量。
- CHARGE_FULL, CHARGE_EMPTY：这些属性表示“当电池变为充满/耗尽状态时最后记住的充电值”。它们也可能意味着“在给定条件（温度、年龄）下认为电池充满/耗尽时的充电值”。也就是说，这些属性代表实际阈值，而不是设计值。
- ENERGY_FULL, ENERGY_EMPTY：与上述相同，但针对能量。
- CHARGE_COUNTER：当前的充电计数器（以微安时为单位）。这很容易变成负数；没有空或满的值。它仅适用于基于时间的相对测量。
- PRECHARGE_CURRENT：充电周期预充电阶段中的最大充电电流（通常为电池容量的20%）。
以下是提供的英文术语及其对应的中文翻译：

- **CHARGE_TERM_CURRENT**  
  充电终止电流。当电池电压高于再充电阈值，且充电电流低于此设置（通常为电池容量的10%）时，充电周期结束。
- **CONSTANT_CHARGE_CURRENT**  
  由充电器编程的恒定充电电流。
- **CONSTANT_CHARGE_CURRENT_MAX**  
  电源对象支持的最大充电电流。
- **CONSTANT_CHARGE_VOLTAGE**  
  由充电器编程的恒定充电电压。
- **CONSTANT_CHARGE_VOLTAGE_MAX**  
  电源对象支持的最大充电电压。
- **INPUT_CURRENT_LIMIT**  
  由充电器编程的输入电流限制。指示从充电源抽取的电流。
- **INPUT_VOLTAGE_LIMIT**  
  由充电器编程的输入电压限制。指示从充电源获取的电压限制。
- **INPUT_POWER_LIMIT**  
  由充电器编程的输入功率限制。指示从充电源获取的功率限制。
- **CHARGE_CONTROL_LIMIT**  
  当前的充电控制限值设置。
- **CHARGE_CONTROL_LIMIT_MAX**  
  最大充电控制限值设置。

- **CALIBRATE**  
  电池或库仑计的校准状态。

- **CAPACITY**  
  容量百分比。
- **CAPACITY_ALERT_MIN**  
  最小容量警报值百分比。
### 容量与温度相关参数的中文翻译

- `CAPACITY_ALERT_MAX`  
  最大容量警报值，以百分比表示。

- `CAPACITY_LEVEL`  
  容量级别。这对应于 `POWER_SUPPLY_CAPACITY_LEVEL_*` 中的定义。

- `TEMP`  
  电源的温度。

- `TEMP_ALERT_MIN`  
  最小电池温度警报值。

- `TEMP_ALERT_MAX`  
  最大电池温度警报值。

- `TEMP_AMBIENT`  
  环境温度。

- `TEMP_AMBIENT_ALERT_MIN`  
  最小环境温度警报值。

- `TEMP_AMBIENT_ALERT_MAX`  
  最大环境温度警报值。

- `TEMP_MIN`  
  最小可操作温度。

- `TEMP_MAX`  
  最大可操作温度。

- `TIME_TO_EMPTY`  
  电池空电所需秒数（即在电池供电时）。

- `TIME_TO_FULL`  
  电池充满所需秒数（即在电池充电时）。

### 电池与外部电源交互
通常电源同时扮演供应者和请求者的角色，电池就是一个很好的例子。因此，电池通常会关心它们是否处于外部供电状态。
为此，电源类实现了一种通知机制来处理与电池相关的交互情况。
外部电源供应（交流电）在 "supplied_to" 结构成员中列出请求者（电池）的名称，并且由外部电源供应发出的每次 power_supply_changed() 调用都会通过 external_power_changed 回调通知请求者。

设备树电池特性
~~~~~~~~~~~~~~~~~~
驱动程序应调用 power_supply_get_battery_info() 以从设备树的电池节点获取电池特性，该节点定义在 Documentation/devicetree/bindings/power/supply/battery.yaml 中。这是在 drivers/power/supply/bq27xxx_battery.c 中实现的。
在 struct power_supply_battery_info 中的属性及其在电池节点中的对应项具有与 enum power_supply_property 中元素相对应的名称，以确保 sysfs 属性和电池节点属性之间的命名一致性。

QA
~~

问：
   在哪里可以找到 POWER_SUPPLY_PROP_XYZ 属性？
答：
   如果你找不到适合你的驱动需求的属性，请随时添加它并随同你的驱动一起提交补丁。
目前可用的属性是当前驱动程序提供的那些属性。
将来可能增加的好候选属性包括：型号/部件号、循环时间、制造商等。

问：
   我有一些非常特定的属性（例如电池颜色），我应该将这个属性添加到标准属性中吗？
答：
   大多数情况下，不需要。如果这种属性有用，它可以放在驱动程序本身中。当然，如果所讨论的属性适用于许多驱动程序提供的大量电池，并且/或来自某些通用的电池规格/标准，则它可能是添加到核心属性集的一个候选。

问：
   假设我的电池监控芯片/固件不提供百分比容量，而是提供 charge_{now,full,empty}。我是否需要手动计算百分比容量并在驱动程序内部注册 CAPACITY 属性？同样的问题也适用于 time_to_empty/time_to_full。
答：
   大多数情况下，不需要。本类旨在导出特定硬件可直接测量的属性。
使用一些启发式方法或数学模型推断不可用的属性不是电池驱动程序的工作内容。这种功能应该被分离出来，实际上，apm_power 驱动（用于在 power supply 类上提供传统的 APM API）使用了一个简单的启发式方法来根据电池的电量、电流、电压等来近似剩余电池容量。但是，一个完整的电池模型很可能根本就不是内核的一部分，因为它需要进行浮点运算来处理微分方程和卡尔曼滤波器之类的问题。这更适合由 batteryd/libbattery 来处理，而 batteryd/libbattery 尚未编写。
您没有提供需要翻译的文本。请提供需要翻译成中文的英文或其他语言的文本。
