========================
Linux 电源供应类
========================

概览
~~~~~~~~
电源供应类用于向用户空间表示电池、UPS、交流或直流电源的属性。
它定义了一套核心属性集，这套属性应该适用于（几乎）所有电源供应设备。这些属性可以通过sysfs和uevent接口访问。
每个属性都有明确的含义，包括使用的测量单位。虽然提供的属性被认为可以普遍适用于任何电源供应设备，但特定的监控硬件可能无法提供所有属性，因此其中任何一个属性都可以被省略。
电源供应类是可扩展的，并允许定义驱动程序自身的属性。
核心属性集受标准Linux演进的影响（即如果发现某些属性适用于许多类型的电源供应设备或其驱动程序，它可以被添加到核心集）。
它还与LED框架集成，以提供通常预期的反馈，例如电池充电/完全充电状态以及交流/USB电源在线状态。（注意，指示的具体细节（包括是否使用它）完全由用户和/或特定机器默认设置控制，遵循LED框架的设计原则）
属性/特性
~~~~~~~~~~~~~~~~~~~~~
电源供应类有一套预定义的属性，这消除了跨驱动程序的代码重复。电源供应类坚持重用其预定义的属性及其单位。
因此，用户空间对于任何类型的电源供应都能得到一组可预测的属性及其单位，可以以一致的方式处理/向用户展示它们。不同电源供应和机器的结果也是直接可比较的。
参见drivers/power/supply/ds2760_battery.c，了解如何声明和处理属性的示例。
翻译如下：

单位
~~~~~
引用自include/linux/power_supply.h：

所有电压、电流、电量、能量、时间和温度的单位，除非另有说明，均以微伏（μV）、微安（μA）、毫安时（μAh）、微瓦时（μWh）、秒和十分之一摄氏度为单位。将原始值转换为此类操作单位是驱动程序的任务。
详细属性/特性
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+--------------------------------------------------------------------------+
|               **电量/能量/容量 - 如何避免混淆**                          |
+--------------------------------------------------------------------------+
| **由于“电量”（μAh）和“能量”（μWh）都表示电池的“容量”，           |
| 此类区分了这些术语。请勿混淆它们！**                                     |
|                                                                          |
| - `CHARGE_*`                                                             |
|   属性仅表示以μAh为单位的容量。                                         |
| - `ENERGY_*`                                                             |
|   属性仅表示以μWh为单位的容量。                                         |
| - `CAPACITY`                                                             |
|   属性表示以百分比（从0到100）形式的容量。                             |
+--------------------------------------------------------------------------+

后缀：

_AVG
  硬件平均值，如果你的硬件确实能够报告平均值，请使用它。
_NOW
  即时/瞬时值
STATUS
  此属性代表运行状态（充电、满电、放电即供电给负载等）。这对应于在battery.h中定义的`BATTERY_STATUS_*`值。
CHARGE_TYPE
  电池通常可以以不同的速率充电。
此定义了涓流和快速充电。对于已充满或正在放电的电池，可显示'不适用'（或如果状态未知则显示'未知'）。
AUTHENTIC
  指示连接到平台的电源供应（电池或充电器）是否为正版（1）或非正版（0）。
HEALTH
  表示电池的健康状况，其值与在battery.h中定义的`POWER_SUPPLY_HEALTH_*`相对应。
VOLTAGE_OCV
  电池的开路电压。
VOLTAGE_MAX_DESIGN, VOLTAGE_MIN_DESIGN
  最大和最小电源电压的设计值。
最大/最小电压值表示在正常条件下，当电池被认为是“满电”/“空电”时的电压值。确实，电压与电池容量之间没有直接关系，但一些简单的电池会使用电压来进行容量的大致估算。

电池驱动程序也可以使用这个属性，仅仅是为了告知用户空间关于特定电池的最大和最小电压阈值。

VOLTAGE_MAX, VOLTAGE_MIN
这些值与设计电压相同，不同之处在于如果硬件只能猜测（测量并保留）给定电源供应的阈值，那么应使用这些值。

VOLTAGE_BOOT
报告启动期间测量到的电压。

CURRENT_BOOT
报告启动期间测量到的电流。

CHARGE_FULL_DESIGN, CHARGE_EMPTY_DESIGN
当电池被认为是满电/空电时的设计充电值。

ENERGY_FULL_DESIGN, ENERGY_EMPTY_DESIGN
与上述相同，但针对能量。

CHARGE_FULL, CHARGE_EMPTY
这些属性意味着“电池变为满电/空电时最后记住的充电值”。它也可能意味着“在给定条件（温度、年龄）下，当电池被认为是满电/空电时的充电值”。也就是说，这些属性代表的是实际阈值，而不是设计值。

ENERGY_FULL, ENERGY_EMPTY
与上述相同，但针对能量。

CHARGE_COUNTER
当前的充电计数器（以微安时为单位）。这很容易是负数；没有空或满的值。它只适用于基于时间的相对测量。

PRECHARGE_CURRENT
充电周期预充阶段的最大充电电流（通常为电池容量的20%）。
以下是给定英文术语的中文翻译：

- CHARGE_TERM_CURRENT：充电终止电流。当电池电压高于再充电阈值，且充电电流低于此设定时（通常为电池容量的10%），充电周期结束。
- CONSTANT_CHARGE_CURRENT：由充电器编程的恒定充电电流。
- CONSTANT_CHARGE_CURRENT_MAX：电源对象支持的最大充电电流。
- CONSTANT_CHARGE_VOLTAGE：由充电器编程的恒定充电电压。
- CONSTANT_CHARGE_VOLTAGE_MAX：电源对象支持的最大充电电压。
- INPUT_CURRENT_LIMIT：由充电器编程的输入电流限制。指示从充电源抽取的电流。
- INPUT_VOLTAGE_LIMIT：由充电器编程的输入电压限制。指示来自充电源的电压限制。
- INPUT_POWER_LIMIT：由充电器编程的输入功率限制。指示来自充电源的功率限制。
- CHARGE_CONTROL_LIMIT：当前的充电控制限制设置。
- CHARGE_CONTROL_LIMIT_MAX：最大充电控制限制设置。

- CALIBRATE：电池或库仑计的校准状态。

- CAPACITY：容量百分比。
- CAPACITY_ALERT_MIN：容量警报最小值，以百分比表示。
以下是给定文本的中文翻译：

CAPACITY_ALERT_MAX  
电源容量警报的最大值，以百分比表示。

CAPACITY_LEVEL  
电源容量水平。这对应于POWER_SUPPLY_CAPACITY_LEVEL_*中的内容。

TEMP  
电源的温度。

TEMP_ALERT_MIN  
电池温度的最小警戒值。

TEMP_ALERT_MAX  
电池温度的最大警戒值。

TEMP_AMBIENT  
环境温度。

TEMP_AMBIENT_ALERT_MIN  
环境温度的最小警戒值。

TEMP_AMBIENT_ALERT_MAX  
环境温度的最大警戒值。

TEMP_MIN  
可操作的最低温度。

TEMP_MAX  
可操作的最高温度。

TIME_TO_EMPTY  
电池被视为空之前剩余的秒数（即，在电池为负载供电时）。

TIME_TO_FULL  
电池被视为充满前剩余的秒数（即，在电池充电时）。

电池与外部电源之间的交互
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
电源通常同时扮演供应者和请求者的角色。电池就是一个很好的例子。因此，电池通常会关心它们是否由外部电源供电。
在这种情况下，电源类实现了通知机制来处理与电池的交互。
外部电源供应(交流电)在"supplied_to"结构成员中列出请求者(电池)的名称，外部电源供应发出的每个power_supply_changed()调用将通过external_power_changed回调通知请求者。

设备树电池特性
~~~~~~~~~~~~~~~~~~~~
驱动程序应调用power_supply_get_battery_info()以从设备树电池节点获取电池特性，该节点在Documentation/devicetree/bindings/power/supply/battery.yaml中定义。这是在drivers/power/supply/bq27xxx_battery.c中实现的。
在struct power_supply_battery_info中的属性及其在电池节点中的对应项具有与enum power_supply_property元素相对应的名称，以保持sysfs属性和电池节点属性命名的一致性。

问答
~~

问：
   我在哪里可以找到POWER_SUPPLY_PROP_XYZ属性？
答：
   如果你找不到适合你的驱动需求的属性，请随意添加它，并与你的驱动一起提交补丁
目前提供的属性是当前由编写的各种驱动程序所提供的。

未来可能添加的良好候选属性：型号/部件号，循环时间，制造商等。

问：
   我有一些非常具体的属性（例如，电池颜色），我应该将这个属性添加到标准属性中吗？
答：
   大多数情况下，不需要。如果这种属性有用，可以将其放在驱动程序本身。当然，如果所讨论的属性适用于许多驱动程序提供的大量电池，和/或来自某种通用的电池规范/标准，那么它可能是添加到核心属性集的候选者。

问：
   假设我的电池监控芯片/固件不提供百分比容量，但提供charge_{now,full,empty}。我是否应该在驱动程序内部手动计算百分比容量，并注册CAPACITY属性？对于time_to_empty/time_to_full也存在同样的问题。
答：
   大多数情况下，不需要。此类别设计用于导出特定硬件可直接测量的属性。

使用一些启发式方法或数学模型推断不可用的属性不是电池驱动程序的工作范围。此类功能应该被分离出来，实际上，apm_power，用于在power supply类上为旧APM API服务的驱动程序，使用了一个简单的启发式方法，根据电池的充电量、电流、电压等来近似剩余容量。但是，完整的电池模型很可能根本不属于内核的范畴，因为它需要浮点计算来处理微分方程和卡尔曼滤波器之类的事情。这更适合由batteryd/libbattery处理，而batteryd/libbattery尚待编写。
你没有给出需要翻译的句子或词语，所以我无法为你提供具体的翻译。请提供需要翻译的内容，我将很乐意帮助你。例如，如果你需要翻译"Hello, how are you?"，那么中文翻译就是“你好，你怎么样？”。

如果你是想让我用中文描述我是如何作为一个助手的，那么可以这样表达：“作为一名助手，我的目标是帮助用户解决他们的问题和需求。无论是提供信息、提供建议还是执行任务，我都尽力以最有效和准确的方式为用户提供支持。”
