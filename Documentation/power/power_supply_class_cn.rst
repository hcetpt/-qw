========================
Linux 电源供应类
========================

概述
~~~~~~~~
电源供应类用于向用户空间表示电池、UPS、交流或直流电源的属性。
它定义了一组核心属性，这些属性适用于（几乎）所有电源。这些属性可以通过sysfs和uevent接口访问。
每个属性都有明确的意义，包括使用的单位。虽然提供的属性被认为普遍适用于任何电源，但特定的监控硬件可能无法提供所有属性，因此可以跳过其中任何一个。
电源供应类是可扩展的，允许定义驱动程序自身的属性。
核心属性集遵循标准Linux演进（即如果发现某个属性适用于多种电源类型或其驱动程序，则可以将其添加到核心集中）。
它还与LED框架集成，以便提供典型的电池充电/完全充电状态反馈及交流/USB电源在线状态。（注意：指示的具体细节（包括是否使用）完全由用户和/或特定机器默认设置控制，符合LED框架的设计原则）

属性/特性
~~~~~~~~~~~~~~~~~~~~~
电源供应类有一组预定义的属性，这消除了跨驱动程序的代码重复。电源供应类坚持重用其预定义的属性及其单位。
因此，用户空间对于任何类型的电源都能获得一组可预测的属性及其单位，并且能够以一致的方式处理/呈现给用户。不同电源和机器的结果也是直接可比较的。
参见drivers/power/supply/ds2760_battery.c，了解如何声明和处理属性的示例。
单位
~~~~~
引用 include/linux/power_supply.h：

  所有电压、电流、电量、能量、时间和温度的单位，除非另有说明，否则都以微伏（µV）、微安（µA）、微安时（µAh）、微瓦时（µWh）、秒和十分之一摄氏度为单位。驱动程序应负责将其原始值转换为本类所使用的单位。
属性/特性详细说明
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+--------------------------------------------------------------------------+
|               **电量/能量/容量 - 如何不混淆**                                |
+--------------------------------------------------------------------------+
| **由于“电量”（µAh）和“能量”（µWh）都表示电池的“容量”，本类区分这些术语。请不要混淆它们！**      |
|                                                                          |
| - `CHARGE_*`                                                             |
|   这些属性仅表示以 µAh 为单位的容量。                                  |
| - `ENERGY_*`                                                             |
|   这些属性仅表示以 µWh 为单位的容量。                                  |
| - `CAPACITY`                                                             |
|   此属性表示以百分比形式的容量，范围从 0 到 100。                      |
+--------------------------------------------------------------------------+

后缀：

_AVG
  *硬件* 平均值，如果你的硬件确实能够报告平均值，请使用此后缀。
_NOW
  瞬时值。

STATUS
  此属性表示操作状态（充电、充满、放电等）。这对应于在 battery.h 中定义的 `BATTERY_STATUS_*` 值。
CHARGE_TYPE
  电池通常可以以不同的速率充电。这定义了涓流充电和快速充电。对于已充满或正在放电的电池，可以显示 ‘n/a’ （或如果状态未知，则显示 ‘unknown’）。
AUTHENTIC
  表示连接到平台的电源供应（电池或充电器）是否是正品（1）或非正品（0）。
HEALTH
  表示电池的健康状况，值对应于在 battery.h 中定义的 `POWER_SUPPLY_HEALTH_*`。
VOLTAGE_OCV
  电池的开路电压。
VOLTAGE_MAX_DESIGN, VOLTAGE_MIN_DESIGN
  最大和最小电源电压的设计值。
最大/最小电压值是指在正常条件下，电池被认为是“满电”/“空电”时的电压值。是的，电压与电池容量之间没有直接关系，但某些简单的电池会使用电压来进行粗略的容量估算。
电池驱动程序也可以使用这个属性来告知用户空间（userspace）给定电池的最大和最小电压阈值。
VOLTAGE_MAX, VOLTAGE_MIN
这些值与设计电压值相同，只是当硬件只能猜测（测量并保留）给定电源的阈值时，应使用这些值。
VOLTAGE_BOOT
报告启动期间测量的电压值。
CURRENT_BOOT
报告启动期间测量的电流值。
CHARGE_FULL_DESIGN, CHARGE_EMPTY_DESIGN
这是电池被认为满电/空电时的设计充电值。
ENERGY_FULL_DESIGN, ENERGY_EMPTY_DESIGN
与上述相同，但针对能量。
CHARGE_FULL, CHARGE_EMPTY
这些属性表示“上次记住的电池满电/空电时的充电值”。它们也可能表示“在给定条件（温度、年龄）下，电池被认为是满电/空电时的充电值”。
也就是说，这些属性代表的是实际阈值，而不是设计值。
ENERGY_FULL, ENERGY_EMPTY
与上述相同，但针对能量。
CHARGE_COUNTER
当前的充电计数器（以微安时µAh为单位）。这个值很容易是负数；没有空或满的值。它仅适用于相对的时间基础测量。
PRECHARGE_CURRENT
预充电阶段中的最大充电电流（通常是电池容量的20%）。
CHARGE_TERM_CURRENT  
充电终止电流。当电池电压高于再充电阈值，且充电电流低于此设置时（通常是电池容量的10%），充电周期终止。

CONSTANT_CHARGE_CURRENT  
恒定充电电流由充电器编程设定。

CONSTANT_CHARGE_CURRENT_MAX  
电源对象支持的最大充电电流。

CONSTANT_CHARGE_VOLTAGE  
恒定充电电压由充电器编程设定。

CONSTANT_CHARGE_VOLTAGE_MAX  
电源对象支持的最大充电电压。

INPUT_CURRENT_LIMIT  
输入电流限制由充电器编程设定。指示从充电源抽取的电流。

INPUT_VOLTAGE_LIMIT  
输入电压限制由充电器编程设定。指示从充电源的电压限制。

INPUT_POWER_LIMIT  
输入功率限制由充电器编程设定。指示从充电源的功率限制。

CHARGE_CONTROL_LIMIT  
当前的充电控制限制设置。

CHARGE_CONTROL_LIMIT_MAX  
最大充电控制限制设置。

CALIBRATE  
电池或库仑计的校准状态。

CAPACITY  
容量百分比。

CAPACITY_ALERT_MIN  
最低容量警报值（百分比）。
### CAPACITY_ALERT_MAX
最大容量警报值（百分比）

### CAPACITY_LEVEL
容量级别。这对应于 `POWER_SUPPLY_CAPACITY_LEVEL_*`

### TEMP
电源的温度

### TEMP_ALERT_MIN
电池最低温度警报

### TEMP_ALERT_MAX
电池最高温度警报

### TEMP_AMBIENT
环境温度

### TEMP_AMBIENT_ALERT_MIN
最低环境温度警报

### TEMP_AMBIENT_ALERT_MAX
最高环境温度警报

### TEMP_MIN
最低可操作温度

### TEMP_MAX
最高可操作温度

### TIME_TO_EMPTY
电池剩余时间（秒），直到被认为完全放电（即在电池供电时）

### TIME_TO_FULL
电池充满所需时间（秒）（即在电池充电时）

---

### 电池与外部电源的交互
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
通常，电源同时作为供电源和受电设备。电池就是一个很好的例子。因此，电池通常会关心是否处于外部供电状态。
为此，电源类实现了通知机制来处理电池的情况。
外部电源（交流电）在 "supplied_to" 结构成员中列出被供电设备（电池）的名称，并且每次外部电源调用 power_supply_changed() 时，会通过 external_power_changed 回调通知这些被供电设备。

设备树电池特性
~~~~~~~~~~~~~~~~~~~~~~~~~
驱动程序应调用 power_supply_get_battery_info() 从设备树的电池节点获取电池特性，该节点定义在 Documentation/devicetree/bindings/power/supply/battery.yaml 中。这是在 drivers/power/supply/bq27xxx_battery.c 中实现的。
struct power_supply_battery_info 中的属性及其在电池节点中的对应属性，其名称与枚举 power_supply_property 中的元素相对应，以保持 sysfs 属性和电池节点属性命名的一致性。

QA
~~

问：
   哪里可以找到 POWER_SUPPLY_PROP_XYZ 属性？
答：
   如果您找不到适合您的驱动需求的属性，请自由添加并随同您的驱动一起提交补丁。
目前可用的属性是现有驱动提供的那些属性。
未来可以添加的好候选者：型号/部件号、循环时间、制造商等。

问：
   我有一个非常具体的属性（例如电池颜色），我应该将这个属性添加到标准属性中吗？
答：
   大多数情况下不需要。如果该属性有用，可以将其放在驱动本身中。当然，如果该属性适用于许多驱动提供的大量电池，或者来自某个通用的电池规格/标准，则可能是添加到核心属性集的候选者。

问：
   假设我的电池监控芯片/固件不提供百分比容量，而是提供 charge_{now,full,empty}。我是否需要在驱动内部手动计算百分比容量并注册 CAPACITY 属性？同样的问题也适用于 time_to_empty/time_to_full。
答：
   大多数情况下不需要。这个类设计用于导出特定硬件可以直接测量的属性。
使用一些启发式方法或数学模型推断不可用的属性不是电池驱动的工作内容。这种功能应该被分离出来，实际上，apm_power 驱动（用于在 power supply 类之上提供传统的 APM API）使用一个简单的启发式方法来近似剩余电池容量，基于其电量、电流、电压等。但是完整的电池模型可能根本不是内核的主题，因为它需要处理像微分方程和卡尔曼滤波器这样的问题，这更适合由 batteryd/libbattery 来处理，而后者尚未编写。
当然，请提供您需要翻译的文本。
