如何使s2ram正常工作
========================

2006 Linus Torvalds
2006 Pavel Machek

1) 访问suspend.sf.net，其中的s2ram程序有一个长长的“已知兼容”机器白名单，
   以及针对每种机器的技巧。
2) 如果这没有帮助，尝试阅读tricks.txt和video.txt。也许问题只是某个模块损坏，
   简单地卸载模块可能就能解决。
3) 你可以使用Linus的TRACE_RESUME基础设施，如下所述。
使用TRACE_RESUME
~~~~~~~~~~~~~~~~~~

我一直在努力让我的机器能够进行STR（Suspend To RAM），而几乎总是驱动程序的问题。感谢上帝有挂起/恢复的调试功能——Chuck试图禁用的东西。这通常是调试这些事情的唯一方式，并且实际上相当强大（但耗时——需要在不恢复的设备驱动中插入TRACE_RESUME()标记，然后重新编译和重启）。

对于感兴趣的人（即拥有一台无法正确恢复的机器）来说，调试的方法是：

- 启用PM_DEBUG和PM_TRACE。

- 使用类似下面的脚本进行挂起操作： 

   ```
   #!/bin/sh
   sync
   echo 1 > /sys/power/pm_trace
   echo mem > /sys/power/state
   ```

- 如果它没有恢复（这通常是问题所在），通过长按电源键来重启，然后查看dmesg输出，寻找如下信息：

   ```
   Magic number: 4:156:725
   hash matches drivers/base/power/resume.c:28
   hash matches device 0000:01:00.0
   ```

   这意味着最后一个跟踪事件发生在尝试恢复设备0000:01:00.0之前。然后确定控制该设备的驱动程序（lspci和/sys/devices/pci*会帮上忙），看看是否可以修复、禁用或追踪其恢复函数。

如果没有任何设备与哈希匹配（或者任何匹配看起来都是误报），那么问题可能是由一个可加载内核模块中的设备引起的，该模块在检查哈希后才被加载。你可以在更多模块加载后使用sysfs再次检查哈希与当前设备的匹配情况：

```
cat /sys/power/pm_trace_dev_match
```

例如，在我的EVO笔记本上，上面的例子是VGA设备，我曾经使用“radeonfb”（它是一块ATI Radeon移动显卡）。结果发现，“radeonfb”根本无法恢复那个设备——它尝试设置PLLs，然后就卡住了。使用常规的VGA控制台并让X服务器恢复它反而工作得很好。

注释
====
pm_trace使用系统的实时时钟（RTC）来保存魔数，原因是RTC是在恢复操作期间唯一可靠可用的硬件部分，可以在其中设置一个能经受住重启的值。
pm_trace与异步挂起不兼容，因此它会关闭异步挂起（这可能绕过与时间顺序敏感的bug有关的问题）。
后果是，即使恢复成功后，你的系统时钟将具有对应于魔数的值，而不是正确的日期/时间！因此，在使用此跟踪选项时，建议使用如ntp-date或rdate之类的程序从外部时间源重置正确的日期/时间。
随着时钟持续运行，同样重要的是，在恢复失败后需要迅速重启。跟踪选项并不使用RTC（实时时钟）的秒数或分钟的低位比特，但是过长的延迟会破坏神奇值。

这里的“神奇值”可能指的是在特定上下文中用于标识或验证的特殊值，其完整性对于系统操作至关重要。在上下文中，这可能意味着如果延迟过长，该值可能会改变或失效，导致系统无法正确识别或处理某些状态。
