如何使 s2ram 正常工作
========================

2006 Linus Torvalds  
2006 Pavel Machek

1) 访问 suspend.sf.net，其中的 s2ram 程序有一个很长的“已知兼容”机器名单，
   以及针对每种机器的调试技巧。
2) 如果这没有帮助，尝试阅读 tricks.txt 和 video.txt。也许问题很简单，只是一个损坏的模块，
   通过简单地卸载该模块就可以解决。
3) 您可以使用 Linus 的 TRACE_RESUME 架构，如下所述。

使用 TRACE_RESUME
~~~~~~~~~~~~~~~~~~

我一直在努力使我的机器能够进入 STR（挂起到 RAM）状态，而几乎总是驱动程序存在问题。感谢上帝提供了挂起/恢复调试功能 —— 这正是 Chuck 曾试图禁用的功能。这往往是调试这类问题的唯一方法，并且它实际上非常强大（但耗时 —— 需要在不恢复的设备驱动程序中插入 TRACE_RESUME() 标记，然后重新编译和重启系统）。
无论如何，对于有兴趣的人（即那些拥有一台无法正常挂起的机器的人），调试的方法是：

- 启用 PM_DEBUG 和 PM_TRACE 功能。

- 使用类似下面的脚本进行挂起操作：  

	```sh
	#!/bin/sh
	sync
	echo 1 > /sys/power/pm_trace
	echo mem > /sys/power/state
	```

- 如果机器无法正常恢复（这通常是问题所在），请按住电源按钮强制重启，并查看 dmesg 输出，寻找如下信息：  

	```
	Magic number: 4:156:725
	hash matches drivers/base/power/resume.c:28
	hash matches device 0000:01:00.0
	```

   这表明最后的跟踪事件发生在尝试恢复设备 0000:01:00.0 之前。然后确定哪个驱动程序控制着这个设备（可以使用 lspci 和 /sys/devices/pci* 来查找），并尝试修复、禁用或追踪其恢复函数。
   
如果没有任何设备与哈希值匹配（或者所有匹配似乎都是误报），则问题可能是由一个未加载的可加载内核模块中的设备引起的。您可以在加载更多模块后再次检查哈希值与当前设备的匹配情况，使用 sysfs 中的命令：  

   ```sh
   cat /sys/power/pm_trace_dev_match
   ```

例如，在我的 EVO 上面，上述情况恰好对应的是 VGA 设备，我以前使用 "radeonfb"（它是一个 ATI Radeon Mobility 显卡）。事实证明 "radeonfb" 无法恢复那个设备 —— 它试图设置 PLL，然后就挂起。使用常规的 VGA 控制台并让 X 服务器来恢复它反而工作得很好。

**注释**
====
pm_trace 使用系统的实时时钟 (RTC) 来保存魔数。
原因是 RTC 是在恢复操作期间唯一可靠可用的硬件部分，可以在其中设置一个能经受重启的值。
pm_trace 与异步挂起不兼容，因此它会关闭异步挂起功能（这可能绕过某些与定时或顺序相关的 bug）。
结果是即使恢复成功，您的系统时间也会变成魔数对应的值，而不是正确的日期和时间！因此建议使用像 ntp-date 或 rdate 这样的程序从外部时间源重置正确的日期和时间，当使用此跟踪选项时。
随着时钟持续计时，重启操作也必须在恢复失败后迅速完成。跟踪（trace）选项并未使用RTC（实时时钟）的秒或分钟的低位比特，但过长的延迟会导致神奇值（magic value）被破坏。
