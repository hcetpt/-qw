如何使 s2ram 正常工作
========================

2006 Linus Torvalds  
2006 Pavel Machek

1) 访问 suspend.sf.net，那里的 s2ram 程序有一个很长的“已知可用”机器列表，并且针对每台机器都有相应的技巧。
2) 如果这没有帮助，请尝试阅读 tricks.txt 和 video.txt。也许问题很简单，只是一个损坏的模块，卸载该模块就能解决问题。
3) 您可以使用 Linus 的 TRACE_RESUME 架构，如下所述。

使用 TRACE_RESUME
~~~~~~~~~~~~~~~~~~

我一直致力于让我的机器能够进行 STR（Standby To RAM），而几乎每次都是驱动程序有问题。感谢上帝有了 suspend/resume 调试功能——Chuck 曾试图禁用这个功能。这个调试功能通常是调试这些问题的唯一方式，并且实际上非常强大（但耗时——需要在无法恢复的设备驱动程序中插入 TRACE_RESUME() 标记，然后重新编译和重启）。
无论如何，对于那些感兴趣的人来说（即拥有一台无法正常启动的机器），调试的方法是：

- 启用 PM_DEBUG 和 PM_TRACE。

- 使用类似下面的脚本来挂起系统：
```sh
#!/bin/sh
sync
echo 1 > /sys/power/pm_trace
echo mem > /sys/power/state
```

- 如果它无法恢复（这通常是问题所在），请通过按住电源键来重启，并查看 dmesg 输出，查找类似以下的内容：
```
Magic number: 4:156:725
hash matches drivers/base/power/resume.c:28
hash matches device 0000:01:00.0
```

这表明最后的跟踪事件发生在尝试恢复设备 0000:01:00.0 之前。然后确定控制该设备的驱动程序（lspci 和 /sys/devices/pci* 是您的好帮手），并尝试修复、禁用它或跟踪其恢复函数。
如果没有任何设备与哈希值匹配（或者任何匹配似乎都是误报），则问题可能是由一个可加载内核模块中的设备引起的，该模块在检查哈希值之后才加载。您可以在更多模块加载后使用 sysfs 重新检查哈希值：
```
cat /sys/power/pm_trace_dev_match
```

例如，在我的 EVO 上，上面的情况恰好是一个 VGA 设备，我以前使用的是“radeonfb”（这是一个 ATI Radeon Mobility）。结果发现，“radeonfb”根本无法恢复该设备——它试图设置 PLL，但最终只是挂起。使用常规的 VGA 控制台并让 X 服务器恢复它反而能正常工作。

注意
====
pm_trace 使用系统的实时时钟（RTC）来保存魔法数字，原因是 RTC 是在恢复操作期间唯一可靠可用的硬件，可以在其中设置一个能经受重启的值。
pm_trace 不兼容异步挂起，因此它会关闭异步挂起（这可能会解决一些与时间顺序敏感的错误）。
结果是在恢复后（即使恢复成功），您的系统时钟将显示魔法数字而不是正确的日期/时间！因此，在使用此跟踪选项时，建议使用如 ntp-date 或 rdate 这样的程序从外部时间源重置正确的日期/时间。
随着时钟的不断滴答，重启操作也必须在恢复失败后迅速完成。跟踪选项并不使用RTC的秒或分钟的低阶位，但过长的延迟会破坏魔数值。
