Maxim Semiconductor 的 MAX77620 电源管理 IC。

必需属性：
-------------------
- compatible: 必须为以下之一
    "maxim,max77620"
    "maxim,max20024"
    "maxim,max77663"
- reg: I2C 设备地址

可选属性：
-------------------
- interrupts: 控制器所连接的父设备上的中断
- interrupt-controller: 标记该设备节点为一个中断控制器
- #interrupt-cells: 是 <2>，并且其使用方式符合位于 <../interrupt-controller/interrupts.txt> 中描述的 2 单元变体。针对 MAX77620 不同中断源的 IRQ 编号在 dt-bindings/mfd/max77620.h 中定义。
- system-power-controller: 表明此 PMIC 正在控制系统电源，更多详情参见 [1]
[1] 文档/devicetree/bindings/power/power-controller.txt

可选子节点及其属性：
=======================================

灵活的电源序列配置：
--------------------------------------
灵活电源序列器（FPS）允许每个稳压器在硬件或软件控制下上电。此外，每个稳压器可以独立上电或与其他一组稳压器一起上电，并且可以调整上电和断电延迟（序列）。GPIO1、GPIO2 和 GPIO3 可以被编程成为序列的一部分，使得外部稳压器可以与内部稳压器一起进行序列化。32KHz 时钟也可以被编程成为序列的一部分。
灵活的序列结构包括两个硬件使能输入（EN0、EN1），以及三个主序列定时器，称为 FPS0、FPS1 和 FPS2。
每个主序列定时器都可以通过其配置寄存器被编程为具有硬件使能源（EN1 或 EN2）或软件使能源（SW）。当被启用/禁用时，主序列定时器会在不同的时间间隔生成八个序列事件，这些时间间隔被称为槽位。这些槽位之间的时间间隔可以在配置寄存器中进行编程。
每个稳压器、GPIO1、GPIO2、GPIO3 以及 32KHz 时钟都具有一个灵活电源序列从属寄存器，这允许指定其使能源为一个灵活电源序列定时器或一个软件位。当一个由稳压器、GPIO 和时钟组成的 FPS 源指定其使能源为一个灵活电源序列定时器时，可以在稳压器、GPIO 和时钟的灵活电源序列配置寄存器中指定上电和断电延迟。
当FPS事件被清除（设置为低电平）时，在与其灵活序列器配置寄存器相对应的序列事件中，稳压器、GPIO和32KHz时钟将被置于以下状态：

睡眠状态：在此状态下，稳压器、GPIO和32KHz时钟在序列事件中被禁用。

全局低功耗模式(GLPM)：在此状态下，稳压器在序列事件中被设置为低功耗模式。

FPS的配置参数通过子节点“fps”及其子节点提供，专用于FPS。FPS的子节点名称分别为“fps0”、“fps1”和“fps2”，分别对应FPS0、FPS1和FPS2。
FPS配置，如FPS源、稳压器、GPIO和32kHz时钟的上电与断电时段等，均在其各自配置节点中提供，并在相应的子系统DT绑定文档中进行解释。
根据系统状态的不同，需要不同的FPS配置参数，例如从活动状态变为挂起状态或从活动状态变为关机状态。

可选属性：
--------------
-maxim,fps-event-source: u32, FPS事件源，如外部硬件输入到电源管理集成电路(PMIC)，即EN0、EN1或软件(SW)。
这些宏定义在`dt-bindings/mfd/max77620.h`文件中，针对不同的控制源：

- `MAX77620_FPS_EVENT_SRC_EN0` 对应硬件输入引脚EN0
- `MAX77620_FPS_EVENT_SRC_EN1` 对应硬件输入引脚EN1
- `MAX77620_FPS_EVENT_SRC_SW`：用于软件控制
- `maxim,shutdown-fps-time-period-us`：u32 类型，系统进入关机状态时的 FPS 时间周期（微秒）
- `maxim,suspend-fps-time-period-us`：u32 类型，系统进入挂起状态时的 FPS 时间周期（微秒）
- `maxim,device-state-on-disabled-event`：u32 类型，描述 FPS 事件被清除时 PMIC 的状态，是否应该进入睡眠状态或低功耗状态。有效值包括：
  - `MAX77620_FPS_INACTIVE_STATE_SLEEP`：将 PMIC 状态设置为睡眠
  - `MAX77620_FPS_INACTIVE_STATE_LOW_POWER`：将 PMIC 状态设置为低功耗
  如果缺少此属性或其他值，则当 FPS 事件被清除时设备状态不会改变

设备支持的时间周期（微秒）如下：
- `MAX77620` 支持 40、80、160、320、640、1280、2560 和 5120 微秒
- `MAX20024` 支持 20、40、80、160、320、640、1280 和 2540 微秒
- `MAX77663` 支持 20、40、80、160、320、640、1280 和 2540 微秒
- `maxim,power-ok-control`：配置映射电源正常位
  - 1：启用 POK（电源正常）来控制 nRST_IO 和 GPIO1 的 POK 功能
翻译如下：

0: 禁用 POK (Power OK) 控制
如果缺少该属性，则不配置 MPOK 位
如果为 GPIO1/nRST_IO 启用了 POK 映射，则
			只有当所有启用了 POK 控制的电源轨都处于高电平时，
			GPIO1/nRST_IO 引脚才保持高电平状态
如果有任何启用了 POK 控制的电源轨下降，则
			GPIO1/nRST_IO 引脚将变为低电平
此属性仅适用于 max20024
对于不同子模块（如 GPIO、引脚控制、稳压器、电源等）的设备树绑定详情，请参阅各自子系统目录下的相应设备树绑定文档。

示例：
-------
```device_tree
#include <dt-bindings/mfd/max77620.h>

max77620@3c {
	compatible = "maxim,max77620";
	reg = <0x3c>;

	interrupt-parent = <&intc>;
	interrupts = <0 86 IRQ_TYPE_NONE>;

	interrupt-controller;
	#interrupt-cells = <2>;

	fps {
		fps0 {
			maxim,shutdown-fps-time-period-us = <1280>;
			maxim,fps-event-source = <MAX77620_FPS_EVENT_SRC_EN1>;
		};

		fps1 {
			maxim,shutdown-fps-time-period-us = <1280>;
			maxim,fps-event-source = <MAX77620_FPS_EVENT_SRC_EN0>;
		};

		fps2 {
			maxim,shutdown-fps-time-period-us = <1280>;
			maxim,fps-event-source = <MAX77620_FPS_EVENT_SRC_SW>;
		};
	};
};
```

请注意，这里的示例是设备树中的一个片段，用于定义与 max77620 芯片相关的配置。
