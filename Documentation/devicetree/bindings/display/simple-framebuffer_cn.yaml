# SPDX-许可证标识符: GPL-2.0
%YAML 1.2
---
$id: http://devicetree.org/schemas/display/simple-framebuffer.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

标题: 简单的帧缓冲区

维护者:
  - Hans de Goede <hdegoede@redhat.com>

描述: |+
  一个简单的帧缓冲区描述了由固件或启动加载程序设置的帧缓冲区，假定显示硬件已经被配置为从由"reg"属性所指向的内存进行扫描。
由于简单的帧缓冲节点表示运行时信息，它们必须是选定节点(*)的子节点。简单的帧缓冲节点必须命名为framebuffer@<地址>
如果设备树包含用于简单帧缓冲区的显示硬件节点，则简单的帧缓冲节点必须包含一个名为"display"的属性，其中包含指向主要显示硬件节点的phandle，以便操作系统知道在将控制权交给真实硬件驱动程序时禁用哪个简单的帧缓冲区。硬件节点的绑定必须指定哪个节点被认为是主要节点
如果指定了面板节点，则驱动程序使用此节点来配置显示的实际宽度和高度。如果没有给出面板节点，则驱动程序使用简单的帧缓冲节点中的width和height属性来估算它
建议添加display#别名以帮助操作系统确定如何编号。如果使用了display#别名，则如果简单的帧缓冲节点包含"display"属性，则"/aliases/display#"路径必须指向"display"属性所指向的显示硬件节点，否则必须直接指向简单的帧缓冲节点
如果简单的帧缓冲节点代表用户交互的首选控制台，则选定节点的"stdout-path"属性应该指向它，或者指向主要显示硬件节点，如同display#别名一样。如果使用了display别名，则应将其设置为该别名
建议设备树文件包含预填充但禁用的帧缓冲节点，以便固件只需要更新模式信息并启用它们。这样，例如，如果以后支持更多的显示时钟被添加，简单的帧缓冲节点将已经包含这些信息，而不需要更新固件
如果使用了预填充的帧缓冲节点，固件可能需要额外的信息来找到正确的节点。在这种情况下，应该使用额外的平台特定兼容性和平台特定属性，并对其进行记录
属性:
  compatible:
    oneOf:
      - items:
          - enum:
              - apple,simple-framebuffer
              - allwinner,simple-framebuffer
              - amlogic,simple-framebuffer
          - const: simple-framebuffer
      - const: simple-framebuffer

  reg:
    描述: 帧缓冲区内存的位置和大小

  memory-region:
    maxItems: 1
    描述: 指向描述将用于帧缓冲区的内存的节点的phandle。如果存在，将覆盖"reg"属性（如果存在）
clocks:
    描述: 帧缓冲区使用的时钟列表
下面是给定 YAML 配置的中文翻译：

```yaml
power-domains:
    description: 用于帧缓冲区的电源域列表
width:
    $ref: /schemas/types.yaml#/definitions/uint32
    description: 帧缓冲区的像素宽度

height:
    $ref: /schemas/types.yaml#/definitions/uint32
    description: 帧缓冲区的像素高度

stride:
    $ref: /schemas/types.yaml#/definitions/uint32
    description: 帧缓冲区中一行的字节数

format:
    description: >
      帧缓冲区格式：
        * `a1r5g5b5` - 16位像素，d[15]=a, d[14:10]=r, d[9:5]=g, d[4:0]=b
        * `a2r10g10b10` - 32位像素，d[31:30]=a, d[29:20]=r, d[19:10]=g, d[9:0]=b
        * `a8b8g8r8` - 32位像素，d[31:24]=a, d[23:16]=b, d[15:8]=g, d[7:0]=r
        * `a8r8g8b8` - 32位像素，d[31:24]=a, d[23:16]=r, d[15:8]=g, d[7:0]=b
        * `r5g6b5` - 16位像素，d[15:11]=r, d[10:5]=g, d[4:0]=b
        * `r5g5b5a1` - 16位像素，d[15:11]=r, d[10:6]=g, d[5:1]=b d[1:0]=a
        * `r8g8b8` - 24位像素，d[23:16]=r, d[15:8]=g, d[7:0]=b
        * `x1r5g5b5` - 16位像素，d[14:10]=r, d[9:5]=g, d[4:0]=b
        * `x2r10g10b10` - 32位像素，d[29:20]=r, d[19:10]=g, d[9:0]=b
        * `x8r8g8b8` - 32位像素，d[23:16]=r, d[15:8]=g, d[7:0]=b
        * `x8b8g8r8` - 32位像素，d[23:16]=b, d[15:8]=g, d[7:0]=r
    enum:
      - a1r5g5b5
      - a2r10g10b10
      - a8b8g8r8
      - a8r8g8b8
      - r5g6b5
      - r5g5b5a1
      - r8g8b8
      - x1r5g5b5
      - x2r10g10b10
      - x8r8g8b8
      - x8b8g8r8

display:
    $ref: /schemas/types.yaml#/definitions/phandle
    description: 主显示硬件节点

panel:
    $ref: /schemas/types.yaml#/definitions/phandle
    description: 显示面板节点

allwinner,pipeline:
    description: 在 Allwinner 系统级芯片上由帧缓冲区使用的管道
    enum:
      - de_be0-lcd0
      - de_be0-lcd0-hdmi
      - de_be0-lcd0-tve0
      - de_be1-lcd0
      - de_be1-lcd1-hdmi
      - de_fe0-de_be0-lcd0
      - de_fe0-de_be0-lcd0-hdmi
      - de_fe0-de_be0-lcd0-tve0
      - mixer0-lcd0
      - mixer0-lcd0-hdmi
      - mixer1-lcd1-hdmi
      - mixer1-lcd1-tve

amlogic,pipeline:
    description: 在 Amlogic 系统级芯片上由帧缓冲区使用的管道
    enum:
      - vpu-cvbs
      - vpu-hdmi

patternProperties:
  "^[a-zA-Z0-9-]+-supply$":
    $ref: /schemas/types.yaml#/definitions/phandle
    description:
      帧缓冲区使用的稳压器。这些应根据设备设计中的名称命名
required:
  # 此绑定还需要 reg、width、height、stride 和 format，
  # 但通常它们将由引导加载程序填充
- compatible

allOf:
  - if:
      properties:
        compatible:
          contains:
            const: allwinner,simple-framebuffer

    then:
      required:
        - allwinner,pipeline

  - if:
      properties:
        compatible:
          contains:
            const: amlogic,simple-framebuffer

    then:
      required:
        - amlogic,pipeline


additionalProperties: false

examples:
  - |
    / {
        compatible = "foo";
        model = "foo";
        #address-cells = <1>;
        #size-cells = <1>;

        chosen {
            #address-cells = <1>;
            #size-cells = <1>;
            framebuffer0: framebuffer@1d385000 {
                compatible = "allwinner,simple-framebuffer", "simple-framebuffer";
                allwinner,pipeline = "de_be0-lcd0";
                reg = <0x1d385000 3840000>;
                width = <1600>;
                height = <1200>;
                stride = <3200>;
                format = "r5g6b5";
                clocks = <&ahb_gates 36>, <&ahb_gates 43>, <&ahb_gates 44>;
                lcd-supply = <&reg_dc1sw>;
                display = <&lcdc0>;
            };
        };
    };
..
```

这段配置描述了一个帧缓冲区（framebuffer）的属性和要求，并提供了示例。它详细地定义了如何设置和使用帧缓冲区，包括其兼容性、电源管理、显示管道等信息。
