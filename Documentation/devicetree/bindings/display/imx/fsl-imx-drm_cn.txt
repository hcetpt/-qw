Freescale i.MX DRM 主设备
=======================

Freescale i.MX DRM 主设备是一个虚拟设备，用于列出构成图形子系统的所有 IPU 或其他显示接口节点。
必需属性：
- compatible：应为 "fsl,imx-display-subsystem"
- ports：应包含指向 IPU 设备的显示接口端口的句柄列表

示例：

```text
display-subsystem {
	compatible = "fsl,imx-display-subsystem";
	ports = <&ipu_di0>;
};
```

Freescale i.MX IPUv3
====================

必需属性：
- compatible：应为 "fsl,<chip>-ipu" 其中 <chip> 可以是
  - imx51
  - imx53
  - imx6q
  - imx6qp
- reg：应按照数据手册中的说明设置寄存器基址和长度
- interrupts：应包含同步中断和错误中断，顺序如上
- resets：指向系统复位控制器的句柄及其复位行索引，详情参见 reset/fsl,imx-src.txt
对于 fsl,imx6qp-ipu 的额外必需属性：
- fsl,prg：指向与此 IPU 实例关联的 prg 节点的句柄
可选属性：
- port@[0-3]：具有端点定义的端口节点，定义参见 Documentation/devicetree/bindings/media/video-interfaces.txt
端口 0 和 1 应对应于 CSI0 和 CSI1，端口 2 和 3 应分别对应于 DI0 和 DI1

示例：

```text
ipu: ipu@18000000 {
	#address-cells = <1>;
	#size-cells = <0>;
	compatible = "fsl,imx53-ipu";
	reg = <0x18000000 0x080000000>;
	interrupts = <11 10>;
	resets = <&src 2>;

	ipu_di0: port@2 {
		reg = <2>;

		ipu_di0_disp0: endpoint {
			remote-endpoint = <&display_in>;
		};
	};
};
```

Freescale i.MX PRE（预取解析引擎）
==================================

必需属性：
- compatible：应为 "fsl,imx6qp-pre"
- reg：应按照数据手册中的说明设置寄存器基址和长度
- clocks ：指向 PRE axi 时钟输入的句柄，如在 Documentation/devicetree/bindings/clock/clock-bindings.txt 和 Documentation/devicetree/bindings/clock/imx6q-clock.yaml 中所述
- clock-names：应为 "axi"
- interrupts：应包含 PRE 中断
- fsl,iram：指向 mmio-sram 设备节点的句柄，该节点应用于 PRE SRAM 双缓冲

示例：

```text
pre@21c8000 {
	compatible = "fsl,imx6qp-pre";
	reg = <0x021c8000 0x1000>;
	interrupts = <GIC_SPI 90 IRQ_TYPE_EDGE_RISING>;
	clocks = <&clks IMX6QDL_CLK_PRE0>;
	clock-names = "axi";
	fsl,iram = <&ocram2>;
};
```

Freescale i.MX PRG（预取解析衬垫）
==================================

必需属性：
- compatible：应为 "fsl,imx6qp-prg"
- reg：应按照数据手册中的说明设置寄存器基址和长度
- clocks ：指向 PRG ipg 和 axi 时钟输入的句柄，如在 Documentation/devicetree/bindings/clock/clock-bindings.txt 和 Documentation/devicetree/bindings/clock/imx6q-clock.yaml 中所述
- clock-names：应为 "ipg" 和 "axi"
- fsl,pres：指向连接到此 PRG 的 PRE 单元的句柄，固定 PRE 作为第一个条目，随后是可选 PRE

示例：

```text
prg@21cc000 {
	compatible = "fsl,imx6qp-prg";
	reg = <0x021cc000 0x1000>;
	clocks = <&clks IMX6QDL_CLK_PRG0_APB>,
		 <&clks IMX6QDL_CLK_PRG0_AXI>;
	clock-names = "ipg", "axi";
	fsl,pres = <&pre1>, <&pre2>, <&pre3>;
};
```

并行显示支持
=============

必需属性：
- compatible：应为 "fsl,imx-parallel-display"
可选属性：
- interface-pix-fmt：此显示如何连接到显示接口。当前支持的类型："rgb24"、"rgb565"、"bgr666" 和 "lvds666"
- edid：描述连接显示的逐字 EDID 数据块
这段 Device Tree 代码描述了一个显示控制器（`disp0`）及其与输入端口（IPU 显示接口）和输出端口（面板）的连接。下面是这段配置的中文翻译：

- `ddc`: 描述处理显示数据通道的 I²C 总线的节点句柄。

- `port@[0-1]`: 根据 `Documentation/devicetree/bindings/media/video-interfaces.txt` 中定义的端口节点，其中包含了端点定义。端口 0 是连接到 IPU 显示接口的输入端口；端口 1 是连接到面板的输出端口。
  
示例：

```plaintext
disp0 { 
	compatible = "fsl,imx-parallel-display"; 
	edid = [edid-data]; 
	interface-pix-fmt = "rgb24"; 

	port@0 { 
		reg = <0>; 

		display_in: endpoint { 
			remote-endpoint = <&ipu_di0_disp0>; 
		}; 
	}; 

	port@1 { 
		reg = <1>; 

		display_out: endpoint { 
			remote-endpoint = <&panel_in>; 
		}; 
	}; 
}; 

panel { 
	... 
	port { 
		panel_in: endpoint { 
			remote-endpoint = <&display_out>; 
		}; 
	}; 
};
```

- `disp0`: 显示控制器的节点名称。
- `compatible = "fsl,imx-parallel-display";`: 指定此设备兼容的型号为 FSL 的 i.MX 平行显示控制器。
- `edid`: 包含 EDID 数据，这些数据通常用于提供关于显示器的信息，如制造商、最大分辨率等。
- `interface-pix-fmt`: 设置像素格式为 RGB24。
- `port@0` 和 `port@1`: 分别表示输入端口和输出端口。
- `reg = <0>` 和 `reg = <1>`: 定义了端口编号。
- `display_in` 和 `display_out`: 定义了端点，并指定了远程端点。`display_in` 连接到 IPU 显示接口 (`<&ipu_di0_disp0>`), 而 `display_out` 连接到面板 (`<&panel_in>`).
- `panel`: 面板节点，包含与 `display_out` 端口相连的端点定义。
