LVDS 显示桥接器的设备树绑定 (ldb)

LVDS 显示桥接器
==============

LVDS 显示桥接器的设备树节点最多包含两个 `lvds-channel` 节点，描述桥接器中每个 LVDS 编码器通道。

**必需属性**：
- `#address-cells`：应为 `<1>`。
- `#size-cells`：应为 `<0>`。
- `compatible`：应为 `"fsl,imx53-ldb"` 或 `"fsl,imx6q-ldb"`。两种 LDB 版本相似，但 i.MX6 中有一个额外的多路复用器用于选择四个 IPU 显示接口中的任何一个作为每个 LVDS 通道的输入。
- `gpr`：在 i.MX53 和 i.MX6q 上应为 `<&gpr>`。phandle 指向包含 LVDS 控制寄存器的 iomuxc-gpr 区域。
- `clocks`, `clock-names`：指向 LDB 分频器和选择器时钟以及显示接口选择器时钟的 phandle，具体描述参见 `Documentation/devicetree/bindings/clock/clock-bindings.txt`。
  - 在 i.MX53 上期望的时钟有：
    - `"di0_pll"` - LDB LVDS 通道 0 多路复用器
    - `"di1_pll"` - LDB LVDS 通道 1 多路复用器
    - `"di0"` - LDB LVDS 通道 0 门控
    - `"di1"` - LDB LVDS 通道 1 门控
    - `"di0_sel"` - IPU1 DI0 多路复用器
    - `"di1_sel"` - IPU1 DI1 多路复用器
  - 在 i.MX6q 上还需要以下附加时钟：
    - `"di2_sel"` - IPU2 DI0 多路复用器
    - `"di3_sel"` - IPU2 DI1 多路复用器
  - 各自所需的时钟编号记录在 `Documentation/devicetree/bindings/clock/imx5-clock.yaml` 和 `Documentation/devicetree/bindings/clock/imx6q-clock.yaml` 中。

**可选属性**：
- `pinctrl-names`：在 i.MX53 上应为 `"default"`，在 i.MX6q 上不使用。
- `pinctrl-0`：指向 i.MX53 上 LVDS 引脚设置的 phandle，在 i.MX6q 上不使用。
- `fsl,dual-channel`：布尔值。如果存在，则只应配置 LVDS 通道 0 —— 双通道模式下，一个输入将被分配到两个输出上。

LVDS 通道
=========

每个 LVDS 通道都必须包含指向面板设备节点的 of 图形链接或描述连接的 LVDS 显示视频定时的 `display-timings` 节点，以及 `fsl,data-mapping` 和 `fsl,data-width` 属性。

**必需属性**：
- `reg`：应为 `<0>` 或 `<1>`。
- `port`：输入和输出端口节点，其定义遵循 `Documentation/devicetree/bindings/graph.txt` 中的端点定义。
  - 在 i.MX5 上，内部双输入多路复用器被使用。由于硬件限制，每个通道只能使用一个输入端口（`port@[0,1]`）。
  - 在 i.MX6 上，应该有四个输入端口（`port@[0-3]`），对应于四个 LVDS 多路复用器输入。
一个输出端口（i.MX5上的`port@2`，i.MX6上的`port@4`）必须连接到面板的输入端口。如果使用`display-timings`代替，则可以选择性地省略该输出端口。

可选属性（如果使用`display-timings`则为必需）：
- `ddc-i2c-bus`：用于DDC EDID探测的I2C控制器的phandle
- `display-timings`：描述显示时序的节点，具体定义参见`Documentation/devicetree/bindings/display/panel/display-timing.txt`
- `fsl,data-mapping`：应为"spwg"或"jeida"。这描述了颜色位在序列化的LVDS信号中的布局方式。
- `fsl,data-width`：应为`<18>`或`<24>`。

示例：

```dtl
gpr: iomuxc-gpr@53fa8000 {
	/* ... */
};

ldb: ldb@53fa8008 {
	#address-cells = <1>;
	#size-cells = <0>;
	compatible = "fsl,imx53-ldb";
	gpr = <&gpr>;
	clocks = <&clks IMX5_CLK_LDB_DI0_SEL>,
		 <&clks IMX5_CLK_LDB_DI1_SEL>,
		 <&clks IMX5_CLK_IPU_DI0_SEL>,
		 <&clks IMX5_CLK_IPU_DI1_SEL>,
		 <&clks IMX5_CLK_LDB_DI0_GATE>,
		 <&clks IMX5_CLK_LDB_DI1_GATE>;
	clock-names = "di0_pll", "di1_pll",
		      "di0_sel", "di1_sel",
		      "di0", "di1";

	/* 通过of-graph端点链接来连接面板 */
	lvds-channel@0 {
		#address-cells = <1>;
		#size-cells = <0>;
		reg = <0>;

		port@0 {
			reg = <0>;

			lvds0_in: endpoint {
				remote-endpoint = <&ipu_di0_lvds0>;
			};
		};

		port@2 {
			reg = <2>;

			lvds0_out: endpoint {
				remote-endpoint = <&panel_in>;
			};
		};
	};

	/* 使用display-timings和fsl,data-mapping/width代替 */
	lvds-channel@1 {
		#address-cells = <1>;
		#size-cells = <0>;
		reg = <1>;
		fsl,data-mapping = "spwg";
		fsl,data-width = <24>;

		display-timings {
			/* ... */
		};

		port@1 {
			reg = <1>;

			lvds1_in: endpoint {
				remote-endpoint = <&ipu_di1_lvds1>;
			};
		};
	};
};

panel: lvds-panel {
	/* ... */

	port {
		panel_in: endpoint {
			remote-endpoint = <&lvds0_out>;
		};
	};
};
```

这段代码示例展示了如何在设备树中配置i.MX53的LVDS控制器，并通过两种不同的方式连接到LVDS面板：一种是直接通过硬件端口连接，另一种则是通过指定显示时序参数。
