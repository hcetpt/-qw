以下是提供的英文内容的中文翻译：

SPDX 许可证标识符: GPL-2.0

============================================================
设计和编写 Device Tree 绑定时应注意的“要”与“不要”
============================================================

这是一份针对绑定设计中常见的审查反馈项目的列表。每条规则都有例外，绑定存在许多灰色地带。
关于提交补丁的相关指南，请参阅
Documentation/devicetree/bindings/submitting-patches.rst

整体设计
==============

- 要尝试使绑定尽可能完整，即使某些功能当前驱动不支持。例如，如果一个设备有中断，则应包含‘interrupts’属性，即使驱动只支持轮询模式。
- 不要在绑定中提及 Linux 或“设备驱动”。绑定应基于硬件的实际特性，而不是操作系统和驱动程序当前所支持的功能。
- 使用匹配设备类别的节点名称。许多标准名称已在 DT 规范中定义。如果没有合适的名称，请考虑添加一个。
- 确认示例与文档相匹配，特别是在进行了审查更改之后。
- 不要仅仅为了实例化驱动程序而创建节点。多功能设备只有在子节点拥有自己的 DT 资源时才需要子节点。单个节点可以是多个提供者（例如时钟和复位）。
- 不要单独使用 'syscon' 而没有特定的兼容字符串。一个 'syscon' 硬件块应该有一个足够独特的兼容字符串以推断整个块的寄存器布局（至少）。

属性
==========

- 应使 'compatible' 属性具体化。不要在兼容字符串中使用通配符。当设备与先前实现相同或为其中一部分时，使用回退兼容项。如果有新功能或错误，应添加新的兼容项。
- 对于特定于设备的属性名称，使用供应商前缀。考虑这些属性是否可能在同类设备中通用。查看其他类似设备的现有绑定。
- 不要重新定义常见属性。只需引用定义，并定义对设备特定的约束条件。
- 对于具有科学单位的属性，请使用常见的属性单位后缀。
推荐使用的后缀列在
  https://github.com/devicetree-org/dt-schema/blob/main/dtschema/schemas/property-units.yaml

- 定义属性时应使用约束条件。例如，有多少个条目？可能的值是什么？顺序如何？

典型情况及注意事项
=====================

- 对于像时钟/DMA/中断/复位这样的句柄条目，应当始终明确指定顺序。如果有多个句柄，则需要包括{clock,dma,interrupt,reset}-names。当使用时，这两个字段需要相同的约束（例如，项目列表）。
- 对于在{clock,dma,interrupt,reset}-names中使用的名称，不要添加任何后缀，例如：“tx”而不是“txirq”（对于中断）。
- 没有模式类型的属性（例如，没有标准后缀或未由模式定义的属性）需要指定类型，即使这是一个枚举。
- 如果模式包含了其他模式（例如，/schemas/i2c/i2c-controller.yaml），则使用"unevaluatedProperties:false"。在其他情况下，通常使用"additionalProperties:false"。
- 对于较大设备（如SoC）中的子块/组件，建议使用基于设备的兼容性（例如，基于SoC的兼容性），而不是该组件的自定义版本号。
例如，使用"vendor,soc1234-i2c"而不是"vendor,i2c-v2"。
- "syscon"不是一个通用属性。请使用供应商和类型，例如
"vendor,power-manager-syscon"

板卡/SoC 的 .dts 文件
======================

- 必须将所有MMIO设备置于总线节点之下，而不是顶级位置。
请使用非空的'范围'来限制子总线/设备的大小。64位平台并不需要所有设备都具有64位地址和大小。
