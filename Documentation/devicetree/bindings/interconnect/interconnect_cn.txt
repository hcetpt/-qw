### 互连提供者设备树绑定

#### 概述

本文档旨在定义一套通用的互连提供者/消费者属性。

##### 互连提供者

互连提供者绑定旨在表示系统中的互连控制器。每个提供者注册一组互连节点，这些节点公开了与互连相关的功能给消费者驱动程序。这些功能可能包括带宽、延迟、优先级等。根据使用场景，消费者驱动程序会对互连路径（或端点）设置约束。互连提供者本身也可以是互连消费者，例如当两个片上网络直接接口时的情况。
**必需属性**：
- `compatible`：包含互连提供者的兼容字符串。
- `#interconnect-cells`：互连指定符中单元的数量，用于编码互连节点ID，并可选地添加一个路径标签。

**示例**：

```plaintext
snoc: interconnect@580000 {
    compatible = "qcom,msm8916-snoc";
    #interconnect-cells = <1>;
    reg = <0x580000 0x14000>;
    clock-names = "bus_clk", "bus_a_clk";
    clocks = <&rpmcc RPM_SMD_SNOC_CLK>,
             <&rpmcc RPM_SMD_SNOC_A_CLK>;
};
```

##### 互连消费者

互连消费者是设备节点，它们可以动态地表达通过它们所连接的互连路径的带宽需求。在一个SoC上可能有多个互连提供者，而消费者可能会从不同的提供者消费多条路径，这取决于使用场景和它需要交互的组件。
**必需属性**：
- `interconnects`：互连提供者句柄对和互连提供者指定符的配对，用来表示互连路径的源端口和目标端口。可以为两端点指定一个可选的路径标签值，这种情况下，该信息将被传递给互连框架，以根据附加的标签进行聚合。
**可选属性**：
- `interconnect-names`：按照与`interconnects`属性相同的顺序排列的互连路径名称字符串列表。消费者驱动程序将使用`interconnect-names`来匹配互连路径与互连指定符对。
**保留的互连名称**：
- `dma-mem`：从设备到系统主内存的路径。

**示例**：

```plaintext
sdhci@7864000 {
    ..
    interconnects = <&pnoc MASTER_SDCC_1 &bimc SLAVE_EBI_CH0>;
    interconnect-names = "sdhc-mem";
};
```

**具有路径标签的示例**：

```plaintext
gnoc: interconnect@17900000 {
    ..
    interconnect-cells = <2>;
};

mnoc: interconnect@1380000 {
    ..
    interconnect-cells = <2>;
};

cpu@0 {
    ..
};
```
请注意，在包含路径标签的示例中，`interconnect-cells`的值为2，这意味着除了互连节点ID之外，还包含了路径标签的信息。
这段文本似乎是某种编程语言或配置文件中的语句，包含了自定义的符号和语法，并不适合直接翻译成中文。但如果尝试理解其结构和含义，可以这样解释：

`interconnects = <&gnoc MASTER_APPSS_PROC 3 &mnoc SLAVE_EBI1 3>;`

这里可能是定义了一个互联（interconnect），在某些硬件描述语言或系统配置中，这可能意味着指定了一个从 `MASTER_APPSS_PROC` 到 `SLAVE_EBI1` 的连接，其中数字3可能代表端口编号或其他参数。

如果需要更具体的中文表述，可以是：
```plaintext
互联 = <&gnoc 主应用进程3 &mnoc 从属EBI1_3>;
```
这里的“&gnoc”和“&mnoc”可能是某种特定的操作符或者指示符，具体含义需要根据上下文或相关文档来确定。
