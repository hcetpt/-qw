### Qualcomm 外部总线接口 2 (EBI2)

EBI2 包含两个外设模块：XMEM 和 LCDC。XMEM 负责处理任何外部存储器（如 NAND 或其他内存映射的外设），而 LCDC 则处理 LCD 显示屏。
正如所述，它将设备连接到一个外部总线接口，这意味着地址线（最多 9 条地址线，因此只能寻址 1KiB 的外部存储空间）、数据线（16 位）、OE（输出使能）、ADV（地址有效，用于某些 NOR 闪存）、WE（写入使能）。此外还有 6 个不同的片选信号（CS0 至 CS5），理论上可以连接 6 个不同的设备。
显然，此总线时钟频率为 64MHz。在封装上有专用引脚，并且总线只能从这些引脚引出。但如果某些引脚未使用，则可以留空或重用为 GPIO 或在某些情况下用作其他正交功能。
此外，CS1 和 CS2 有 -A 和 -B 信号。为什么会有这样的设计尚不清楚。
片选信号具有以下内存范围分配。这部分内存被称为“外围芯片选择 SS FPB0”，其大小为 168MB。

| 片选信号 | 物理地址基址 |
| --- | --- |
| CS0 GPIO134 | 0x1a800000-0x1b000000 (8MB) |
| CS1 GPIO39 (A) / GPIO123 (B) | 0x1b000000-0x1b800000 (8MB) |
| CS2 GPIO40 (A) / GPIO124 (B) | 0x1b800000-0x1c000000 (8MB) |
| CS3 GPIO133 | 0x1d000000-0x25000000 (128 MB) |
| CS4 GPIO132 | 0x1c800000-0x1d000000 (8MB) |
| CS5 GPIO131 | 0x1c000000-0x1c800000 (8MB) |

APQ8060 Qualcomm 应用处理器用户指南 80-N7150-14 Rev. A，2012 年 8 月 6 日包含了一些关于 EBI2 的不完整文档。
FIXME: 手册中提到了“写预充电周期”和“预充电周期”。我们未能确定这些对应硬件中的哪些位字段，或者有效的值是什么。当前的假设是这可能仅用于快速片选信号，而慢速片选信号则被完全理解。还存在一个用于 8 位存储器的“字节设备使能”标志。
FIXME: 片选信号有 SLOW 和 FAST 配置寄存器。这有点不清楚，如果它们是互斥的，是否可以一起使用，或者一些片选信号被硬性设定为 FAST，而其他的则是 SLOW 设计。
XMEM 寄存器完全没有文档说明，但可以通过部分解码，因为 Cypress AN49576 Antioch Westbridge 显然具有类似的寄存器布局，参见：http://www.cypress.com/file/105771/download

### 必需属性：
- compatible：应为其中之一：
  - "qcom,msm8660-ebi2"
  - "qcom,apq8060-ebi2"
- #address-cells：应为 <2>：第一个单元是片选，第二个单元是内存范围内的偏移量
- #size-cells：应为 <1>
- ranges：应设置为：
  ranges = <0 0x0 0x1a800000 0x00800000>,
           <1 0x0 0x1b000000 0x00800000>,
           <2 0x0 0x1b800000 0x00800000>,
           <3 0x0 0x1d000000 0x08000000>,
           <4 0x0 0x1c800000 0x00800000>,
           <5 0x0 0x1c000000 0x00800000>;
- reg：两组寄存器范围：EBI2 配置和 XMEM 配置区域
- reg-names：应为 "ebi2", "xmem"
- clocks：两个时钟，EBI_2X 和 EBI
- clock-names：应为 "ebi2x", "ebi2"

### 可选子节点：
- 在 EBI2 内的节点将被视为设备节点。
以下是可选属性，这些属性可以附加到任何设备子节点上。我们假设每个芯片选择（chipselect）子节点只能有一个设备，否则这些属性将会变得含糊不清。

慢速芯片选择的可选属性数组：
- `qcom,xmem-recovery-cycles`：恢复周期是指在OE被取消后，内存继续驱动数据总线的时间，以避免数据总线上的竞争。当从一个CS读取并切换到另一个CS，或者在同一CS上进行读操作后写操作时会插入这些周期。有效值为0至15。最小值实际上是1，因此即使设置为0也会产生1个恢复周期。
- `qcom,xmem-write-hold-cycles`：写保持周期，即在每次写入后插入的额外周期，最小值为1。数据输出从WE被置位开始直到CS被置位为止。如果保持周期为1（值=0），则CS将保持多一个周期等。有效值为0至15。
- `qcom,xmem-write-delta-cycles`：对于首次向页面或突发内存写入时插入的初始延迟周期。有效值为0至255。
- `qcom,xmem-read-delta-cycles`：对于首次向页面或突发内存读取时插入的初始延迟周期。有效值为0至255。
- `qcom,xmem-write-wait-cycles`：每个写访问的等待周期数，其中0表示1个周期。有效值为0至15。
- `qcom,xmem-read-wait-cycles`：每个读访问的等待周期数，其中0表示1个周期。有效值为0至15。

快速芯片选择的可选属性数组：
- `qcom,xmem-address-hold-enable`：这是一个布尔属性，表明我们需要额外保持一个周期的地址，以满足ADV（地址有效）断言时的保持时间要求。
- `qcom,xmem-adv-to-oe-recovery-cycles`：ADV（地址有效）断言与OE断言之间经过的周期数。例如，2意味着ADV和OE之间有2个周期。有效值为0、1、2或3。
这段文本描述了一个设备树配置，用于定义特定硬件组件（如内存控制器）的属性。以下是翻译成中文的内容：

---

`qcom,xmem-read-hold-cycles`: 表示读取传输第一段的周期长度。对于单个读取传输，这将是芯片选择信号（CS）有效到输出使能信号（OE）有效的这段时间。有效值范围为0至15。
示例：

```plaintext
ebi2@1a100000 {
	compatible = "qcom,apq8060-ebi2";  // 兼容性声明，表示这个节点与“qcom,apq8060-ebi2”兼容
	#address-cells = <2>;  // 地址单元数量
	#size-cells = <1>;  // 大小单元数量
	ranges = <0 0x0 0x1a800000 0x00800000>,  // 定义地址空间映射
		 <1 0x0 0x1b000000 0x00800000>,
		 <2 0x0 0x1b800000 0x00800000>,
		 <3 0x0 0x1d000000 0x08000000>,
		 <4 0x0 0x1c800000 0x00800000>,
		 <5 0x0 0x1c000000 0x00800000>;
	reg = <0x1a100000 0x1000>, <0x1a110000 0x1000>;  // 定义寄存器基地址和大小
	reg-names = "ebi2", "xmem";  // 寄存器名称
	clocks = <&gcc EBI2_2X_CLK>, <&gcc EBI2_CLK>;  // 时钟源
	clock-names = "ebi2x", "ebi2";  // 时钟名称
	/* 确保设置EBI2的引脚控制 */
	pinctrl-names = "default";  // 引脚控制名称
	pinctrl-0 = <&foo_ebi2_pins>;  // 引脚控制配置

	foo-ebi2@2,0 {  // 子节点
		compatible = "foo";  // 兼容性声明
		reg = <2 0x0 0x100>;  // 定义寄存器基地址和大小
		(...)
		qcom,xmem-recovery-cycles = <0>;  // xmem恢复周期
		qcom,xmem-write-hold-cycles = <3>;  // xmem写保持周期
		qcom,xmem-write-delta-cycles = <31>;  // xmem写增量周期
		qcom,xmem-read-delta-cycles = <28>;  // xmem读取增量周期
		qcom,xmem-write-wait-cycles = <9>;  // xmem写等待周期
		qcom,xmem-read-wait-cycles = <9>;  // xmem读取等待周期
	};
};
```

--- 

请注意，这里的“foo”和“foo_ebi2_pins”等是占位符，实际使用中需要替换成具体的设备树节点或配置。
