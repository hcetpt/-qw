* UCC（统一通信控制器）

必需属性：
- device_type : 应为 "network"、"hldc"、"uart"、"transparent"、
  "bisync"、"atm" 或 "serial"
- compatible : 可以是 "ucc_geth" 或 "fsl_atm" 等等
- cell-index : UCC 编号（1-8），对应 UM 中的 UCCx
- reg : 设备寄存器集的偏移量和长度
- interrupts : `<a b>` 其中 a 是中断编号，b 是一个表示中断的感觉和电平信息编码的字段。
  这应该根据您拥有的中断控制器类型，在第 2) 部分中的信息进行编码
- pio-handle : 并行 I/O 端口配置的 phandle
- port-number : 对于 UART 驱动程序，使用的端口号，范围在 0 到 3 之间。
  通常对应于 /dev/ttyQE 设备，例如 `<0>` 表示 /dev/ttyQE0。
  端口号加到设备的小号上。与 CPM UART 驱动程序不同，QE UART 驱动程序需要 port-number
- soft-uart : 对于 UART 驱动程序，如果指定，则意味着 QE UART 设备驱动程序应使用 "Soft-UART" 模式，
  这对于某些具有故障 UART 硬件的 SOC 是必需的。Soft-UART 通过微码上传提供
- rx-clock-name: UCC 接收时钟源
  "none": 关闭时钟源
  "brg1" 至 "brg16": 时钟源分别为 BRG1 至 BRG16
  "clk1" 至 "clk24": 时钟源分别为 CLK1 至 CLK24
- tx-clock-name: UCC 发送时钟源
  "none": 关闭时钟源
  "brg1" 至 "brg16": 时钟源分别为 BRG1 至 BRG16
  "clk1" 至 "clk24": 时钟源分别为 CLK1 至 CLK24

以下两个属性已废弃。rx-clock 已被 rx-clock-name 替换，tx-clock 已被 tx-clock-name 替换。
目前使用已弃用属性的驱动程序应继续这样做，以便支持旧版设备树，但它们应该首先更新以检查新属性。

- `rx-clock`：表示UCC接收时钟源。
  - 0x00：时钟源被禁用；
  - 0x1~0x10：时钟源分别为BRG1~BRG16；
  - 0x11~0x28：时钟源分别为QE_CLK1~QE_CLK24；

- `tx-clock`：表示UCC发送时钟源。
  - 0x00：时钟源被禁用；
  - 0x1~0x10：时钟源分别为BRG1~BRG16；
  - 0x11~0x28：时钟源分别为QE_CLK1~QE_CLK24；

网络设备类型所需的属性：
- `mac-address`：表示以太网地址的字节列表。
- `phy-handle`：与该控制器相连的PHY的phandle。

推荐使用的属性：
- `phy-connection-type`：一个字符串，命名控制器/PHY接口类型，例如，“mii”（默认）、“rmii”、“gmii”、“rgmii”、“rgmii-id”（内部延迟）、“rgmii-txid”（仅TX有延迟）、“rgmii-rxid”（仅RX有延迟）、“tbi”或“rtbi”。

示例：

```plaintext
ucc@2000 {
    device_type = "network";
    compatible = "ucc_geth";
    cell-index = <1>;
    reg = <2000 200>;
    interrupts = <a0 0>;
    interrupt-parent = <700>;
    mac-address = [ 00 04 9f 00 23 23 ];
    rx-clock = "none";  // 假设"none"表示0x00，即时钟源被禁用
    tx-clock = "clk9";  // 假设"clk9"表示某个具体的时钟源
    phy-handle = <212000>;
    phy-connection-type = "gmii";
    pio-handle = <140001>;
};
```

请注意，对于`rx-clock`和`tx-clock`的值，在示例中假设了文本形式的表示方法，而实际的数值应该根据上下文来确定。例如，“none”可能代表0x00（时钟源被禁用），而“clk9”则需要根据具体的实现细节来解释。
