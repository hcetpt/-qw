# SPDX-许可证标识符: (GPL-2.0-only 或 BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/i3c/i3c.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

标题: I3C 总线

维护者:
  - Alexandre Belloni <alexandre.belloni@bootlin.com>
  - Miquel Raynal <miquel.raynal@bootlin.com>

描述: |
  I3C 总线可以通过一个节点来描述主 I3C 控制器设备，并为总线上的每个 I2C 或 I3C 从设备设置一系列子节点。在总线生命周期中，它们中的每一个都可能请求成为主设备。
属性:
  $nodename:
    模式: "^i3c@[0-9a-f]+$"

  "#address-cells":
    常量: 3
    描述: |
      连接到总线的每个 I2C 设备应在子节点中描述。
      所有 I3C 设备都应支持 DAA（动态地址分配），因此它们是可发现的。所以，默认情况下，I3C 设备不需要在设备树中描述。然而，我们可能想要为这些设备附加额外的资源，而这些资源可能需要在设备树中描述，这意味着我们必须描述 I3C 设备。
      在设备树中描述 I3C 设备的另一个使用场景是：当此 I3C 设备具有静态 I2C 地址，并且我们希望在 DAA 发生之前为其分配一个特定的 I3C 动态地址（以便总线上的其他设备不能占用这个动态地址）。
"#size-cells":
    常量: 0

  i3c-scl-hz:
    描述: |
      用于 I3C 传输的 SCL 信号频率。如果未定义，则默认值应为 12.5 MHz。
      并非所有控制器都支持该属性。
i2c-scl-hz:
    描述: |
      用于 I2C 传输的 SCL 信号频率。如果未定义，则默认应该是查看设备树中描述的 I2C 设备的 LVR（遗留虚拟寄存器）值以确定最大 I2C 频率。
      并非所有控制器都支持该属性。
mctp-controller:
    类型: 布尔
    描述: |
      表明系统可通过此总线作为 MCTP over I3C 传输的端点访问。
必需:
  - "#address-cells"
  - "#size-cells"

模式属性:
  "@[0-9a-f]+$":
    类型: 对象
    描述: |
      I2C 子设备，应命名为：<device-type>@<i2c-address>

      dtschema schemas/i2c/i2c-controller.yaml 中描述的所有属性在此处均有效，但 reg 属性的内容已更改。
以下是给定内容的中文翻译：

### 属性：
- `compatible`:
  - **描述**：I2C 设备的兼容性。
- `reg`:
  - **项**：
    - **项**：
      - **描述**：I2C 地址。不支持 10 位寻址。具有 10 位地址的设备无法通过 DEFSLVS 命令正确传递。
        - 最小值：0
        - 最大值：0x7f
      - **常量**：0
      - **描述**：应编码 I3C LVR（Legacy Virtual Register）：
        - 位 [31:8]：未使用/被忽略
        - 位 [7:5]：I2C 设备索引。可能的值：
          * 0：I2C 设备具有 50 纳秒脉冲滤波器
          * 1：I2C 设备没有 50 纳秒脉冲滤波器，但支持 SCL 上的高频
          * 2：I2C 设备没有 50 纳秒脉冲滤波器，并且不耐受高频
          * 3-7：保留
        - 位 [4]：指示设备是否以 FM（快速模式）或 FM+ 模式运行：
          * 0：FM+ 模式
          * 1：FM 模式
        - 位 [3:0]：设备类型
          * 0-15：保留

### 必需项：
- `compatible`
- `reg`

### “@ [0-9a-f]+, [0-9a-f]+$”：
- **类型**：对象
- **描述**：I3C 子设备，应命名为：<device-type>@<static-i2c-address>,<i3c-pid>
  
  - **属性**：
    - `reg`:
      - **项**：
        - **项**：
          - **描述**：编码静态 I2C 地址。如果设备没有，则应为 0（0 不是有效的 I2C 地址）
            - 最小值：0
            - 最大值：0x7f
          - **描述**：Provisioned ID 的前半部分（遵循 I3C 规范提供的 PID 定义）
            包含制造商 ID 左移一位
          - **描述**：Provisioned ID 的后半部分（遵循 I3C 规范提供的 PID 定义）
            包含将部件 ID 左移 16 位、实例 ID 左移 12 位以及额外信息
    - `assigned-address`:
      - **引用**：/schemas/types.yaml#definitions/uint32
      - **最小值**：0x1
      - **最大值**：0xff
      - **描述**：要分配给此设备的动态地址。如果存在静态地址（reg 属性的第一单元格 != 0），则通过 SETDASA 分配此地址；如果不存在静态地址，则通过 SETNEWDA 分配此地址，在此之前需要通过 ENTDAA 分配一个临时地址。

### 必需项：
- `reg`

### 其他属性：
- **true**

### 示例：
```yaml
i3c@d040000 {
    compatible = "cdns,i3c-master";
    clocks = <&coreclock>, <&i3csysclock>;
    clock-names = "pclk", "sysclk";
    interrupts = <3 0>;
    reg = <0x0d040000 0x1000>;
    #address-cells = <3>;
    #size-cells = <0>;
    i2c-scl-hz = <100000>;

    /* I2C 设备。 */
    eeprom@57 {
        compatible = "atmel,24c01";
        reg = <0x57 0x0 0x10>;
        pagesize = <0x8>;
    };

    /* I3C 设备，有静态 I2C 地址和分配地址。 */
    thermal_sensor: sensor@68,39200144004 {
        reg = <0x68 0x392 0x144004>;
        assigned-address = <0xa>;
    };

    /* I3C 设备，只有分配地址。 */
    pressure_sensor: sensor@0,39200124004 {
        reg = <0x0 0x392 0x124000>;
        assigned-address = <0xc>;
    };

    /*
     * I3C 设备，没有静态 I2C 地址，但在 DT 中需要资源描述
    */
    sensor@0,39200154004 {
        reg = <0x0 0x392 0x154004>;
        clocks = <&clock_provider 0>;
    };
};
```
