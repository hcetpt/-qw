# SPDX-许可证标识符: GPL-2.0-only 或 BSD-2-Clause
%YAML 1.2
---
$id: http://devicetree.org/schemas/leds/nxp,pca963x.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

标题: NXP PCA963x LED 控制器

维护者:
  - Laurent Pinchart <laurent.pinchart@ideasonboard.com>

描述: |
  NXP PCA963x 是用于通过 I2C 控制的 LED 驱动器，特别针对
  红色/绿色/蓝色/琥珀色 (RGBA) 颜色混合应用进行了优化。每个 LED
  都可以独立控制，并且拥有自己的脉冲宽度调制 (PWM) 控制器。
数据手册可从以下网址获取:

  - https://www.nxp.com/docs/en/data-sheet/PCA9632.pdf
  - https://www.nxp.com/docs/en/data-sheet/PCA9633.pdf
  - https://www.nxp.com/docs/en/data-sheet/PCA9634.pdf
  - https://www.nxp.com/docs/en/data-sheet/PCA9635.pdf

属性:
  compatible:
    枚举:
      - nxp,pca9632
      - nxp,pca9633
      - nxp,pca9634
      - nxp,pca9635

  reg:
    最大项数: 1

  "#address-cells":
    常量: 1

  "#size-cells":
    常量: 0

  nxp,hw-blink:
    类型: 布尔值
    描述:
      使用硬件闪烁而非软件闪烁

  nxp,inverted-out:
    类型: 布尔值
    描述:
      反转生成的 PWM 的极性

  nxp,period-scale:
    $ref: /schemas/types.yaml#/definitions/uint32
    描述:
      在某些配置下，芯片的闪烁速度比预期快。此参数提供了一个缩放比例（固定点，小数除以 1000）
      作为补偿，例如 1300=1.3倍 和 750=0.75倍

  nxp,totem-pole:
    类型: 布尔值
    描述:
      使用图腾柱 (推挽) 而非开漏 (pca9632 默认为开漏，新芯片默认为图腾柱)

模式属性:
  "^led@[0-9a-f]+$":
    类型: 对象
    $ref: common.yaml#
    未评估属性: false

    属性:
      reg:
        最小值: 0

    必需:
      - reg

allOf:
  - 如果:
      属性:
        compatible:
          包含:
            枚举:
              - nxp,pca9632
              - nxp,pca9633
    那么:
      模式属性:
        "^led@[0-9a-f]+$":
          属性:
            reg:
              最大值: 3
    否则:
      模式属性:
        "^led@[0-9a-f]+$":
          属性:
            reg:
              最大值: 7

额外属性: false

示例:
  - |
    #include <dt-bindings/leds/common.h>

    i2c {
        #address-cells = <1>;
        #size-cells = <0>;

        led-controller@62 {
            compatible = "nxp,pca9632";
            reg = <0x62>;
            #address-cells = <1>;
            #size-cells = <0>;

            led@0 {
                    reg = <0>;
                    color = <LED_COLOR_ID_RED>;
                    function = LED_FUNCTION_STATUS;
            };

            led@1 {
                    reg = <1>;
                    color = <LED_COLOR_ID_GREEN>;
                    function = LED_FUNCTION_STATUS;
            };

            led@2 {
                    reg = <2>;
                    color = <LED_COLOR_ID_BLUE>;
                    function = LED_FUNCTION_STATUS;
            };

            led@3 {
                    reg = <3>;
                    color = <LED_COLOR_ID_WHITE>;
                    function = LED_FUNCTION_STATUS;
            };
        };
    };
