# SPDX-许可证标识符: (GPL-2.0-only 或 BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/firmware/nvidia,tegra186-bpmp.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

标题: NVIDIA Tegra 启动与电源管理处理器 (BPMP)

维护者:
  - Thierry Reding <thierry.reding@gmail.com>
  - Jon Hunter <jonathanh@nvidia.com>

描述: |
  BPMP 是 Tegra 芯片中的一个特定处理器，用于处理启动过程，并从 CPU 卸载电源管理、时钟管理和复位控制等任务。此绑定文档定义了 BPMP 固件驱动程序将使用的资源，该驱动程序可以创建 CPU 和 BPMP 之间的处理器间通信 (IPC)。
此节点是邮箱消费者。有关邮箱子系统的详细信息及由相关提供者实现的规范，请参阅以下文件：

    - .../mailbox/mailbox.txt
    - .../mailbox/nvidia,tegra186-hsp.yaml

  此节点是时钟、电源域和复位提供者。有关这些特性的通用文档及其由本节点实现的规范，请参阅以下文件：

    - .../clock/clock-bindings.txt
    - <dt-bindings/clock/tegra186-clock.h>
    - ../power/power-domain.yaml
    - <dt-bindings/power/tegra186-powergate.h>
    - .../reset/reset.txt
    - <dt-bindings/reset/tegra186-reset.h>

  BPMP 实现了一些服务，这些服务必须通过单独的节点表示。例如，它能够提供对某些 I2C 控制器的访问，而 I2C 绑定则将每个 I2C 控制器表示为设备树中的一个节点。此类节点应直接嵌套在主 BPMP 节点内。
软件可以通过检查 BPMP 节点的子节点是否存在兼容性属性来确定其是否代表一个设备。任何具有兼容性属性的节点都表示一个可实例化的设备。没有兼容性属性的节点可用于提供有关 BPMP 本身的配置信息，尽管目前此绑定尚未定义这样的配置节点。
BPMP 固件并未为这些服务定义单一的全局命名/编号空间。换句话说，I2C 总线的编号方案与 BPMP 可能提供的任何其他服务（如未来可能的 SPI 总线服务）的编号方案是不同的。因此，子设备节点将不包含 reg 属性，且 BPMP 节点也不会包含 "#address-cells" 或 "#size-cells" 属性。
CPU 和 BPMP 之间的 IPC TX 和 RX 的共享内存区域是预先定义好的，并基于芯片内部的 sysram（静态 RAM）或正常的 SDRAM 运行。
请参阅 ".../sram/sram.yaml" 以了解 SRAM 情况下的绑定。
请参阅 "../reserved-memory/nvidia,tegra264-bpmp-shmem.yaml" 以了解 SDRAM 情况下的绑定。

属性:
  compatible:
    oneOf:
      - items:
          - enum:
              - nvidia,tegra194-bpmp
              - nvidia,tegra234-bpmp
          - const: nvidia,tegra186-bpmp
      - const: nvidia,tegra186-bpmp

  mboxes:
    描述: 用于与 BPMP 通信的邮箱的句柄和通道标识符
maxItems: 1

  shmem:
    描述: 基于 CPU 和 BPMP 之间 IPC 的 TX 和 RX 共享内存区域的句柄列表
minItems: 2
    maxItems: 2

  memory-region:
    描述: 用于 CPU-NS 和 BPMP 之间 IPC 的预留内存区域的句柄
The provided text describes a Device Tree Blob (DTB) configuration for an NVIDIA Tegra186 platform, specifically focusing on the Bridge Processor Mailbox (BPMP) component and its interactions with other hardware elements. Below is a translation of the key parts into Chinese:

- `maxItems`: 1

  `#clock-cells`:
    `const`: 1

  `#power-domain-cells`:
    `const`: 1

  `#reset-cells`:
    `const`: 1

  `interconnects`:
    `items`:
      - 描述: 内存读取客户端
      - 描述: 内存写入客户端
      - 描述: DMA读取客户端
      - 描述: DMA写入客户端

  `interconnect-names`:
    `items`:
      - `const`: 读取
      - `const`: 写入
      - `const`: dma-mem # dma-读取
      - `const`: dma-写入

  `iommus`:
    `maxItems`: 1

  `i2c`:
    类型: 对象

  `thermal`:
    类型: 对象

  `additionalProperties`: false

  `oneOf`:
    - `required`:
        - `memory-region`
    - `required`:
        - `shmem`

  `required`:
    - `compatible`
    - `mboxes`
    - `#clock-cells`
    - `#power-domain-cells`
    - `#reset-cells`

### 示例

#### 第一个示例
```yaml
#include <dt-bindings/interrupt-controller/arm-gic.h>
#include <dt-bindings/mailbox/tegra186-hsp.h>
#include <dt-bindings/memory/tegra186-mc.h>

hsp_top0: hsp@3c00000 {
    compatible = "nvidia,tegra186-hsp";
    reg = <0x03c00000 0xa0000>;
    interrupts = <GIC_SPI 176 IRQ_TYPE_LEVEL_HIGH>;
    interrupt-names = "doorbell";
    #mbox-cells = <2>;
};

sram@30000000 {
    compatible = "nvidia,tegra186-sysram", "mmio-sram";
    reg = <0x30000000 0x50000>;
    #address-cells = <1>;
    #size-cells = <1>;
    ranges = <0x0 0x30000000 0x50000>;

    cpu_bpmp_tx: sram@4e000 {
        reg = <0x4e000 0x1000>;
        label = "cpu-bpmp-tx";
        pool;
    };

    cpu_bpmp_rx: sram@4f000 {
        reg = <0x4f000 0x1000>;
        label = "cpu-bpmp-rx";
        pool;
    };
};

bpmp {
    compatible = "nvidia,tegra186-bpmp";
    interconnects = <&mc TEGRA186_MEMORY_CLIENT_BPMPR &emc>,
                    <&mc TEGRA186_MEMORY_CLIENT_BPMPW &emc>,
                    <&mc TEGRA186_MEMORY_CLIENT_BPMPDMAR &emc>,
                    <&mc TEGRA186_MEMORY_CLIENT_BPMPDMAW &emc>;
    interconnect-names = "read", "write", "dma-mem", "dma-write";
    iommus = <&smmu TEGRA186_SID_BPMP>;
    mboxes = <&hsp_top0 TEGRA_HSP_MBOX_TYPE_DB TEGRA_HSP_DB_MASTER_BPMP>;
    shmem = <&cpu_bpmp_tx>, <&cpu_bpmp_rx>;
    #clock-cells = <1>;
    #power-domain-cells = <1>;
    #reset-cells = <1>;

    i2c {
        compatible = "nvidia,tegra186-bpmp-i2c";
        nvidia,bpmp-bus-id = <5>;
        #address-cells = <1>;
        #size-cells = <0>;
    };

    thermal {
        compatible = "nvidia,tegra186-bpmp-thermal";
        #thermal-sensor-cells = <1>;
    };
};
```

#### 第二个示例
```yaml
#include <dt-bindings/mailbox/tegra186-hsp.h>

bpmp {
    compatible = "nvidia,tegra186-bpmp";
    interconnects = <&mc TEGRA186_MEMORY_CLIENT_BPMPR &emc>,
                    <&mc TEGRA186_MEMORY_CLIENT_BPMPW &emc>,
                    <&mc TEGRA186_MEMORY_CLIENT_BPMPDMAR &emc>,
                    <&mc TEGRA186_MEMORY_CLIENT_BPMPDMAW &emc>;
    interconnect-names = "read", "write", "dma-mem", "dma-write";
    mboxes = <&hsp_top1 TEGRA_HSP_MBOX_TYPE_DB TEGRA_HSP_DB_MASTER_BPMP>;
    memory-region = <&dram_cpu_bpmp_mail>;
    #clock-cells = <1>;
    #power-domain-cells = <1>;
    #reset-cells = <1>;
};
```

这段配置描述了BPMP组件与其他硬件的交互，包括内存区域、中断控制器、I²C总线和热管理等。
