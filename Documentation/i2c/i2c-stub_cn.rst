===== i2c-stub =====

描述
====

此模块是一个非常简单的假I2C/SMBus驱动程序。它实现了六种类型的SMBus命令：写快速、（读/写）字节、（读/写）字节数据、（读/写）字数据、（读/写）I2C块数据和（读/写）SMBus块数据。
加载此驱动程序时，您需要提供芯片地址作为模块参数，然后该驱动程序仅对这些地址的SMBus命令作出响应。
此模块不需要任何硬件支持或关联。它会接受对指定地址的写快速命令；对于其他命令（同样对指定地址），它将通过从内存中的数组读取或写入来作出响应。此外，它还会为处理的每个命令向内核日志发送大量信息。
为所有字节操作实现了一个具有自动递增功能的指针寄存器。这允许进行连续字节读取，就像EEPROM等设备支持的一样。
默认情况下，SMBus块命令支持是禁用的，必须通过在功能性模块参数中设置相应的位（0x03000000）来显式启用。
必须使用SMBus块命令来配置用于SMBus块操作的SMBus命令。写入可以是部分的。块读取命令始终返回与迄今为止最大的写入所选择的字节数量。
典型的使用场景如下：

	1. 加载此模块
	2. 使用i2cset（来自i2c-tools项目）预加载一些数据
	3. 加载目标芯片驱动程序模块
	4. 观察其在内核日志中的行为

在i2c-tools包中有一个名为i2c-stub-from-dump的脚本，可以从芯片转储自动加载寄存器值。
参数
======

int chip_addr[10]：
	SMBus地址，在这些地址模拟芯片
unsigned long functionality：
	功能覆盖，用于禁用某些命令。请参阅<linux/i2c.h>中的I2C_FUNC_*常量以获取合适的值。例如，值0x1f0000仅启用快速、字节和字节数据命令
u8 bank_reg[10], u8 bank_mask[10], u8 bank_start[10], u8 bank_end[10]：
	可选的分组设置。它们指示哪个寄存器中的哪些位选择活动分组，以及分组寄存器的范围
注意事项
=======

如果你的目标驱动程序在轮询某个字节或字，等待其发生变化，存根（stub）可能会将其锁定。使用 `i2cset` 来解锁它。
如果你大量发送信息，`printk` 可能会产生数据丢失。这个模块确实需要像 `relayfs` 这样的功能。
