SPDX 许可证标识符: GPL-2.0

=======================
I2C 地址转换器
=======================

作者: Luca Ceresoli <luca@lucaceresoli.net>
作者: Tomi Valkeinen <tomi.valkeinen@ideasonboard.com>

描述
-----------

一个 I2C 地址转换器 (ATR) 是一种具有 I2C 从属父端口（“上游”）和 N 个 I2C 主控子端口（“下游”）的设备，并将事务从上游转发到适当的下游端口，同时修改从属地址。在父总线上使用的地址称为“别名”，并且与子总线上的物理从属地址（潜在地）不同。地址转换由硬件完成。
一个 ATR 看起来类似于一个 i2c-mux 除了：
 - 父总线和子总线上的地址可以不同
 - 通常不需要选择子端口；在父总线上使用的别名隐含了这一点

ATR 功能可能由具有许多其他特性的芯片提供
内核中的 i2c-atr 提供了一个辅助工具来在驱动程序中实现 ATR
ATR 在每个子总线上创建一个新的 I2C “子”适配器。在子总线上添加设备最终会调用驱动程序代码来选择一个可用的别名。维护适当的可用别名池并为每个新设备挑选一个别名取决于驱动程序实现者。ATR 维护一个当前分配别名的表，并使用它来修改所有指向子总线上的设备的 I2C 事务。
下面是一个典型的例子：
拓扑结构::

                      从属 X @ 0x10
              .-----.   |
  .-----.     |     |---+---- B
  | CPU |--A--| ATR |
  `-----'     |     |---+---- C
              `-----'   |
                      从属 Y @ 0x10

别名表：

A、B 和 C 是三个物理 I2C 总线，在电气上相互独立。ATR 接收在总线 A 上发起的事务，并根据事务中的设备地址以及基于别名表将它们传播到总线 B 或总线 C 或无总线。
别名表：

.. 表格::

   ===============   =====
   客户端            别名
   ===============   =====
   X (总线 B, 0x10)   0x20
   Y (总线 C, 0x10)   0x30
   ===============   =====

事务：

 - 从属 X 驱动请求一个事务（在适配器 B 上），从属地址 0x10
 - ATR 驱动发现从属 X 在总线 B 上且具有别名 0x20，重写消息以地址 0x20，转发给适配器 A
 - 物理 I2C 事务在总线 A 上，从属地址 0x20
 - ATR 芯片检测到地址 0x20 的事务，在表中找到它，将事务传播到总线 B 并将地址转换为 0x10，同时在总线 A 上保持时钟拉伸等待回复
 - 从属 X 芯片（在总线 B 上）检测到其自身的物理地址 0x10 的事务并正常回复
 - ATR 芯片停止时钟拉伸并将回复转发到总线 A，将地址重新转换回 0x20
 - ATR 驱动接收回复，重写消息以地址 0x10，就像最初那样
 - 从属 X 驱动接收 msgs[]，其中包含回复和地址 0x10

使用方法：

 1. 在驱动程序中（通常在 probe 函数中），通过调用 i2c_atr_new() 添加一个 ATR，传递 attach/detach 回调函数
 2. 当 attach 回调被调用时，选择一个合适的别名，在芯片中配置它，并在 alias_id 参数中返回所选的别名
 3. 当 detach 回调被调用时，从芯片中取消配置该别名，并将别名放回池中以备后用

I2C ATR 函数和数据结构
-------------------------------------

.. kernel-doc:: include/linux/i2c-atr.h
