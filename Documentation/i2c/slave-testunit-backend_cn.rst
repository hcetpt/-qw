SPDX 许可证标识符: GPL-2.0

==============================
Linux I2C 从设备测试单元后端
==============================

由 Wolfram Sang <wsa@sang-engineering.com> 在 2020 年编写

此后端可用于触发 I2C 总线主控器所需的测试案例，这些测试案例需要具有特定功能的远程设备（并且通常不容易获得）。示例包括多主控器测试和 SMBus 主机通知测试。对于某些测试，I2C 从设备控制器必须能够在主控器模式和从设备模式之间切换，因为它也需要发送数据。
请注意，这是一个用于测试和调试的设备。它不应该在生产构建中启用。虽然存在一些版本控制，并且我们努力保持向后兼容性，但不能保证有一个稳定的 ABI！

实例化该设备是常规的。例如，对于总线 0，地址 0x30：

```sh
# echo "slave-testunit 0x1030" > /sys/bus/i2c/devices/i2c-0/new_device
```

之后，您将拥有一个监听的写入专用设备。读取操作只会返回测试单元的 8 位版本号。当写入时，设备由 4 个 8 位寄存器组成，除了某些“部分”命令外，所有寄存器都必须被写入以启动测试案例，即您通常会向设备写入 4 字节。寄存器为：

0x00 CMD — 触发哪个测试
0x01 DATAL — 测试的配置字节 1
0x02 DATAH — 测试的配置字节 2
0x03 DELAY — 在开始测试前的延迟，单位为 n * 10 毫秒

使用 i2c-tools 包中的 'i2cset' 命令，通用命令如下所示：

```sh
# i2cset -y <bus_num> <testunit_address> <CMD> <DATAL> <DATAH> <DELAY> i
```

DELAY 是一个通用参数，它会在 CMD 中执行测试之前延迟执行时间。
当一个命令正在运行（包括延迟）时，新的命令不会被确认。您需要等待旧的命令完成。
以下部分描述了这些命令。无效的命令会导致传输不被确认。
命令
--------

0x00 NOOP （保留以供将来使用）

0x01 READ_BYTES （还需要主控器模式）
   DATAL — 读取数据的地址（较低的 7 位，最高位目前未使用）
   DATAH — 要读取的字节数

这有助于测试您的总线主控器驱动程序是否正确处理多主控器的情况。您可以触发测试单元从总线上的另一个设备读取字节。如果待测的主控器也想在同一时间访问总线，则总线将处于繁忙状态。例如，在 50 毫秒延迟后从地址 0x50 读取 128 字节：

```sh
# i2cset -y 0 0x30 0x01 0x50 0x80 0x05 i
```

0x02 SMBUS_HOST_NOTIFY （还需要主控器模式）
   DATAL — 要发送的状态字的低位
   DATAH — 要发送的状态字的高位

此测试将向主机发送 SMBUS_HOST_NOTIFY 消息。注意，当前在 Linux 内核中忽略状态字。例如，在 10 毫秒后发送一个通知：

```sh
# i2cset -y 0 0x30 0x02 0x42 0x64 0x01 i
```

0x03 SMBUS_BLOCK_PROC_CALL （部分命令）
   DATAL — 必须为 '1'，即还需写入一个额外的字节
   DATAH — 将在随后的读取传输中返回的字节数
   DELAY — 不适用，部分命令！

此测试将根据 SMBus 规范响应块过程调用。所写的一个数据字节指定了将在随后的读取传输中返回多少字节。注意，在这个读取传输中，测试单元会在前面加上要跟随的字节长度。因此，如果您的主机总线驱动程序像大多数驱动程序一样模拟 SMBus 调用，则需要支持 i2c_msg 的 I2C_M_RECV_LEN 标志。这对于它来说是一个很好的测试案例。返回的数据首先包含长度，然后是一个从 length-1 到 0 的字节数组。以下是使用 i2ctransfer 模拟 i2c_smbus_block_process_call() 的示例（您需要 i2c-tools v4.2 或更高版本）：

```sh
# i2ctransfer -y 0 w3@0x30 0x03 0x01 0x10 r?
0x10 0x0f 0x0e 0x0d 0x0c 0x0b 0x0a 0x09 0x08 0x07 0x06 0x05 0x04 0x03 0x02 0x01 0x00
```
