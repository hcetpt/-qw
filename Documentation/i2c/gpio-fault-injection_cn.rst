=========================
Linux I2C 故障注入
=========================

基于GPIO的I2C总线主控制器可以配置以提供故障注入功能。然后，它应该连接到另一个由待测I2C总线主控制器驱动的I2C总线。GPIO故障注入驱动程序可以在总线上创建特殊状态，这些状态应该被另一个I2C总线主控制器妥善处理。

一旦Kconfig选项I2C_GPIO_FAULT_INJECTOR启用，在内核debugfs文件系统中（通常挂载在/sys/kernel/debug）会有一个'i2c-fault-injector'子目录。每个由GPIO驱动的I2C总线将有一个单独的子目录。每个子目录将包含触发故障注入的文件。下面将描述这些文件及其预期用途。

总线状态
==========

"scl"
-----
通过读取此文件，可以获得SCL的当前状态。通过写入，可以将其状态更改为强制其为低电平或再次释放它。因此，使用"echo 0 > scl"命令可将SCL强制为低电平，从而无法进行通信，因为测试中的总线主控制器将无法时钟。它应检测到SCL无响应的情况，并向上层报告错误。
"sda"
-----
通过读取此文件，可以获得SDA的当前状态。通过写入，可以将其状态更改为强制其为低电平或再次释放它。因此，使用"echo 0 > sda"命令可将SDA强制为低电平，因此无法传输数据。测试中的总线主控制器应检测到这种情况并触发总线恢复（参见I2C规范版本4，第3.1.16节），利用Linux I2C核心的帮助函数（参见'struct bus_recovery_info'）。然而，总线恢复不会成功，因为SDA仍然被锁定为低电平，直到您手动再次释放它，使用"echo 1 > sda"命令。可以通过“未完成传输”类别的故障注入器实现自动释放的测试。

未完成传输
====================

以下故障注入器创建了SDA由设备保持低电平的情况。总线恢复应能够解决这些情况。但请注意：有些I2C客户端设备会在它们的一侧检测到卡住的SDA，并在几毫秒后自行释放它。此外，可能存在外部设备消噪和监控I2C总线。它也可能检测到卡住的SDA并自行启动总线恢复。如果您要在总线主控制器中实现总线恢复，请确保您检查了硬件设置是否存在此类设备。并且始终使用示波器或逻辑分析仪进行验证！

"incomplete_address_phase"
--------------------------
此文件只可写入，您需要向其中写入现有I2C客户端设备的地址。然后，将开始对此设备的读取传输，但在传输客户端地址后将在ACK阶段停止。因为设备将确认其存在，这将导致SDA在SCL为高电平时被设备拉低。因此，与上面的“sda”文件类似，测试中的总线主控制器应检测到这种情况并尝试总线恢复。这次，它应该成功，设备应在切换SCL之后释放SDA。
"incomplete_write_byte"
-----------------------
与上述类似，此文件只可写入，您需要向其中写入现有I2C客户端设备的地址。
注入器同样将在一个ACK阶段停止，因此设备会保持SDA为低电平，因为它确认了数据。但是，与"incomplete_address_phase"相比有两个区别：

a) 发送的消息将是写消息
b) 在地址字节之后，将传输0x00字节。然后，在ACK处停止
这是一种非常微妙的状态，设备被设置为当SCL上发生进一步的时钟脉冲时将任何数据写入寄存器0x00（如果它有寄存器）
这就是为什么总线恢复（最多9个时钟脉冲）必须检查SDA或发送额外的STOP条件以确保总线已被释放。否则将向设备中写入随机数据！

失去仲裁
=================

在这里，我们希望模拟测试中的主控制器在多主配置中与其他主控制器争夺总线失败的情况。
"lose_arbitration"
------------------
此文件只可写入，您需要写入仲裁干扰的持续时间（以微秒为单位，最大为100毫秒）。调用进程将休眠并等待下一个总线时钟。进程是可中断的。
通过等待被测试主设备使SCL下降，然后在一段时间内将SDA拉低来实现仲裁失败。因此，发送的I2C地址应该被破坏，并且这种情况应该被正确检测到。这意味着发送的地址应该包含许多“1”位，以便能够检测到这种破坏。实际上并不需要在这个地址上有一个设备，因为应该在此之前检测到仲裁失败。另外需要注意的是，SCL下降是通过中断进行监控的，所以中断延迟可能会导致最初的几位没有被破坏。对于一个空闲总线来说，使用此故障注入器的一个好的起点是：

  # echo 200 > lose_arbitration &
  # i2cget -y <待测试总线> 0x3f

传输过程中的恐慌
==================

此故障注入器将在被测试主设备开始传输时引发内核恐慌。这通常意味着总线主设备驱动程序的状态机将被粗暴地中断，总线可能会处于异常状态。可以使用此功能检查您的关机/重启/启动代码是否能处理这种情况。
"inject_panic"
--------------

此文件仅可写入，您需要写入从检测到传输开始到引发内核恐慌之间的时间延迟（以微秒为单位，最大值为100毫秒）。调用进程随后会休眠并等待下一个总线时钟。该进程是可中断的。
传输开始是通过等待被测试主设备使SCL下降来检测的。使用此故障注入器的一个好的起点是：

  # echo 0 > inject_panic &
  # i2cget -y <待测试总线> <某个地址>

请注意，实际上并不需要有设备监听您使用的地址。根据情况的不同，结果可能会有所变化。
