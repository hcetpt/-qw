=========================
Linux I2C 故障注入
=========================

基于 GPIO 的 I2C 总线主控制器可以配置为提供故障注入功能。此时，它将连接到另一个由待测试的 I2C 主控制器驱动的 I2C 总线。GPIO 故障注入驱动器可以在总线上创建特殊状态，而其他 I2C 主控制器应该能够妥善处理这些状态。

一旦启用了 Kconfig 选项 `I2C_GPIO_FAULT_INJECTOR`，将在内核调试文件系统（通常挂载在 `/sys/kernel/debug`）中出现一个名为 `i2c-fault-injector` 的子目录。每个基于 GPIO 的 I2C 总线都将有一个单独的子目录。每个子目录都包含用于触发故障注入的文件，现在将描述这些文件及其预期用途。

总线状态
===========

`scl`
-----

通过读取此文件，您可以获取当前的 SCL 状态。通过写入，您可以将其状态更改为强制其低电平或再次释放它。因此，使用 `echo 0 > scl` 将强制 SCL 保持低电平，从而无法进行通信，因为测试中的总线主控制器将无法时钟。它应该检测到 SCL 不响应的情况，并向上层报告错误。
`sda`
-----

通过读取此文件，您可以获取当前的 SDA 状态。通过写入，您可以将其状态更改为强制其低电平或再次释放它。因此，使用 `echo 0 > sda` 将强制 SDA 保持低电平，从而无法传输数据。测试中的总线主控制器应检测到这种情况并触发总线恢复（参见 I2C 规范版本 4 第 3.1.16 节），使用 Linux I2C 核心的帮助程序（参见 `struct bus_recovery_info`）。然而，由于 SDA 仍然被固定在低电平，总线恢复不会成功，直到您手动释放它，使用 `echo 1 > sda`。可以通过“未完成传输”类别的故障注入器实现自动释放的测试。

未完成传输
====================

以下故障注入器会创建 SDA 被设备保持低电平的情况。总线恢复应该能够解决这些情况。但请注意：有些 I2C 客户端设备会在几毫秒后自行释放卡住的 SDA。此外，可能存在外部设备去抖动和监控 I2C 总线，它也可能检测到卡住的 SDA 并自行启动总线恢复。如果您想在总线主控制器中实现总线恢复，请确保您已检查硬件设置是否存在此类设备。并且始终使用示波器或逻辑分析仪进行验证！

`incomplete_address_phase`
--------------------------

此文件仅可写入，您需要向其中写入现有 I2C 客户端设备的地址。然后，将开始对该设备的读取传输，但在客户端地址发送后，将在 ACK 阶段停止。因为设备会确认其存在，这会导致 SDA 在 SCL 为高电平时被拉低。因此，类似于上述 “sda” 文件，测试中的总线主控制器应该检测到这种情况并尝试总线恢复。这次，它应该成功，并且设备应在切换 SCL 后释放 SDA。
`incomplete_write_byte`
-----------------------

与上述类似，此文件仅可写入，您需要向其中写入现有 I2C 客户端设备的地址。注入器同样会在一个 ACK 阶段停止，因此设备会保持 SDA 低电平以确认数据。但是，与 `incomplete_address_phase` 相比有两点不同：

a) 发送的消息将是一个写消息
b) 在地址字节之后，将传输一个 0x00 字节。然后，在 ACK 阶段停止

这是一种非常微妙的状态，当进一步的 SCL 时钟脉冲发生时，设备将被设置为将任意数据写入寄存器 0x00（如果它有寄存器的话）。这就是为什么总线恢复（最多 9 个时钟脉冲）必须检查 SDA 或发送额外的 STOP 条件来确保总线已释放的原因。否则，随机数据将被写入设备！

失去仲裁
=================

在这里，我们想要模拟测试中的主控制器在一个多主设置中与其他主控制器争夺总线失败的情况。
`lose_arbitration`
------------------

此文件仅可写入，您需要写入仲裁干扰的持续时间（单位：微秒，最大值为 100 毫秒）。调用进程将休眠并等待下一个总线时钟。该进程是可中断的。
通过等待被测主设备使SCL下降，然后在一段时间内将SDA拉低来实现仲裁失败。因此，发送的I2C地址应该被破坏，并且这种情况应该被正确检测到。这意味着发送的地址应该包含许多“1”位，以便能够检测到破坏情况。实际上并不需要在这个地址上有一个设备，因为应该在此之前检测到仲裁失败。另外需要注意的是，SCL下降是通过中断进行监控的，因此中断延迟可能会导致最初的几位不被破坏。对于一个空闲总线来说，使用此故障注入器的一个好的起点是：

  # echo 200 > lose_arbitration &
  # i2cget -y <要测试的总线> 0x3f

传输过程中的恐慌
==================

当被测主设备开始传输时，此故障注入器将引发内核恐慌。这通常意味着总线主驱动的状态机将被粗暴地中断，总线可能会处于异常状态。可以使用此功能检查您的关机/重启/启动代码是否能处理这种情况。
"inject_panic"
--------------

此文件只可写入，您需要写入从检测到传输开始到引发内核恐慌之间的时间延迟（单位：微秒，最大值为100毫秒）。调用进程随后会休眠并等待下一个总线时钟。该进程是可中断的。
传输开始是通过等待被测主设备使SCL下降来检测的。使用此故障注入器的一个好的起点是：

  # echo 0 > inject_panic &
  # i2cget -y <要测试的总线> <某个地址>

请注意，不需要有设备监听您所使用的地址。根据实际情况，结果可能会有所不同。
