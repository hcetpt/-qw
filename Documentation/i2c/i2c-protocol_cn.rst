I2C 协议
========

本文件概述了基本的 I2C 交易及执行这些交易的内核 API。

符号说明
========

=============== =============================================================
S               起始条件
P               停止条件
Rd/Wr (1 位)    读/写位。读等于 1，写等于 0
A, NA (1 位)    应答（ACK）和未应答（NACK）位
Addr  (7 位)    I2C 7 位地址。注意这可以扩展为获得 10 位 I2C 地址
Data  (8 位)    普通数据字节
[..]            由 I2C 设备发送的数据，而非由主机适配器发送的数据
=============== ==============================================================


简单的发送交易
===============

通过 `i2c_master_send()` 实现 ::

  S Addr Wr [A] Data [A] Data [A] ... [A] Data [A] P


简单的接收交易
===============

通过 `i2c_master_recv()` 实现 ::

  S Addr Rd [A] [Data] A [Data] A ... A [Data] NA P


组合交易
========

通过 `i2c_transfer()` 实现
它们与上述交易类似，但不是发送停止条件 P，而是发送起始条件 S，并且交易继续。
一个字节读取后跟着一个字节写入的例子 ::

  S Addr Rd [A] [Data] NA S Addr Wr [A] Data [A] P


修改后的交易
============

以下对 I2C 协议的修改也可以通过为 I2C 消息设置这些标志来生成。除了 I2C_M_NOSTART 之外，它们通常仅用于解决设备问题：

I2C_M_IGNORE_NAK:
    通常如果从客户端收到 [NA] 则消息会立即中断。设置此标志将任何 [NA] 视为 [A]，并且整个消息都会被发送
这些消息仍可能因 SCL 从低到高超时而失败
I2C_M_NO_RD_ACK:
    在读取消息中，跳过主控的 A/NA 位
I2C_M_NOSTART:
    在一个组合的事务中，某个时刻不会生成 'S 地址 写/读 [A]'。例如，在第二个部分消息上设置 I2C_M_NOSTART 会生成如下序列：

      S 地址 读 [A] [数据] NA 数据 [A] P

    如果你在第一个部分消息上设置了 I2C_M_NOSTART 变量，我们不会生成地址，但会生成起始条件 S。
这样做可能会使总线上的其他所有客户端感到困惑，因此不要尝试这么做。
此标志常用于将系统内存中的多个数据缓冲区的传输合并为看似单一的 I2C 设备传输，但也可能被一些罕见设备用于方向转换之间的情况。

I2C_M_REV_DIR_ADDR:
    这个标志位会切换读/写标志。也就是说，如果你想进行写操作，但需要发出读信号而不是写信号，或者反过来，你可以设置这个标志。例如：

      S 地址 读 [A] 数据 [A] 数据 [A] ... [A] 数据 [A] P

I2C_M_STOP:
    在消息后强制产生停止条件 (P)。某些与 I2C 相关的协议（如 SCCB）要求这样做。通常情况下，你真的不希望在一次传输的消息之间被打断。
