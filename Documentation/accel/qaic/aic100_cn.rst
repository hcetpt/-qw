... SPDX 许可证标识符：仅限 GPL-2.0

===============================
 高通云 AI 100（AIC100）
===============================

概述
========

高通云 AI 100/AIC100 系列产品（包括作为骁龙 Ride 一部分的 SA9000P）是包含专用 SoC ASIC 的 PCIe 扩展卡，旨在高效运行人工智能（AI）深度学习推理任务。它们属于 AI 加速器。
AIC100 的 PCIe 接口能够在八条通道上（x8）达到 PCIe 第四代的速度。每张卡上的单个 SoC 可以拥有最多 16 个 NSP 来运行工作负载。
每个 SoC 配备了一个 A53 管理 CPU。每张卡上可以配置高达 32GB 的 DDR 内存。
多个 AIC100 卡可以在单一系统中使用，以扩展整体性能。AIC100 卡支持多用户，并且能够同时执行来自多个用户的任务。

硬件描述
====================

AIC100 卡包含一个 AIC100 SoC、板载 DDR 内存以及一系列辅助外设（电源管理 IC 等）。
AIC100 卡可以采用传统的 PCIe 半高半长（HHHL）形式，也可以采用双 M.2 形式。两种形式都通过 PCIe 连接到主机系统。
作为 PCIe 终端/适配器，AIC100 通过标准的供应商 ID（VID）/设备 ID（DID）组合向主机唯一标识自身。AIC100 使用标准的高通 VID（0x17cb）。所有 AIC100 SKU 均使用相同的 AIC100 DID（0xa100）。
AIC100 没有实现 FLR（功能级重置）。
AIC100 实现了 MSI（消息信号中断），但没有实现 MSI-X。AIC100 偏好使用 17 个 MSI（其中 1 个用于 MHI，16 个用于 DMA 桥接）。在无法预留 32 个 MSI 的情况下，可以退回到仅使用 1 个 MSI。
作为 PCIe 设备，AIC100 利用 BAR（基址寄存器）来为主机提供与设备硬件交互的接口。AIC100 提供了三个 64 位的 BAR。
* 第一个 BAR 大小为 4K，向主机暴露 MHI 接口
* 第二个 BAR 大小为 2M，向主机暴露 DMA 桥接接口
* 第三个 BAR 的大小根据每个 AIC100 的配置而变化，默认为 64K。当前这个 BAR 没有任何用途

从主机的角度来看，AIC100 有几个关键的硬件组件：

* MHI（调制解调器主机接口）
* QSM（QAIC 服务管理器）
* NSPs（神经信号处理器）
* DMA 桥接
* DDR

MHI
---
AIC100 通过 PCIe 拥有一个 MHI 接口。MHI 的文档可以在 Documentation/mhi/index.rst 中找到。MHI 是主机用来与 QSM 通信的机制。除了通过 DMA 桥接传输的工作负载数据之外，所有与设备的交互都是通过 MHI 进行的。
QSM
---
QAIC 服务管理器。这是一个 ARM A53 CPU，运行卡片的主要固件并执行卡片上的管理任务。它还通过 MHI 与主机通信。每个 AIC100 都配备了一个这样的管理器。
NSP
---
神经信号处理器。每个 AIC100 最多可以有 16 个这样的处理器。这些处理器在 AIC100 上运行工作负载。每个 NSP 是一个配备了 HVX 和 HMX 的 Qualcomm Hexagon（Q6）DSP。每个 NSP 每次只能运行一个工作负载，但多个 NSP 可能被分配给同一个工作负载。由于每个 NSP 只能运行一个工作负载，因此 AIC100 限于同时运行 16 个工作负载。工作负载的“调度”由主机负责。AIC100 不会自动进行时间分片。
DMA 桥接
--------
DMA 桥接是一个定制的 DMA 引擎，用于管理进出工作负载的数据流。AIC100 配备了一个这样的桥接器。DMA 桥接器拥有 16 个通道，每个通道包括一组请求/响应 FIFO（先进先出）。每个活动的工作负载被分配一个 DMA 桥接器通道。DMA 桥接器暴露硬件寄存器来管理 FIFO（头尾指针），但需要主机内存来存储 FIFO。
DDR
---
AIC100 配备了板载 DDR。总共，一个 AIC100 可以拥有高达 32GB 的 DDR。这部分 DDR 用于存储工作负载、工作负载所需的数据，并且被 QSM 用来管理设备。NSPs 由 QSM 授权访问 DDR 的特定部分。主机没有直接访问 DDR 的权限，必须向 QSM 发出请求来将数据传输到 DDR。

高级使用流程
=============
AIC100 是一个多用户、可编程加速器，通常用于以推理模式运行神经网络，以高效地执行人工智能操作。
AIC100 并非设计用于训练神经网络。AIC100 可以用于通用计算工作负载。
假设用户想要利用 AIC100，他们会遵循以下步骤：

1. 将工作负载编译为目标为 NSP（网络服务处理器）的 ELF（可执行和链接格式）文件。
2. 向 QSM（质量安全管理器）发出请求，将工作负载及相关组件加载到设备的 DDR（动态随机存取存储器）中。
3. 向 QSM 发出请求，激活一组空闲 NSP 上的工作负载。
4. 向 DMA Bridge（直接内存访问桥接器）发出请求，将输入数据发送给工作负载进行处理，并发出其他请求以接收经处理的输出数据。
5. 当不再需要该工作负载时，向 QSM 发出请求停用工作负载，从而使 NSP 返回到空闲状态。
6. 当工作负载及其相关组件在未来会话中不再需要时，向 QSM 发出请求卸载 DDR 中的数据。这将释放 DDR 供其他用户使用。

### 启动流程

AIC100 使用无闪存启动流程，该流程源自 Qualcomm MSM。
当 AIC100 首次上电时，它开始从 ROM（只读存储器）执行 PBL（主引导加载程序）。PBL 列举 PCIe 链路，并初始化 MHI（移动主机接口）中的 BHI（引导主机接口）组件。
通过 BHI，主机指示 PBL SBL（次级引导加载程序）映像的位置。PBL 从主机获取该映像，验证其有效性，并开始执行 SBL。
SBL 初始化 MHI，并使用 MHI 通知主机设备已进入 SBL 阶段。SBL 执行多项操作：

* SBL 初始化大部分硬件（PBL 未初始化的部分），包括 DDR。
* SBL 将启动日志卸载至主机。
* SBL 与主机同步时间戳以便将来记录日志信息。
*SBL使用Sahara协议从主机获取运行时固件映像。
一旦SBL获取并验证了运行时固件，它就会使NSPs脱离复位状态，并跳转进入QSM。
QSM通过MHI通知主机设备已进入QSM阶段（在MHI术语中称为AMSS）。此时，AIC100设备已经完全功能可用，准备好处理工作负载。

### 用户空间组件

#### 编译器

基于上游LLVM的AIC100开放编译器可以在以下位置找到：
https://github.com/quic/software-kit-for-qualcomm-cloud-ai-100-cc

#### 用户模式驱动（UMD）

可以与qaic内核驱动交互的开放UMD可以在以下位置找到：
https://github.com/quic/software-kit-for-qualcomm-cloud-ai-100

#### Sahara加载器

一个名为kickstart的Sahara协议的开源实现可以在以下位置找到：
https://github.com/andersson/qdl

### MHI通道

AIC100定义了多个MHI通道用于不同目的。以下是已定义的通道及其用途列表：

| 通道名称   | ID编号   | 执行环境 | 用途                                                         |
|------------|----------|----------|--------------------------------------------------------------|
| QAIC_LOOPBACK  | 0 & 1   | AMSS     | 发送到此通道的任何数据都会被设备送回主机。                   |
| QAIC_SAHARA    | 2 & 3   | SBL      | SBL用于从主机获取运行时固件。                                 |
| QAIC_DIAG      | 4 & 5   | AMSS     | 用于通过DIAG协议与QSM通信。                                   |
| QAIC_SSR       | 6 & 7   | AMSS     | 用于通知主机子系统重启事件，并卸载SSR崩溃转储。               |
| QAIC_QDSS      | 8 & 9   | AMSS     | 用于Qualcomm调试子系统。                                      |
| QAIC_CONTROL   | 10 & 11 | AMSS     | 用于Neural Network Control (NNC)协议。这是主机和QSM之间管理工作负载的主要通道。 |
| QAIC_LOGGING   | 12 & 13 | SBL      | SBL用于向主机发送启动日志。                                   |
| QAIC_STATUS    | 14 & 15 | AMSS     | 用于通知主机可靠性、可访问性、服务性(RAS)事件。               |
| QAIC_TELEMETRY | 16 & 17 | AMSS     | 用于获取/设置功率、热等属性。                                  |
| QAIC_DEBUG     | 18 & 19 | AMSS     | 未使用。                                                      |
| QAIC_TIMESYNC  | 20 & 21 | SBL      | 用于同步设备侧日志中的时间戳与主机时间源。                     |
| QAIC_TIMESYNC  | 22 & 23 | AMSS     | 用于周期性地同步设备侧日志中的时间戳与主机时间源。            |

### DMA桥

#### 概览

DMA桥是设备与主机间主要接口之一（另一个是MHI）。作为激活NSP上运行的工作负载的一部分，QSM为该网络分配一个DMA桥通道。工作负载的DMA桥通道（简称DBC）仅供该工作负载使用，不与其他工作负载共享。
每个DBC包含一对先进先出队列(FIFO)，用于管理工作负载的数据输入输出。一个FIFO是请求FIFO，另一个FIFO是响应FIFO。
每个DBC在硬件中包含4个寄存器：

* 请求FIFO头指针（偏移量0x0）。由主机只读。指示设备已消费的FIFO中的最新项。
* 请求FIFO尾指针（偏移量0x4）。由主机读写。主机增加这个寄存器以向FIFO添加新项。
* 响应FIFO头指针（偏移量0x8）。由主机读写。指示主机已消费的FIFO中的最新项。
* 响应FIFO尾指针（偏移量0xc）。由主机只读。设备增加这个寄存器以向FIFO添加新项。
每个寄存器中的值是FIFO中的索引。要获取由寄存器指向的FIFO元素的位置：FIFO基地址 + 寄存器 * 元素大小。

DBC寄存器通过第二个BAR对主机可见。每个DBC占用BAR中4KB的空间。

实际的FIFO是由主机内存支持的。当向QSM发送请求以激活网络时，主机必须提供用于FIFO的内存。

由于设备内部映射的限制，对于每个DBC来说，必须提供一个连续的内存块，该内存块同时支持两个FIFO。请求FIFO将消耗内存块的起始部分，而响应FIFO将消耗内存块的末尾部分。

### 请求FIFO

请求FIFO元素具有以下结构：

```c
struct request_elem {
	u16 req_id;        // 请求ID。具有相同请求ID的请求FIFO元素和响应FIFO元素指代相同的命令
	u8  seq_id;        // 请求内的序列ID。DMA Bridge忽略此字段
	u8  pcie_dma_cmd;  // 描述此请求的DMA部分
	u32 reserved;      // 保留
	u64 pcie_dma_source_addr; // PCIe DMA源地址
	u64 pcie_dma_dest_addr;  // PCIe DMA目标地址
	u32 pcie_dma_len;  // PCIe DMA长度
	u32 reserved;      // 保留
	u64 doorbell_addr; // 门铃地址
	u8  doorbell_attr; // 门铃属性
	u8  reserved;      // 保留
	u16 reserved;      // 保留
	u32 doorbell_data; // 门铃数据
	u32 sem_cmd0;      // 半导体命令0
	u32 sem_cmd1;      // 半导体命令1
	u32 sem_cmd2;      // 半导体命令2
	u32 sem_cmd3;      // 半导体命令3
};
```

请求字段描述：

- `req_id`: 请求ID。具有相同请求ID的请求FIFO元素和响应FIFO元素指代相同的命令。
- `seq_id`: 在请求内的序列ID。DMA Bridge忽略此字段。
- `pcie_dma_cmd`: 描述此请求的DMA部分。
  - 第7位是强制MSI标志，它覆盖DMA Bridge的MSI逻辑，并在完成此请求时生成MSI，且QSM配置DMA Bridge来查看这一位。
  - 第6到第5位保留。
  - 第4位是完成码标志，指示DMA Bridge在完成此请求时生成响应FIFO元素。
* 位(3) 表示此请求是链表传输(0)还是批量传输(1)
* 位(2) 保留
* 位(1:0) 表示传输类型。无传输(0)、到设备(1)、从设备(2)。值 3 是非法的

`pcie_dma_source_addr`
对于批量传输的源地址，或链表的地址

`pcie_dma_dest_addr`
对于批量传输的目的地址

`pcie_dma_len`
批量传输的长度。注意该字段的大小限制传输的最大尺寸为 4GB

`doorbell_addr`
当此请求完成时触发门铃的地址

`doorbell_attr`
门铃属性
* 位(7) 表示是否要对门铃进行写操作
* 位(6:2) 保留
* 位(1:0) 包含门铃长度的编码。0 表示 32 位，1 表示 16 位，2 表示 8 位，3 为预留。门铃地址必须自然对齐到指定的长度。
* `doorbell_data`  
  要写入门铃的数据。只有与门铃长度对应的位是有效的。
* `sem_cmdN`  
  信号量命令  
  * 位(31) 表示此信号量命令被启用。
  * 位(30) 是向设备 DMA 栅栏。阻止此请求直到所有向设备的 DMA 传输完成。
  * 位(29) 是从设备 DMA 栅栏。阻止此请求直到所有从设备的 DMA 传输完成。
  * 位(28:27) 为预留。
  * 位(26:24) 是信号量命令。0 表示无操作(NOP)。1 表示使用指定值初始化。2 表示递增。3 表示递减。4 表示等待直到信号量等于指定值。5 表示等待直到信号量大于或等于指定值。6 表示 "P"，等待直到信号量大于 0，然后递减 1。7 为预留。
  * 位(23) 为预留。
* 位(22)是信号量同步位。0 表示后同步，意味着信号量操作在DMA传输之后执行。1 表示预同步，这会控制DMA传输。每个请求只允许有一个预同步。
* 位(21)保留。
* 位(20:16)是待操作的信号量的索引。
* 位(15:12)保留。
* 位(11:0)是在操作中使用的信号量值。

总的来说，一个请求按以下四个步骤处理：

1. 如果指定了预同步，则必须满足预同步信号量条件。
2. 如果已启用，则进行DMA传输。
3. 如果指定了后同步，则必须满足后同步信号量条件。
4. 如果已启用，则写入门铃。

通过将信号量与NSP上运行的工作负载结合使用，数据管道可以被同步，使得主机可以排队多个数据请求供工作负载处理，但DMA桥仅当工作负载准备好处理下一个输入时才将数据复制到工作负载的内存中。

### 响应FIFO

一旦请求完全处理完毕，如果在`pcie_dma_cmd`中指定了生成响应FIFO元素，则会生成一个响应FIFO元素。响应FIFO元素的结构如下：

```c
struct response_elem {
    u16 req_id;          // 与生成此元素的请求的req_id匹配
    u16 completion_code; // 此请求的状态。0表示成功。非零表示错误
};
```

DMA桥会在DBC的响应FIFO中活动时向主机生成MSI中断。DMA桥硬件具有IRQ风暴缓解算法，其中它仅在响应FIFO从空变为非空时生成MSI（除非启用了强制MSI并被触发）。作为对此MSI的响应，主机预计需要清空响应FIFO，并且必须注意处理清空FIFO与设备插入元素到FIFO之间的任何竞态条件。

### 神经网络控制器 (NNC) 协议

NNC协议是主机如何向QSM提出请求以管理工作负载的方式。
它使用 QAIC_CONTROL MHI 通道。
每个NNC请求都被封装成一条消息。每条消息是一系列的
交易。一种直通（passthrough）类型的交易可以包含被称为
命令的元素。
QSM要求NNC消息必须以小端格式编码，并且字段需要自然对齐。由于某些NNC消息中存在64位元素，因此必须保持64位对齐。
一条消息包含一个头部然后是一系列的交易。从QSM到主机的消息最多可以是4K大小。从主机到QSM的消息最多可以是64K（单个MHI数据包的最大尺寸），但是有一种续传特性，即消息N+1可以被标记为消息N的续传。这种特性用于异常大的DMA传输交易。

### 交易描述

#### 直通（passthrough）
允许用户空间直接向QSM发送不透明的有效载荷。
这用于NNC命令。用户空间负责在有效载荷中管理
QSM消息的要求。

#### DMA传输
DMA传输。描述了一个对象，该对象应通过地址和大小元组
由QSM DMA传输至设备。

#### 激活
将工作负载激活到NSPs上。主机必须提供内存供DBC使用。

#### 停用
停用活动的工作负载并将NSPs返回到空闲状态。

#### 状态查询
向QSM查询其NNC实现的状态。返回NNC版本，
以及是否使用CRC校验。
### 终止
释放用户的资源。

### dma_xfer_cont
前一个DMA传输的延续。如果一个DMA传输不能通过单一消息指定（高度碎片化），此交易可用于指定更多的范围。

### validate_partition
向QSM查询以确定分区标识符是否有效。

每个消息都带有用户ID和分区ID。用户ID允许QSM跟踪资源，并在用户离开时（例如进程崩溃）释放这些资源。分区ID标识QSM管理的资源分区，该消息适用于这个分区。

消息可能包含CRC校验码。在QSM通过状态交易报告不需要CRC校验码之前，消息应该应用CRC校验码。SA9000P上的QSM需要CRC校验码以实现黑通道安全。

### 子系统重启 (SSR)
#### =============
SSR的概念是限制错误的影响范围。一个AIC100设备可能有多个用户，每个用户有自己的工作负载运行。如果一个用户的工作负载崩溃，其影响应仅限于该工作负载，而不影响其他工作负载。SSR实现了这一点。
如果某个特定的工作负载崩溃，QSM会通过QAIC_SSR MHI通道通知主机。此通知通过分配给该工作负载的DBC来识别。然后使用多阶段恢复过程清理双方，并使DBC/NSPs恢复到可工作状态。
当SSR发生时，工作负载中的任何状态都会丢失。正在处理或已排队但尚未服务的任何输入都会丢失。加载的工件将保留在板载DDR中，但如果希望恢复工作负载，主机需要重新激活它。

### 可靠性、可用性、可服务性 (RAS)
#### ==================================
AIC100预计将在应用了RAS理念的服务器系统中部署。简单来说，RAS是指检测、分类和报告错误的概念。虽然PCIe有AER（高级错误报告），它对RAS有所贡献，但AER不允许设备报告内部错误的详细信息。因此，AIC100实现了自定义的RAS机制。当发生RAS事件时，QSM将通过QAIC_STATUS MHI通道报告事件及其适当详情。系统管理员可以根据RAS报告确定某个设备是否需要额外的服务。

### 传感器数据
#### =========
QSM有能力报告设备的各种物理属性，在某些情况下，还允许主机控制它们。示例包括温度限制、温度读数和功率读数。这些项目通过QAIC_TELEMETRY MHI通道进行通信。
您没有提供需要翻译的文本。请提供需要翻译成中文的英文或其他语言的文本。
