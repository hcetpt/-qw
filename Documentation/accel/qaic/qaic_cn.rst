... SPDX 许可证标识符：仅限 GPL-2.0

=============
 QAIC 驱动程序
=============

QAIC 驱动程序是 AIC100 系列人工智能加速器产品的内核模式驱动程序 (KMD)。
中断
==========

IRQ 风暴缓解
--------------------

尽管 AIC100 DMA 桥接硬件实现了一种 IRQ 风暴缓解机制，但仍有可能发生 IRQ 风暴。如果工作负载特别快且主机响应迅速，则可能会出现风暴。如果主机能够以与设备向其中插入元素的速度一样快速清空响应 FIFO，那么设备将频繁地使响应 FIFO 从空变为非空，并以相当于工作负载处理输入速度的速率生成 MSI。已知车牌识别网络 (lprnet) 工作负载会触发这种情况，并能产生超过每秒 10 万次的 MSI。观察发现大多数系统无法长时间承受这种中断风暴，最终会因为中断控制器打断主机 CPU 的开销导致某种形式的看门狗触发而崩溃。

为了缓解这一问题，QAIC 驱动程序实现了特定的 IRQ 处理方式。当 QAIC 收到 IRQ 时，它会禁用该中断线。这可以防止中断控制器打断 CPU。然后 AIC 清空 FIFO。一旦 FIFO 被清空，QAIC 实施一种“最后机会”轮询算法，在此期间 QAIC 将睡眠一段时间来查看工作负载是否会生成更多活动。在此期间 IRQ 线保持禁用状态。如果没有检测到活动，QAIC 退出轮询模式并重新启用 IRQ 线。

这种在 QAIC 中实施的缓解措施非常有效。同样的 lprnet 使用案例，其产生的 IRQ 每秒可达 10 万次（根据 `/proc/interrupts` 显示），被减少到了大约 5 分钟内只有 64 次 IRQ，同时保持了主机系统的稳定性，以及相同的工作负载吞吐性能（在运行间噪声变化范围内）。

单个 MSI 模式
---------------

并非所有系统都很好地支持 MultiMSI；虚拟化系统尤其如此（截至 2023 年）。从虚拟机管理程序屏蔽 PCIe MSI 功能结构到大型内存需求的 vIOMMU（支持 MultiMSI 所必需），在必要时能够回退到单个 MSI 是有用的。

为了支持这种回退，我们允许只分配一个 MSI 的情况，并在这个 MSI 之间共享 MHI 和 DBC。设备检测到只有一个 MSI 被配置时，将 DBC 的中断指向通常用于 MHI 的中断。不幸的是这意味着每当有中断到达时，每个 DBC 和 MHI 的中断处理程序都会被唤醒；然而，DBC 的线程化 IRQ 处理程序只有在检测到需要处理的工作时才启动（MHI 总是启动其线程化处理程序）。

如果 DBC 被配置为强制使用 MSI 中断，这可能绕过上述软件 IRQ 风暴缓解措施。由于 MSI 是共享的，因此永远不会被禁用，允许 FIFO 中的每个新条目触发新的中断。

神经网络控制 (NNC) 协议
=====================================

NNC 的实现分为 KMD (QAIC) 和 UMD 两部分。通常情况下，QAIC 理解如何对 NNC 线协议进行编码/解码，以及那些需要内核空间知识来处理的协议元素（例如，将主机内存映射到设备 IOVA）。QAIC 理解消息结构和所有的事务。QAIC 不理解命令（传递事务的有效载荷）。

QAIC 处理并强制执行所需的字节序为小端以及 64 位对齐，尽可能做到这一点。由于 QAIC 不知道传递事务的内容，它依赖于 UMD 来满足这些要求。

终止事务对于 QAIC 特别有用。由于大多数资源加载活动发生在 NNC 命令中，QAIC 对加载到设备上的资源并不了解。因此，QAIC 没有能力撤销用户空间活动。为了确保用户空间客户端的资源在进程崩溃或出现错误的情况下完全释放，QAIC 使用终止命令通知 QSM 用户已经离开并且可以释放资源。
QSM 可以报告其支持的 NNC 协议版本号。这采用主版本号和次版本号的形式。
- 主版本号更新表示对 NNC 协议的更改，这些更改影响消息格式或交易（影响 QAIC）。
- 次版本号更新表示对 NNC 协议的更改，这些更改影响命令（不影响 QAIC）。

uAPI
====
QAIC 为每个物理 PCIe 设备创建一个加速设备。只要 PCIe 设备被 Linux 所识别，该加速设备就一直存在。
在任何时候，PCIe 设备可能不处于接受来自用户空间请求的状态。当设备可以接受请求（在线）或由于重置或其他状态转换不再接受请求（离线）时，QAIC 将触发 KOBJ_ONLINE/OFFLINE 用户事件进行通告。
QAIC 定义了一系列与驱动程序相关的 IOCTL，作为用户空间 API 的一部分：
- DRM_IOCTL_QAIC_MANAGE
  此 IOCTL 允许用户空间向 QSM 发送 NNC 请求。调用将阻塞直到收到响应或请求超时。
- DRM_IOCTL_QAIC_CREATE_BO
  此 IOCTL 允许用户空间分配一个缓冲对象（BO），该对象可以向工作负载发送或接收数据。调用将返回代表已分配缓冲区的 GEM 句柄。在 BO 被切分之前（参见 DRM_IOCTL_QAIC_ATTACH_SLICE_BO），它还不可用。
- DRM_IOCTL_QAIC_MMAP_BO
  此 IOCTL 允许用户空间准备一个已分配的 BO 以便将其映射到用户空间进程。
- DRM_IOCTL_QAIC_ATTACH_SLICE_BO
  此 IOCTL 允许用户空间切分 BO 以准备将其发送给设备。切分是指描述 BO 的哪些部分发送到工作负载的哪个位置的操作。这需要一组 DMA 传输来供 DMA 桥使用，因此锁定 BO 到特定的 DBC。
### DRM_IOCTL_QAIC_EXECUTE_BO
此 IOCTL 允许用户空间向设备提交一系列切片的 BO。该调用是非阻塞的。成功仅表示 BO 已被排队到设备，但并不能保证它们已被执行。

### DRM_IOCTL_QAIC_PARTIAL_EXECUTE_BO
此 IOCTL 的操作方式类似于 DRM_IOCTL_QAIC_EXECUTE_BO，但它允许用户空间缩小发送到设备的 BO 的大小。如果一个 BO 通常有 N 个输入，但在某些情况下只有其中一部分可用，此 IOCTL 允许用户空间指示仅将 BO 的前 M 字节发送到设备以最小化数据传输开销。此 IOCTL 动态重新计算切片，因此在 BO 能够被排队到设备之前会有一些处理开销。

### DRM_IOCTL_QAIC_WAIT_BO
此 IOCTL 允许用户空间确定特定 BO 是否已被设备处理。该调用将会阻塞，直到 BO 被处理并可以重新排队到设备，或者超时发生为止。

### DRM_IOCTL_QAIC_PERF_STATS_BO
此 IOCTL 允许用户空间收集最近一次执行 BO 的性能统计信息。这使用户空间能够构建从开始到结束的 BO 处理时间线以进行性能分析。

### DRM_IOCTL_QAIC_PART_DEV
此 IOCTL 允许用户空间请求一个额外的“影子设备”。这个额外的 accelN 设备与 AIC100 设备上特定的资源分区相关联，并可用于限制进程使用资源的子集。

### DRM_IOCTL_QAIC_DETACH_SLICE_BO
此 IOCTL 允许用户空间从 BO 中移除原先由 DRM_IOCTL_QAIC_ATTACH_SLICE_BO 调用提供的切片信息。这是 DRM_IOCTL_QAIC_ATTACH_SLICE_BO 的逆操作。BO 必须处于空闲状态才能调用 DRM_IOCTL_QAIC_DETACH_SLICE_BO。成功执行拆分切片操作后，可以通过新的 DRM_IOCTL_QAIC_ATTACH_SLICE_BO 调用来为 BO 添加新的切片信息。在拆分切片后，BO 无法被执行，直到新的附加切片操作完成后。结合使用附加切片和拆分切片调用允许用户空间使用同一个 BO 执行多个工作负载。

### 用户空间客户端隔离

AIC100 支持多个客户端。多个 DBC 可以被单一客户端消费，而多个客户端也可以各自消费一个或多个 DBC。工作负载可能包含敏感信息，因此只有拥有该工作负载的客户端才应该能够与 DBC 进行交互。
客户端通过其打开操作关联的实例来识别。一个客户端只能使用他们自己分配的内存，以及分配给他们的工作负载的 DBC。尝试访问其他客户端分配的资源将会被拒绝。

### 模块参数

QAIC 支持以下模块参数：

**datapath_polling (布尔值)**

配置 QAIC 使用一个用于数据路径事件的轮询线程，而不是依赖于设备中断。对于有多重 MSI 问题的平台很有用。必须在 QAIC 驱动初始化时设置。默认值为 0（关闭）。

**mhi_timeout_ms (无符号整数)**

设置 MHI 操作的超时值（以毫秒为单位）。必须在驱动程序检测到设备时设置。默认值为 2000（2 秒）。
**control_resp_timeout_s (unsigned int)**

设置 QSM 对 NNC 消息响应的超时值，单位为秒（s）。必须在驱动程序向 QSM 发送请求时设置。默认值为 60（一分钟）。

**wait_exec_default_timeout_ms (unsigned int)**

设置 wait_exec ioctl 的默认超时时间，单位为毫秒（ms）。必须在执行 wait_exec ioctl 调用之前设置。ioctl 调用中指定的值将覆盖本次调用的默认值。默认值为 5000（5 秒）。

**datapath_poll_interval_us (unsigned int)**

设置数据路径轮询处于活动状态时的轮询间隔，单位为微秒（us）。在下一个轮询间隔开始时生效。默认值为 100（100 微秒）。

**timesync_delay_ms (unsigned int)**

设置两次连续的时间同步操作之间的时间间隔，单位为毫秒（ms）。默认值为 1000（1000 毫秒）。
