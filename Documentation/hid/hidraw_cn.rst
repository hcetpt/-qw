================================================================
HIDRAW - 对USB和蓝牙人机接口设备的原始访问
================================================================

hidraw驱动程序提供了对USB和蓝牙人机接口设备（HIDs）的原始接口。它与hiddev的不同之处在于，发送和接收的报告不会被HID解析器解析，而是以未修改的形式发送到设备和从设备接收。
如果用户空间应用程序确切知道如何与硬件设备通信，并且能够手动构造HID报告，则应使用hidraw。当为自定义HID设备编写用户空间驱动程序时，通常就是这种情况。
hidraw也适用于那些以不符合其报告描述符的方式发送和接收数据的非规范HID设备。由于hiddev会解析通过其发送和接收的报告，并检查这些报告是否符合设备的报告描述符，因此无法使用hiddev与这些非规范设备通信。对于这些非规范设备，除了编写自定义内核驱动程序外，hidraw是唯一的替代方案。
hidraw的一个优点是其被用户空间应用程序使用时独立于底层硬件类型。目前，hidraw已针对USB和蓝牙实现。将来，随着使用HID规范的新硬件总线类型的开发，hidraw将扩展以添加对这些新总线类型的支持。
hidraw使用动态主号，这意味着应依赖udev来创建hidraw设备节点。通常，udev会在/dev目录下直接创建设备节点（例如：/dev/hidraw0）。由于此位置取决于发行版和udev规则，应用程序应使用libudev来查找系统上连接的hidraw设备。有关libudev及其工作示例的教程位于：

http://www.signal11.us/oss/udev/
https://web.archive.org/web/2019*/www.signal11.us

HIDRAW API
--------------

read()
-------
read()将读取从HID设备接收到的排队报告。对于USB设备，使用read()读取的报告是从设备在INTERRUPT IN端点发送的报告。默认情况下，read()将在有报告可读之前阻塞。可以通过向open()传递O_NONBLOCK标志或使用fcntl()设置O_NONBLOCK标志使read()变为非阻塞。
对于使用编号报告的设备，返回数据的第一个字节将是报告编号；报告数据紧随其后，从第二个字节开始。对于不使用编号报告的设备，报告数据将从第一个字节开始。

write()
-------
write()函数将向设备写入一个报告。对于USB设备，如果设备具有INTERRUPT OUT端点，则报告将通过该端点发送。如果没有，报告将通过控制端点使用SET_REPORT传输发送。
传递给write()的缓冲区的第一个字节应设置为报告编号。如果设备不使用编号报告，则第一个字节应设置为0。报告数据本身应从第二个字节开始。

ioctl()
-------
hidraw支持以下ioctl命令：

HIDIOCGRDESCSIZE：
获取报告描述符大小

此ioctl将获取设备的报告描述符大小。
HIDIOCGRDESC:
获取报告描述符

此ioctl使用hidraw_report_descriptor结构体返回设备的报告描述符。确保将hidraw_report_descriptor结构体中的size字段设置为从HIDIOCGRDESCSIZE获得的大小。

HIDIOCGRAWINFO:
获取原始信息

此ioctl将返回一个包含总线类型、供应商ID（VID）和产品ID（PID）的hidraw_devinfo结构体。总线类型可以是以下之一：

- BUS_USB
- BUS_HIL
- BUS_BLUETOOTH
- BUS_VIRTUAL

这些定义在uapi/linux/input.h中。

HIDIOCGRAWNAME(len):
获取原始名称

此ioctl返回一个包含设备供应商和产品字符串的字符串。返回的字符串为Unicode编码的UTF-8格式。

HIDIOCGRAWPHYS(len):
获取物理地址

此ioctl返回一个表示设备物理地址的字符串。对于USB设备，该字符串包含到设备的物理路径（USB控制器、集线器、端口等）。对于蓝牙设备，该字符串包含设备的硬件（MAC）地址。

HIDIOCSFEATURE(len):
发送特征报告

此ioctl将向设备发送一个特征报告。根据HID规范，特征报告总是通过控制端点发送。将提供的缓冲区的第一个字节设置为报告编号。对于不使用编号报告的设备，将第一个字节设置为0。报告数据从第二个字节开始。确保相应地设置len，使其比报告长度多1（以容纳报告编号）。

HIDIOCGFEATURE(len):
获取特征报告

此ioctl将通过控制端点请求设备的一个特征报告。提供的缓冲区的第一个字节应设置为所请求报告的报告编号。对于不使用编号报告的设备，将第一个字节设置为0。返回的报告缓冲区将在第一个字节包含报告编号，随后是从设备读取的报告数据。对于不使用编号报告的设备，报告数据将从返回缓冲区的第一个字节开始。

HIDIOCSINPUT(len):
发送输入报告

此ioctl将通过控制端点向设备发送一个输入报告。在大多数情况下，在设备上设置输入HID报告是没有意义且没有效果的，但某些设备可能会选择使用此方法来设置或重置报告的初始状态。与此报告一起发出的缓冲区格式与HIDIOCSFEATURE相同。
HIDIOCGINPUT(len)：
获取输入报告

此ioctl通过控制端点请求设备的输入报告。在大多数设备上，这种方法比使用专门的输入端点获取常规输入报告要慢，但它允许主机请求特定报告编号的值。通常，这用于在应用程序通过常规设备读取接口监听正常报告之前，请求设备输入报告的初始状态。该报告所使用的缓冲区格式与HIDIOCGFEATURE相同。

HIDIOCSOUTPUT(len)：
发送输出报告

此ioctl通过控制端点向设备发送输出报告。在大多数设备上，这种方法比使用专门的输出端点发送常规输出报告要慢，但为了完整性而添加了此功能。通常，这用于设置设备输出报告的初始状态，在应用程序通过常规设备写入接口发送更新之前。该报告所使用的缓冲区格式与HIDIOCSFEATURE相同。

HIDIOCGOUTPUT(len)：
获取输出报告

此ioctl通过控制端点请求设备的输出报告。通常，这用于在应用程序根据需要通过HIDIOCSOUTPUT请求或常规设备写入接口进行更新之前，检索设备输出报告的初始状态。该报告所使用的缓冲区格式与HIDIOCGFEATURE相同。

示例
------
在samples/目录下可以找到hid-example.c，它展示了read()、write()以及所有hidraw相关的ioctl的示例。这些代码任何人都可以用于任何目的，并且可以作为开发使用hidraw的应用程序的起点。

文档作者：

Alan Ott <alan@signal11.us>，Signal 11 Software
