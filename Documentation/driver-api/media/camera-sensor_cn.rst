### SPDX 许可证标识符: GPL-2.0

### 撰写摄像头传感器驱动程序

#### 概述

本文档仅涵盖内核中的 API。关于在摄像头传感器驱动程序中实现用户空间 API 的最佳实践，请参阅 :ref:`media_using_camera_sensor_drivers`

#### CSI-2、并行和 BT.656 总线

请参见 :ref:`transmitter-receiver`

#### 处理时钟

摄像头传感器具有内部时钟树，包括一个 PLL 和多个分频器。时钟树通常由驱动程序根据几个特定于硬件的输入参数进行配置：外部时钟频率和链路频率。这两个参数通常从系统固件中获得。**在任何情况下都不应使用其他频率。**

时钟频率之所以如此重要是因为时钟信号来自于 SoC，在许多情况下设计用于系统的特定频率。使用另一个频率可能会在其他地方产生有害影响。因此，只有预先确定的频率可以由用户配置。

##### ACPI

读取 `clock-frequency`_ DSD 属性来表示频率。驱动程序可以依赖于这个频率被使用。

##### Device Tree

实现这一点的首选方法是使用 `assigned-clocks`、`assigned-clock-parents` 和 `assigned-clock-rates` 属性。更多信息，请参阅 [时钟设备树绑定](https://github.com/devicetree-org/dt-schema/blob/main/dtschema/schemas/clock/clock.yaml)。然后驱动程序使用 `clk_get_rate()` 获取频率。

这种方法的一个缺点是没有保证该频率没有被另一个驱动程序直接或间接修改过，或者根本就没有被主板的时钟树支持。需要对通用时钟框架 API 进行更改以确保可靠性。

#### 电源管理

摄像头传感器与其他设备一起使用以形成摄像头管道。为了确保整个管道的连贯电源管理，它们必须遵守此处列出的规则。

摄像头传感器驱动程序负责控制它们所控制的设备的电源状态。它们应当使用运行时 PM 来管理电源状态。运行时 PM 应当在探测时启用，并在移除时禁用。驱动程序应启用运行时 PM 自动挂起。另请参阅 :ref:`async sub-device registration <media-registering-async-subdevs>`

运行时 PM 处理器应处理时钟、调节器、GPIO 和为传感器上下电所需的其他系统资源。对于不使用这些资源的驱动程序（例如只支持 ACPI 系统的驱动程序），可以不实现运行时 PM 处理器。

一般来说，当访问其寄存器或处于流式传输状态时，设备至少应被供电。驱动程序应在开始流式传输时使用 `pm_runtime_resume_and_get()`，在停止流式传输时使用 `pm_runtime_put()` 或 `pm_runtime_put_autosuspend()`。它们可以在探测时为设备供电（例如，读取识别寄存器），但不应无条件地在探测后保持供电。
在系统挂起时，整个摄像头管道必须停止流传输，并在系统恢复时重新启动。这需要摄像头传感器和其他摄像头管道组件之间的协调。桥接驱动程序负责这种协调，并通过调用相应的子设备操作（如``.s_stream()``、``.enable_streams()``或``.disable_streams()``）指示摄像头传感器停止和重新开始流传输。因此，摄像头传感器驱动程序**不应**跟踪流状态以在电源管理（PM）挂起处理程序中停止流传输并在恢复处理程序中重启它。通常，驱动程序不应实现系统的电源管理（PM）处理程序。摄像头传感器驱动程序**不应**实现子设备的``.s_power()``操作，因为该操作已被弃用。虽然一些现有的驱动程序实现了这个操作，因为它们早于该操作被弃用之前编写，但新的驱动程序应使用运行时PM。如果你觉得需要从ISP或桥接驱动程序开始调用``.s_power()``，相反地，应该在你使用的传感器驱动程序中添加运行时PM支持并移除其``.s_power()``处理程序。

请参阅 :ref:`示例 <media-camera-sensor-examples>`。

控制框架
~~~~~~~~~~

``v4l2_ctrl_handler_setup()``函数不能用于设备的运行时PM``runtime_resume``回调中，因为它无法确定设备的电源状态。这是因为设备的电源状态仅在完成电源状态转换后才发生变化。可以在电源状态转换后使用``s_ctrl``回调来获取设备的电源状态：

.. c:function:: int pm_runtime_get_if_in_use(struct device *dev);

如果成功获取电源计数或运行时PM已禁用，该函数返回非零值，在这两种情况下，驱动程序可以继续访问设备。

旋转、方向和翻转
------------------

使用``v4l2_fwnode_device_parse()``从系统固件中获取旋转和方向信息，并使用``v4l2_ctrl_new_fwnode_properties()``注册适当的控制。

.. _media-camera-sensor-examples:

示例驱动程序
--------------

传感器驱动程序实现的功能各不相同，根据支持的功能集和其他特性，某些特定的传感器驱动程序更适合作为示例。以下是一些已知的良好示例驱动程序：

.. flat-table:: 示例传感器驱动程序
    :header-rows: 0
    :widths:      1 1 1 2

    * - 驱动程序名称
      - 文件
      - 驱动类型
      - 示例主题
    * - CCS
      - ``drivers/media/i2c/ccs/``
      - 自由配置
      - 电源管理（ACPI和DT）、UAPI
    * - imx219
      - ``drivers/media/i2c/imx219.c``
      - 基于寄存器列表
      - 电源管理（DT）、UAPI、模式选择
    * - imx319
      - ``drivers/media/i2c/imx319.c``
      - 基于寄存器列表
      - 电源管理（ACPI和DT）
