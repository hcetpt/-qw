### SPDX 许可证标识符: GPL-2.0

#### 简介
V4L2 驱动程序往往非常复杂，这是因为硬件本身的复杂性：大多数设备包含多个集成电路（IC），在 `/dev` 目录下导出多个设备节点，并创建非 V4L2 设备，如 DVB、ALSA、FB、I2C 和输入（IR）设备。特别是，V4L2 驱动程序需要设置支持的 IC 来进行音频/视频复用/编码/解码，这使得它们比大多数驱动更为复杂。这些 IC 通常通过一个或多个 I2C 总线与主桥接驱动程序相连，但也可能使用其他总线。这样的设备被称为“子设备”。

长期以来，框架仅限于使用 `video_device` 结构体来创建 V4L 设备节点和 `video_buf` 来处理视频缓冲区（请注意，本文档不讨论 `video_buf` 框架）。这意味着所有驱动程序都必须自己完成设备实例的设置以及与子设备的连接。其中一些操作相当复杂，许多驱动程序从未正确实现。

此外，由于缺乏合适的框架，许多可以共享的通用代码无法被重构。因此，这个框架为所有驱动程序设置了基本构建模块，并且相同的框架应该能大大简化将通用代码重构为由所有驱动程序共享的实用函数。

一个很好的参考示例是 `v4l2-pci-skeleton.c` 源文件，它位于 `samples/v4l/` 中。这是一个用于 PCI 捕获卡的骨架驱动程序，演示了如何使用 V4L2 驱动框架。它可以作为实际 PCI 视频捕获驱动程序的模板。

#### V4L 驱动程序结构
所有驱动程序都有以下结构：

1. **每个设备实例的结构体**：包含设备状态。
2. **初始化和控制子设备的方法**（如果存在）。
### 创建V4L2设备节点（/dev/videoX, /dev/vbiX 和 /dev/radioX）
#### 并跟踪特定设备节点的数据
#### 每个文件句柄的结构体，包含每个文件句柄的数据；

#### 视频缓冲处理
这是一个大致的示意图，说明了它们之间的关系：

```plaintext
设备实例
  |
  +---子设备实例
  |
  \---V4L2设备节点
     |
     \---文件句柄实例
```

### V4L2框架的结构
-------------------

该框架与驱动程序结构紧密相似：它有一个`v4l2_device`结构体用于存储设备实例数据，一个`v4l2_subdev`结构体来引用子设备实例，`video_device`结构体用于存储V4L2设备节点数据，而`v4l2_fh`结构体则跟踪文件句柄实例。
V4L2框架还可以选择性地与媒体框架集成。如果驱动程序设置了`v4l2_device`结构体中的`mdev`字段，则子设备和视频节点将自动作为实体出现在媒体框架中。
