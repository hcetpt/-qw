SPDX 许可证标识符: GPL-2.0

pvrusb2 驱动程序
==============

作者: Mike Isely <isely@pobox.com>

背景
----------

此驱动程序旨在用于“Hauppauge WinTV PVR USB 2.0”，这是一款USB 2.0 主机电视调谐器。此驱动程序仍在开发中，其历史始于Björn Danielsson <pvrusb2@dax.nu> 的逆向工程工作，他的网页可以在这里找到： http://pvrusb2.dax.nu/

之后Aurelien Alleaume <slts@free.fr> 开始努力创建一个兼容video4linux的驱动程序。我从Aurelien的最后一个已知快照开始，并将该驱动程序发展到当前的状态。
有关此驱动程序的更多信息可以在以下网址找到： https://www.isely.net/pvrusb2.html

此驱动程序具有很强的层次分离性。它们大致如下：

1. 与设备之间的低级别线缆协议实现
2. I2C适配器实现及其对应的在V4L中的I2C客户端驱动程序
3. 高级别的硬件驱动程序实现，协调所有确保设备正确运行的活动
4. “上下文”层，管理驱动程序实例化、设置、拆卸、仲裁以及随着设备热插拔时与高级接口的适当交互
5. 将驱动程序连接到各种已发布的Linux API（如V4L、sysfs，未来可能还包括DVB）的高级接口
最重要的分层是在前两层之间。为了确保任何可以想象的API都可以建立在此核心驱动程序之上，我们为此驱动程序投入了大量的工作。（是的，驱动程序内部利用了V4L来完成其工作，但这与驱动程序向外界发布的API没有直接关系。）这种架构允许不同的API同时访问驱动程序。我对API持有公平的态度，并且也认为保持实现和接口隔离是一个良好的设计原则。因此，尽管现在V4L高级接口是最完整的，但sysfs高级接口对于类似功能也能同样良好地工作，并且目前没有任何理由不能生产出一个可以与V4L并存的DVB高级接口。

构建
--------

构建这些模块基本上只需要运行 "Make" 命令，但你需要附近有内核源代码树，并且你可能还需要先设置一些控制环境变量以将它们链接到该源代码树。请参阅这里的Makefile中的注释以了解如何做到这一点。

源文件列表/功能概述
-------------------------------

（注：下面使用的术语“模块”通常是指pvrusb2驱动程序内的松散定义的功能单元，并与Linux内核的可加载模块概念无关。）

pvrusb2-audio.[ch] - 这是位于本驱动程序与msp3400.ko I2C客户端驱动程序（可在V4L中的其他地方找到）之间的粘合逻辑
pvrusb2-context.[ch] - 此模块实现了驱动程序实例的上下文。所有其他内容最终都会回溯到或以其他方式在本模块中实现的数据结构中实例化。热插拔最终在这里协调。所有高级接口都通过此模块与驱动程序关联。此模块有助于仲裁每个接口对实际驱动程序核心的访问，并且设计允许通过多个接口的多个实例进行并发访问（因此，例如，您可以更改sysfs中的调谐器频率，同时通过V4L向mplayer的一个实例流传输视频）。

pvrusb2-debug.h - 此头文件定义了一个printk()包装器和一个调试位定义掩码，用于启用驱动程序内部的各种类型的调试消息。

pvrusb2-debugifc.[ch] - 此模块实现了一个简单的面向命令行的调试接口到驱动程序。除了作为手动固件提取过程的一部分（参见前面提到的pvrusb2网站），可能只有我使用过它。它主要是一个调试辅助工具。

pvrusb2-eeprom.[ch] - 这是位于此驱动程序与tveeprom.ko模块之间的胶合逻辑，该模块本身在V4L的其他地方实现。

pvrusb2-encoder.[ch] - 此模块实现了与pvrusb2设备内的Conexant MPEG2编码芯片交互所需的所有协议。它是ivtv中相应逻辑的一个粗略版本，但是设计目标（严格的隔离）和物理层（通过USB而不是PCI代理）的不同足以使这个实现完全不同。

pvrusb2-hdw-internal.h - 此头文件定义了驱动程序中用于跟踪所有与控制硬件相关的内部状态的核心数据结构。除了核心硬件处理模块之外，外部不应该使用此头文件。所有对驱动程序的外部访问都应通过一个高级接口（例如V4L、sysfs等），实际上，即使是这些高级接口也仅限于pvrusb2-hdw.h中定义的API，而非此头文件。

pvrusb2-hdw.h - 此头文件定义了用于控制硬件的完整内部API。高级接口（例如V4L、sysfs）将通过这里工作。

pvrusb2-hdw.c - 此模块实现了处理特定pvrusb2设备整体控制的所有逻辑（pvrusb2设备的策略、实例化和仲裁属于pvrusb-context的管辖范围，而不在此处）。

pvrusb2-i2c-chips-*.c - 这些模块实现了胶合逻辑，用于连接并配置各种I2C模块当它们连接到I2C总线时。有两个版本的此文件。“v4l2”版本旨在与V4L一起使用，在树内实现仅适用于纯V4L环境的逻辑。“all”版本则用于V4L之外的场合，我们可能会遇到来自ivtv或旧内核快照的其他可能“挑战性”的模块（甚至是独立快照中的支持模块）。
pvrusb2-i2c-cmd-v4l1.[ch] - 此模块实现了与V4L1兼容的通用命令，用于I2C模块。在此模块中，pvrusb2驱动程序内部的状态变化被转换为V4L1命令，这些命令随后发送给各个I2C模块。

pvrusb2-i2c-cmd-v4l2.[ch] - 此模块实现了与V4L2兼容的通用命令，用于I2C模块。在此模块中，pvrusb2驱动程序内部的状态变化被转换为V4L2命令，这些命令随后发送给各个I2C模块。

pvrusb2-i2c-core.[ch] - 此模块提供了一个内核友好的I2C适配器驱动程序的实现，通过它可以连接其他外部I2C客户端驱动程序（例如msp3400、调谐器、lirc）并操作pvrusb2设备内的相应芯片。通过此模块，其他V4L模块可以进入此驱动程序来操作特定组件（而这些模块反过来由pvrusb2-hdw中的粘合逻辑协调，由pvrusb2-context分配，并最终通过高级接口向用户开放）。

pvrusb2-io.[ch] - 此模块实现了非常底层的数据传输缓冲区环，这是从设备流式传输数据所必需的。此模块极其底层。它只负责操作缓冲区，不对如何使用这些缓冲区的策略或机制进行任何定义。

pvrusb2-ioread.[ch] - 此模块构建在pvrusb2-io.[ch]之上，提供可用于read()系统调用风格I/O的流式API。目前这是pvrusb2-io.[ch]之上的唯一一层，但是其底层架构旨在允许通过额外的模块实现其他I/O样式，如mmap映射的缓冲区或其他更复杂的方式。

pvrusb2-main.c - 这是驱动程序的顶层。模块级别和USB核心入口点都在这里。这是我们所谓的“主”程序。

pvrusb2-sysfs.[ch] - 这是将pvrusb2驱动程序与sysfs关联起来的高级接口。通过此接口，除了实际流式传输数据之外，您可以对驱动程序执行所有操作。

pvrusb2-tuner.[ch] - 这是位于本驱动程序与tuner.ko I2C客户端驱动程序之间的粘合逻辑（tuner.ko可以在V4L的其他位置找到）。

pvrusb2-util.h - 此头文件定义了一些在整个驱动程序中常用的宏。这些宏并非特别针对此驱动程序，但必须放在某个地方。

pvrusb2-v4l2.[ch] - 这是将pvrusb2驱动程序与video4linux关联起来的高级接口。通过此接口，V4L应用程序可以以通常的V4L方式打开并操作驱动程序。请注意，**所有** V4L功能仅通过此处发布，而不是其他任何地方。
pvrusb2-video-\*.[ch] - 这是位于本驱动程序与 saa711x.ko I2C 客户端驱动程序之间的粘合逻辑（在 V4L 的其他部分可以找到该客户端驱动）。请注意，saa711x.ko 在 ivtv 中曾被称为 saa7115.ko。这个粘合逻辑有两个版本；根据找到的具体 saa711[5x].ko 版本来选择其中一个。
pvrusb2.h - 此头文件包含了编译时可调参数（目前此驱动程序中需要调整的部分很少）。
