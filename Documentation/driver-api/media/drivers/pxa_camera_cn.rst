SPDX 许可证标识符: GPL-2.0

PXA-Camera 主机驱动程序
======================

作者: Robert Jarzmik <robert.jarzmik@free.fr>

约束条件
--------

a) YUV422P 格式的图像尺寸
   所有 YUV422P 图像的宽度乘以高度模 16 等于 0
这是由于 DMA 的限制，它只传输 8 字节倍数的平面
全局视频工作流程
---------------------

a) QCI 停止
   初始状态下，QCI 接口处于停止状态
当一个缓冲区被排队时，调用 `start_streaming` 并启动 QCI
b) QCI 启动
   当 QCI 已经启动时，可以继续排队更多的缓冲区而不需要停止捕获。新的缓冲区会“附加”在 DMA 链的尾部，并且平滑地一帧接一帧地捕获
一旦 QCI 接口中有一个缓冲区被填满，它会被标记为“完成”，并从活动缓冲区列表中移除。然后用户空间应用程序可以重新排队或取消排队该缓冲区
当最后一个缓冲区被填满后，QCI 接口就会停止
c) 捕获全局有限状态机示意图

.. code-block:: none

	+----+                             +---+  +----+
	| DQ |                             | Q |  | DQ |
	|    v                             |   v  |    v
	+-----------+                     +------------------------+
	|   STOP    |                     | 等待开始捕获           |
	+-----------+         Q           +------------------------+
	+-> | QCI: 停止 | ------------------> | QCI: 运行               | <------------+
	|   | DMA: 停止 |                     | DMA: 停止              |              |
	|   +-----------+             +-----> +------------------------+              |
	|                            /                            |                   |
	|                           /             +---+  +----+   |                   |
	| 捕获队列为空          /              | Q |  | DQ |   | QCI 中断 EOF       |
	|                       /               |   v  |    v   v                   |
	|   +--------------------+             +----------------------+               |
	|   | DMA 热链接丢失 |             | 捕获正在运行         |               |
	|   +--------------------+             +----------------------+               |
	|   | QCI: 运行           |     +-----> | QCI: 运行             | <-+           |
	|   | DMA: 停止          |    /        | DMA: 运行             |   |           |
	|   +--------------------+   /         +----------------------+   | 其他     |
	|     ^                     /DMA 仍然            |               | 通道  |
	|     | 捕获队列           /  运行                | DMA 中断 结束   | 不     |
	|     | 不为空           /                       |               | 完成  |
	|     |                 /                        v               | 尚     |
	|   +----------------------+           +----------------------+   |           |
	|   | 视频缓存已释放  |           | 通道已完成         |   |           |
	|   +----------------------+           +----------------------+   |           |
	+-- | QCI: 运行             |           | QCI: 运行             | --+           |
	| DMA: 运行             |           | DMA: 运行             |               |
	+----------------------+           +----------------------+               |
		^                      /           |                           |
		|          未溢出 /            | 溢出                     |
		|                    /             v                           |
	+--------------------+         /   +----------------------+               |
	|  帧完成           |        /    |     帧溢出          |               |
	+--------------------+ <-----+     +----------------------+ 重启帧  |
	| QCI: 运行           |             | QCI: 停止            | --------------+
	| DMA: 运行           |             | DMA: 停止            |
	+--------------------+             +----------------------+

图例: - 每个框表示一个 FSM（有限状态机）状态
		- 每个箭头是转换到另一个状态的条件
		- 带注释的箭头是一个强制转换（没有条件）
		- 箭头 "Q" 表示：一个缓冲区被排队
		- 箭头 "DQ" 表示：一个缓冲区被取消排队
		- "QCI: 停止" 表示 QCI 接口未启用
		- "DMA: 停止" 表示所有 3 个 DMA 通道都已停止
		- "DMA: 运行" 表示至少有 1 个 DMA 通道仍在运行

DMA 使用
--------

a) DMA 流程
     - 第一个缓冲区排队进行捕获
       一旦第一个缓冲区排队用于捕获，QCI 就会启动，但数据传输尚未开始。在“帧结束”中断时，中断处理程序会启动 DMA 链
- 一个视频缓冲区的捕获
       DMA 链开始将数据传入视频缓冲区的 RAM 页面
当所有页面传输完毕后，DMA 中断会在 “ENDINTR” 状态下被触发
     - 完成一个视频缓冲区
       DMA 中断处理程序将视频缓冲区标记为“完成”，并将其从活动运行队列中移除
       同时，下一个视频缓冲区（如果有），则由 DMA 进行传输
     - 完成最后一个视频缓冲区
       在最后一个视频缓冲区的 DMA 中断时，QCI 会被停止
b) 准备好的 DMA 缓冲区将具有以下结构：

```none
+------------+-----+---------------+-----------------+
| desc-sg[0] | ... | desc-sg[last] | finisher/linker |
+------------+-----+---------------+-----------------+
```

此结构由 `dma->sg_cpu` 指向。
描述符的使用方式如下：

- `desc-sg[i]`: 第 i 个描述符，用于将第 i 个散聚元素传输到视频缓冲区的散聚列表中
- `finisher`: 具有 `ddadr=DADDR_STOP`, `dcmd=ENDIRQEN`
- `linker`: 具有 `ddadr=desc-sg[0]`（下一个视频缓冲区的首个描述符），`dcmd=0`

对于下面的示例图，假设 `d0=desc-sg[0]` ... `dN=desc-sg[N]`，“f”代表 `finisher` 而 “l” 代表 `linker`。一个典型的运行链为：

```none
         视频缓冲区 1         视频缓冲区 2
     +---------+----+---+  +----+----+----+---+
     | d0 | .. | dN | l |  | d0 | .. | dN | f |
     +---------+----+-|-+  ^----+----+----+---+
                      |    |
                      +----+
```

链式处理完成后，链看起来如下：

```none
         视频缓冲区 1         视频缓冲区 2         视频缓冲区 3
     +---------+----+---+  +----+----+----+---+  +----+----+----+---+
     | d0 | .. | dN | l |  | d0 | .. | dN | l |  | d0 | .. | dN | f |
     +---------+----+-|-+  ^----+----+----+-|-+  ^----+----+----+---+
                      |    |                |    |
                      +----+                +----+
                                           new_link
```

c) DMA 热链式处理时的时间片问题

由于 DMA 链式处理是在 DMA 运行期间进行的，因此在从一个视频缓冲区跳转到另一个视频缓冲区时可能会发生链接操作。在示意图中，如果遇到以下序列则会存在问题：

- DMA 链是视频缓冲区 1 + 视频缓冲区 2
- 调用 `pxa_videobuf_queue()` 来排队视频缓冲区 3
- DMA 控制器完成视频缓冲区 2 的处理，并且 DMA 停止

```none
      =>
         视频缓冲区 1         视频缓冲区 2
     +---------+----+---+  +----+----+----+---+
     | d0 | .. | dN | l |  | d0 | .. | dN | f |
     +---------+----+-|-+  ^----+----+----+-^-+
                      |    |                |
                      +----+                +-- DMA DDADR 加载 DDADR_STOP
```

- 调用 `pxa_dma_add_tail_buf()`，视频缓冲区 2 的 `finisher` 被替换为指向视频缓冲区 3 的 `linker`（创建 `new_link`）
- `pxa_videobuf_queue()` 完成
- 调用 DMA 中断处理程序来终止视频缓冲区 2
- 视频缓冲区 3 的捕获没有被安排在 DMA 链上（因为它已经停止了！）

```none
         视频缓冲区 1         视频缓冲区 2         视频缓冲区 3
     +---------+----+---+  +----+----+----+---+  +----+----+----+---+
     | d0 | .. | dN | l |  | d0 | .. | dN | l |  | d0 | .. | dN | f |
     +---------+----+-|-+  ^----+----+----+-|-+  ^----+----+----+---+
                      |    |                |    |
                      +----+                +----+
                                           new_link
                                          DMA DDADR 仍然是 DDADR_STOP
```

- 调用 `pxa_camera_check_link_miss()`
  此函数检查 DMA 是否已完成而缓冲区仍然在 `pcdev->capture` 列表中。如果是这种情况，则重新启动捕获，并将视频缓冲区 3 排入 DMA 链中
- DMA 中断处理程序完成

.. note:: 

     如果在 `pxa_camera_check_link_miss()` 读取 `DDADR()` 值后 DMA 停止，我们可以保证当 DMA 完成缓冲区时会再次调用 DMA 中断处理程序，从而再次调用 `pxa_camera_check_link_miss()` 以重新安排视频缓冲区 3。
