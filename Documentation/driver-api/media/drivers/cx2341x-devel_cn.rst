SPDX 许可证标识符: GPL-2.0

cx2341x 驱动程序
==============

cx2341x 芯片的内存
------------------

本节描述了 cx2341x 的内存映射，并记录了一些寄存器空间。
.. note:: 内存长字为小端格式（"Intel 格式"）
.. warning::

	这些信息是通过搜索内存和寄存器得到的，这些信息可能不准确且肯定不完整，并且仅来源于通过命令如下面这样的方式搜索内存空间：

	.. code-block:: none

		ivtvctl -O min=0x02000000,max=0x020000ff

	因此请按现状接受这些信息，我总是在寻找更多的东西，这是一个庞大的寄存器空间 :-)
内存映射
~~~~~~~~~~

cx2341x 通过 PCI BAR0（基址寄存器 0）向 PCI 主机暴露其整个 64MB 的内存空间。这里列出的地址是相对于 BAR0 中地址的偏移量。
.. code-block:: none

	0x00000000-0x00ffffff 编码器内存空间
	0x00000000-0x0003ffff 编码器 ROM
	???-???           MPEG 缓冲区
	???-???           原始视频捕获缓冲区
	???-???           原始音频捕获缓冲区
	???-???           显示缓冲区（6 或 9 个）

	0x01000000-0x01ffffff 解码器内存空间
	0x01000000-0x0103ffff 解码器 ROM
	???-???           MPEG 缓冲区
	0x0114b000-0x0115afff 音频 ROM（已废弃？）

	0x02000000-0x0200ffff 寄存器空间

寄存器
~~~~~~~~~

寄存器占据从 BAR0 开始的 64K 空间，所有这些寄存器都是 32 位宽。
.. code-block:: none

	DMA 寄存器 0x000-0xff:

	0x00 - 控制:
		0=重置/取消, 1=读取, 2=写入, 4=停止
	0x04 - DMA 状态:
		1=读取忙, 2=写入忙, 4=读取错误, 8=写入错误, 16=链表错误
	0x08 - PCI DMA 指针用于读取链表
	0x0c - PCI DMA 指针用于写入链表
	0x10 - 读取/写入 DMA 启用:
		1=启用读取, 2=启用写入
	0x14 - 总是 0xffffffff, 如果设置得更低则会出现不稳定，设置为 0x00 则崩溃
	0x18 - ??
	0x1c - 总是 0x20 或 32, 较小的值会减慢 DMA 交易速度
	0x20 - 总是值为 0x780a010a
	0x24-0x3c - 通常只是随机值???
	0x40 - 中断状态
	0x44 - 在这里写一个位并在中断状态 0x40 中显示出来
	0x48 - 中断屏蔽
	0x4C - 总是值为 0xfffdffff,
		如果更改为 0xffffffff，则 DMA 写入中断将出问题
0x50 - 总是 0xffffffff
	0x54 - 总是 0xffffffff (0x4c, 0x50, 0x54 看起来像是中断屏蔽，芯片上有
		3 个处理器，Java 处理器, VPU, SPU, APU, 也许这些是中断屏蔽???)
0x60-0x7C - 随机值
	0x80 - 第一个写入链表寄存器，用于编码器内存地址
	0x84 - 第一个写入链表寄存器，用于 PCI 内存地址
	0x88 - 第一个写入链表寄存器，用于内存地址中缓冲区的长度
		(|0x80000000 或此值表示最后一个链接)
	0x8c-0xdc - 其余写入链表寄存器，总共 8 组 3 个，DMA 从此处的链表地址开始
		寄存器 0x0c 中的链表地址，固件必须推送或类似操作
0xe0 - 第一个（也是唯一一个）读取链表寄存器，用于 PCI 内存地址
	0xe4 - 第一个（也是唯一一个）读取链表寄存器，用于解码器内存地址
	0xe8 - 第一个（也是唯一一个）读取链表寄存器，用于缓冲区长度
	0xec-0xff - 这些寄存器中似乎没有任何内容，0xec-f4 是 0x00000000
### 编码器缓冲区内存位置 0x700-0x7ff：

这些寄存器显示了与每个用于编码的缓冲区相关的内存位置偏移量，首先需要将它们左移一位（<<1）：
- 0x07F8：编码器SDRAM刷新
- 0x07FC：编码器SDRAM预充电

### 解码器缓冲区内存位置 0x800-0x8ff：

这些寄存器显示了与每个用于解码的缓冲区相关的内存位置偏移量，首先需要将它们左移一位（<<1）：
- 0x08F8：解码器SDRAM刷新
- 0x08FC：解码器SDRAM预充电

### 其他内存位置：

- 0x2800：视频显示模块控制
- 0x2D00：AO（音频输出？）控制
- 0x2D24：已清除字节数
- 0x7000：LSB I2C写时钟位（反相）
- 0x7004：LSB I2C写数据位（反相）
- 0x7008：LSB I2C读时钟位
- 0x700c：LSB I2C读数据位
- 0x9008：GPIO获取输入状态
- 0x900c：GPIO设置输出状态
- 0x9020：GPIO方向（Bit7 (GPIO 0..7) - 0: 输入, 1: 输出）
- 0x9050：SPU控制
- 0x9054：重置硬件块
- 0x9058：VPU控制
- 0xA018：Bit6: 中断挂起？
- 0xA064：APU命令

### 中断状态寄存器

中断状态寄存器0x0040和中断屏蔽寄存器0x0048的位定义。如果在屏蔽寄存器中某个位被清零，则希望我们的中断服务程序执行：
- 位31：编码器开始捕获
- 位30：编码器EOS
- 位29：编码器VBI捕获
- 位28：编码器视频输入模块复位事件
- 位27：编码器DMA完成
- 位24：解码器音频模式更改检测事件（通过事件通知）
- 位22：解码器数据请求
- 位20：解码器DMA完成
- 位19：解码器VBI重新插入
- 位18：解码器DMA错误（链表错误）

### 缺失文档

- 编码器API文档（？）
- 解码器API文档（？）
- 解码器VTRACE事件

### cx2341x固件上传

#### 这份文档描述了如何将cx2341x固件上传到卡片上。

##### 如何查找

参阅使用此芯片的各种项目的网页以获取关于如何获取固件的信息。
可以通过以下方式检测存储在Windows驱动程序中的固件：

- 每个固件映像大小为256k字节
- 编码器图像的第一个32位字是0x0000da7
- 解码器图像的第一个32位字是0x00003a7
- 编码器和解码器图像的第二个32位字都是0xaa55bb66

##### 如何加载

- 发送FWapi命令停止正在运行的编码器，并等待命令完成
- 发送FWapi命令停止正在运行的解码器，并等待命令完成
- 向数字化器发送I2C命令来停止产生VSYNC事件
- 发送FWapi命令使编码器固件停止运行
- 休眠 10 毫秒
- 发出 FWapi 命令以暂停解码器的固件
- 休眠 10 毫秒
- 向寄存器 0x2800 写入 0x00000000 以停止视频显示模块
- 向寄存器 0x2D00 写入 0x00000005 以停止 AO（音频输出？）
- 向寄存器 0xA064 写入 0x00000000 以检测？APU
- 向寄存器 0x9058 写入 0xFFFFFFFE 以停止 VPU
- 向寄存器 0x9054 写入 0xFFFFFFFF 以重置硬件块
- 向寄存器 0x9050 写入 0x00000001 以停止 SPU
- 休眠 10 毫秒
- 将0x0000001A写入寄存器0x07FC以初始化编码器SDRAM的预充电
- 将0x80000640写入寄存器0x07F8以将编码器SDRAM的刷新时间初始化为1微秒
- 将0x0000001A写入寄存器0x08FC以初始化解码器SDRAM的预充电
- 将0x80000640写入寄存器0x08F8以将解码器SDRAM的刷新时间初始化为1微秒
- 等待512毫秒。（建议等待600毫秒）
- 将编码器的固件映像传输到编码器内存空间的偏移量0处
- 将解码器的固件映像传输到解码器内存空间的偏移量0处
- 使用读取-修改-写入操作清除寄存器0x9050的第0位，以重新启用SPU
- 等待1秒
- 使用读取-修改-写入操作清除寄存器0x9058的第3位和第0位，以重新启用VPU
- 等待1秒
通过 API 命令查询两个固件镜像的状态以进行验证。

如何调用固件 API
-------------------

首选的调用约定被称为固件邮箱。这些邮箱基本上是一个固定长度的数组，用作调用栈。可以通过在编码器和解码器内存中搜索一个 16 字节的签名来定位固件邮箱。该签名位于 256 字节边界上。
签名：

.. code-block:: none

	0x78, 0x56, 0x34, 0x12, 0x12, 0x78, 0x56, 0x34,
	0x34, 0x12, 0x78, 0x56, 0x56, 0x34, 0x12, 0x78

固件实现了包含 20 个 32 位字的 20 个邮箱。前 10 个邮箱保留用于 API 调用。后 10 个邮箱被固件用于事件通知。
====== =================
  索引  名称
  ====== =================
  0      标志
  1      命令
  2      返回值
  3      超时
  4-19   参数/结果
  ====== =================

标志定义如下表所示。方向是从固件的角度来看的。
==== ========== ============================================
  位  方向  用途
  ==== ========== ============================================
  2    O          固件已处理命令
  1    I          驱动程序已完成设置参数
  0    I          驱动程序正在使用此邮箱
==== ========== ============================================

命令是一个 32 位枚举器。API 的具体细节可以在本章找到。
返回值是一个 32 位枚举器。目前仅定义了两个值：

- 0 = 成功
- -1 = 命令未定义
存在16个参数/结果的32位字段。驱动程序会用调用所需的所有参数的值填充这些字段。随后，驱动程序会用调用返回的结果值覆盖这些字段。
超时值保护了卡片免受挂起的驱动程序线程的影响。如果驱动程序未能在指定的超时时间内处理完成的调用，则固件将重置该邮箱。
为了进行API调用，驱动程序遍历每个邮箱以查找第一个可用的邮箱（位0已被清除）。驱动程序设置该位，填写命令枚举器、超时值以及任何所需的参数。然后，驱动程序设置参数就绪位（位1）。固件扫描邮箱中的待处理命令，处理它们，设置结果代码，用该调用的返回值填充结果值数组，并设置调用完成位（位2）。一旦设置了位2，驱动程序应该获取结果并清除所有标志。如果驱动程序未能在超时寄存器中设定的时间内执行此任务，则固件将重置该邮箱。
事件通知由固件发送到主机。主机通过API调用告诉固件它感兴趣的事件。该调用告诉固件使用哪个通知邮箱。固件通过中断向主机发出信号。仅使用16个结果字段，标志、命令、返回值和超时字未被使用。

### OSD固件API描述

#### CX2341X_OSD_GET_FRAMEBUFFER
##### 枚举：65/0x41
**描述**
返回连续OSD内存的基础地址和长度。
**Result[0]**
OSD基础地址
**Result[1]**
OSD长度

#### CX2341X_OSD_GET_PIXEL_FORMAT
##### 枚举：66/0x42
**描述**
查询OSD格式。
**Result[0]**
- 0=8位索引
- 1=16位RGB 5:6:5
- 2=16位ARGB 1:5:5:5
- 3=16位ARGB 1:4:4:4
- 4=32位ARGB 8:8:8:8

#### CX2341X_OSD_SET_PIXEL_FORMAT
##### 枚举：67/0x43
**描述**
指定像素格式。
**Param[0]**
- 0=8位索引
- 1=16位RGB 5:6:5
- 2=16位ARGB 1:5:5:5
- 3=16位ARGB 1:4:4:4
- 4=32位ARGB 8:8:8:8

#### CX2341X_OSD_GET_STATE
##### 枚举：68/0x44
**描述**
查询OSD状态。
**Result[0]**
- 位0: 0=关闭，1=打开
- 位1-2: 透明度控制
- 位3-5: 像素格式

#### CX2341X_OSD_SET_STATE
##### 枚举：69/0x45
**描述**
开关OSD。
**Param[0]**
0=关闭，1=打开

#### CX2341X_OSD_GET_OSD_COORDS
##### 枚举：70/0x46
**描述**
检索与视频混合的OSD区域的坐标。
**Result[0]**
OSD缓冲区地址
**Result[1]**
像素步长
**Result[2]**
OSD缓冲区行数
**Result[3]**
缓冲区中的水平偏移
**Result[4]**
缓冲区中的垂直偏移

#### CX2341X_OSD_SET_OSD_COORDS
##### 枚举：71/0x47
**描述**
指定要与视频混合的OSD区域的坐标。
**Param[0]**
缓冲区地址
**Param[1]**
缓冲区中的像素步长
**Param[2]**
缓冲区行数
**Param[3]**
水平偏移
**Param[4]**
垂直偏移

#### CX2341X_OSD_GET_SCREEN_COORDS
##### 枚举：72/0x48
**描述**
检索OSD屏幕区域坐标。
**Result[0]**
左上角的水平偏移
**Result[1]**
左上角的垂直偏移
**Result[2]**
右下角的水平偏移
**Result[3]**
右下角的垂直偏移

#### CX2341X_OSD_SET_SCREEN_COORDS
##### 枚举：73/0x49
**描述**
指定要与视频混合的屏幕区域的坐标。
**Param[0]**
左上角的水平偏移
**Param[1]**
左上角的垂直偏移
**Param[2]**
右下角的水平偏移
**Param[3]**
右下角的垂直偏移

#### CX2341X_OSD_GET_GLOBAL_ALPHA
##### 枚举：74/0x4A
**描述**
检索OSD全局透明度。
**Result[0]**
全局透明度：0=关闭，1=打开
**Result[1]**
全局透明度（8位）

#### CX2341X_OSD_SET_GLOBAL_ALPHA
##### 枚举：75/0x4B
**描述**
更新全局透明度。
**Param[0]**
全局透明度：0=关闭，1=打开
**Param[1]**
全局透明度（8位）
**Param[2]**
局部透明度：0=打开，1=关闭

#### CX2341X_OSD_SET_BLEND_COORDS
##### 枚举：78/0x4C
**描述**
在显示缓冲区内移动混合区域的起点。
**Param[0]**
缓冲区中的水平偏移
**Param[1]**
缓冲区中的垂直偏移

#### CX2341X_OSD_GET_FLICKER_STATE
##### 枚举：79/0x4F
**描述**
检索闪烁减少模块的状态。
**Result[0]**
闪烁状态：0=关闭，1=打开

#### CX2341X_OSD_SET_FLICKER_STATE
##### 枚举：80/0x50
**描述**
设置闪烁减少模块的状态。
**Param[0]**
状态：0=关闭，1=打开

#### CX2341X_OSD_BLT_COPY
##### 枚举：82/0x52
**描述**
BLT复制。
**Param[0]**
...
**Param[1]**
...
**Param[2]**
...
**Param[3]**
宽度
**Param[4]**
高度
**Param[5]**
目标像素掩码
**Param[6]**
目标矩形起始地址
**Param[7]**
目标步长（dword）
**Param[8]**
源步长（dword）
**Param[9]**
源矩形起始地址

#### CX2341X_OSD_BLT_FILL
##### 枚举：83/0x53
**描述**
BLT填充颜色。
**Param[0]**
...
**Param[1]**
...
**Param[2]**
...
**Param[3]**
宽度
**Param[4]**
高度
**Param[5]**
目标像素掩码
**Param[6]**
目标矩形起始地址
**Param[7]**
目标步长（dword）
**Param[8]**
颜色填充值

#### CX2341X_OSD_BLT_TEXT
##### 枚举：84/0x54
**描述**
BLT用于8位透明度文本源。
**Param[0]**
...
**Param[1]**
...
**Param[2]**
...
**Param[3]**
宽度
**Param[4]**
高度
**Param[5]**
目标像素掩码
**Param[6]**
目标矩形起始地址
**Param[7]**
目标步长（dword）
**Param[8]**
源步长（dword）
**Param[9]**
源矩形起始地址
**Param[10]**
颜色填充值

#### CX2341X_OSD_SET_FRAMEBUFFER_WINDOW
##### 枚举：86/0x56
**描述**
在屏幕上定位主输出窗口。坐标必须确保整个窗口能够适应屏幕。
**Param[0]**
窗口宽度
**Param[1]**
窗口高度
**Param[2]**
窗口左上角的水平偏移
**Param[3]**
窗口左上角的垂直偏移

#### CX2341X_OSD_SET_CHROMA_KEY
##### 枚举：96/0x60
**描述**
色键开关和颜色。
**Param[0]**
状态：0=关闭，1=打开
**Param[1]**
颜色

#### CX2341X_OSD_GET_ALPHA_CONTENT_INDEX
##### 枚举：97/0x61
**描述**
检索透明度内容索引。
**Result[0]**
透明度内容索引，范围0:15

#### CX2341X_OSD_SET_ALPHA_CONTENT_INDEX
##### 枚举：98/0x62
**描述**
指定透明度内容索引。
**Param[0]**
透明度内容索引，范围0:15

### 编码器固件API描述

#### CX2341X_ENC_PING_FW
##### 枚举：128/0x80
**描述**
不执行任何操作。可用于检查固件是否响应。

#### CX2341X_ENC_START_CAPTURE
##### 枚举：129/0x81
**描述**
开始捕获视频、音频和/或VBI数据。所有编码参数必须在此API调用前初始化。连续捕获帧，或直到捕获了预定义数量的帧。
**Param[0]**
捕获流类型：
- 0=MPEG
- 1=原始
- 2=原始直通
- 3=VBI
**Param[1]**
位掩码：
- 位0设置时，捕获YUV
- 位1设置时，捕获PCM音频
- 位2设置时，捕获VBI（同param[0]=3）
- 位3设置时，捕获目的地是解码器（同param[0]=2）
- 位4设置时，捕获目的地是主机
**注**：此参数仅对原始捕获类型有意义。
CX2341X_ENC_STOP_CAPTURE
~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 130/0x82

描述
^^^^^^^^^^^

结束正在进行的捕获

参数[0]
^^^^^^^^

- 0=在GOP（生成IRQ）结束时停止
- 1=立即停止（无IRQ）

参数[1]
^^^^^^^^

要停止的流类型，参见API 0x81中的参数[0]

参数[2]
^^^^^^^^

子类型，参见API 0x81中的参数[1]



CX2341X_ENC_SET_AUDIO_ID
~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 137/0x89

描述
^^^^^^^^^^^

分配编码音频流的传输流ID

参数[0]
^^^^^^^^

音频流ID



CX2341X_ENC_SET_VIDEO_ID
~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 139/0x8B

描述
^^^^^^^^^^^

设置视频传输流ID

参数[0]
^^^^^^^^

视频流ID



CX2341X_ENC_SET_PCR_ID
~~~~~~~~~~~~~~~~~~~~~~

枚举: 141/0x8D

描述
^^^^^^^^^^^

分配PCR数据包的传输流ID

参数[0]
^^^^^^^^

PCR流ID



CX2341X_ENC_SET_FRAME_RATE
~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 143/0x8F

描述
^^^^^^^^^^^

设置视频每秒帧数。改变将在新的GOP开始时生效。
参数[0]
^^^^^^^^

- 0=30fps
- 1=25fps



CX2341X_ENC_SET_FRAME_SIZE
~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 145/0x91

描述
^^^^^^^^^^^

选择视频流编码分辨率
参数[0]
^^^^^^^^

高度（行数）。默认值为480

参数[1]
^^^^^^^^

宽度（像素数）。默认值为720



CX2341X_ENC_SET_BIT_RATE
~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 149/0x95

描述
^^^^^^^^^^^

分配平均视频流比特率
参数[0]
^^^^^^^^

- 0=可变比特率，1=恒定比特率

参数[1]
^^^^^^^^

比特率（每秒比特数）

参数[2]
^^^^^^^^

峰值比特率（每秒比特数），除以400

参数[3]
^^^^^^^^

复用比特率（每秒比特数），除以400。可以为0（默认）
参数[4]
^^^^^^^^

速率控制VBR填充

参数[5]
^^^^^^^^

编解码器使用的VBV缓冲区

.. note::

	#) 参数\[3\]和参数\[4\]似乎总是0
	#) 参数\[5\]似乎未被使用
CX2341X_ENC_SET_GOP_PROPERTIES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 151/0x97

描述
^^^^^^^^^^^

设置GOP结构
参数[0]
^^^^^^^^

GOP大小（最大为34）

参数[1]
^^^^^^^^

I帧和P帧之间的B帧数量加1
例如：IBBPBBPBBPBB --> GOP大小: 12, B帧数量: 2+1 = 3

.. note::

	GOP大小必须是(B帧数量 + 1)的倍数
CX2341X_ENC_SET_ASPECT_RATIO
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 153/0x99

描述
^^^^^^^^^^^

设置编码宽高比。宽高比的变化将在下一个GOP开始时生效
参数[0]
^^^^^^^^

- '0000' 禁止
- '0001' 1:1 正方形
- '0010' 4:3
- '0011' 16:9
- '0100' 2.21:1
- '0101' 至 '1111' 预留



CX2341X_ENC_SET_DNR_FILTER_MODE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 155/0x9B

描述
^^^^^^^^^^^

分配动态降噪操作模式

参数[0]
^^^^^^^^

位0: 空间滤波器，设置=自动，清除=手动
位1: 时间滤波器，设置=自动，清除=手动

参数[1]
^^^^^^^^

中值滤波器：

- 0=禁用
- 1=水平方向
- 2=垂直方向
- 3=水平/垂直方向
- 4=对角线方向



CX2341X_ENC_SET_DNR_FILTER_PROPS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 157/0x9D

描述
^^^^^^^^^^^

这些动态降噪滤波器值仅在相应滤波器设置为"手动"时有意义（参见API 0x9B）

参数[0]
^^^^^^^^

空间滤波器：默认值为0，范围0:15

参数[1]
^^^^^^^^

时间滤波器：默认值为0，范围0:31



CX2341X_ENC_SET_CORING_LEVELS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 159/0x9F

描述
^^^^^^^^^^^

分配动态降噪中值滤波器属性
参数[0]
^^^^^^^^

高于此阈值时启用亮度中值滤波器
默认值：0，范围 0:255

Param[1]
^^^^^^^^

亮度中值滤波器在低于此阈值时启用
默认值：255，范围 0:255

Param[2]
^^^^^^^^

色度中值滤波器在高于此阈值时启用
默认值：0，范围 0:255

Param[3]
^^^^^^^^

色度中值滤波器在低于此阈值时启用
默认值：255，范围 0:255

CX2341X_ENC_SET_SPATIAL_FILTER_TYPE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举值: 161/0xA1

描述
^^^^^^^^^^^

设置空间预滤波参数

Param[0]
^^^^^^^^

亮度滤波器

- 0=关闭
- 1=一维水平
- 2=一维垂直
- 3=二维H/V可分离（默认）
- 4=二维对称不可分离

Param[1]
^^^^^^^^

色度滤波器

- 0=关闭
- 1=一维水平（默认）

CX2341X_ENC_SET_VBI_LINE
~~~~~~~~~~~~~~~~~~~~~~~~

枚举值: 183/0xB7

描述
^^^^^^^^^^^

选择VBI行号
Param[0]
^^^^^^^^

- 位0:4  行号
- 位 31  0=上场，1=下场
- 位0:31  全部设置为"所有行"

Param[1]
^^^^^^^^

VBI行信息功能: 0=禁用，1=启用

Param[2]
^^^^^^^^

切片: 0=无，1=闭合字幕
几乎可以肯定没有实现。设置为0
Param[3]
^^^^^^^^

此行中的亮度样本
几乎可以肯定没有实现。设置为0
Param[4]
^^^^^^^^

此行中的色度样本
几乎可以肯定没有实现。设置为0

CX2341X_ENC_SET_STREAM_TYPE
~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举值: 185/0xB9

描述
^^^^^^^^^^^

设置流类型

.. note::

    在最近的固件中传输流无法工作
    而在较旧的固件中，TS中的时间戳似乎
    不可靠
以下是提供的英文内容翻译成中文：

Param[0]
^^^^^^^^

- 0=程序流
- 1=传输流
- 2=MPEG1流
- 3=PES 音视频流
- 5=PES 视频流
- 7=PES 音频流
- 10=DVD流
- 11=VCD流
- 12=SVCD流
- 13=DVD_S1流
- 14=DVD_S2流

CX2341X_ENC_SET_OUTPUT_PORT
~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 187/0xBB

描述
^^^^^^^^^^^

设置流输出端口。通常当数据通过PCI总线（DMA）复制时为0，当数据流到另一个芯片（如pvrusb和cx88-blackbird）时为1。
Param[0]
^^^^^^^^

- 0=内存（默认）
- 1=流传输
- 2=串行

Param[1]
^^^^^^^^

未知，但保持此值为0似乎效果最好。有迹象表明这可能与USB支持有关，但传递任何非0的值只会导致问题。

CX2341X_ENC_SET_AUDIO_PROPERTIES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 189/0xBD

描述
^^^^^^^^^^^

设置音频流属性，可在编码过程中调用。
.. 注意::

	所有位字段都与ISO11172文档一致，除了2:3位，ISO文档定义为：

	- '11' 第一层
	- '10' 第二层
	- '01' 第三层
	- '00' 未定义

	这种不一致可能表明文档中可能存在错误。
测试表明只有第二层实际上可以工作，并且最低比特率为192 kbps。
Param[0]
^^^^^^^^

位掩码：

.. 代码块:: none

	   0:1  '00' 44.1KHz
		'01' 48KHz
		'10' 32KHz
		'11' 保留

	   2:3  '01'=第一层
		'10'=第二层

	   4:7  比特率：
		     索引 | 第一层     | 第二层
		     ------+-------------+------------
		    '0000' | 自由格式 | 自由格式
		    '0001' |  32 kbit/s  |  32 kbit/s
		    '0010' |  64 kbit/s  |  48 kbit/s
		    '0011' |  96 kbit/s  |  56 kbit/s
		    '0100' | 128 kbit/s  |  64 kbit/s
		    '0101' | 160 kbit/s  |  80 kbit/s
		    '0110' | 192 kbit/s  |  96 kbit/s
		    '0111' | 224 kbit/s  | 112 kbit/s
		    '1000' | 256 kbit/s  | 128 kbit/s
		    '1001' | 288 kbit/s  | 160 kbit/s
		    '1010' | 320 kbit/s  | 192 kbit/s
		    '1011' | 352 kbit/s  | 224 kbit/s
		    '1100' | 384 kbit/s  | 256 kbit/s
		    '1101' | 416 kbit/s  | 320 kbit/s
		    '1110' | 448 kbit/s  | 384 kbit/s

		.. 注意::

			对于第二层，不是所有的总比特率和模式组合都是允许的。参见ISO11172-3 3-附录B, 表3-B.2

	   8:9  '00'=立体声
		'01'=联合立体声
		'10'=双声道
		'11'=单声道

		.. 注意::

			cx23415无法正确解码联合立体声
10:11 在联合立体声模式下使用的模式扩展
在第一层和第二层它们表示哪些子带处于强度立体声中。所有其他的子带以立体声编码
'00' 子带4-31处于强度立体声中，边界=4
		    '01' 子带8-31处于强度立体声中，边界=8
		    '10' 子带12-31处于强度立体声中，边界=12
		    '11' 子带16-31处于强度立体声中，边界=16

	  12:13 强调：
		    '00' 无
		    '01' 50/15uS
		    '10' 保留
		    '11' CCITT J.17

	  14 	CRC：
		    '0' 关闭
		    '1' 打开

	  15    版权：
		    '0' 关闭
		    '1' 打开

	  16    生成：
		    '0' 复制
		    '1' 原创

CX2341X_ENC_HALT_FW
~~~~~~~~~~~~~~~~~~~

枚举: 195/0xC3

描述
^^^^^^^^^^^

固件被暂停，直到再次上传固件之前不再服务任何进一步的API调用。

CX2341X_ENC_GET_VERSION
~~~~~~~~~~~~~~~~~~~~~~~

枚举: 196/0xC4

描述
^^^^^^^^^^^

返回编码器固件版本。
### 结果[0]
^^^^^^^^^

版本位掩码：
- 位 0:15 构建
- 位 16:23 次版本
- 位 24:31 主版本


### CX2341X_ENC_SET_GOP_CLOSURE
~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 197/0xC5

描述
^^^^^^^^^^^

设置GOP开/闭属性
参数[0]
^^^^^^^^

- 0=开放
- 1=关闭


### CX2341X_ENC_GET_SEQ_END
~~~~~~~~~~~~~~~~~~~~~~~

枚举: 198/0xC6

描述
^^^^^^^^^^^

获取编码器缓冲区的序列结束码。当开始捕获时，会生成一系列中断，其中最后一个中断将把结果[0]设置为1，并且结果[1]将包含缓冲区大小。
结果[0]
^^^^^^^^^

传输状态（如果是最后一个缓冲区则为1）

结果[1]
^^^^^^^^^

如果结果[0]是1，则此字段包含最后一个缓冲区的大小；否则未定义
### CX2341X_ENC_SET_PGM_INDEX_INFO
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 199/0xC7

描述
^^^^^^^^^^^

设置节目索引信息
信息以如下方式存储：

```c
struct info {
    u32 length;      // 当前帧的长度
    u32 offset_low;  // 文件中当前帧起始位置的偏移量低部分
    u32 offset_high; // 文件中当前帧起始位置的偏移量高部分
    u32 mask1;       // 位 0-2 是类型掩码：
                     // 1=I 帧, 2=P 帧, 4=B 帧
                     // 0=节目索引结束，其他字段无效
    u32 pts;         // 帧的时间戳
    u32 mask2;       // 位 0 是时间戳的第32位
};
u32 table_ptr;
struct info index[400];
```

表指针`table_ptr`是编码器内存中用于写入*新*条目的表中的地址。
**注意：** 这是一个环形缓冲区，因此`table_ptr`将会循环。

参数[0]
^^^^^^^^

图片掩码：
- 0=不捕获索引
- 1=仅I帧
- 3=I帧和P帧
- 7=I帧、P帧和B帧

（似乎被忽略，总是索引I帧、P帧和B帧）

参数[1]
^^^^^^^^

请求的元素数量（最多400个）

结果[0]
^^^^^^^^^

编码器内存中表的起始位置

结果[1]
^^^^^^^^^

分配的元素数量，最多为参数[1]指定的数量


### CX2341X_ENC_SET_VBI_CONFIG
~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 200/0xC8

描述
^^^^^^^^^^^

配置VBI设置

参数[0]
^^^^^^^^

位图：

```
    0    模式 '0' 分割，'1' 原始
    1:3  插入：
             '000' 在扩展和用户数据中插入
             '001' 在私有包中插入
             '010' 单独流和用户数据
             '111' 单独流和私有数据
    8:15 流ID（通常为0xBD）
```

参数[1]
^^^^^^^^

每中断的帧数（最大8）。仅在原始模式下有效
以下是提供的英文描述翻译成中文：

Param[2]  
^^^^^^^^

总原始VBI帧数。仅在原始模式下有效。

Param[3]  
^^^^^^^^

起始码。

Param[4]  
^^^^^^^^

终止码。

Param[5]  
^^^^^^^^

每帧的行数。

Param[6]  
^^^^^^^^

每行的字节数。

Result[0]  
^^^^^^^^^

仅在原始模式下的中断观察到的帧数。范围从1到Param[1]。

Result[1]  
^^^^^^^^^

在原始模式下观察到的帧数。范围从1到Param[2]。

Result[2]  
^^^^^^^^^

开始或原始VBI数据的内存偏移量。

CX2341X_ENC_SET_DMA_BLOCK_SIZE  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举：201/0xC9

描述  
^^^^^^^^^^^  

设置DMA传输块大小。

Param[0]  
^^^^^^^^

以字节或帧为单位的DMA传输块大小。当单位是字节时，支持的块大小为2^7、2^8和2^9字节。

Param[1]  
^^^^^^^^

单位：0=字节，1=帧。

CX2341X_ENC_GET_PREV_DMA_INFO_MB_10  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举：202/0xCA

描述  
^^^^^^^^^^^  

结合中断掩码的第27位返回上一次DMA传输的信息。使用邮箱10。

Result[0]  
^^^^^^^^^

流类型。

Result[1]  
^^^^^^^^^

地址偏移量。

Result[2]  
^^^^^^^^^

最大传输尺寸。

CX2341X_ENC_GET_PREV_DMA_INFO_MB_9  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举：203/0xCB

描述  
^^^^^^^^^^^  

结合中断掩码的第27位或第18位返回上一次DMA传输的信息。使用邮箱9。

Result[0]  
^^^^^^^^^

状态位：
- 0 读取完成
- 1 写入完成
- 2 DMA读错误
- 3 DMA写错误
- 4 分散聚集数组错误

Result[1]  
^^^^^^^^^

DMA类型。

Result[2]  
^^^^^^^^^

演示时间戳位0..31。

Result[3]  
^^^^^^^^^

演示时间戳位32。

CX2341X_ENC_SCHED_DMA_TO_HOST  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举：204/0xCC

描述  
^^^^^^^^^^^  

设置DMA到主机的操作。

Param[0]  
^^^^^^^^

链接列表的内存地址。

Param[1]  
^^^^^^^^

链接列表长度（注：单位不明）。

Param[2]  
^^^^^^^^

DMA类型（0=MPEG）。

CX2341X_ENC_INITIALIZE_INPUT  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举：205/0xCD

描述  
^^^^^^^^^^^  

初始化视频输入。

CX2341X_ENC_SET_FRAME_DROP_RATE  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举：208/0xD0

描述  
^^^^^^^^^^^  

对于捕获的每一帧，跳过指定数量的帧。

Param[0]  
^^^^^^^^

要跳过的帧数。

CX2341X_ENC_PAUSE_ENCODER  
~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举：210/0xD2

描述  
^^^^^^^^^^^  

暂停期间，所有帧都被丢弃而不是编码。

Param[0]  
^^^^^^^^

- 0=暂停编码
- 1=继续编码

CX2341X_ENC_REFRESH_INPUT  
~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举：211/0xD3

描述  
^^^^^^^^^^^  

刷新视频输入。

CX2341X_ENC_SET_COPYRIGHT  
~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举：212/0xD4

描述  
^^^^^^^^^^^  

设置流版权属性。

Param[0]  
^^^^^^^^

- 0=流不被版权保护
- 1=流被版权保护

CX2341X_ENC_SET_EVENT_NOTIFICATION  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举：213/0xD5

描述  
^^^^^^^^^^^  

设置固件以通知主机关于特定事件。主机必须取消屏蔽中断位。

Param[0]  
^^^^^^^^

事件（0=刷新编码器输入）。

Param[1]  
^^^^^^^^

通知 0=禁用 1=启用。

Param[2]  
^^^^^^^^

中断位。

Param[3]  
^^^^^^^^

邮箱槽位，如不需要邮箱则为-1。

CX2341X_ENC_SET_NUM_VSYNC_LINES  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举：214/0xD6

描述  
^^^^^^^^^^^  

根据使用的模拟视频解码器，这指定了场1和场2的行数。

Param[0]  
^^^^^^^^

场1的行数：
- 0x00EF 对于 SAA7114
- 0x00F0 对于 SAA7115
- 0x0105 对于 Micronas

Param[1]  
^^^^^^^^

场2的行数：
- 0x00EF 对于 SAA7114
- 0x00F0 对于 SAA7115
- 0x0106 对于 Micronas

CX2341X_ENC_SET_PLACEHOLDER  
~~~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举：215/0xD7

描述  
^^^^^^^^^^^  

提供一种机制来在MPEG流中插入自定义用户数据。
以下是给定内容的中文翻译：

Param[0]
^^^^^^^^

- 0=扩展与用户数据
- 1=带有流ID 0xBD的私有包

Param[1]
^^^^^^^^

插入数据的速率，单位为帧（对于私有包）或GOP（对于扩展与用户数据）

Param[2]
^^^^^^^^

要插入的数据DWORD数量（如下）

Param[3]
^^^^^^^^

自定义数据0

Param[4]
^^^^^^^^

自定义数据1

Param[5]
^^^^^^^^

自定义数据2

Param[6]
^^^^^^^^

自定义数据3

Param[7]
^^^^^^^^

自定义数据4

Param[8]
^^^^^^^^

自定义数据5

Param[9]
^^^^^^^^

自定义数据6

Param[10]
^^^^^^^^^

自定义数据7

Param[11]
^^^^^^^^^

自定义数据8


CX2341X_ENC_MUTE_VIDEO
~~~~~~~~~~~~~~~~~~~~~~

枚举：217/0xD9

描述
^^^^^^^^^^^

视频静音

Param[0]
^^^^^^^^

比特使用：

.. code-block:: none

    0    	'0'=视频未静音
    '1'=视频静音，创建带有下面定义的YUV颜色的帧
    1:7  	未使用
    8:15 	V色度信息
    16:23 	U色度信息
    24:31 	Y亮度信息



CX2341X_ENC_MUTE_AUDIO
~~~~~~~~~~~~~~~~~~~~~~

枚举：218/0xDA

描述
^^^^^^^^^^^

音频静音

Param[0]
^^^^^^^^

- 0=音频未静音
- 1=音频静音（生成静音MPEG音频流）



CX2341X_ENC_SET_VERT_CROP_LINE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举：219/0xDB

描述
^^^^^^^^^^^

与“垂直裁剪线”有关的操作

Param[0]
^^^^^^^^

如果使用saa7114和原始VBI捕获并且是60Hz，则设置为10001；否则为0
CX2341X_ENC_MISC
~~~~~~~~~~~~~~~~

枚举：220/0xDC

描述
^^^^^^^^^^^

杂项操作。确切的功能尚不清楚。实际上它是一种ioctl调用。第一个参数是一个命令号，第二个参数是该命令的值。
Param[0]
^^^^^^^^

命令号：

.. code-block:: none

    1=设置开始编码时的初始SCR值（有效）
    2=设置质量模式（似乎是一个测试设置）
    3=设置高级VIM保护处理
    对于cx23416总是设为1，对于cx23415设为0
    4=生成DVD兼容的PTS时间戳
    5=USB刷新模式
    6=与量化矩阵有关的操作
    7=为DVD设置导航包插入：向MPEG中添加0xbf（私有流2）包。这些包的大小为2048字节（包括6字节的头部：0x000001bf+长度）。有效载荷被清零，并由应用程序填充。这些包似乎每四帧插入一次
    8=启用场景变化检测（似乎无效）
    9=设置视频输入模块的历史参数
    10=设置VIM的输入场顺序
    11=设置量化矩阵
    12=在通道更改或输入切换后重置音频接口（无参数）
    对cx2584x需要此操作，对mspx4xx不需要，但无论如何调用它似乎并无害处
13 = 设置音频音量延迟  
14 = 设置音频延迟  

参数 [1]  
^^^^^^^^  

命令值  
解码器固件 API 描述  
--------------------------------  

.. 注意:: 此 API 是解码器固件的一部分，因此仅适用于 cx23415  
CX2341X_DEC_PING_FW  
~~~~~~~~~~~~~~~~~~~  

枚举: 0/0x00  

描述  
^^^^^^^^^^^  

此 API 调用不执行任何操作。可以用来检查固件是否在响应  
CX2341X_DEC_START_PLAYBACK  
~~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举: 1/0x01  

描述  
^^^^^^^^^^^  

开始或恢复播放  
参数 [0]  
^^^^^^^^  

GOP 中用于开始播放的基于 0 的帧号  
参数 [1]  
^^^^^^^^  

指定在正常音频恢复前播放的静音音频帧数。（此功能未在固件中实现，保持为 0）  

CX2341X_DEC_STOP_PLAYBACK  
~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举: 2/0x02  

描述  
^^^^^^^^^^^  

结束播放并清除所有解码器缓冲区。如果 PTS 不为零，则播放停止于指定的 PTS  
参数 [0]  
^^^^^^^^  

显示 0=最后一帧, 1=黑屏  

.. 注意::  

	这会立即生效，所以如果你想等待一个 PTS，则使用 '0'，否则屏幕会立刻变黑  
你可以在稍后（即使没有播放时）通过设置值为 1 来使屏幕变为黑屏  
参数 [1]  
^^^^^^^^  

PTS 低位  

参数 [2]  
^^^^^^^^  

PTS 高位  

CX2341X_DEC_SET_PLAYBACK_SPEED  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  

枚举: 3/0x03  

描述  
^^^^^^^^^^^  

以非正常速度播放流。有两种操作模式：  

	- 平滑：主机传输整个流，固件丢弃未使用的帧  
- 粗略：主机根据需要达到的目标速度，基于索引丢弃帧
下面是给定内容的中文翻译：

Param[0]
^^^^^^^^

.. code-block:: none

	位图:
	    0:7  0 正常播放
		 1 快速仅 "1.5倍速度"
		 n nX快速，1/nX慢速
	    30   帧丢弃:
		     '0' 在1.5倍速度播放时，每隔一个B帧被丢弃
		     '1' 在1.5倍速度播放时，流不变（比特率不得超过8Mbps）
	    31   速度:
		     '0' 慢速
		     '1' 快速

.. note::

	n 的值限制为2。任何更高的值都不会导致更快的播放。相反，主机应该开始丢弃帧。
Param[1]
^^^^^^^^

方向：0=正向，1=反向

.. note::

	要使反向播放工作，必须以反向顺序写入完整的GOP。
Param[2]
^^^^^^^^

.. code-block:: none

	图像掩码:
	    1=I帧
	    3=I, P帧
	    7=I, P, B帧

Param[3]
^^^^^^^^

每个GOP中的B帧数（仅用于反向播放）

.. note::

	对于反向播放，图像掩码应设置为I或I, P。
	将B帧添加到掩码中会导致视频损坏。为了保持时间正确，必须将此字段设置为正确的值。
Param[4]
^^^^^^^^

静音音频：0=禁用，1=启用

Param[5]
^^^^^^^^

显示 0=帧，1=场

Param[6]
^^^^^^^^

指定在正常音频恢复前要播放的静音音频帧的数量。（未在固件中实现，保留为0）


CX2341X_DEC_STEP_VIDEO
~~~~~~~~~~~~~~~~~~~~~~

枚举: 5/0x05

描述
^^^^^^^^^^^

每次调用此API都会根据当前播放方向将播放前进到下一个定义单元
Param[0]
^^^^^^^^

0=帧，1=上场，2=下场


CX2341X_DEC_SET_DMA_BLOCK_SIZE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 8/0x08

描述
^^^^^^^^^^^

设置DMA传输块大小。对应于API 0xC9

Param[0]
^^^^^^^^

DMA传输块大小（字节）。在发出DMA传输命令时可以指定不同的大小。
CX2341X_DEC_GET_XFER_INFO
~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 9/0x09

描述
^^^^^^^^^^^

此API调用可用于检测流结束条件
Result[0]
^^^^^^^^^

流类型

Result[1]
^^^^^^^^^

地址偏移

Result[2]
^^^^^^^^^

最大传输字节数

Result[3]
^^^^^^^^^

缓冲区满度


CX2341X_DEC_GET_DMA_STATUS
~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 10/0x0A

描述
^^^^^^^^^^^

上次DMA传输的状态

Result[0]
^^^^^^^^^

位 1 设置意味着传输完成
位 2 设置意味着DMA错误
位 3 设置意味着链表错误

Result[1]
^^^^^^^^^

DMA类型: 0=MPEG, 1=OSD, 2=YUV


CX2341X_DEC_SCHED_DMA_FROM_HOST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 11/0x0B

描述
^^^^^^^^^^^

设置从主机DMA操作。对应于API 0xCC

Param[0]
^^^^^^^^

链表内存地址

Param[1]
^^^^^^^^

总传输字节数

Param[2]
^^^^^^^^

DMA类型（0=MPEG, 1=OSD, 2=YUV）


CX2341X_DEC_PAUSE_PLAYBACK
~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 13/0x0D

描述
^^^^^^^^^^^

立即冻结播放。在此模式下，当内部缓冲区已满时，不再接受更多数据，并屏蔽数据请求IRQ。
Param[0]
^^^^^^^^

显示：0=最后一帧，1=黑色


CX2341X_DEC_HALT_FW
~~~~~~~~~~~~~~~~~~~

枚举: 14/0x0E

描述
^^^^^^^^^^^

固件停止运行，直到重新上传固件之前不再服务任何进一步的API调用。
CX2341X_DEC_SET_STANDARD
~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 16/0x10

描述
^^^^^^^^^^^

选择显示标准

Param[0]
^^^^^^^^

0=NTSC, 1=PAL


CX2341X_DEC_GET_VERSION
~~~~~~~~~~~~~~~~~~~~~~~

枚举: 17/0x11

描述
^^^^^^^^^^^

返回解码器固件版本信息

Result[0]
^^^^^^^^^

版本掩码：
	- 位 0:15 构建号
	- 位 16:23 次版本号
	- 位 24:31 主版本号


CX2341X_DEC_SET_STREAM_INPUT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 20/0x14

描述
^^^^^^^^^^^

选择解码器流输入端口

Param[0]
^^^^^^^^

0=内存（默认），1=流式


CX2341X_DEC_GET_TIMING_INFO
~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 21/0x15

描述
^^^^^^^^^^^

从播放开始返回时间信息

Result[0]
^^^^^^^^^

按解码顺序的帧计数

Result[1]
^^^^^^^^^

按显示顺序的视频PTS位0:31

Result[2]
^^^^^^^^^

按显示顺序的视频PTS位32

Result[3]
^^^^^^^^^

按显示顺序的SCR位0:31

Result[4]
^^^^^^^^^

按显示顺序的SCR位32


CX2341X_DEC_SET_AUDIO_MODE
~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 22/0x16

描述
^^^^^^^^^^^

选择音频模式

Param[0]
^^^^^^^^

双声道模式操作
	0=立体声，1=左声道，2=右声道，3=单声道，4=交换，-1=不变

Param[1]
^^^^^^^^

立体声模式操作:
	0=立体声，1=左声道，2=右声道，3=单声道，4=交换，-1=不变


CX2341X_DEC_SET_EVENT_NOTIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举: 23/0x17

描述
^^^^^^^^^^^

设置固件以通知主机特定事件的信息。
下面是给定内容的中文翻译：

与 API 0xD5 相对应的 API：

Param[0]
^^^^^^^^

事件：
    - 0=音频模式在单声道、（联合）立体声和双通道之间变化
    - 3=解码器启动
    - 4=未知：在解码过程中每秒触发 10-15 次
    - 5=某些同步事件：每帧触发一次
Param[1]
^^^^^^^^

通知 0=禁用，1=启用

Param[2]
^^^^^^^^

中断位

Param[3]
^^^^^^^^

邮箱槽，如不需要邮箱则为-1

CX2341X_DEC_SET_DISPLAY_BUFFERS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举值: 24/0x18

描述
^^^^^^^^^^^

显示缓冲区的数量。为了在倒放时解码所有帧，你必须使用九个缓冲区。
Param[0]
^^^^^^^^

0=六个缓冲区，1=九个缓冲区

CX2341X_DEC_EXTRACT_VBI
~~~~~~~~~~~~~~~~~~~~~~~

枚举值: 25/0x19

描述
^^^^^^^^^^^

提取 VBI 数据

Param[0]
^^^^^^^^

0=从扩展数据和用户数据中提取，1=从私有包中提取

Result[0]
^^^^^^^^^

VBI 表的位置

Result[1]
^^^^^^^^^

VBI 表的大小

CX2341X_DEC_SET_DECODER_SOURCE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举值: 26/0x1A

描述
^^^^^^^^^^^

选择解码器源。确保传递给此 API 的参数与编码器设置相匹配。
Param[0]
^^^^^^^^

模式: 0=MPEG 来自主机，1=YUV 来自编码器，2=YUV 来自主机

Param[1]
^^^^^^^^

YUV 图像宽度

Param[2]
^^^^^^^^

YUV 图像高度

Param[3]
^^^^^^^^

位图: 参见 API 0xBD 的 Param[0]

CX2341X_DEC_SET_PREBUFFERING
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

枚举值: 30/0x1E

描述
^^^^^^^^^^^

解码器预缓冲，当启用时，对于比特率<8Mbps 的流将缓冲最多 128KB，对于比特率>8Mbps 的流将缓冲最多 640KB。

Param[0]
^^^^^^^^

0=关闭，1=开启

PVR350 视频解码寄存器 0x02002800 -> 0x02002B00
-------------------------------------------------------

作者: Ian Armstrong <ian@iarmst.demon.co.uk>

版本: v0.4

日期: 2007年3月12日

这个列表是通过试错方法得出的。可能会存在错误和遗漏。有些寄存器没有明显的效果，因此很难确定它们的作用；而其他寄存器可能相互作用，或需要特定的加载顺序。水平滤波器配置就是一个例子，需要六个寄存器协同工作，并且需要特定的加载顺序才能正确配置。索引颜色调色板只需两个寄存器就很容易设置，但同样也需要特定的加载顺序。
一些寄存器对设置的值非常挑剔。如果设置了错误的值，解码器可能会失败。通常重新加载固件可以恢复，但有时需要重置。对于包含尺寸信息的寄存器，将其设置为 0 通常是不好的主意。对于其他控制寄存器，例如 2878，只有在挂起时才会发现哪些值是坏的。
.. code-block:: none

	--------------------------------------------------------------------------------
	2800
	第 0 位
		解码器使能
		0 = 禁用
		1 = 启用
	--------------------------------------------------------------------------------
	2804
	位 0:31
		解码器水平 Y 别名寄存器 1
	---------------
	2808
	位 0:31
		解码器水平 Y 别名寄存器 2
	---------------
	280C
	位 0:31
		解码器水平 Y 别名寄存器 3
	---------------
	2810
	位 0:31
		解码器水平 Y 别名寄存器 4
	---------------
	2814
	位 0:31
		解码器水平 Y 别名寄存器 5
	---------------
	2818
	位 0:31
		解码器水平 Y 别名触发器

这六个寄存器控制 Y 平面的水平别名滤波器。
必须在访问触发器 (2818) 之前加载前五个寄存器，因为该寄存器实际上会将数据通过前五个寄存器进行时钟处理。
为了正确地编程设置滤波器，整个过程必须执行16次。实际的寄存器内容是从固件中的查找表复制的，该表包含4种不同的滤波器设置。

-------------------------
281C
位 0:31
解码器水平UV别名寄存器1
-------------------------
2820
位 0:31
解码器水平UV别名寄存器2
-------------------------
2824
位 0:31
解码器水平UV别名寄存器3
-------------------------
2828
位 0:31
解码器水平UV别名寄存器4
-------------------------
282C
位 0:31
解码器水平UV别名寄存器5
-------------------------
2830
位 0:31
解码器水平UV别名触发器

这六个寄存器控制UV平面的水平别名消除操作与Y滤波器相同，其中2830是触发寄存器。
-------------------------
2834
位 0:15
解码器Y源宽度（像素）

位 16:31
解码器Y目标宽度（像素）
-------------------------
2838
位 0:15
解码器UV源宽度（像素）

位 16:31
解码器UV目标宽度（像素）

**注：** 对于这两个寄存器，最终图像必须完全可见在屏幕上。如果图像超出屏幕右侧，则源和目标尺寸都必须调整以反映可见部分。对于源宽度，您在计算新值时必须考虑缩放。
-------------------------
283C
位 0:31
解码器Y水平缩放
通常=寄存器2854 >> 2
-------------------------
2840
位 0:31
解码器??未知-水平缩放
通常为0x00080514
-------------------------
2844
位 0:31
解码器UV水平缩放
通常=寄存器2854 >> 2
-------------------------
2848
位 0:31
解码器??未知-水平缩放
通常为0x00100514
-------------------------
284C
位 0:31
解码器??未知-Y平面
通常为0x00200020
-------------------------
2850
位 0:31
解码器??未知-UV平面
通常为0x00200020
-------------------------
2854
位 0:31
解码器“主”值用于水平缩放
-------------------------
2858
位 0:31
解码器??未知
通常为0
-------------------------
285C
位 0:31
解码器??未知
通常=寄存器2854 >> 1
-------------------------
2860
位 0:31
解码器??未知
通常为0
-------------------------
2864
位 0:31
解码器??未知
通常=寄存器2854 >> 1
-------------------------
2868
位 0:31
解码器??未知
通常为0

这些寄存器大多数控制水平缩放，或以某种方式与之相关。寄存器2854包含“主”值，并且其他寄存器可以从这个值计算得出。还必须记住正确设置寄存器2874中的分频器。
要放大：
寄存器2854 = (源宽度 * 0x00200000) / 目标宽度
寄存器2874 = 不进行分频

从全尺寸缩小到半尺寸：
寄存器2854 = (源宽度/2 * 0x00200000) / 目标宽度
寄存器2874 = 分频2

从半尺寸缩小到四分之一尺寸：
寄存器2854 = (源宽度/4 * 0x00200000) / 目标宽度
寄存器2874 = 分频4

结果总是向上取整
-------------------------
286C
位 0:15
解码器水平Y缓冲偏移

位 15:31
解码器水平UV缓冲偏移

视频图像缓冲区中的偏移量。如果偏移量逐渐递增，屏幕上的图像将向左移动并在右侧更高位置环绕。
-------------------------
2870
位 0:15
解码器水平Y输出偏移

位 16:31
解码器水平UV输出偏移

偏移实际视频输出。控制Y和UV平面的输出对齐。值越大，向左移动得越多。使用寄存器2890来向右移动图像。
-------------------------
2874
位 0:1
解码器水平Y输出大小分频器
00 = 不分频
01 = 分频2
10 = 分频3

位 4:5
解码器水平UV输出大小分频器
00 = 不分频
01 = 分频2
10 = 分频3

位 8
解码器??未知
0 = 正常
1 = 影响视频输出级别

位 16
解码器??未知
0 = 正常
1 = 禁用水平滤波器
-------------------------
2878
位 0
??未知

位 1
osd开关
0 = osd关闭
1 = osd开启

位 2
解码器+osd视频定时
0 = NTSC
1 = PAL

位 3:4
??未知

位 5
解码器+osd
交换上场和下场
-------------------------
287C
位 0:10
解码器&osd??未知
水平移动整个屏幕。从0x005开始，屏幕严重偏向右侧。每增加0x004将逐渐将屏幕向左移动。
位 11:31
??未知

通常内容为0x00101111（NTSC）或0x1010111d（PAL）
-------------------------
2880 -------- ??未知
2884 -------- ??未知
-------------------------
2888
位 0
解码器+osd??未知
0 = 正常
1 = 场不对齐（可通过289C和28A4纠正）

位 4
??未知

位 8
??未知

警告：错误的值将需要重新加载固件才能恢复。
已知不良的值为 0x000, 0x011, 0x100, 0x111  
——————————————————————————————————————————————————  
288C  
比特 0:15  
	osd ?? 未知  
	似乎影响 osd 的位置稳定性。数值越高，稳定性越差。解码器输出保持稳定  
比特 16:31  
	osd ?? 未知  
	与比特 0:15 相同  

——————————————————————————————————————————————————  
2890  
比特 0:11  
	解码器输出水平偏移  
水平偏移将视频图像向右移动。虽然可能实现轻微的左移，但考虑到其更大的范围，最好使用寄存器 2870 来实现这一点  
注意：如果视频窗口移出屏幕右侧边缘，可能会出现视频失真。为了避免这种情况，请参阅 2834 和 2838 寄存器的相关说明  

——————————————————————————————————————————————————  
2894  
比特 0:23  
	解码器输出视频周边颜色  
包含在视频以窗口模式运行时用于填充屏幕的颜色（YUV 格式）  

——————————————————————————————————————————————————  
2898  
比特 0:23  
	解码器视频窗口颜色  
	包含视频关闭时用于填充视频窗口的颜色（YUV 格式）  
比特 24  
	解码器视频输出  
	0 = 视频开启  
	1 = 视频关闭  

比特 28  
	解码器平面顺序  
	0 = Y, UV  
	1 = UV, Y  

比特 29  
	解码器第二平面字节顺序  
	0 = 正常（UV）  
	1 = 交换（VU）  

在正常使用中，第一平面是 Y，第二平面是 UV。虽然可以交换平面的顺序，但仅能交换第二平面的字节顺序。这对于 Y 平面用处不大，但对于 UV 平面来说则很有帮助  

——————————————————————————————————————————————————  
289C  
比特 0:15  
	解码器垂直场偏移 1  

比特 16:31  
	解码器垂直场偏移 2  

控制场输出的垂直对齐。数值越大，图像在屏幕上越低。已知的起始值为 0x011E0017（NTSC）和 0x01500017（PAL）  

——————————————————————————————————————————————————  
28A0  
比特 0:15  
	解码器及 osd 的像素宽度  

比特 16:31  
	解码器及 osd 的像素高度  

超出这个区域的所有解码器及 osd 输出都将被禁用。在这个区域之外，解码器输出会变成黑色。如果 osd 尝试超出这个区域，它将会变得失真  

——————————————————————————————————————————————————  
28A4  
比特 0:11  
	osd 左移量
具有 0x770 到 0x7FF 的范围。除了 0 以外，此范围外的任何值都会使 osd 出错。

--------------------------
28A8
位 0:15
osd 垂直场偏移 1

位 16:31
osd 垂直场偏移 2

控制场输出垂直对齐。数字越大，图像在屏幕上的位置越低。已知的初始值为 0x011E0017（NTSC）& 0x01500017（PAL）。
--------------------------
28AC  --------    ?? 未知
|
V
28BC  --------    ?? 未知
--------------------------
28C0
位 0
当前输出场
0 = 第一场
1 = 第二场

位 16:31
当前扫描线
扫描线从第一场的顶部行计数到第二场的最后一行
--------------------------
28C4  --------    ?? 未知
|
V
28F8  --------    ?? 未知
--------------------------
28FC
位 0
?? 未知
0 = 正常
1 = 破坏解码器与 osd 输出
--------------------------
2900
位 0:31
解码器垂直 Y 别名寄存器 1
--------------------------
2904
位 0:31
解码器垂直 Y 别名寄存器 2
--------------------------
2908
位 0:31
解码器垂直 Y 别名触发

这三个寄存器控制 Y 平面的垂直别名滤波器。其操作类似于水平 Y 滤波器（2804）。唯一的真正区别是，在访问触发寄存器（2908）之前只有两个寄存器需要设置。对于水平滤波器而言，这些值来自固件中的查找表，并且必须重复该过程 16 次才能完全编程滤波器。
--------------------------
290C
位 0:31
解码器垂直 UV 别名寄存器 1
--------------------------
2910
位 0:31
解码器垂直 UV 别名寄存器 2
--------------------------
2914
位 0:31
解码器垂直 UV 别名触发

这三个寄存器控制 UV 平面的垂直别名滤波器。操作与 Y 滤波器相同，其中 2914 是触发器。
--------------------------
2918
位 0:15
解码器 Y 源高度（像素）

位 16:31
解码器 Y 目标高度（像素）
--------------------------
291C
位 0:15
解码器 UV 源高度（像素）/ 2

位 16:31
解码器 UV 目标高度（像素）

注意：对于这两个寄存器，生成的图像必须完全可见于屏幕上。如果图像超出底部边缘，则源大小和目标大小都必须进行调整以反映可见部分。对于源高度，计算新值时必须考虑缩放因素。
--------------------------
2920
位 0:31
解码器 Y 垂直缩放
通常 = 寄存器 2930 >> 2
--------------------------
2924
位 0:31
解码器 Y 垂直缩放
通常 = 寄存器 2920 + 0x514
--------------------------
2928
位 0:31
解码器 UV 垂直缩放
放大时 = 寄存器 2930 >> 2
缩小时 = 寄存器 2930 >> 3
--------------------------
292C
位 0:31
解码器 UV 垂直缩放
通常 = 寄存器 2928 + 0x514
--------------------------
2930
位 0:31
解码器“主”垂直缩放值
--------------------------
2934
位 0:31
解码器 ?? 未知 - Y 垂直缩放
--------------------------
2938
位 0:31
解码器 Y 垂直缩放
通常 = 寄存器 2930
--------------------------
293C
位 0:31
解码器 ?? 未知 - Y 垂直缩放
--------------------------
2940
位 0:31
解码器 UV 垂直缩放
放大时 = 寄存器 2930 >> 1
缩小时 = 寄存器 2930
--------------------------
2944
位 0:31
解码器 ?? 未知 - UV 垂直缩放
--------------------------
2948
位 0:31
解码器 UV 垂直缩放
通常 = 寄存器 2940
--------------------------
294C
位 0:31
解码器 ?? 未知 - UV 垂直缩放

这些寄存器中的大多数要么控制垂直缩放，要么似乎以某种方式与之相关联。寄存器 2930 包含“主”值，所有其他寄存器都可以根据该值计算得出。你还必须记住正确设置寄存器 296C 中的分频器。

为了放大：
寄存器 2930 = (源高度 * 0x00200000) / 目标高度
寄存器 296C = 不分频

为了从全尺寸缩小到一半：
寄存器 2930 = (源高度/2 * 0x00200000) / 目标高度
寄存器 296C = 分频 2

为了从一半缩小到四分之一：
寄存器 2930 = (源高度/4 * 0x00200000) / 目标高度
寄存器 296C = 分频 4
--------------------------
2950
位 0:15
解码器 Y 显示缓冲区行索引，第一场

位 16:31
解码器 Y 垂直行跳过，第一场
--------------------------
2954
位 0:15
解码器 Y 显示缓冲区行索引，第二场

位 16:31
解码器 Y 垂直行跳过，第二场
--------------------------
2958
位 0:15
解码器 UV 显示缓冲区行索引，第一场

位 16:31
解码器 UV 垂直行跳过，第一场
--------------------------
295C
位 0:15
解码器 UV 显示缓冲区行索引，第二场

位 16:31
解码器 UV 垂直行跳过，第二场
--------------------------
2960
位 0:15
解码器目标高度减 1

位 16:31
解码器目标高度 / 2
--------------------------
2964
位 0:15
解码器 Y 垂直偏移，第二场

位 16:31
解码器 Y 垂直偏移，第一场

这两个寄存器将 Y 平面向上移动。数字越大，移动量越大。
--------------------------
2968
位 0:15
解码器 UV 垂直偏移，第二场

位 16:31
解码器 UV 垂直偏移，第一场

这两个寄存器将 UV 平面向上移动。数字越大，移动量越大。
--------------------------
296C
位 0:1
解码器垂直 Y 输出大小分频器
00 = 不分频
01 = 分频 2
10 = 分频 4

位 8:9
解码器垂直 UV 输出大小分频器
00 = 不分频
01 = 分频 2
10 = 分频 4
--------------------------
2970
位 0
解码器 ?? 未知
0 = 正常
1 = 影响视频输出级别

位 16
解码器 ?? 未知
0 = 正常
1 = 禁用垂直滤波器
--------------------------
2974  --------   ?? 未知
|
V
29EF  --------   ?? 未知
--------------------------
2A00
位 0:2
osd 颜色模式
000 = 8 位索引
001 = 16 位（565）
010 = 15 位（555）
011 = 12 位（444）
100 = 32 位（8888）

位 4:5
osd 显示 bpp
01 = 8 位
10 = 16 位
11 = 32 位

位 8
osd 全局 alpha
0 = 关闭
1 = 打开

位 9
osd 局部 alpha
0 = 关闭
1 = 打开

位 10
osd 颜色键
0 = 关闭
1 = 打开

位 11
osd ?? 未知
必须为 1

位 13
osd 颜色空间
0 = ARGB
1 = AYVU

位 16:31
osd ?? 未知
必须为 0x001B（某种缓冲区指针？）

当每像素位数设置为 8 位时，颜色模式会被忽略并默认为 8 位索引。对于 16 位和 32 位每像素位数，颜色深度会得到尊重；使用比分配的字节少的颜色深度时，额外的字节作为填充。因此，在 32 bpp 和 8 位索引颜色的情况下，每个像素有 3 个填充字节。也可以选择 16 bpp 并使用 32 位颜色模式。这会导致像素宽度加倍，但在这种模式下颜色键可能无法按预期工作。
颜色键正如其名称所暗示的。您指定一种颜色，该颜色将变为完全透明。在使用565、555或444颜色模式时，颜色键总是16位宽。要进行颜色键处理的颜色设置在寄存器2A18中。

局部alpha根据颜色模式的不同而工作方式不同。对于32bpp（每像素32位）和8位索引模式，局部alpha是每个像素256级透明度，其中0表示透明，255表示不透明。对于16bpp模式555和444，未使用的位作为简单的透明开关，0表示不透明，1表示完全透明。16位565模式没有局部alpha支持。

全局alpha是一个应用于整个OSD（On Screen Display）的256级透明度，0表示透明，255表示不透明。

有可能结合颜色键、局部alpha和全局alpha一起使用。

---
**2A04**

位0:15
OSD左边缘的X坐标

位16:31
OSD顶部边缘的Y坐标
---
**2A08**

位0:15
OSD右边缘的X坐标

位16:31
OSD底部边缘的Y坐标

对于这两个寄存器，(0,0) = 显示区域的左上角。这些寄存器不控制OSD的大小，只控制它的位置以及可见部分。可见的OSD区域不能超过显示区域的右边缘，否则OSD会变得损坏。参见寄存器2A10来设置OSD宽度。
---
**2A0C**

位0:31
OSD缓冲区索引

这是进入OSD缓冲区的索引。缓慢递增这个值会使OSD向左移动，并绕回到右边缘。
---
**2A10**

位0:11
OSD缓冲区32位字宽度

包含用32位字测量的OSD宽度。这意味着所有颜色模式都限制为可被4整除的字节宽度。
---
**2A14**

位0:15
OSD高度（以像素计）

位16:32
OSD从缓冲区中的行索引开始显示
---
**2A18**

位0:31
OSD颜色键

包含将变为透明的颜色值。
---
**2A1C**

位0:7
OSD全局alpha

包含全局alpha值（等同于ivtvfbctl --alpha XX）
---
**2A20**
---
?? 未知
---
**2A2C**
---
?? 未知
---
**2A30**

位0:7
OSD索引调色板中要更改的颜色

---
**2A34**

位0:31
OSD索引调色板的颜色

要设置新调色板，首先将要更改的颜色的索引加载到2A30中，然后将新颜色加载到2A34中。完整的调色板有256种颜色，因此索引范围是0x00-0xFF。
---
**2A38** 
---
?? 未知
**2A3C**
---
?? 未知
---
**2A40**

位0:31
OSD ?? 未知

影响整体亮度，循环回黑色
---
**2A44**

位0:31
OSD ?? 未知

绿色色调
---
**2A48**

位0:31
OSD ?? 未知

红色色调
---
**2A4C**

位0:31
OSD ?? 未知

影响整体亮度，循环回黑色
---
**2A50**

位0:31
OSD ?? 未知

色彩偏移
---
**2A54**

位0:31
OSD ?? 未知

色彩偏移
---
**2A58**
---
?? 未知
---
**2AFC**
---
?? 未知
---
**2B00**

位0
OSD滤波器控制
0 = 关闭滤波器
1 = 打开滤波器

位1:4
OSD ?? 未知

---

cx231xx DMA引擎
-----------------

本页面描述了cx2341x DMA引擎所使用的结构和程序。

简介
~~~~~~~~~~~~

cx2341x PCI接口具有总线主控能力。这意味着它有一个DMA引擎可以高效地在卡和主内存之间传输大量数据，无需CPU的帮助。像大多数硬件一样，它必须操作连续的物理内存。在虚拟内存机器上很难获得大量的连续物理内存。
因此，它也支持一种称为“分散-聚集”的技术。该声卡可以在一次操作中传输多个缓冲区。而不是分配一个大的连续缓冲区，驱动程序可以分配几个较小的缓冲区。
实际上，我看到平均传输量大约为80K，但超过128K的传输量并不少见，特别是在启动时。128K这个数字很重要，因为这是内核通常能分配的最大块大小。即便如此，128K的区块仍然很难找到，因此建议驱动程序开发者选择更小的区块大小，并学习分散-聚集技术。
邮箱#10被预留用于DMA传输信息。
注意：硬件期望的是小端格式的数据（即Intel格式）。
流程
~~~~

本节一般性地描述了处理DMA传输时事件发生的顺序。详细信息在本节之后提供。
- 声卡触发编码器中断。
- 驱动程序从邮箱#10读取传输类型、偏移量和大小。
- 驱动程序使用足够的空闲DMA缓冲区构建分散-聚集数组以覆盖所需大小。
- 驱动程序通过调用ScheduleDMAtoHost API来安排DMA传输。
- 声卡触发DMA完成中断。
- 驱动程序检查DMA状态寄存器以检测任何错误
- 驱动程序对新传输的缓冲区进行后处理
注意！编码器和DMA完成中断可能同时被触发（例如，在一个传输结束，下一个开始时）。

邮箱#10
~~~~~~~~~~~

标志、命令、返回值和超时字段被忽略
- 名称:       邮箱#10
- 结果[0]: 类型: 0: MPEG
- 结果[1]: 偏移量: 相对于卡内存空间的位置
- 结果[2]: 大小: 要传输的确切字节数
我的推测是，由于StartCapture API有一个“RAW”类型的捕获选项可用，类型字段将有其他值对应YUV和PCM数据。
分散/集中数组
~~~~~~~~~~~~~~~~~~~~

分散/集中数组是一个连续分配的内存块，它告诉卡每个数据块的源和目标位置
卡的“地址”来源于邮箱#10提供的偏移量。主机地址是目标DMA缓冲区的物理内存位置
每个分散/集中数组元素是一个包含三个32位字的结构体。第一个字是源地址，第二个是目标地址。这两个都占用了整个32位。第三个字的最低18位是传输字节计数。第三个字的最高位是“最后”标志。最后标志告诉卡引发DMA_DONE中断。根据我亲身经历，如果你忘记设置这个位，卡仍然可以“工作”，但是流数据很可能被损坏。
传输计数必须是256的倍数。因此，驱动程序需要跟踪目标缓冲区中有效数据的量，并据此进行处理。
数组元素：

- 32位源地址
- 32位目标地址
- 14位保留（最高位为最后一个标志）
- 18位字节计数

DMA传输状态
~~~~~~~~~~~~~~

寄存器0x0004保存DMA传输状态：

- 第0位：读取完成
- 第1位：写入完成
- 第2位：DMA读取错误
- 第3位：DMA写入错误
- 第4位：分散-聚集数组错误
