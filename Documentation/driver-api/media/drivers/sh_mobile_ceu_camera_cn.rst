SPDX 许可证标识符: GPL-2.0

裁剪和缩放算法，在 sh_mobile_ceu_camera 驱动中使用
=====================================================

作者: Guennadi Liakhovetski <g.liakhovetski@gmx.de>

术语
----

传感器比例：由传感器驱动程序配置的水平和垂直比例
主机比例：同上，但针对主机驱动程序
组合比例：传感器比例 * 主机比例

通用的缩放/裁剪方案
-------------------

.. code-block:: none

	-1--
	|
	-2-- -\
	|      --\
	|         --\
	+-5-- .      -- -3-- -\
	|      `...            -\
	|          `... -4-- .   - -7.
	|                     `
	|                       `. .6--
	|                        . .6'-
	|                      .´
	|           ... -4'- .´
	|       ...´             - -7'
	+-5'- .´               -/
	|            -- -3'- -/
	|         --/
	|      --/
	-2'- -/
	|
	|
	-1'-

在上面的图表中，横杠和斜杠代表“真实”的数据量，点和重音符号代表“有用”的数据，基本上是CEU缩放和裁剪后的输出，映射回客户端的源平面。
这样的配置可以通过用户的请求产生：

S_CROP(左/顶 = (5) - (1)，宽度/高度 = (5') - (5))
S_FMT(宽度/高度 = (6') - (6))

这里：

(1) 到 (1') - 整个最大宽度或高度
(1) 到 (2)  - 传感器裁剪的左侧或顶部
(2) 到 (2') - 传感器裁剪的宽度或高度
(3) 到 (3') - 传感器比例
(3) 到 (4)  - CEU裁剪的左侧或顶部
(4) 到 (4') - CEU裁剪的宽度或高度
(5) 到 (5') - 反向应用传感器比例到CEU裁剪的宽度或高度
(2) 到 (5)  - 反向应用传感器比例到CEU裁剪的左侧或顶部
(6) 到 (6') - CEU比例 - 用户窗口

S_FMT
-----

不改变输入矩形 - 它已经是最佳的
1. 计算当前的传感器比例：

	scale_s = ((2') - (2)) / ((3') - (3))

2. 计算“有效的”输入裁剪（传感器子窗口）——将CEU裁剪反向缩放到当前传感器比例上的输入窗口 —— 这就是用户 S_CROP：

	width_u = (5') - (5) = ((4') - (4)) * scale_s

3. 从“有效的”输入窗口到请求的用户窗口计算新的组合比例：

	scale_comb = width_u / ((6') - (6))

4. 通过将组合比例应用于实际输入窗口来计算传感器输出窗口：

	width_s_out = ((7') - (7)) = ((2') - (2)) / scale_comb

5. 使用迭代的传感器 S_FMT 对传感器输出窗口进行设置
	subdev->video_ops->s_fmt(.width = width_s_out)

6. 获取传感器输出窗口 (g_fmt)

7. 计算新的传感器比例：

	scale_s_new = ((3')_new - (3)_new) / ((2') - (2))

8. 计算新的CEU裁剪 — 应用新的传感器比例到之前计算的“有效”裁剪：

	width_ceu = (4')_new - (4)_new = width_u / scale_s_new
	left_ceu = (4)_new - (3)_new = ((5) - (2)) / scale_s_new

9. 使用CEU裁剪功能对新窗口进行裁剪：

	ceu_crop(.width = width_ceu, .left = left_ceu)

10. 使用CEU缩放功能将图像缩放到请求的用户窗口：

	scale_ceu = width_ceu / width

S_CROP
------

V4L2裁剪API<crop-scale>说明：

"…该规范没有定义原点或单位。然而，按照惯例，驱动程序应该相对于0H水平计数未缩放的样本。"

我们选择遵循建议，并将裁剪单位解释为客户输入像素。
裁剪过程分为以下6步：

1. 向传感器请求完全与用户矩形相同的尺寸
2. 如果更小，则迭代直到获得更大的尺寸。结果：传感器裁剪为 2 : 2'，目标裁剪为 5 : 5'，当前输出格式为 6' - 6
3. 在上一步中，传感器尝试尽可能保持其输出帧不变，但它可能已经发生了变化。再次获取它
翻译为中文：

4. 传感器按 3 : 3' 的比例进行缩放。 传感器的比例为 (2' - 2) / (3' - 3)。计算中间窗口：4' - 4 = (5' - 5) * (3' - 3) / (2' - 2)

5. 计算并应用主机缩放比例 = (6' - 6) / (4' - 4)

6. 计算并应用主机裁剪：6 - 7 = (5 - 2) * (6' - 6) / (5' - 5)

这里提到的 "sensor" 指的是传感器，"host scale" 指的是主机缩放比例，"host crop" 指的是主机裁剪。不过，这些公式中的符号（如 3', 2', 等）和具体含义需要根据上下文来理解，可能涉及到图像处理或图形界面操作中的一些数学计算。如果你能提供更多的上下文信息，我可以帮助你更好地理解这些内容。
