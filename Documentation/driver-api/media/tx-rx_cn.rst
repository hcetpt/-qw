SPDX 许可证标识符: GPL-2.0

.. _transmitter-receiver:

像素数据发射器与接收器驱动程序
===========================================

V4L2 支持各种传输和接收像素数据的设备。这些设备的例子包括摄像头传感器、电视调谐器以及 SoC 中的并行、BT.656 或 CSI-2 接收器。

总线类型
---------

以下是最常见的几种总线。本节仅讨论这两种：

MIPI CSI-2
^^^^^^^^^^

CSI-2 是一种数据总线，用于将图像从摄像头传输到主机 SoC。它由 `MIPI 联盟`_ 定义。
.. _`MIPI 联盟`: https://www.mipi.org/

并行与 BT.656
^^^^^^^^^^^^^^^

并行和 `BT.656`_ 总线在每个时钟周期通过每个数据线传输一位数据。并行总线使用同步和其他附加信号，而 BT.656 将同步嵌入其中。
.. _`BT.656`: https://en.wikipedia.org/wiki/ITU-R_BT.656

发射器驱动程序
-------------------

发射器驱动程序通常需要向接收器驱动程序提供发射器的配置信息。具体要求取决于总线的类型。以下是两种总线都共有的部分：

媒体总线像素代码
^^^^^^^^^^^^^^^^

请参阅 :ref:`v4l2-mbus-pixelcode`

链路频率
^^^^^^^^^^

使用 :ref:`V4L2_CID_LINK_FREQ <v4l2-cid-link-freq>` 控制项告知接收器总线的频率（注意这不是符号率）。

``.s_stream()`` 回调函数
^^^^^^^^^^^^^^^^^^^^^^^^

struct v4l2_subdev_video_ops->s_stream() 回调函数被接收器驱动程序用来控制发射器驱动程序的流状态。

CSI-2 发射器驱动程序
-------------------------

像素速率
^^^^^^^^^^

总线上的像素速率计算如下：

``pixel_rate = link_freq * 2 * nr_of_lanes * 16 / k / bits_per_sample``

其中

.. list-table:: 像素速率计算中的变量或常量
   :header-rows: 1

   * - 变量或常量
     - 描述
   * - link_freq
     - ``V4L2_CID_LINK_FREQ`` 整数64菜单项的值
   * - nr_of_lanes
     - CSI-2 链路上使用的数据通道数量。这可以从 OF 端点配置中获取
* - 2
     - 数据在信号的上升沿和下降沿传输
* - bits_per_sample
     - 每个样本的位数
* - k
     - D-PHY为16，C-PHY为7

.. note::

    通过这种方式计算出的像素率 **并非** 相机传感器像素阵列上的像素率，后者由
    :ref:`V4L2_CID_PIXEL_RATE <v4l2-cid-pixel-rate>` 控制指示。
LP-11 和 LP-111 状态
^^^^^^^^^^^^^^^^^^^^^^^

作为进入高速模式的一部分，CSI-2发射器通常会根据PHY的不同，将总线短暂设置到LP-11或LP-111状态。这一时期可能短至100微秒，在此期间接收器观察到这一状态并进行其自身高速模式转换的部分操作。
大多数接收器一旦被软件配置后能够自主处理这种情况，但也有接收器需要软件参与观察LP-11或LP-111状态。100微秒是一个非常短暂的时间段，尤其是在没有中断告知有事情发生的情况下。
一种解决方法是明确地将发射器侧配置为LP-11或LP-111状态，这需要发射器硬件的支持。这不是普遍可用的。许多设备在停止流传输时会回到这种状态，而上电后的状态是LP-00或LP-000。
``.pre_streamon()``回调可以用于准备发射器进入流传输状态，但不立即开始流传输。类似地，``.post_streamoff()``回调用于撤销``.pre_streamon()``回调所执行的操作。因此，调用``.pre_streamon()``的函数必须对每次成功的``.pre_streamon()``调用调用一次``.post_streamoff()``。
在CSI-2的上下文中，``.pre_streamon()``回调用于将发射器转换到LP-11或LP-111状态。这也需要开启设备电源，因此只应在确实需要时执行该操作。
不需要显式设置LP-11或LP-111状态的接收器驱动程序可以不调用这两个回调。
停止发射器
^^^^^^^^^^^^^^^^^^^^^^^^

发射器通过调用``.s_stream()``回调停止图像流的发送。一些发射器可能会在帧边界处停止流，而其他发射器则会立即停止，实际上留下了当前帧未完成。接收器驱动程序不应假设任何一种情况，而是在两种情况下都能正常运行。
您没有提供需要翻译的文本。请提供需要翻译成中文的英文或其他语言的文本。
