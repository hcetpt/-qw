简介
============

通用输入输出（GPIO）接口
========================

本目录中的文档提供了详细的指导，说明如何在驱动程序中访问 GPIO，并介绍了如何为提供 GPIO 的设备编写驱动程序。

什么是 GPIO？
==================

“通用输入输出”（GPIO）是一种灵活的、由软件控制的数字信号。它们来源于多种类型的芯片，对于从事嵌入式系统和定制硬件开发的 Linux 开发者来说非常熟悉。每个 GPIO 都代表与特定引脚相连的一个位，这个引脚在球栅阵列（BGA）封装中称为“球”。板级原理图会标明哪些外部硬件连接到哪个 GPIO 上。驱动程序可以通用设计，这样，板卡设置代码就能将这些引脚配置数据传递给驱动程序。

片上系统（SoC）处理器大量依赖于 GPIO。在某些情况下，几乎所有的非专用引脚都可以被配置为 GPIO；而大多数芯片至少有几十个这样的引脚。可编程逻辑器件（如 FPGA）可以轻松地提供 GPIO；多功能芯片，比如电源管理器和音频编解码器通常有一些这样的引脚以帮助解决 SoC 上引脚不足的问题；还有通过 I2C 或 SPI 串行总线连接的“GPIO 扩展器”芯片。

大多数 PC 南桥芯片拥有几十个具有 GPIO 功能的引脚（只有 BIOS 固件知道这些引脚的具体用途）。
GPIO 的确切功能因系统而异。常见的选项包括：

- 输出值是可以写入的（高电平 = 1，低电平 = 0）。一些芯片还支持不同的驱动方式，例如仅驱动一个值，以支持“线或”等方案（值得注意的是，“开漏”信号）
- 输入值同样是可以读取的（1 或 0）。一些芯片支持对配置为“输出”的引脚进行读回，这对于“线或”情形非常有用（以支持双向信号传输）。GPIO 控制器可能包含输入消抖逻辑，有时可以通过软件来控制
- 输入可以作为中断请求（IRQ）信号使用，通常是边沿触发，但有时也可以是电平触发。此类 IRQ 可能可以配置为系统唤醒事件，以便从低功耗状态唤醒系统
- 通常一个 GPIO 可以根据不同产品板的需求配置为输入或输出；也存在单向的 GPIO
- 大多数 GPIO 在持有自旋锁时仍可访问，但是那些通过串行总线访问的 GPIO 通常不行。有些系统同时支持这两种类型的 GPIO

在给定的板卡上，每个 GPIO 都用于特定的目的，例如监控 MMC/SD 卡的插入/移除、检测卡的写保护状态、驱动 LED、配置收发器、模拟串行总线、触发电路看门狗、感应开关等。
### 常见的GPIO属性
=================================

这些属性贯穿于GPIO接口的所有其他文档中，理解它们非常重要，尤其是在你需要定义GPIO映射时。

#### 高电平有效与低电平有效
--------------------------------------
通常人们会认为当GPIO的输出信号为1（“高”）时是“激活”的状态，而为0（“低”）时是非激活状态。然而，在实践中，GPIO的信号可能在到达目的地之前被反转，或者设备可能会采用不同的约定来定义“激活”的含义。为了使这些细节对设备驱动程序透明，可以将GPIO定义为高电平有效（默认情况下，“1”表示“激活”）或低电平有效（“0”表示“激活”）。这样，驱动程序只需关注逻辑信号，而无需关心线路级别的具体实现。

#### 开漏和开源
--------------------------------------
有时共享信号需要使用“开漏”（仅驱动低电平信号）或“开源”（仅驱动高电平信号）的方式进行传输。这些术语适用于CMOS晶体管；对于TTL则使用“开集电极”。通过上拉或下拉电阻来确保高或低电平信号的稳定。

这有时被称为“线与”逻辑；从负逻辑（低电平为真）的角度来看，这实际上是一种“线或”逻辑。
一个常见的开漏信号例子是共享的低电平激活中断请求（IRQ）线。
此外，双向数据总线信号有时也会使用开漏信号。

有些GPIO控制器直接支持开漏和开源输出；许多则不支持。当你需要开漏信号传输但硬件不直接支持时，有一种常用的编程方式可以用来模拟这种功能：使用既可以作为输入也可以作为输出的任何GPIO引脚。

**低电平**：`gpiod_direction_output(gpio, 0)`... 这会驱动信号并覆盖上拉电阻。
**高电平**：`gpiod_direction_input(gpio)`... 这会关闭输出，因此信号由上拉电阻（或其他设备）控制。
同样的逻辑可以用于模拟开源信号，即驱动高电平信号，并在低电平时配置GPIO为输入模式。这种开漏/开源的模拟可以通过GPIO框架透明地处理。

如果你正在将信号驱动到高电平，但是`gpiod_get_value(gpio)`报告了一个低电平值（在适当的上升时间过后），这意味着其他某个组件将共享信号拉低了。这并不一定是一个错误。例如，I2C时钟延展就是通过这种方式实现的：需要较慢时钟的从设备会延迟SCK的上升沿，而I2C主设备会相应地调整其信号传输速率。
您没有提供需要翻译的文本。请提供需要翻译成中文的英文或其他语言的文本。
