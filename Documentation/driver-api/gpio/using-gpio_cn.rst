=========================
在Linux中使用GPIO线路
=========================

Linux内核的存在是为了对硬件进行抽象并将其呈现给用户。因此，GPIO线路通常并不是面向用户的抽象概念。使用GPIO线路最明显、自然且首选的方式是让内核硬件驱动程序来处理它们。
对于已经存在的通用驱动程序示例，这些示例也将为任何您想要编写的其他内核驱动程序提供良好参考，请参阅`Documentation/driver-api/gpio/drivers-on-gpio.rst`。

对于您想要支持的任何批量生产系统，如服务器、笔记本电脑、手机、平板电脑、路由器以及任何消费级、办公或商业产品，使用适当的内核驱动程序至关重要。当您认为代码足够成熟时，可以提交代码以便纳入上游Linux内核，您将得到帮助以完善它，详情请见`Documentation/process/submitting-patches.rst`。
在Linux中，GPIO线路也有用户空间ABI
用户空间ABI适用于一次性部署。示例包括原型机、生产线、创客社区项目、工作坊样本、生产工具、工业自动化、PLC类型的应用场景、门控制器等，简而言之就是那些非大批量生产的专用设备，要求操作人员对其有深入了解，并了解需要设置的软件-硬件接口。它们不应自然地适合现有的任何内核子系统，也不适合操作系统，因为它们不够可重用或不够抽象，或者涉及大量与计算机硬件无关的策略。
对于有充分理由从用户空间使用工业I/O (IIO) 子系统的应用程序来说，也很可能适合从用户空间使用GPIO线路。
在任何情况下都不要滥用GPIO用户空间ABI来简化产品开发过程中的工作。如果您用它来进行原型设计，则不要将原型商品化：应改写为使用适当的内核驱动程序。在任何情况下都不要使用用户空间的GPIO来部署任何标准化的产品。
用户空间ABI是针对每个GPIO硬件单元（GPIO芯片）的一个字符设备
这些设备将在系统上表现为`/dev/gpiochip0`至`/dev/gpiochipN`。如何直接使用用户空间ABI的示例可以在内核树的`tools/gpio`子目录中找到。
对于结构化和管理化的应用程序，我们建议您使用`libgpiod_`库。这提供了辅助抽象、命令行工具以及在同一GPIO芯片上的多个同时消费者的仲裁功能。
.. _libgpiod: https://git.kernel.org/pub/scm/libs/libgpiod/libgpiod.git/
