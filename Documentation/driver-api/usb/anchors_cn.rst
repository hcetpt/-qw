### USB 锚点

#### 什么是锚点？
一个 USB 驱动需要支持某些回调，这些回调要求驱动程序停止对某个接口的所有 I/O 操作。为了实现这一点，驱动程序必须跟踪它提交的所有 URB（USB 请求块），以确保它们全部完成或者调用 `usb_kill_urb` 函数来终止它们。锚点是一种数据结构，用于跟踪 URB 并提供了处理多个 URB 的方法。

#### 分配与初始化
没有专门的 API 来分配一个锚点。它被简单地声明为 `struct usb_anchor` 类型。必须调用函数 `init_usb_anchor` 来初始化这个数据结构。

#### 释放
当一个锚点不再有关联的 URB 时，可以通过正常的内存管理操作来释放它。

#### URB 与锚点的关联和解除关联
URB 与锚点之间的关联是通过显式调用 `usb_anchor_urb` 函数建立的。这种关联会一直保持到 URB 完成（成功完成）。因此，解除关联是自动的。提供了一个函数来强制终止（kill）所有与锚点关联的 URB。此外，还可以使用 `usb_unanchor_urb` 函数来解除 URB 与锚点的关联。

#### 对多个 URB 的操作

- **`usb_kill_anchored_urbs`**
  
  此函数会终止与锚点关联的所有 URB。URB 按照与提交顺序相反的时间顺序被调用。这样可以确保数据不会被重新排序。

- **`usb_unlink_anchored_urbs`**

  此函数将与锚点关联的所有 URB 解除链接。URB 按照与提交顺序相反的时间顺序进行处理。这类似于 `usb_kill_anchored_urbs` 函数，但不会睡眠。因此无法保证在函数返回时 URB 已经被解除链接。它们可能稍后被解除链接，但最终会在有限时间内解除链接。

- **`usb_scuttle_anchored_urbs`**

  将一个锚点上的所有 URB 大规模解除锚定。
`usb_wait_anchor_empty_timeout` 函数:
---------------------------------------
此函数会等待与某个锚点关联的所有URB（Urban Recirculation Buffer，通常在此上下文中指USB请求块）完成或等待超时，以先发生的为准。返回值将告诉您是否达到了超时。

`usb_anchor_empty` 函数:
--------------------------
如果一个锚点没有关联任何URB，则返回真（true）。锁定是调用者的责任。

`usb_get_from_anchor` 函数:
-----------------------------
返回一个锚点中最旧的URB。该URB将被解除锚定并带有一个引用返回。由于您可以在一个锚点中混合多个目的地的URB，因此无法保证按时间顺序最先提交的URB会被返回。
