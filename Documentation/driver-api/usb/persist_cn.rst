# _usb-persist:

## 系统挂起时 USB 设备的持续性
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**作者:** Alan Stern <stern@rowland.harvard.edu>  
**日期:** 2006 年 9 月 2 日（更新于 2008 年 2 月 25 日）

### 问题是什么？
根据 USB 规范，当 USB 总线被挂起时，总线必须继续提供挂起电流（大约 1-5 毫安）。这是为了让设备能够保持其内部状态，并且让集线器能够检测到连接变化事件（即设备插入或拔出）。技术术语称为“电源会话”。
如果 USB 设备的电源会话被中断，则系统必须像设备已被拔出一样进行处理。这是一种保守的方法；在没有挂起电流的情况下，计算机无法知道实际发生了什么。也许相同的设备仍然连接着，或者它被移除并被另一个不同的设备插入到该端口中。系统必须假设最坏的情况。
默认情况下，Linux 根据规范行事。如果 USB 主机控制器在系统挂起期间失去电力，那么当系统醒来时，所有连接到该控制器的设备都会被视为已断开连接。这总是安全的，并且是“官方正确”的做法。
对于许多类型的设备，这种行为根本无关紧要。如果内核想要认为你的 USB 键盘在系统睡眠时被拔出，而当系统醒来时一个新的键盘被插入，那又有何关系呢？当你在上面打字时，它仍然会正常工作。
不幸的是，确实会出现问题，特别是在大量存储设备上。影响与设备真的在系统挂起期间被拔出完全相同。如果你在设备上有已挂载的文件系统，那你就会遇到麻烦——该文件系统中的所有内容现在都无法访问了。如果你的根文件系统位于该设备上，这种情况尤其令人恼火，因为你的系统会立即崩溃。
失去电力并不是唯一需要担心的因素。任何中断电源会话的情况都会有相同的影响。例如，即使在系统睡眠期间可能已经维持了挂起电流，但在许多系统唤醒初期阶段，固件（即 BIOS）会重置主板上的 USB 主机控制器。结果：所有的电源会话都被破坏，再次像是你拔出了所有 USB 设备。是的，这完全是 BIOS 的错，但这对您没有任何帮助，除非你能说服 BIOS 供应商修复这个问题（祝你好运！）
在许多系统上，在挂起到 RAM 后 USB 主机控制器会被重置。在几乎所有的系统上，在休眠期间（也称为 swsusp 或挂起到磁盘）没有任何挂起电流可用。
您可以在恢复后检查内核日志以查看是否发生过这两种情况；寻找表示“根集线器失去电力或被重置”的行。
在实践中，人们被迫在挂起系统前卸载 USB 设备上的任何文件系统。如果根文件系统位于 USB 设备上，则根本无法将系统挂起。（好吧，确实可以挂起——但一唤醒就会崩溃，这并没有好到哪里去。）

解决方案是什么？
=================

内核包含了一个名为 USB-persist 的功能。它试图通过允许核心 USB 设备数据结构在电源会话中断后保持不变来解决这些问题。其工作原理如下：如果内核发现 USB 主机控制器在恢复时不在预期的状态（即控制器被重置或失去了电源），则对设置为“持久”的该控制器下的每个 USB 设备应用持久性检查。它不会尝试恢复设备；一旦电源会话消失，这种尝试是无效的。相反，它会发出 USB 端口重置命令，然后重新枚举设备。（这与每次 USB 设备重置时发生的情况完全相同。）如果重新枚举显示连接到该端口的设备具有与之前相同的描述符（包括供应商和产品 ID），那么内核将继续使用相同的设备结构。实际上，内核将设备视为只是被重置而非拔出。

同样的情况也会发生在主机控制器处于预期状态，但 USB 设备被拔下后再插上，或者 USB 设备未能正常恢复的情况下。

如果没有设备现在连接到该端口，或者描述符与内核记录的不同，那么处理方式就是你所期望的那样。内核会销毁旧的设备结构，并像旧设备被拔出并插入新设备一样进行处理。

最终结果是 USB 设备仍然可用且可使用。文件系统挂载和内存映射不受影响，世界现在变成了一个美好而快乐的地方。

请注意，“USB-persist”功能仅适用于已启用它的设备。你可以通过以下命令（以 root 用户身份）启用此功能：

```
echo 1 >/sys/bus/usb/devices/.../power/persist
```

其中“...”应替换为设备的 ID。若要禁用此功能，请写入 0 而不是 1。对于集线器，此功能自动且永久启用，且不存在 power/persist 文件，因此你只需关注那些真正重要的设备。

这是最佳解决方案吗？
======================

也许不是。可以说，跟踪设备断开连接时的已挂载文件系统和内存映射应该由集中式逻辑卷管理器处理。这样的解决方案允许你在插入 USB 闪存设备、创建与其关联的持久卷、拔掉闪存设备、稍后再次插入后，仍能与该设备关联相同的持久卷。因此，它的作用范围比 USB-persist 更广泛。

另一方面，编写一个持久卷管理器是一项巨大的工作，使用它也需要用户的大量输入。这个解决方案更快更容易——而且现在已经存在，这是它的一大优点！

此外，USB-persist 功能适用于所有 USB 设备，而不仅仅是大容量存储设备。它可能同样适用于其他类型的设备，例如网络接口。

警告：USB-persist 可能很危险！
==================================

在恢复中断的电源会话时，内核尽力确保 USB 设备没有发生变化；也就是说，与之前相同的设备仍然插在端口上。但是这些检查并不能保证100%准确。
如果你用同一类型（同一制造商，相同的ID等）的另一个USB设备替换现有的一个，内核很可能检测不到这种变化。会比较序列号字符串和其他描述符与内核中存储的值，但这可能没有帮助，因为制造商通常会在他们的设备上完全省略序列号。

此外，在不改变USB设备本身的情况下更换其内部介质是完全可能的。例如，如果在系统休眠时更换了USB读卡器中的闪存卡，内核将无法得知你进行了更换。内核会假定没有任何事情发生，并继续使用旧卡的分区表、inode和内存映射。

如果内核在这种情况下被误导，几乎肯定会引起数据损坏并导致系统崩溃。你只能怪自己。

对于那些设置了`avoid_reset_quirk`属性的设备，持久化可能会失败，因为这些设备在重置后可能会发生变化。

你已经被警告过了！请自行承担风险使用！

话虽如此，大多数时候应该不会有任何问题。USB-persist功能可以非常有用。尽可能充分利用它。
