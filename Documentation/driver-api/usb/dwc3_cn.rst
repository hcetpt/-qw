===============================================================
新思科技设计仓库核心超速USB 3.0控制器
===============================================================

:作者: Felipe Balbi <felipe.balbi@linux.intel.com>
:日期: 2017年4月

简介
============

*新思科技设计仓库核心超速USB 3.0控制器*（以下简称*DWC3*）是一个符合USB超速标准的控制器，它可以配置为以下四种模式之一：

1. 仅外围设备配置
2. 仅主机配置
3. 双重角色配置
4. 集线器配置

Linux目前支持该控制器的多个版本。大概率上，您所使用的SoC中的版本已经得到了支持。截止本文撰写之时，已知被测试过的版本范围从2.02a到3.10a。一般而言，任何高于2.02a的版本都应该能够可靠地运行。目前，我们有许多已知的用户使用这个驱动程序。按字母顺序排列如下：

1. Cavium
2. 英特尔公司
3. 高通
4. 瑞芯微
5. 意法半导体
6. 三星
7. 德州仪器
8. 赛灵思

特性概述
======================

关于您的DWC3版本支持的具体特性详情，请咨询您的IP团队和/或*新思科技设计仓库核心超速USB 3.0控制器数据手册*。以下是截至本文撰写时，驱动程序支持的一些特性列表：

1. 最多支持16个双向端点（包括控制通道ep0）
2. 灵活的端点配置
3. 同时支持IN和OUT传输
4. 散列列表支持
5. 每个端点最多256个TRB[#trb]_
6. 支持所有传输类型（*控制*、*批量*、*中断*、*等时*）
7. 超速批量流
8. 链路电源管理
9. 调试用追踪事件
10. DebugFS [#debugfs]_接口

这些特性都与**内核树**中的许多gadget驱动程序一起进行了测试。我们已经验证了*ConfigFS* [#configfs]_和传统的gadget驱动程序。
驱动设计
==============

DWC3驱动位于*drivers/usb/dwc3/*目录下。与该驱动相关的所有文件都在这一个目录中。这使得新加入者更容易阅读代码并理解其行为。
由于DWC3配置的灵活性，驱动在某些地方可能稍微复杂一些，但总体来说应该很容易理解。
驱动的最大部分涉及到Gadget API。
已知限制
===================

和其他硬件一样，DWC3也有它自身的局限性。为了避免对这些问题的不断询问，我们决定在这里记录它们，并提供一个可以指向用户的单一位置。

OUT传输大小要求
---------------------------------

根据新思科技的数据手册，所有OUT传输TRBs[#trb]_的*size*字段必须设置为一个整数倍于端点*wMaxPacketSize*的值。这意味着例如为了接收大量存储的*CBW*[#cbw]_，req->length必须要么设置为一个*wMaxPacketSize*（超速情况下为1024，高速情况下为512等）的倍数值，或者DWC3驱动必须添加一个链接TRB指向剩余长度的弃用缓冲区。没有这样做的话，OUT传输将**无法**启动。
需要注意的是，在撰写本文时，这不会成为一个问题，因为DWC3完全有能力为剩余长度附加一个链接TRB，并完全隐藏这一细节不让gadget驱动知道。但仍值得提及，因为这是关于DWC3和*非正常工作的传输*查询的最大来源。
TRB环大小限制
-------------------------

当前，我们有一个硬性限制，即每个端点最多256个TRBs[#trb]_，最后一个TRB是一个Link TRB[#link_trb]_，指回第一个。此限制是任意设定的，但它的好处是正好加起来为4096字节，即1页。
DWC3驱动会尽力应对超过255个请求的情况，大部分情况下应该能正常工作。但是这种情况并没有非常频繁地进行过测试。如果您遇到任何问题，请参阅下面的**报告错误**部分。
报告错误
================

每当您遇到 DWC3 的问题时，首先应该确保：

    1. 您正在运行来自 `Linus 的仓库`_ 的最新版本。
    2. 您可以在不对 DWC3 做出任何树外更改的情况下复现该错误。
    3. 您已经确认这不是主机本身的故障。

在确认了所有这些事项后，请按照以下步骤收集足够的信息以便我们能够为您提供帮助。
所需信息
---------------------

DWC3 完全依赖于跟踪事件来进行调试。所有信息都在那里暴露，并且通过 DebugFS 提供了一些额外的信息 [#debugfs]_。
为了捕获 DWC3 的跟踪事件，您需要在将 USB 线连接到主机之前运行以下命令：

.. code-block:: sh

		 # mkdir -p /d
		 # mkdir -p /t
		 # mount -t debugfs none /d
		 # mount -t tracefs none /t
		 # echo 81920 > /t/buffer_size_kb
		 # echo 1 > /t/events/dwc3/enable

完成这些操作后，您可以连接您的 USB 线并复现问题。一旦问题出现，请复制文件 `trace` 和 `regdump`，如下所示：

.. code-block:: sh

		# cp /t/trace /root/trace.txt
		# cat /d/*dwc3*/regdump > /root/regdump.txt

请确保将 `trace.txt` 和 `regdump.txt` 压缩成一个 tar 文件，并将其通过邮件发送给我 `我`_，抄送给 `linux-usb`_。如果您希望确保我会帮助您，请按照以下格式撰写邮件主题：

	**[BUG REPORT] usb: dwc3: 在进行 XYZ 时出现的错误**

在邮件正文中，请详细描述您正在做什么、使用的 gadget 驱动是什么、如何复现问题、使用的是哪种 SoC、主机上运行的操作系统（及其版本）等信息。
有了这些信息，我们应该能够理解发生了什么，并为您提供帮助。
调试
===========

首先，声明如下：

  免责声明：DebugFS 和/或 TraceFS 中可用的信息可能会随着任何主要 Linux 内核版本的变化而变化。如果编写脚本，请 **不要** 假设信息会以当前格式存在。

撇开这个不谈，让我们继续。
如果您愿意自己调试问题，那值得表扬 :-)

除此之外，没有什么可说的，跟踪事件对于解决 DWC3 的问题非常有帮助。此外，在这种情况下访问 Synopsys 数据手册将会非常有价值。
USB 分析器有时也会有所帮助，但它并不是必需的；有很多信息无需查看物理线路上的数据就能理解。
如果您需要帮助，请随时联系 `我`_ 并抄送给 `linux-usb`_。
``DebugFS``
--------------

``DebugFS`` 非常适合收集 DWC3 及其任何端点当前状态的信息。
