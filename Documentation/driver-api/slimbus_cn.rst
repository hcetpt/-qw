============================
Linux 内核 SLIMbus 支持
============================

概述
========

什么是 SLIMbus？
----------------
SLIMbus（串行低功耗片间媒体总线）是由 MIPI（移动行业处理器接口）联盟开发的一项规范。该总线采用主从配置，是一种双线多点连接的实现方式（时钟和数据）。目前，SLIMbus 主要用于 SoC（系统级芯片）的应用处理器与外围组件（通常为编解码器）之间的接口。SLIMbus 利用时分复用来容纳多个数据通道及一个控制通道。
控制通道用于各种控制功能，如总线管理、配置和状态更新。这些消息可以是单播（例如读取/写入设备特定值），也可以是组播（例如数据通道重新配置序列是向所有设备广播的消息）。

数据通道用于两个 SLIMbus 设备之间的数据传输。数据通道使用设备上的专用端口。
硬件描述：
---------------------
根据其能力的不同，SLIMbus 规范将设备分为几种不同的类型。
管理器设备负责枚举、配置和动态通道分配。每个总线上只有一个活动的管理器。
通用设备是指提供应用功能的设备（例如编解码器）。
帧器设备负责为总线提供时钟，并在总线上发送帧同步和帧信息。
每个 SLIMbus 组件都有一个接口设备来监控物理层。
通常，每个 SoC 包含一个 SLIMbus 组件，内含 1 个管理器、1 个帧器设备、1 个通用设备（用于支持数据通道）以及 1 个接口设备。
外部辅助SLIMbus组件通常具有1个通用设备（用于功能/数据通道支持），以及一个相关的接口设备。
通用设备的寄存器被映射为“值元素”，以便可以通过SLIMbus控制通道交换控制/状态类型的信息来进行读写操作。
如果同一总线上有多个帧设备(framer devices)，管理设备负责选择活动帧设备来对总线进行时钟同步。
根据规范，SLIMbus使用“时钟齿轮”来进行基于当前频率和带宽需求的电源管理。共有10个时钟齿轮，并且每个齿轮将SLIMbus的频率设置为其前一齿轮的两倍。
每个设备都有一个6字节的枚举地址，而管理设备会在各个设备报告其在总线上的存在后为它们分配一个1字节的逻辑地址。
软件描述：
---------------------
有两种类型的SLIMbus驱动程序：

- `slim_controller` 代表SLIMbus的“控制器”。此驱动程序应实现SoC所需的职责（管理设备、用于监控层并报告错误的相关接口设备、默认帧设备）。
- `slim_device` 代表SLIMbus的“通用设备/组件”，并且`slim_driver`应为此`slim_device`实现驱动程序。
设备向驱动程序的通知：
-----------------------------------
由于SLIMbus设备具有报告其存在的机制，框架允许驱动程序在其对应的设备报告总线上的存在时进行绑定。
然而，有可能需要先探测驱动程序，以便它可以启用相应的SLIMbus设备（例如，为其供电或将其从复位状态中移出）。为了支持这种行为，框架也允许驱动程序首先进行探测（例如，使用标准的DeviceTree兼容性字段）。
这就产生了驱动程序需要知道何时设备处于可用状态（即报告了其存在）的需求。当设备报告其存在并由控制器分配了一个逻辑地址时，会使用`device_up`回调函数。
同样地，当SLIMbus设备停止工作时会报告“设备缺失”。一个名为“device_down”的回调函数会在设备报告缺失时通知驱动程序，并且其逻辑地址分配也会被控制器取消。另一个通知“boot_device”用于在控制器重置总线时通知slim_driver。此通知允许驱动程序采取必要的步骤来启动设备，以便在总线重置后设备仍能正常运行。

驱动程序和控制器API：
-------------------------
.. kernel-doc:: include/linux/slimbus.h
   :internal:

.. kernel-doc:: drivers/slimbus/slimbus.h
   :internal:

.. kernel-doc:: drivers/slimbus/core.c
   :export:

时钟暂停：
------------
SLIMbus规定，在总线进入低功耗模式之前，必须向总线上所有活动的设备广播一个重新配置序列（称为时钟暂停）。当控制器决定进入低功耗模式时，它使用这个序列，以便可以关闭相应的时钟和/或电源轨以节省电力。
通过唤醒帧设备（如果控制器驱动程序发起退出低功耗模式）或切换数据线（如果从属设备想要发起操作）来退出时钟暂停状态。
时钟暂停API：
~~~~~~~~~~~~~~~~~
.. kernel-doc:: drivers/slimbus/sched.c
   :export:

消息传递：
----------
该框架支持regmap和读写API来与SLIMbus设备交换控制信息。这些API可以是同步或异步的。
头文件<linux/slimbus.h>中有更多关于消息传递API的文档。
消息传递API：
~~~~~~~~~~~~~~~
.. kernel-doc:: drivers/slimbus/messaging.c
   :export:

流式传输API：
~~~~~~~~~~~~~~~
.. kernel-doc:: drivers/slimbus/stream.c
   :export:
