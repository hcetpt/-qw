============= 
驱动绑定
=============

驱动绑定是将设备与能够控制它的设备驱动程序相关联的过程。总线驱动程序通常处理这种情况，因为存在特定于总线的结构来表示这些设备和驱动程序。有了通用的设备和设备驱动程序结构后，大部分绑定可以通过通用代码实现。
总线
~~~

总线类型结构包含系统中该总线类型的所有设备列表。当为一个设备调用`device_register`时，它会被插入到这个列表的末尾。总线对象还包含所有该总线类型的驱动程序列表。当为驱动程序调用`driver_register`时，它会被插入到这个列表的末尾。这两个事件触发驱动绑定：
`device_register`
~~~~~~~~~~~~~~~

当添加新设备时，遍历总线的驱动程序列表以找到支持它的驱动程序。为了确定这一点，设备的设备ID必须匹配驱动程序支持的一个或多个设备ID。比较ID的格式和语义是总线特有的。
而不是尝试推导出复杂的状态机和匹配算法，由总线驱动程序提供回调函数来比较设备与驱动程序的ID。如果找到匹配，则总线返回1；否则返回0。
```c
int match(struct device *dev, struct device_driver *drv);
```

如果找到匹配项，设置设备的`driver`字段为该驱动程序，并调用驱动程序的`probe`回调函数。这给驱动程序一个机会来验证它是否确实支持硬件，并且硬件处于工作状态。
设备类别
~~~~~~~~~~~~

在`probe`成功完成后，设备被注册到其所属的类别中。设备驱动程序属于唯一的一个类别，并且这个类别设置在驱动程序的`devclass`字段中。
通过调用`devclass_add_device`将设备枚举到类别中，并实际地通过类别的`register_dev`回调函数将其注册到类别中。
驱动程序
~~~~~~

当驱动程序绑定到设备时，设备被插入到驱动程序的设备列表中。
sysfs
~~~~~

在总线的“devices”目录中创建一个符号链接，指向物理层次结构中设备的目录。
在驱动程序的“devices”目录中创建一个符号链接，指向物理层次结构中设备的目录。
当为设备创建一个目录时，该目录会在其类的目录下创建。在该目录中会创建一个符号链接，指向该设备在 sysfs 树中的物理位置。

可以创建一个符号链接（尽管现在还未实现）从设备的物理目录指向其类目录或类的顶级目录。也可以创建一个指向其驱动程序目录的符号链接。

### 驱动注册

当添加一个新的驱动时，过程几乎是相同的。
遍历总线上的设备列表以找到匹配项。已经拥有驱动的设备会被跳过。所有设备都会被遍历一遍，尽可能多地将设备绑定到该驱动上。

### 移除

当一个设备被移除时，其引用计数最终会降至0。当达到0时，会调用驱动的移除回调函数。该设备将从驱动的设备列表中移除，并且驱动的引用计数也会递减。两个之间的所有符号链接都会被移除。

当一个驱动被移除时，会遍历它所支持的设备列表，并对每个设备调用驱动的移除回调函数。这些设备将从列表中移除，同时移除所有的符号链接。
