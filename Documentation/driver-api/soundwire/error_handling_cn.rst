========================
SoundWire 错误处理
========================

SoundWire PHY 是经过精心设计的，因此总线上的错误非常不可能发生；即便发生，也应限于单个比特位的错误。这种设计可以在同步机制（两次错误后的同步丢失）和用于批量寄存器访问的短CRC中找到示例。
错误可以通过多种机制检测：

1. 总线冲突或奇偶校验错误：这种机制依赖于与负载和用途无关的低级检测器，并且它们覆盖了控制数据和音频数据。当前实现仅记录此类错误。
改进可能包括使整个编程序列无效并从已知位置重新开始。在控制/命令序列之外遇到此类错误时，SoundWire协议没有为音频数据启用隐藏或恢复功能，错误的位置也会影响其可听性（在PCM中，最高有效位将受到更大影响），并且在检测到一定数量的此类错误后可能会重置总线。请注意，由于编程错误（两个流使用相同的比特槽）或发送/接收转换期间的电气问题导致的总线冲突无法区分，尽管当音频启用时反复出现总线冲突是总线分配问题的一个指示。中断机制也可以帮助识别检测到总线冲突或奇偶校验错误的从设备，但它们可能不是错误的原因，因此单独重置它们不是一个可行的恢复策略。
2. 命令状态：每个命令都关联一个状态，该状态只涵盖设备间的数据传输。ACK状态表明命令已被接收，并将在当前帧结束前被执行。NAK表示命令有误，不会被应用。在不良编程（向不存在的从设备或未实现的寄存器发送命令）或电气问题的情况下，无响应信号表明命令被忽略。某些主设备实现允许命令多次重传。如果重传失败，回溯并重新启动整个编程序列可能是一个解决方案。或者，一些实现可能会直接发出总线重置并重新枚举所有设备。
3. 超时：在诸如ChannelPrepare或ClockStopPrepare等情况下，总线驱动程序应轮询寄存器字段直到其转换为NotFinished值0。MIPI SoundWire 规范 1.1 没有定义超时，但MIPI SoundWire DisCo文档增加了关于超时的建议。如果这些配置没有完成，驱动程序将返回-ETIMEOUT。此类超时是故障从设备的症状，很可能无法从中恢复。

全局重新配置序列中的错误极难处理：

1. BankSwitch：在最后一个命令执行BankSwitch时出现错误很难进行回溯。在单一总线段设置中重新传输Bank Switch命令可能是可能的，但这可能导致启用多个总线段时出现同步问题（具有副作用的命令，例如帧重新配置，在不同时间处理）。全局硬重置可能是最佳解决方案。

请注意，SoundWire没有提供一种机制来检测写入有效寄存器中的非法值。在许多情况下，标准甚至提到从设备可能会以实现定义的方式行为。总线实现不为此类错误提供恢复机制，从设备或主设备驱动程序开发者负责在有效寄存器中写入有效值，并根据需要实现额外的范围检查。
