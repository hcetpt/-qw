下面是文档的中文翻译：

---

SoundWire 锁定机制
==================

本文档解释了 SoundWire 总线（Bus）中的锁定机制。总线使用以下锁来避免在共享资源上的总线操作中出现竞态条件：
- 总线锁
  - 消息锁

总线锁
======

SoundWire 总线锁是一个互斥锁，是总线数据结构 (`sdw_bus`) 的一部分，用于每个总线实例。此锁用于序列化 SoundWire 总线实例中的以下操作：
- 添加和移除从设备（Slave），更改从设备状态
- 准备、启用、禁用和取消准备流操作
- 访问流数据结构

消息锁
======

SoundWire 消息传输锁。这个互斥锁也是总线数据结构 (`sdw_bus`) 的一部分。此锁用于序列化 SoundWire 总线实例中的消息传输（读/写）。

下面的例子展示了如何获取锁。
示例 1
------

消息传输
1. 对于每次消息传输：

    a. 获取消息锁
    b. 向从设备1传输消息（读/写）或在进行银行切换时在总线上广播消息
示例 2
------

准备操作
1. 获取与主控器1关联的总线实例的锁
2. 对于准备操作中的每一次消息传输

     a. 获取消息锁
b. 向从设备1传输消息（读/写）或在进行银行切换时在总线上广播消息
c. 释放消息锁
3. 释放与主控器1关联的总线实例的锁

```
+----------+                    +---------+
|          |                    |         |
|   Bus    |                    | Master  |
|          |                    | Driver  |
|          |                    |         |
+----+-----+                    +----+----+
     |                               |
     |    sdw_prepare_stream()       |
     <-------------------------------+   1. 获取总线锁
     |                               |   2. 执行流准备
     |                               |
     |                               |
     |     bus->ops->xfer_msg()      |
     <-------------------------------+   a. 获取消息锁
     |                               |   b. 传输消息
     |                               |
     +------------------------------->   c. 释放消息锁
     |    返回成功/错误              |   d. 返回成功/错误
     |                               |
     |                               |
     |    返回成功/错误              |   3. 释放总线锁
     +------------------------------->   4. 返回成功/错误
     |                               |
     +                               +
```

流程说明：
- `sdw_prepare_stream()`：由主控器驱动调用，用于准备数据流。
  - 步骤 1：获取总线锁以确保数据流的唯一性和一致性。
  - 步骤 2：执行流准备，这可能包括设置硬件参数等操作。
  - 在每条消息传输过程中：
    - a. 获取消息锁以确保消息传输的原子性。
    - b. 传输消息，这可以是向特定从设备发送消息或在总线上广播消息。
    - c. 释放消息锁以允许其他消息传输。
    - d. 返回成功或错误状态。
  - 步骤 3：释放总线锁。
  - 最后返回整个操作的成功或错误状态。
