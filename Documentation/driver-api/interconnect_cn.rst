### SPDX 许可证标识符：GPL-2.0

=====================================
通用系统互连子系统
=====================================

#### 引言
此框架旨在为控制片上系统 (SoC) 中互连设置提供标准内核接口。这些设置可以是多个互联设备或功能块之间的吞吐量、延迟和优先级。这些可以动态控制以节省电力或提供最大性能。互连总线是一种具有可配置参数的硬件，可以根据从各种驱动程序收到的请求在数据路径上进行设置。互连总线的一个例子是芯片组中各个组件或功能块之间的互连。在一个 SoC 上可能有多个互连，它们可能是多层的。

下面是简化版的实际 SoC 互连总线拓扑图：
```
+----------------+    +----------------+
| HW Accelerator |--->|      M NoC     |<---------------+
+----------------+    +----------------+                |
                                                      +------------+
 +-----+  +-------------+      |      +------+     |            |
 | DDR |  |                +----+----+ | PCIe |     |            |
 +-----+  |                | Slaves |  +------+     |            |
   ^ ^    |                +--------+     |         |   C NoC    |
   | |    V                               V         |            |
+------------------+   +------------------------+   |            |   +-----+
|                  |-->|                        |-->|            |-->| CPU |
|                  |-->|                        |<--|            |   +-----+
|     Mem NoC      |   |         S NoC          |   +------------+
 |                  |<--|                        |---------+    |
 |                  |<--|                        |<------+ |    |   +--------+
+------------------+   +------------------------+       | |    +-->| Slaves |
   ^  ^    ^    ^          ^                             | |        +--------+
   |  |    |    |          |                             | V
+------+  |  +-----+   +-----+  +---------+   +----------------+   +--------+
| CPUs |  |  | GPU |   | DSP |  | Masters |-->|       P NoC    |-->| Slaves |
+------+  |  +-----+   +-----+  +---------+   +----------------+   +--------+
           |
       +-------+
       | Modem |
       +-------+
```

#### 术语
- **互连提供者** 是互连硬件的软件定义。
上述图表中的互连提供者包括 M NoC、S NoC、C NoC、P NoC 和 Mem NoC。
- **互连节点** 是互连硬件端口的软件定义。每个互连提供者由多个互连节点组成，这些节点连接到其他 SoC 组件，包括其他互连提供者。在图表中，CPU 连接到内存的位置被称为互连节点，它属于 Mem NoC 互连提供者。
- **互连端点** 是路径的起点或终点。每个端点都是一个节点，但并非每个节点都是端点。
- **互连路径** 包括两个端点之间的一切，包括所有需要经过的节点，以从源节点到达目标节点。它可能包含跨多个互连提供者的多个主从对。
- **互连消费者** 是利用提供者暴露的数据路径的实体。消费者向提供者发送请求，要求不同的吞吐量、延迟和优先级。通常消费者是根据需求发送请求的设备驱动程序。例如，一个支持多种格式和图像尺寸的视频解码器就是一个消费者。
互连提供者
--------------

互连提供者是一个实现了初始化和配置互连总线硬件方法的实体。互连提供者的驱动程序应该向互连提供者核心注册。
.. kernel-doc:: include/linux/interconnect-provider.h

互连消费者
--------------

互连消费者是使用互连API来在端点之间获取路径并为这些互连路径设置带宽/延迟/QoS要求的客户端。这些接口目前尚未被记录。

互连调试文件系统(debugfs)接口
--------------------------------

和其他一些子系统一样，互连也会创建一些用于调试和内省的文件。debugfs中的文件不被视为ABI，因此应用程序软件不应该依赖于其格式细节，因为这些细节可能在不同内核版本间发生变化。

`/sys/kernel/debug/interconnect/interconnect_summary`：

显示系统中所有互连节点及其聚合带宽请求。在每个节点下缩进显示来自各设备的带宽请求。

`/sys/kernel/debug/interconnect/interconnect_graph`：

以Graphviz dot格式显示互连图。它展示了系统中的所有互连节点和链接，并将来自同一提供者的节点作为子图进行分组。该格式易于人类阅读，并且也可以通过Graphviz的dot工具生成多种图形格式的图表，例如：
        
        $ cat /sys/kernel/debug/interconnect/interconnect_graph | \
                dot -Tsvg > interconnect_graph.svg

`test-client`目录提供了向任意路径发出带宽请求的接口。出于安全考虑，默认情况下此功能是禁用的，需要通过Kconfig选项来启用。启用它需要对代码进行修改，即`#define INTERCONNECT_ALLOW_WRITE_DEBUGFS`。示例用法如下：

        cd /sys/kernel/debug/interconnect/test-client/

        # 为从CPU到DDR的路径（qcom/sm8550）配置节点端点
echo chm_apps > src_node
        echo ebi > dst_node

        # 获取src_node和dst_node之间的路径。这仅在更新了节点端点后必要
echo 1 > get

        # 设置所需的平均带宽为1GBps，峰值带宽为2GBps
echo 1000000 > avg_bw
        echo 2000000 > peak_bw

        # 对最新从"get"获取的路径投票以设置平均带宽和峰值带宽
# 可以通过重复这个过程为不同的节点端点设置多个路径
echo 1 > commit
