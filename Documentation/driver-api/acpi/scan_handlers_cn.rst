### SPDX 许可证标识符: GPL-2.0
### 包含: <isonum.txt>

==================
ACPI 扫描处理器
==================

:版权所有: |copy| 2012, Intel Corporation

:作者: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

在系统初始化和基于ACPI的设备热添加过程中，会扫描ACPI命名空间以查找通常代表各种硬件组件的设备对象。这会导致为ACPI命名空间中的每个设备对象创建并注册一个`struct acpi_device`对象，并且这些`struct acpi_device`对象的层次结构反映了命名空间布局（即，命名空间中的父设备对象由父`struct acpi_device`对象表示，子设备对象也类似）。以下将这些`struct acpi_device`对象称为“设备节点”，但不应将其与设备树解析代码中使用的`struct device_node`对象混淆（尽管它们的作用是类似的）。在基于ACPI的设备热移除时，代表被移除硬件的设备节点会被注销并删除。

位于`drivers/acpi/scan.c`的核心ACPI命名空间扫描代码执行基本的设备节点初始化工作，例如从这些设备节点所代表的设备对象中检索通用配置信息，并填充适当的数据。但是，在某些设备节点注册后还需要进行额外的处理。例如，如果给定的设备节点代表一个PCI主机桥，则其注册应导致该桥下的PCI总线被枚举，并且该总线上的PCI设备应注册到驱动核心。同样地，如果设备节点代表一个PCI中断链接，则需要配置该链接以便内核可以使用它。

这些额外的配置任务通常取决于由给定设备节点所代表的硬件组件类型，该类型可以根据设备节点的硬件ID (HID) 来确定。这些任务是由ACPI扫描处理器执行的，这些处理器由以下结构表示：

```c
struct acpi_scan_handler {
    const struct acpi_device_id *ids;
    struct list_head list_node;
    int (*attach)(struct acpi_device *dev, const struct acpi_device_id *id);
    void (*detach)(struct acpi_device *dev);
};
```

其中`ids`是该处理器应该处理的设备节点ID列表，`list_node`是全局ACPI扫描处理器列表中的挂钩，该列表由ACPI核心维护，而`.attach()`和`.detach()`回调分别在新设备节点注册后和之前已连接的设备节点注销前被调用。

命名空间扫描函数`acpi_bus_scan()`首先将给定命名空间范围内的所有设备节点注册到驱动核心。然后，它尝试使用可用扫描处理器的`ids`数组来匹配每个设备节点。如果找到匹配的扫描处理器，则对给定设备节点执行其`.attach()`回调。如果该回调返回1，则意味着该处理器已经认领了该设备节点，并负责执行与之相关的任何额外配置任务。在这种情况下，它也将负责准备设备节点的注销工作。

此时，设备节点的`handler`字段将填充认领它的扫描处理器的地址。

如果`.attach()`回调返回0，则意味着该设备节点对该扫描处理器不感兴趣，并且可以与列表中的下一个扫描处理器进行匹配。如果它返回一个（负数）错误代码，则意味着由于严重错误应终止命名空间扫描。返回的错误代码应反映错误的类型。

命名空间修剪函数`acpi_bus_trim()`首先执行给定命名空间范围内所有设备节点（如果有扫描处理器的话）的扫描处理器的`.detach()`回调。接下来，它注销该范围内的所有设备节点。

可以通过使用带有指向新扫描处理器指针的`acpi_scan_add_handler()`函数将ACPI扫描处理器添加到由ACPI核心维护的列表中。扫描处理器添加到列表中的顺序就是它们在命名空间扫描期间与设备节点匹配的顺序。
所有扫描句柄都必须在首次运行 acpi_bus_scan() 之前添加到列表中，并且它们不能从该列表中移除。
