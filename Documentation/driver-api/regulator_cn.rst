版权所有 2007-2008 Wolfson Microelectronics

此文档是自由软件；你可以按照自由软件基金会发布的GNU通用公共许可证版本2或之后的版本重新分发它和/或修改它。

==================
电压和电流调节器API
==================

:作者: Liam Girdwood
:作者: Mark Brown

简介
============

本框架旨在提供一个标准内核接口来控制电压和电流调节器。
其目的是使系统能够动态地控制调节器的功率输出，以节省电力并延长电池寿命。这适用于电压调节器（其中输出电压可调）和电流负载（其中电流限制可调）。
请注意，更详细的文档可在Linux内核源码的“Documentation/power/regulator”中找到。
术语表
--------

调节器API使用了一些可能不太熟悉的术语：

调节器

    向其他设备供电的电子设备。大多数调节器可以启用和禁用其输出，有些还可以控制其输出电压或电流。
消费者

    消耗由调节器提供的电力的电子设备。这些设备可能是静态的，只需要固定供电，也可能是动态的，需要在运行时主动管理调节器。
电源域

    由特定调节器供电的电子电路，包括该调节器及其所有消费者设备。调节器的配置在整个电路的所有组件之间共享。
电源管理集成电路 (PMIC)

    包含多个调节器以及通常还包含其他子系统的集成电路。在嵌入式系统中，主PMIC通常相当于桌面系统中的电源供应单元 (PSU) 和南桥的组合。
消费者驱动接口
=====================

此接口提供了与内核时钟框架类似的API。消费者驱动程序使用 `get <#API-regulator-get>`__ 和 `put <#API-regulator-put>`__ 操作来获取和释放调节器。提供了用于 `启用 <#API-regulator-enable>`__ 和 `禁用 <#API-regulator-disable>`__ 调节器的函数以及获取和设置调节器运行时参数的函数。
当请求调节器时，消费者使用其供电的象征性名称，如"Vcc"，这些名称通过机器接口映射到实际的调节器设备。
当监管器框架未被使用时，提供此API的存根版本以尽量减少使用预处理指令（ifdefs）的需求。
启用和禁用
-----------

监管器API提供了对监管器的引用计数启用和禁用功能。消费设备使用函数 :c:func:`regulator_enable()` 和 :c:func:`regulator_disable()` 来启用和禁用监管器。这两个函数的调用必须保持平衡。
请注意，由于可能有多个消费者在使用同一个监管器，并且机器限制可能不允许监管器被禁用，因此无法保证调用 :c:func:`regulator_disable()` 实际上会导致由监管器提供的电源被禁用。消费驱动程序应假设监管器随时都可能是启用状态。

配置
-------------

一些消费设备可能需要能够动态地配置其电源供应。例如，MMC驱动程序可能需要为其卡选择正确的运行电压。这可以在监管器启用或禁用时进行。
函数 :c:func:`regulator_set_voltage()` 和 :c:func:`regulator_set_current_limit()` 提供了主要的接口来实现这一点。它们都支持电压和电流的范围，适用于不需要特定值的驱动程序（例如，CPU频率缩放通常允许CPU在较低频率下使用更宽范围的供电电压，但并不要求供电电压降低）。如果需要确切的值，则最小值和最大值应该相同。

回调
---------

还可以为诸如调节失败等事件注册回调。

监管器驱动接口
==================

监管器芯片的驱动程序会将监管器注册到监管器核心中，并向核心提供操作结构。通知接口允许错误条件报告给核心。
注册应当由平台明确设置触发，该设置提供一个用于监管器的 `regulator_init_data` 结构体，其中包含约束和电源信息。

机器接口
=============

此接口提供了一种定义在给定系统上监管器如何与消费者连接以及系统的有效运行参数是什么的方法。

电源
--------

监管器电源通过结构体 `regulator_consumer_supply` 来指定。这是在驱动程序注册时作为机器约束的一部分完成的。
### 约束

除了定义连接外，机器接口还提供了约束条件，这些约束条件定义了客户端被允许执行的操作以及可以设置的参数。这是必要的，因为通常调节设备会提供比在给定系统上安全使用的更多的灵活性，例如支持高于消费者额定值的供电电压。
这在驱动程序注册时通过提供一个 `struct regulation_constraints` 来完成。
约束条件还可以在约束中为调节器指定初始配置，这对于静态消费者特别有用。

### API参考

由于内核文档框架的限制和现有源代码布局的原因，整个调节器API在这里进行了记录。

.. kernel-doc:: include/linux/regulator/consumer.h
   :internal:

.. kernel-doc:: include/linux/regulator/machine.h
   :internal:

.. kernel-doc:: include/linux/regulator/driver.h
   :internal:

.. kernel-doc:: drivers/regulator/core.c
   :export:
