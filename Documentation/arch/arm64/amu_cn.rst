Activity Monitors Unit (AMU) 扩展在 AArch64 Linux 中的应用

=======================================================

作者: Ionela Voinescu <ionela.voinescu@arm.com>

日期: 2019-09-10

本文档简要介绍了在 AArch64 Linux 中提供 Activity Monitors Unit 支持的情况。

架构概述
---------------------

活动监视器扩展是由 ARMv8.4 CPU 架构引入的可选扩展。
活动监视器单元（AMU）在每个 CPU 中实现，提供了用于系统管理用途的性能计数器。AMU 扩展提供了对计数器寄存器的系统寄存器接口，并支持一个可选的外部内存映射接口。
版本 1 的 Activity Monitors 架构实现了一个由四个固定且在架构上定义的 64 位事件计数器组成的计数器组：
- CPU 周期计数器：以 CPU 的频率递增
- 恒定计数器：以系统时钟的固定频率递增
- 已退休指令：随着每条架构上执行的指令递增
- 内存停顿周期：计算由于最后一级缓存内的缺失导致的指令调度停顿周期，在同一时钟域内
当处于 WFI 或 WFE 状态时，这些计数器不会递增
Activity Monitors 架构为多达 16 个架构定义的事件计数器提供了空间。未来版本的架构可能会使用这个空间来实现更多的架构定义的事件计数器。
此外，版本1实现了最多16个辅助的64位事件计数器的计数器组。
在冷重置时所有计数器都会重置为0。

基础支持
----------

内核可以安全地运行混合使用了支持与不支持活动监视器扩展的CPU。因此，当选择了CONFIG_ARM64_AMU_EXTN时，我们会无条件地启用该功能，以允许任何较晚的CPU（次级或热插拔）检测并使用该特性。
当在一个CPU上检测到此特性时，我们会标记该特性的可用性，但这并不能保证计数器的正确功能，仅表示存在该扩展。
固件（运行在较高异常级别的代码，例如arm-tf）的支持是必要的：

- 为较低异常级别（EL2和EL1）启用对AMU寄存器的访问
- 启用计数器。如果不启用，则这些计数器将读取为0
- 在CPU被置于/从“关闭”电源状态中唤醒之前/之后保存/恢复计数器
使用启用了此功能但引导程序有缺陷的内核时，用户可能会在访问计数器寄存器时遇到恐慌或锁定。即使没有观察到这些症状，寄存器读取返回的值也可能无法正确反映实际情况。最常见的现象是，计数器读取为0，表明它们未被启用。
如果固件中没有提供适当的支持，最好是禁用CONFIG_ARM64_AMU_EXTN。值得注意的是，出于安全原因，这并不会绕过设置AMUSERENR_EL0来捕获来自EL0（用户空间）到EL1（内核）的访问。因此，固件仍应确保EL2/EL3中的AMU寄存器访问不会被捕获。
AMUv1的固定计数器可以通过以下系统寄存器定义进行访问：

- SYS_AMEVCNTR0_CORE_EL0
- SYS_AMEVCNTR0_CONST_EL0
- SYS_AMEVCNTR0_INST_RET_EL0
- SYS_AMEVCNTR0_MEM_STALL_EL0

辅助平台特定计数器可通过SYS_AMEVCNTR1_EL0(n)进行访问，其中n是一个介于0到15之间的值。
详细信息可以在以下位置找到：arch/arm64/include/asm/sysreg.h
用户空间访问
-------------

目前，由于以下原因，从用户空间访问 AMU 寄存器被禁用：

- **安全原因**：它们可能会暴露在安全模式下执行的代码的信息。
- **用途**：AMU 计数器主要用于系统管理使用。

此外，该功能的存在对用户空间是不可见的。
虚拟化
-------------

目前，在 KVM 客户机侧，从用户空间（EL0）和内核空间（EL1）的访问被禁用，原因是：

- **安全原因**：它们可能会暴露其他客户机或主机执行的代码的信息。

任何尝试访问 AMU 寄存器的行为都将导致一个未定义异常被注入到客户机中。
