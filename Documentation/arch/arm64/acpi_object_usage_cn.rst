===== ACPI 表格 =====

以下列出了各个 ACPI 表格的预期用途。
如果使用了章节编号，则该编号指的是 ACPI 规范中定义该对象的章节。如果使用了“签名保留”，则表示规范仅识别表格的签名（即表格的前四个字节），而实际的表格定义在 UEFI 论坛之外（参见规范的第 5.2.6 节）。
对于 arm64 上的 ACPI，表格还分为以下几类：

       - 必须：DSDT、FADT、GTDT、MADT、MCFG、RSDP、SPCR、XSDT

       - 推荐：BERT、EINJ、ERST、HEST、PCCT、SSDT

       - 可选：AGDI、BGRT、CEDT、CPEP、CSRT、DBG2、DRTM、ECDT、FACS、FPDT、
          HMAT、IBFT、IORT、MCHI、MPAM、MPST、MSCT、NFIT、PMTT、PPTT、RASF、SBST、
          SDEI、SLIT、SPMI、SRAT、STAO、TCPA、TPM2、UEFI、XENV

       - 不支持：AEST、APMT、BOOT、DBGP、DMAR、ETDT、HPET、IVRS、LPIT、
          MSDM、OEMx、PDTT、PSDT、RAS2、RSDT、SLIC、WAET、WDAT、WDRT、WPBT

===== ========================================================================
表格  ARMv8 Linux 中的使用
===== ========================================================================
AEST   签名保留（签名 == "AEST")

       **Arm 错误源表**

       此表格告知操作系统系统中存在的任何符合 Arm RAS 架构的错误节点。
AGDI   签名保留（签名 == "AGDI")

       **Arm 通用诊断转储和重置设备接口表**

       此表格描述了一个不可屏蔽事件，平台固件通过它请求操作系统生成诊断转储并重置设备。
APMT   签名保留（签名 == "APMT")

       **Arm 性能监控表**

       此表格描述了系统组件实现的 PMU 支持属性。
BERT   第 18.3 节（签名 == "BERT")

       **启动错误记录表**

       如果平台提供了 RAS 支持，则必须提供此表格。建议提供此表格。
BOOT   签名保留（签名 == "BOOT")

       **简单的 BOOT 标志表**

       仅为微软使用的表格，将不会得到支持。
BGRT   第 5.2.22 节（签名 == "BGRT")

       **启动图形资源表**

       可选，当前不支持，对于 ARM 服务器没有实际的应用案例。
CEDT   签名保留（签名 == "CEDT")

       **CXL 早期发现表**

       此表格允许操作系统发现任何 CXL 主机桥接器及主机桥接器寄存器。
CPEP   第 5.2.18 节（签名 == "CPEP")

       **已纠正平台错误轮询表**

       可选，当前不支持，除非有兼容 ARM 的硬件可用，并且规范相应修改，否则不推荐使用。
以下是对提供的英文文本的中文翻译：

CSRT   签名保留 (signature == "CSRT")

       **核心系统资源表**

       可选，当前不支持
DBG2   签名保留 (signature == "DBG2")

       **调试端口表 2**

       许可证已更改并应能使用。如果在命令行中使用了早期控制台（earlycon=<device>）以外的内容，则为可选项
DBGP   签名保留 (signature == "DBGP")

       **调试端口表**

       仅微软使用的表，不会被支持
DSDT   第5.2.11.1节 (signature == "DSDT")

       **差异化系统描述表**

       需要一个DSDT；参见SSDT
ACPI表中只包含一个DSDT，但可以包含一个或多个SSDT，后者为可选项。每个SSDT只能向ACPI命名空间添加内容，但不能修改或替换DSDT中的任何内容
DMAR   签名保留 (signature == "DMAR")

       **DMA重映射表**

       仅x86平台的表，不会被支持
DRTM   签名保留 (signature == "DRTM")

       **动态测量信任根表**

       可选，当前不支持
ECDT   第5.2.16节 (signature == "ECDT")

       **嵌入式控制器描述表**

       可选，当前不支持，但如果且仅如果使用GPE_BIT字段来表示中断号，可以在ARM上使用它，因为硬件减少模式下没有定义GPE块。这需要对ACPI规范进行修改
EINJ   第18.6节 (signature == "EINJ")

       **错误注入表**

       此表对于测试平台对错误条件的响应非常有用；它允许将错误注入系统，就像错误实际发生一样。然而，此表不应与生产系统一起发布；应在测试时仅通过ACPICA工具动态加载和执行
ERST   第18.5节 (signature == "ERST")

       **错误记录序列化表**

       在支持RAS的平台上，如果不是UEFI基础，则必须提供此表；如果是UEFI基础，则可以提供此表。当未提供此表时，UEFI运行时服务将用于将硬件错误信息保存到持久存储区并从中检索。
### ETDT
保留签名 (signature == "ETDT")

**事件定时器描述表**

过时的表格，将不再支持

### FACS
第 5.2.10 节 (signature == "FACS")

**固件ACPI控制结构**

此表格可能不太有用。如果提供，则不会使用全局锁，因为它不属于硬件简化配置文件的一部分，并且仅认为64位地址字段有效。

### FADT
第 5.2.9 节 (signature == "FACP")

**固定ACPI描述表**
对于 arm64 是必需的。
必须设置 HW_REDUCED_ACPI 标志。当设置了 HW_REDUCED_ACPI 时，预期所有被忽略的字段都设为零。
如果提供了 FACS 表格，则应使用 X_FIRMWARE_CTRL 字段，而不是 FIRMWARE_CTRL。
如果使用 PSCI（推荐使用），请确保正确填写了 ARM_BOOT_ARCH — 即设置了 PSCI_COMPLIANT 标志，并根据需要设置或取消设置 PSCI_USE_HVC（参见表 5-37）。
对于同样必需的 DSDT，应使用 X_DSDT 字段，而非 DSDT 字段。

### FPDT
第 5.2.23 节 (signature == "FPDT")

**固件性能数据表**

可选，对启动性能分析有用。

### GTDT
第 5.2.24 节 (signature == "GTDT")

**通用定时器描述表**

对于 arm64 是必需的。

### HEST
第 18.3.2 节 (signature == "HEST")

**硬件错误源表**

已经定义了 ARM 特定的错误源；请使用这些或者 PCI 类型，如类型 6（AER 根端口）、类型 7（AER 终端设备）、类型 8（AER 桥接器），或使用类型 9（通用硬件错误源）。只有在 arm64 上使用可信固件的情况下，才有可能进行固件一级的首次错误处理。
必须提供，如果平台提供了RAS支持。建议提供此表。
HMAT   第5.2.28节 (签名 == "HMAT")

       **异构内存属性表**

       此表描述了与内存接近域相关的内存属性，如内存侧缓存属性、带宽和延迟详情。操作系统使用这些信息来优化系统内存配置。
HPET   签名保留 (签名 == "HPET")

       **高精度事件计时器表**

       仅x86表，将不支持。
IBFT   签名保留 (签名 == "IBFT")

       **iSCSI启动固件表**

       微软定义的表，支持待定。
IORT   签名保留 (签名 == "IORT")

       **输入输出重映射表**

       仅arm64表，用于描述IO拓扑结构、SMMU（系统内存管理单元）、以及GIC ITS（中断传输系统），以及这些组件如何连接在一起，例如确定哪些组件位于哪些SMMU/ITS之后。
       此表仅在某些SBSA（Server Base System Architecture）平台上需要（例如，在使用GICv3-ITS和SMMU的情况下）；对于SBSA Level 0平台，它仍然是可选的。
IVRS   签名保留 (签名 == "IVRS")

       **I/O虚拟化报告结构**

       仅x86_64 (AMD) 表，将不支持。
LPIT   签名保留 (签名 == "LPIT")

       **低功耗空闲表**

       截至ACPI 5.1，仅为x86表；从ACPI 6.0开始，ARM平台上的处理器描述和电源状态应使用DSDT，并定义处理器容器设备（_HID ACPI0010，第8.4节，更具体地说是8.4.3和8.4.4）。
MADT   第5.2.12节 (签名 == "APIC")

       **多APIC描述表**

       对于arm64是必需的。只应使用GIC中断控制器结构（类型 0xA - 0xF）。
MCFG   签名保留 (签名 == "MCFG")

       **内存映射配置空间**

       如果平台支持PCI/PCIe，则需要一个MCFG表。
MCHI   签名保留 (signature == "MCHI")

       **管理控制器主机接口表**

       可选，当前不支持
MPAM   签名保留 (signature == "MPAM")

       **内存分区与监控表**

       该表允许操作系统发现由子系统实现的 MPAM 控制功能
MPST   第5.2.21节 (signature == "MPST")

       **内存电源状态表**

       可选，当前不支持
MSCT   第5.2.19节 (signature == "MSCT")

       **最大系统特性表**

       可选，当前不支持
MSDM   签名保留 (signature == "MSDM")

       **微软数据管理表**

       仅微软使用的表，将不会被支持
NFIT   第5.2.25节 (signature == "NFIT")

       **非易失性内存模块固件接口表**

       可选，当前不支持
OEMx   签名仅为 "OEMx"

       **OEM 特定表**

       所有以 "OEM" 签名开头的表都为 OEM 使用保留。由于这些表并非为了普遍使用而是针对非常具体的最终用户设计，因此不建议使用，并且 arm64 内核中不提供支持
PCCT   第14.1节 (signature == "PCCT")

       **平台通信通道表**

       推荐在 arm64 上使用；当使用 CPPC 控制平台处理器的性能和功耗时，推荐使用 PCC
PDTT   第5.2.29节 (signature == "PDTT")

       **平台调试触发表**

       该表描述了用于收集非架构特性调试日志的 PCC 通道
PMTT   第5.2.21.12节 (signature == "PMTT")

       **平台内存拓扑表**

       可选，当前不支持
下面是给定内容的中文翻译：

PPTT   第5.2.30节 (签名 == "PPTT")

       **处理器属性拓扑表**

       此表提供了处理器和缓存的拓扑结构
PSDT   第5.2.11.3节 (签名 == "PSDT")

       **持久系统描述表**

       过时的表格，将来不会得到支持
RAS2   第5.2.21节 (签名 == "RAS2")

       **RAS特性2表**

       此表提供了平台中实现的RAS功能的接口
RASF   第5.2.20节 (签名 == "RASF")

       **RAS特性表**

       可选，目前不支持
RSDP   第5.2.5节 (签名 == "RSD PTR")

       **根系统描述指针**

       对于arm64来说是必需的
RSDT   第5.2.7节 (签名 == "RSDT")

       **根系统描述表**

       由于此表只能提供32位地址，对于arm64来说已被弃用，并且将不再使用。如果被提供，将会被忽略
SBST   第5.2.14节 (签名 == "SBST")

       **智能电池子系统表**

       可选，目前不支持
SDEI   签名保留 (签名 == "SDEI")

       **软件委派异常接口表**

       此表宣传了SDEI接口的存在
SLIC   签名保留 (签名 == "SLIC")

       **软件许可表**

       仅微软使用的表格，将来不会得到支持
SLIT   第5.2.17节 (签名 == "SLIT")

       **系统局部距离信息表**

       通常情况下是可选的，但对于NUMA系统来说是必需的
### SPCR
**保留签名（signature == "SPCR"）**

**串行端口控制台重定向表**

对于arm64是必需的。

### SPMI
**保留签名（signature == "SPMI"）**

**服务器平台管理接口表**

可选，当前不支持。

### SRAT
**第5.2.16节（signature == "SRAT"）**

**系统资源亲和性表**

可选，但如果使用，则只读取GICC亲和性结构。
为了支持arm64 NUMA，此表是必需的。

### SSDT
**第5.2.11.2节（signature == "SSDT"）**

**次级系统描述表**

这些表是对DSDT的延续；建议用于可以添加到运行中的系统的设备，但也可以用于将设备描述分割成更易于管理的部分。
SSDT只能向ACPI命名空间中添加内容。它不能修改或替换命名空间中已有的设备描述。
这些表是可选的。不过，ACPI表应仅包含一个DSDT，但可以包含多个SSDT。

### STAO
**保留签名（signature == "STAO"）**

**_STA 覆盖表**

可选，但在虚拟化环境中为了隐藏设备不让客户操作系统看到时是必要的。

### TCPA
**保留签名（signature == "TCPA"）**

**可信计算平台联盟表**

可选，当前不支持，并且可能需要进行更改以与arm64完全互操作。

### TPM2
**保留签名（signature == "TPM2"）**

**可信平台模块2表**

可选，当前不支持，并且可能需要进行更改以与arm64完全互操作。
UEFI   签名保留 (signature == "UEFI")

       **UEFI ACPI 数据表**

       可选，当前不支持。对于 arm64 平台目前没有已知的应用场景。
WAET   签名保留 (signature == "WAET")

       **Windows ACPI 模拟设备表**

       仅微软使用的表格，将不会被支持。
WDAT   签名保留 (signature == "WDAT")

       **看门狗动作表**

       仅微软使用的表格，将不会被支持。
WDRT   签名保留 (signature == "WDRT")

       **看门狗资源表**

       仅微软使用的表格，将不会被支持。
WPBT   签名保留 (signature == "WPBT")

       **Windows 平台二进制表**

       仅微软使用的表格，将不会被支持。
XENV   签名保留 (signature == "XENV")

       **Xen 项目表**

       可选，目前仅由 Xen 使用。
XSDT   第 5.2.8 节 (signature == "XSDT")

       **扩展系统描述表**

       对于 arm64 是必需的。
====== ========================================================================

ACPI 对象
------------
对于可能被使用的各个 ACPI 对象的预期用途如下所示；任何未在下面明确提及的对象应根据特定平台或特定子系统的需要来使用，例如电源管理和 PCI。
===== ================ ========================================================
名称   节            ARMv8 Linux 上的使用情况
===== ================ ========================================================
_CCA   6.2.17         此方法必须为所有总线主控器定义在 arm64 上 —— 对于此类设备是否为缓存一致性不做假设
_CCA 的值会继承给这些设备的所有后代，因此不需要重复定义
在 arm64 架构上如果没有 _CCA，内核将不知道如何为设备设置 DMA。
注：此方法提供了默认的缓存一致性属性；然而，如果存在 SMMU，则可以利用它来修改这些属性。例如，一个主设备可能默认是非一致性的，但可以通过适当的 SMMU 配置使其变为一致性（参见 IORT 规范 ARM 文档 DEN 0049B 中的表 17）。

_CID   6.1.2           按需使用，同时参考 _HID
_CLS   6.1.3           按需使用，同时参考 _HID
_CPC   8.4.7.1         按需使用，特别针对电源管理。推荐在 arm64 上使用 CPPC
_CRS   6.2.2           在 arm64 上是必需的
_CSD   8.4.2.2         按需使用，仅与 _CST 结合使用
_CST   8.4.2.1         推荐使用低功耗空闲状态（8.4.4），而不是 C 状态
_DDN   6.1.4           此字段可用于设备名称。但是，它是为 DOS 设备名称设计的（例如，COM1），因此在不同操作系统间使用时要小心
_DSD   6.2.5           需谨慎使用。如果使用此对象，请尽量在 Device Properties UUID 已定义的约束范围内使用。只有在极少数情况下才需要创建新的 _DSD UUID。
在任一情况下，提交_DSD定义以及任何驱动程序补丁以供讨论，特别是在使用设备属性的情况下。如果缺少相应的_DSD描述，则不会认为驱动程序是完整的。经过内核维护者的批准后，必须向UEFI论坛注册UUID或设备属性；这可能会导致一些迭代，因为不止一个操作系统将注册条目。

_DSM   9.1.1          不要使用此方法。它没有标准化，返回值记录不充分，并且目前是错误的常见来源。
\_GL   5.7.1          在硬件缩减模式中不要使用此对象，因此不应在arm64上使用。
_GLK   6.5.7          此对象需要定义全局锁；由于arm64运行在硬件缩减模式下，因此其上没有全局锁。因此，在arm64上不要使用此对象。
\_GPE  5.3.1          此命名空间仅用于x86。不要在arm64上使用它。
_HID   6.1.5          这是在设备探测中的主要对象，尽管也可以使用_CID和_CLS。
_INI   6.5.1          虽然不是必需的，但在设置设备时可能很有用，尤其是在UEFI将其置于可能不符合驱动程序开始探测前预期状态的情况下。
_LPI   8.4.4.3        推荐与处理器定义(_HID ACPI0010)一起用于arm64。参见_RDI。
_MLS   6.1.7          高度推荐用于国际化。
_OFF   7.2.2          对于可以开关的任何设备，建议定义此方法。
_ON    7.2.3           对于任何可以开关的设备，建议定义此方法。
_OS   5.7.3           此方法默认将返回 "Linux"（这是 Linux 上宏 ACPI_OS_NAME 的值）。可以通过命令行参数 acpi_os=<string> 来设置为其他值。
_OSC   6.2.11         此方法可以在 ACPI 中作为全局方法（即，_SB._OSC），也可以与特定设备关联（例如，_SB.DEV0._OSC），或者两者皆可。当用作全局方法时，仅允许使用 ACPI 规范中公布的能力。当用作特定设备的方法时，必须按照使用 _DSD 所描述的过程来创建 _OSC 定义；不允许在过程之外使用 _OSC。也就是说，应将特定设备的 _OSC 使用说明作为内核驱动程序提交的一部分提交，获得内核社区的批准后，再向 UEFI 论坛注册。
_OSI  5.7.2           在 ARM64 上已废弃。对于 ACPI 固件而言，不应使用 _OSI 来确定正在使用的系统类型或提供的功能。应使用 _OSC 方法代替。
_PDC   8.4.1           在 ARM64 上已废弃，不要使用。
_PIC  5.8.1           不应使用此方法。在 ARM64 上，唯一的中断模型是 GIC。
_PR   5.3.1           此命名空间仅用于 x86 系统上的遗留系统，ARM64 上不要使用。
_PRT   6.2.13         作为所有 PCI 根设备定义的必要组成部分。
_PRx   7.3.8-11        按需使用；与电源管理相关。如果定义了 _PR0，则也必须定义 _PR3。
_PSx   7.3.2-5         按需使用；与电源管理相关。如果定义了_PS0，则必须同时定义_PS3。如果时钟或稳压器需要调整以保持与电源使用情况一致，请在这些方法中进行更改。
_RDI   8.4.4.4        推荐与处理器定义 (_HID ACPI0010) 在arm64上一起使用。这仅应与_LPI一起使用。
_REV   5.7.4           始终返回支持的最新ACPI版本。
_SB    5.3.1           在arm64上是必需的；所有设备都必须在这个命名空间中定义。
_SLI   6.2.15         当使用SLIT表时，推荐使用。
_STA   6.3.7,          推荐为任何可以开启或关闭的设备定义此方法。另见STAO表，它提供了覆盖选项来在虚拟化环境中隐藏设备。
       7.2.4          
_SRS   6.2.16         按需使用；另见_PRS。
_STR   6.1.10         推荐用于向最终用户传达设备名称；优先于使用_DDN。
_SUB   6.1.9           按需使用；_HID 或 _CID 更为优选。
_SUN   6.1.11         按需使用，但推荐使用。
_SWS   7.4.3           按需使用；与电源管理相关；在arm64上使用可能需要对规范进行更改。
_UID   6.1.12          推荐用于区分同一类别的设备；如果可能的话，定义它。
===== ================ ========================================================
  
ACPI 事件模型
--------------
不要使用GPE块设备；这些设备在arm64使用的硬件缩减配置文件中不受支持。由于ARM平台上没有定义用于使用的GPE块，因此必须以不同的方式发出ACPI事件。
有两种选择：GPIO触发的中断（第5.6.5节），以及中断触发的事件（第5.6.9节）。中断触发的事件是ACPI 6.1规范中的新特性。可以在特定平台上使用这两种方式中的任意一种或两者同时使用，并且选择哪一种可能取决于特定SoC中的限制。如果可能，推荐使用中断触发的事件。

ACPI 处理器控制
----------------
ACPI规范第8部分在版本6.0中发生了重大变化。
现在应该将处理器定义为_HID为ACPI0007的设备对象；不要在ASL中使用已废弃的Processor语句。所有多处理器系统也应该定义一个处理器层级结构，通过处理器容器设备完成（参见第8.4.3.1节，_HID为ACPI0010）；不要使用处理器聚合设备（第8.5节）来描述处理器拓扑结构。规范的第8.4部分描述了这些对象定义的语义及其相互关系。

最重要的是，定义的处理器层级结构也定义了平台可用的低功耗空闲状态，以及确定哪些处理器可以打开或关闭及其控制条件的规则。如果没有这些信息，处理器将在UEFI留下的任何功率状态下运行。

此外，请注意，定义的处理器设备对象和MADT中GIC的条目应该保持同步。设备对象的_UID必须对应于MADT中使用的处理器ID。

推荐使用CPPC（8.4.5）作为arm64上处理器性能控制的主要模型。未来可能会出现C状态和P状态，但目前的设计工作似乎更倾向于CPPC。

此外，至关重要的是，ARMv8 SoC必须提供一个完全功能性的PSCI实现；这将是ACPI支持的唯一机制来控制CPU功率状态。使用ACPI停放协议启动次级CPU是可能的，但不鼓励这样做，因为对于ARM服务器而言，只有PSCI是受支持的。
ACPI 系统地址映射接口
-------------------------
在 ACPI 规范的第 15 节中，提到了几种方法作为将内存资源信息传递给内核的可能机制。对于 arm64，我们仅支持使用 ACPI 启动的 UEFI，因此 UEFI 的 GetMemoryMap() 引导服务是唯一使用的机制。

ACPI 平台错误接口 (APEI)
-------------------------
支持的 APEI 表已在上面描述过。
APEI 需要在 ARMv8 上有类似于 SCI 和 NMI 的机制。SCI 用于通知操作系统管理器 (OSPM) 已发生但可以纠正且系统仍可继续正确运行（尽管可能存在降级）的错误；NMI 用于指示无法纠正的致命错误，需要立即处理。
由于没有直接等同于 x86 上的 SCI 或 NMI，arm64 对这些情况的处理略有不同。SCI 被视为高优先级中断；考虑到这些是已报告的可以纠正（或可纠正的）的错误，这样处理就足够了。NMI 被模拟为尽可能高的优先级中断。这意味着必须谨慎使用，因为可能存在更高特权级别的中断甚至与模拟 NMI 相同优先级的中断。在 Linux 中，这种情况不应出现，但应意识到可能发生。

不支持的 ACPI 对象
---------------------
虽然将来可能会发生变化，但目前有一些对象类别可以定义，但对于 ARM 服务器来说，当前并不普遍感兴趣。
这些对象中的一些具有 x86 等效项，并且实际上可能对 ARM 服务器有意义。然而，要么目前没有可用的硬件，要么甚至可能还没有非 ARM 的实现。因此，它们当前不受支持。
以下类别对象不受支持：

       - 第 9.2 节：环境光传感器设备

       - 第 9.3 节：电池设备

       - 第 9.4 节：盖子（例如，笔记本盖）

       - 第 9.8.2 节：IDE 控制器

       - 第 9.9 节：软盘控制器

       - 第 9.10 节：GPE 块设备

       - 第 9.15 节：PC/AT RTC/CMOS 设备

       - 第 9.16 节：用户存在检测设备

       - 第 9.17 节：I/O APIC 设备；所有 GIC 必须通过 MADT 可枚举

       - 第 9.18 节：时间和警报设备（参见 9.15 节）

       - 第 10 节：电源和功率计设备

       - 第 11 节：热管理

       - 第 12 节：嵌入式控制器接口

       - 第 13 节：SMBus 接口

这也意味着下列对象不受支持：

====   =========================== ====   ==========
名称   节                            名称   节
====   =========================== ====   ==========
_ALC   9.3.4                       _FDM   9.10.3
_ALI   9.3.2                       _FIX   6.2.7
_ALP   9.3.6                       _GAI   10.4.5
_ALR   9.3.5                       _GHL   10.4.7
_ALT   9.3.3                       _GTM   9.9.2.1.1
_BCT   10.2.2.10                   _LID   9.5.1
_BDN   6.5.3                       _PAI   10.4.4
_BIF   10.2.2.1                    _PCL   10.3.2
_BIX   10.2.2.1                    _PIF   10.3.3
_BLT   9.2.3                       _PMC   10.4.1
_BMA   10.2.2.4                    _PMD   10.4.8
_BMC   10.2.2.12                   _PMM   10.4.3
_BMD   10.2.2.11                   _PRL   10.3.4
_BMS   10.2.2.5                    _PSR   10.3.1
_BST   10.2.2.6                    _PTP   10.4.2
_BTH   10.2.2.7                    _SBS   10.1.3
_BTM   10.2.2.9                    _SHL   10.4.6
_BTP   10.2.2.8                    _STM   9.9.2.1.1
_DCK   6.5.2                       _UPD   9.16.1
_EC    12.12                       _UPP   9.16.2
_FDE   9.10.1                      _WPC   10.5.2
_FDI   9.10.2                      _WPP   10.5.3
====   =========================== ====   ==========
