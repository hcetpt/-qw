Linux/m68k 的命令行选项
===================================

最后更新：1999年5月2日

Linux/m68k 版本：2.2.6

作者：Roman.Hodek@informatik.uni-erlangen.de (Roman Hodek)

更新：jds@kom.auc.dk (Jes Sorensen) 和 faq@linux-m68k.org (Chris Lawrence)

0) 引言
===============

经常有人问我 Linux/m68k 内核能识别哪些命令行选项，或者某个选项的确切语法是什么，或者关于某个选项的信息。我希望这份文档能提供所有答案。
请注意，有些选项可能已经过时，它们的描述可能是不完整的或缺失的。请更新信息并发送补丁。

1) 内核选项处理概述
=============================================

内核在它的命令行中知道三种类型的选项：

  1) 内核选项
  2) 环境设置
  3) 为 init 提供的参数

一个参数属于哪个类别的规则如下：如果该选项是内核自身已知的，即选项名称（等号前的部分）或在某些情况下整个参数字符串是内核已知的，则它属于第1类。否则，如果参数包含一个等号，则属于第2类，并且定义被放入 init 的环境中。所有其他参数作为命令行选项传递给 init。
本文档描述了文件开头所述版本中的 Linux/m68k 的有效内核选项。后续修订可能会添加新的此类选项，而旧版本中可能缺少一些选项。
一般来说，选项的值（等号后部分）是一个由逗号分隔的值列表。这些值的解释取决于“拥有”该选项的驱动程序。这也是为什么某些选项被进一步细分的原因。

2) 通用内核选项
=========================

2.1) root=
----------

**语法**: root=/dev/<设备>  
**或**:     root=<十六进制数>

这告诉内核应该将哪个设备挂载为根文件系统。该设备必须是具有有效文件系统的块设备。

第一种语法通过名称指定设备。这些名称在内核内部以一种非常规的方式转换为主/次号。
通常这种“转换”是由 /dev 中的设备文件完成的，但在这里不可能这样做，因为根文件系统（包含 /dev）尚未挂载...因此内核本身解析名称，并使用一些硬编码的名称到数字映射。名称必须始终是两个或三个字母的组合，后面跟着十进制数字。

有效的名称包括：

  /dev/ram: -> 0x0100 （初始 RAM 磁盘）
  /dev/hda: -> 0x0300 （第一个 IDE 磁盘）
  /dev/hdb: -> 0x0340 （第二个 IDE 磁盘）
  /dev/sda: -> 0x0800 （第一个 SCSI 磁盘）
  /dev/sdb: -> 0x0810 （第二个 SCSI 磁盘）
  /dev/sdc: -> 0x0820 （第三个 SCSI 磁盘）
  /dev/sdd: -> 0x0830 （第四个 SCSI 磁盘）
  /dev/sde: -> 0x0840 （第五个 SCSI 磁盘）
  /dev/fd : -> 0x0200 （软盘）

名称后面必须跟一个十进制数字，表示分区号。内部地，该数字的值只是加到上面表格中提到的设备号上。/dev/ram 和 /dev/fd 是例外，其中 /dev/ram 指向由您的引导程序加载的初始 RAM 磁盘（请查阅您引导程序的说明以了解如何加载初始 RAM 磁盘）。从内核版本 2.0.18 开始，如果您想从初始 RAM 磁盘启动，则必须指定 /dev/ram 作为根设备。对于软盘设备 /dev/fd，该数字代表软盘驱动器编号（软盘上没有分区）。即，/dev/fd0 代表第一个驱动器，/dev/fd1 代表第二个，依此类推。由于数字只是被加上去，您也可以通过加上大于 3 的数字来强制磁盘格式。如果您查看您的 /dev 目录，可以看到 /dev/fd0D720 的主号为 2，次号为 16。您可以通过在内核命令行中写入 "root=/dev/fd16" 来指定此设备作为根文件系统。

[奇怪且可能不感兴趣的内容开始]

这种不寻常的设备名称转换有一些奇怪的结果：例如，如果您有一个从 /dev/fd 到 /dev/fd0D720 的符号链接，作为对软盘驱动器 #0 的 DD 格式的缩写，则无法使用此名称来指定根设备，因为内核在挂载根文件系统之前看不到此符号链接，并且它不在上面的表格中。如果您使用它，根设备将根本不被设置，也不会出现错误消息。另一个例子：如果您想通过名称指定第六个 SCSI 磁盘上的分区作为根文件系统，则无法做到这一点，因为上面的表格中只包含了直到 /dev/sde 的设备，而不包含 /dev/sdf。尽管如此，您可以使用第六个 SCSI 磁盘作为根文件系统，但您必须按数字指定设备……（见下文）。或者，更奇怪的是，您可以利用分区号没有范围检查这一事实，以及您知道每个磁盘都使用 16 个次号这一知识，写入 "root=/dev/sde17"（用于 /dev/sdf1）。
[关闭奇怪且可能不感兴趣的内容]

如果你的根分区所在的设备不在上面的表格中，也可以通过主次号来指定。这些号码以十六进制形式书写，没有前缀也没有分隔符。例如，如果你有一张适合用作根文件系统的CD，并且它位于第一个SCSI光驱中，则可以通过 "root=0b00" 来从该CD启动。这里，十六进制 "0b" = 十进制11 是SCSI光驱的主号，而次号0代表第一台此类设备。你可以通过查看 `include/linux/major.h` 文件来找出所有有效的主号。
除了主次号之外，如果包含你的根分区的设备使用了具有唯一分区标识符的分区表格式，那么你也可以使用这些标识符。例如，
"root=PARTUUID=00112233-4455-6677-8899-AABBCCDDEEFF"。此外，
还可以使用已知分区UUID作为起点来引用同一设备上的另一个分区。例如，
如果设备的第5个分区的UUID为
00112233-4455-6677-8899-AABBCCDDEEFF，则可以如下方式找到第3个分区：

  PARTUUID=00112233-4455-6677-8899-AABBCCDDEEFF/PARTNROFF=-2

权威信息可以在 "Documentation/admin-guide/kernel-parameters.rst" 中找到。
2.2) ro, rw
-------------

:语法: ro
:或:     rw

这两个选项告诉内核是否应该将根文件系统挂载为只读或读写。默认情况下是只读，除非是RAM磁盘，其默认为读写。
2.3) debug
--------------

:语法: debug

这会将内核日志级别提高到10（默认值为7）。这与 "dmesg" 命令设置的级别相同，只是 dmesg 可选择的最大级别为8。
2.4) debug=
--------------

:语法: debug=<device>

此选项使得某些内核消息被打印到所选的调试设备上。这有助于调试内核，因为消息可以在另一台机器上被捕获和分析。哪些设备可用取决于机器类型。不会对设备名称的有效性进行检查。如果设备未实现，则不会发生任何事情。
通过这种方式记录的消息通常是内核内存错误后的堆栈转储、坏的内核陷阱以及内核恐慌。具体来说：所有级别为0（恐慌消息）的消息以及在日志级别为8或更高时打印的所有消息（它们的级别无关紧要）。在堆栈转储之前，内核会自动将日志级别设置为10。至少8的级别也可以通过 "debug" 启动选项（见2.3）以及运行时使用 "dmesg -n 8" 来设置。
对于Amiga可能的设备有：

 - "ser":
	  内置串行端口；参数：9600bps，8N1
 - "mem":
	  将消息保存到芯片内存中的预留区域。重启后，可以在AmigaOS下使用 "dmesg" 工具读取这些消息
对于Atari可能的设备有：

 - "ser1":
	   ST-MFP串行端口（"Modem1"）；参数：9600bps，8N1
 - "ser2":
	   SCC通道B串行端口（"Modem2"）；参数：9600bps，8N1
 - "ser" :
	   默认串行端口
           对于Falcon而言是 "ser2"，对于其他机器则是 "ser1"
 - "midi":
	   MIDI端口；参数：31250bps，8N1
 - "par" :
	   并行端口

           此打印例程实现了超时处理，以防没有连接打印机（否则内核会锁死）。超时不是精确的，但通常为几秒
2.6) ramdisk_size=
-------------------

:语法: ramdisk_size=<大小>

此选项指示内核设置一个指定大小（以K字节计）的RAM磁盘。如果RAM磁盘内容是由引导程序传递的，请不要使用此选项！在这种情况下，大小会自动选择，不应被覆盖。
唯一的应用是在软盘上的根文件系统，这些文件系统应加载到内存中。为此，选择与磁盘对应的RAM磁盘大小，并将根设备设置为磁盘驱动器（使用 "root="）。
这段英文文档描述了某些配置选项及其在特定版本（2.2.6）中的存在与否，主要针对Amiga和Atari平台的Linux系统。下面是翻译后的中文版本：

2.7) 交换分区（swap）=  
---
我在2.2.6版本中找不到这个选项的任何迹象。

2.8) 缓冲区（buff）=  
---
我也在2.2.6版本中找不到这个选项的任何迹象。

3) 通用设备选项（Amiga 和 Atari）
===========================================
3.1) 网卡（ether）=  
---
**语法**: ether=[<中断请求号>[,<基地址>[,<内存起始位置>[,<内存结束位置>]]]],<设备名称>

<设备名称> 是网络驱动的名称，如Linux源代码中的`drivers/net/Space.c`文件所指定。最常见的有eth0、...、eth3、sl0、...、sl3、ppp0、...、ppp3、dummy以及lo。
非以太网驱动（sl、ppp、dummy、lo）显然会忽略此选项设置。此外，现有的m68k架构下的Linux以太网驱动（ariadne、a2065、hydra）也不使用这些设置，因为Zorro板卡本身就是即插即用的，因此“ether=”选项对于Linux/m68k来说完全没用。

3.2) 硬盘（hd）=  
---
**语法**: hd=<磁道数>,<磁头数>,<扇区数>

此选项用于设置IDE硬盘的几何参数。第一个hd=选项对应第一块IDE硬盘，第二个则对应第二块（也就是说，你可以给出两次该选项）。在大多数情况下，你无需使用这个选项，因为内核可以自行获取这些几何数据。它仅在某些硬盘上无法自动获取到数据时才需要手动设置。

3.3) 最大SCSI逻辑单元数（max_scsi_luns）=  
---
**语法**: max_scsi_luns=<n>

设置要扫描的SCSI设备的最大逻辑单元数（LUN）。<n>的有效取值范围为1到8。如果在内核配置时选择了“探测每个SCSI设备上的所有LUN”，那么默认值为8；否则，默认值为1。

3.4) SCSI磁带机（st）=  
---
**语法**: st=<缓冲区大小>,[<写入阈值>,[<最大缓冲区数量>]]

设置SCSI磁带驱动程序的多个参数。<缓冲区大小>是为每个磁带设备预留的512字节缓冲区的数量。<写入阈值>设置了开始实际向磁带写入操作前必须填充的块数。最大值为总缓冲区数量。<最大缓冲区数量>限制了所有磁带设备分配的总缓冲区数量。

3.5) DMA声音（dmasound）=  
---
**语法**: dmasound=[<缓冲区数量>,<缓冲区大小>[,<捕获半径>]]

此选项控制Linux/m68k DMA声音驱动的一些配置（适用于Amiga和Atari）：<缓冲区数量>是你希望使用的缓冲区数量（最小值为4，缺省值为4），<缓冲区大小>是每个缓冲区的大小，单位为千字节（最小值为4，缺省值为32），而<捕获半径>指定了设置频率时可容忍的误差百分比（最大值为10，缺省值为0）。例如，当设置为3%时，你可以在Falcon上以硬件频率8195Hz播放8000Hz的AU文件，从而无需扩展声音。
4) 仅适用于Atari的选项
=========================

4.1) video=
-----------

**语法：** video=<fbname>:<子选项...>

<fbname> 参数指定了帧缓冲区的名称，例如大多数 Atari 用户可能希望在此指定 `atafb`。  
<子选项> 是以下列出的子选项列表，以逗号分隔。
**注意：**
    请注意，在 1.3.x 内核开发过程中，此选项已从 `atavideo` 更改为 `video`，因此如果您从 1.2.x 内核升级到 2.x，则可能需要更新您的启动脚本。
**重要提示：**
    `video=` 的行为在 2.1.57 中有所改变，因此推荐的做法是指定帧缓冲区的名称。

4.1.1) 视频模式
-----------------

此子选项可以是 Linux/m68k 源代码树中 atari/atafb.c 文件中预定义的任何视频模式之一。如果硬件允许，内核将在启动时激活给定的视频模式，并将其设为默认模式。目前定义的名称包括：

- stlow           : 320x200x4
- stmid, default5 : 640x200x2
- sthigh, default4: 640x400x1
- ttlow           : 320x480x8（仅限 TT）
- ttmid, default1 : 640x480x4（仅限 TT）
- tthigh, default2: 1280x960x1（仅限 TT）
- vga2            : 640x480x1（仅限 Falcon）
- vga4            : 640x480x2（仅限 Falcon）
- vga16, default3 : 640x480x4（仅限 Falcon）
- vga256          : 640x480x8（仅限 Falcon）
- falh2           : 896x608x1（仅限 Falcon）
- falh16          : 896x608x4（仅限 Falcon）

如果命令行中未给出视频模式，内核将尝试使用“default<n>”模式名称，直到找到一个与当前使用的硬件兼容的模式为止。
如果启用了外部驱动程序（通过 “external:” 子选项），则设置视频模式没有意义。

4.1.2) 反色显示
--------------

反转显示。这仅影响文本控制台。
通常，背景被选择为黑色。使用此选项，您可以将背景设置为白色。

4.1.3) 字体
-----------

**语法：** font:<fontname>

指定文本模式下要使用的字体。目前您只能在 `VGA8x8`、`VGA8x16` 和 `PEARL8x8` 之间进行选择。如果显示的垂直尺寸小于 400 行像素，则默认使用 `VGA8x8` 字体；否则，默认使用 `VGA8x16` 字体。

4.1.4) `hwscroll_`
------------------

**语法：** `hwscroll_<n>`

为加快滚动速度（"硬件滚动"）而额外预留的视频内存行数。只有当内核能够以足够细的步长设置视频基地址时，才能实现硬件滚动。这对于 STE、MegaSTE、TT 和 Falcon 是可能的，而对于纯 ST 和图形卡是不可能的（前者是因为基地址必须位于 256 字节边界，后者是因为内核根本不知道如何设置基地址）。

默认情况下，<n> 设置为显示上可见的文本行数。因此，与不启用硬件滚动相比，视频内存的数量翻倍。您可以通过将 <n> 设置为 0 来完全禁用硬件滚动。

4.1.5) internal:
----------------

**语法：** internal:<xres>;<yres>[;<xres_max>;<yres_max>;<offset>]

此选项指定了某些扩展内部视频硬件（如 OverScan）的功能。<xres> 和 <yres> 给出了屏幕（扩展）的尺寸。
如果你的过扫描（OverScan）需要黑色边框，你必须为 "internal:" 的最后三个参数写入值。 `<xres_max>` 是硬件允许的最大行长度，`<yres_max>` 是最大行数，`<offset>` 是屏幕可见部分在物理内存起始位置的偏移量，单位是字节。

通常情况下，扩展区间视频硬件需要某种方式来激活。
对于这一点，请参阅下面的 "sw_*" 选项。

4.1.6) 外部：
----------------

**语法：**
  `external:<xres>;<yres>;<depth>;<org>;<scrmem>[;<scrlen>[;<vgabase> [;<colw>[;<coltype>[;<xres_virtual>]]]]]`

我不得不折行处理这一行。
这可能是最复杂的参数了……它指明你有一些外部视频硬件（图形卡），以及如何在 Linux/m68k 下使用它。内核在这里所知道的关于硬件的信息不会比你告诉它的更多！此外，内核无法设置或更改任何视频模式，因为它不了解任何板载内部信息。因此，你需要在启动 Linux 前切换到所需的视频模式，并且一旦 Linux 启动后就不能再切换到其他模式。

这个子选项的前三个参数应该是显而易见的：`<xres>`、`<yres>` 和 `<depth>` 给出屏幕尺寸和颜色平面数（深度）。深度是指可能的颜色数量以 2 为底的对数值。（或者说，颜色数量是 2 的 `<depth>` 次方）

你还需要告诉内核视频内存是如何组织的。这是通过 `<org>` 参数中的一个字母来实现的：

 'n':
      “正常平面”，即一个完整的平面紧接着另一个
 'i':
      “交错平面”，即第一个平面上的 16 位，然后是下一个平面上的 16 位，依此类推……此模式仅用于内置的 Atari 视频模式，我认为没有支持此模式的显卡
 'p':
      “像素打包”，即 `<depth>` 个连续位代表一个像素的所有平面；这是 8 平面（256 色）在图形卡上最常见的模式
 't':
      “真彩色”（或多或少的像素打包，但没有颜色查找表）；通常深度是 24

对于单色模式（即 `<depth>` 为 1），`<org>` 字母具有不同的含义：

 'n':
      正常颜色，即 0=白色，1=黑色
 'i':
      反转颜色，即 0=黑色，1=白色

关于视频硬件的下一个重要信息是视频内存的基本地址。这是通过 `<scrmem>` 参数给出的，作为带有 "0x" 前缀的十六进制数字。你需要从你的硬件文档中找到这个地址。

下一个参数 `<scrlen>` 告诉内核视频内存的大小。如果省略，将根据 `<xres>`、`<yres>` 和 `<depth>` 计算出大小。目前，在这里写入一个值是没有用的。
这段文本可以翻译为：

仅会用于硬件滚动（这在外部驱动程序中是不可能的，因为内核无法设置视频基地址），或者用于X下的虚拟分辨率（但X服务器目前还不支持）。因此，目前最好留空这个字段，要么在指定完视频地址后结束“external:”，要么写两个连续的分号（如果你想指定 `<vgabase>` 的话）——允许让这个参数为空。

`<vgabase>` 参数是可选的。如果不给出，内核将无法读取或写入视频硬件的颜色寄存器，因此你需要在启动 Linux 前设置适当的颜色。但是如果你的显卡在某种程度上与 VGA 兼容，你可以告诉内核 VGA 寄存器集的基地址，这样它就可以更改颜色查找表。你必须在你的板卡文档中查找这个地址。

为了避免误解：`<vgabase>` 是基地址，即一个对齐到 4K 的地址。为了读取和写入颜色寄存器，内核使用的是 `vgabase+0x3c7...vgabase+0x3c9` 这些地址。`<vgabase>` 参数以十六进制形式书写，并且以 "0x" 开头，就像 `<scrmem>` 一样。

`<colw>` 只有在指定了 `<vgabase>` 时才有意义。它告诉内核每个颜色寄存器的宽度，即单个颜色（红/绿/蓝）的位数。默认值为 6，另一个常见的值是 8。

`<coltype>` 同样是与 `<vgabase>` 一起使用的。它告诉内核你的图形板卡所采用的颜色寄存器模型。目前实现了 “vga”（这也是默认值）和 “mv300”（SANG MV300）这两种类型。

`<xres_virtual>` 参数对于 ProMST 或 ET4000 卡来说是必需的，其中物理行长度与可见长度不同。对于 ProMST，`xres_virtual` 必须设为 2048。对于 ET4000，`xres_virtual` 取决于视频卡的初始化。

如果你找不到对应的 `yres_virtual`：外部部分是遗留的，因此我们不支持依赖硬件的功能，如硬件滚动、平移或消隐。

### 4.1.7) eclock:

----------------------

连接到 Falcon VIDEL 移位器的外部像素时钟。这目前只与 ScreenWonder! 兼容！

### 4.1.8) monitorcap:

------------------------

**语法**：`monitorcap:<vmin>;<vmax>;<hmin>;<hmax>`

这描述了多同步显示器的能力。不要用在固定频率的显示器上！目前，只有 Falcon 帧缓冲区使用 “monitorcap:” 设置。
`<vmin>` 和 `<vmax>` 分别是最小和最大的垂直频率（单位：赫兹 Hz），你的显示器可以工作。`<hmin>` 和 `<hmax>` 对水平频率（单位：千赫兹 kHz）来说也是同样的意思。
默认值为 58;62;31;32（VGA 兼容）。
TV/SC1224/SC1435的默认设置同时覆盖PAL和NTSC标准。

4.1.9) 保持
------------

如果选择了这个选项，framebuffer设备将不会自行进行任何视频模式计算和设置。目前唯一这样做的是Falcon的Atari fb设备。
这样做的结果是：对于未知的视频扩展，其设置不会被驱动程序覆盖，因此在驱动程序不知道如何自行设置该模式的情况下，你仍然可以使用启动时找到的模式。
但这同时也意味着，你将不能再切换视频模式了。
一个可能想要使用“保持”的例子是Falcon上的ScreenBlaster。

4.2) atamouse=
--------------

:语法: atamouse=<x-阈值>,[<y-阈值>]

通过这个选项，你可以设置鼠标移动报告的阈值。
这是鼠标移动像素累积到某个数量之前IKBD向内核发送新的鼠标包的数值。较高的值可以减少鼠标中断负载，从而降低键盘溢出的可能性。较低的值则会稍微提高鼠标的响应速度和跟踪精度。
你可以分别设置X轴和Y轴的阈值，但通常这在实际应用中用处不大。如果选项中只有一个数字，则该值同时用于两个维度。默认值为2，适用于两个阈值。

4.3) ataflop=
-------------

:语法: ataflop=<驱动器类型>[,<磁道缓冲区>[,<步进速率A>[,<步进速率B>]]]

   驱动器类型可以是0、1或2，分别对应DD、HD和ED。此设置影响预留的缓冲区数量以及探测哪些格式（参见下面）。默认值为1（HD）。只能选择一种驱动器类型。如果你有两个磁盘驱动器，请选择“更好”的类型。
第二个参数<磁道缓冲区>告诉内核是否使用磁道缓冲（1）或不使用（0）。默认值取决于机器类型：Medusa上默认为不使用，其他所有机器上默认为使用。
通过以下两个参数，您可以分别更改驱动器A和B使用的默认步进率。
4.4) atascsi=
-------------

**语法**: atascsi=<can_queue>[,<cmd_per_lun>[,<scat-gat>[,<host-id>[,<tagged>]]]]

此选项为Atari原生SCSI驱动程序设置一些参数。
通常，可以从末尾省略任何数量的参数。对于每个数字，负值表示“使用默认值”。默认值取决于使用的是TT风格还是Falcon风格的SCSI。
下面，以n/m的形式标记了默认值，其中第一个值指的是TT-SCSI，后一个值指的是Falcon-SCSI。如果给定的某个参数的值非法，则会打印出错误消息，并忽略该设置（不影响其他设置）。

<can_queue>：
这是在Atari SCSI驱动程序内部排队的最大SCSI命令数。1的值实际上关闭了驱动程序内部的多任务处理（如果它导致问题）。合法值>=1。<can_queue>可以尽可能高，但大于<cmd_per_lun>乘以您的SCSI目标（LUN）数量的值没有意义。默认值：16/8。
<cmd_per_lun>：
向驱动程序发出的一个逻辑单元（LUN，通常是单个SCSI目标）的最大SCSI命令数。合法值从1开始。如果不使用标签队列（见下文），大于2的值没有意义，但会浪费内存。否则，最大值是驱动程序可用的命令标签数量（目前为32）。默认值：8/1。（注意：在Falcon上，大于1的值似乎会导致问题，原因尚不清楚。）

<cmd_per_lun>值很大程度上决定了SCSI为自己预留的内存量。公式相当复杂，但我可以给您一些提示：

不使用分散-聚集：
cmd_per_lun * 232字节
完全使用分散-聚集：
cmd_per_lun * 大约17千字节

<scat-gat>：
分散-聚集表的大小，即可以在一个SCSI命令中合并的连续磁盘请求的数量。合法值介于0到255之间。默认值：255/0。注意：在Falcon上，此值被强制设为0，因为ST-DMA无法实现分散-聚集。不使用分散-聚集会显著影响性能。
<host-id>：
发起者（您的Atari）使用的SCSI ID。这通常是7，即可能的最大ID。SCSI总线上的每个ID都必须唯一。默认值：运行时确定：如果NV-RAM校验和有效，并且NV-RAM第30字节中的位7被设置，则该字节的低3位用作主机ID。（此方法由Atari定义，并且也被一些TOS硬盘驱动程序使用。）如果没有给出上述情况，则默认ID为7。（TT和Falcon均如此）
<tagged>：
0表示关闭标签队列支持，所有其他大于0的值表示为支持它的目标使用标签队列。默认值：当前为关闭状态，但这可能会在标签队列处理被证明可靠时改变。
标签队列意味着可以向一个LUN发出多个命令，并且SCSI设备本身会对请求进行排序，以便以最优顺序执行。并非所有SCSI设备都支持标签队列（:-()。
4.5 开关 =
-------------

**语法：** 开关=<开关列表>

通过此选项，您可以切换一些经常用于启用/禁用特定硬件扩展的硬件线路。示例包括
过扫描(OverScan)、超频等。
<开关列表>是一个由逗号分隔的列表，包含以下项：

  * ikbd:
    将键盘ACIA的RTS设置为高电平
  * midi:
    将MIDI ACIA的RTS设置为高电平
  * snd6:
    将PSG端口A的第6位设置为高电平
  * snd7:
    将PSG端口A的第7位设置为高电平

重复提及一个开关没有任何意义（与仅提及一次无异），但您可以根据需要启用的不同功能提供尽可能多的开关。在内核初始化过程中，尽可能早地设置这些开关线路（甚至在确定现有硬件之前）。

所有项目也可以使用前缀`ov_`，例如`ov_ikbd`、`ov_midi`等。这些选项是用于开启过扫描视频扩展的。与裸选项的区别在于，开启操作在视频初始化之后完成，并且某种程度上与HBLANK同步。一个特殊之处在于，在重启前会关闭ov_ikbd和ov_midi，以便禁用过扫描并使TOS正确启动。
如果您同时提供了带与不带`ov_`前缀的选项，则较早的初始化（不含`ov_`的选项）具有优先权。但是，重启时的关闭操作在这种情况下仍然会发生。
5) 适用于Amiga的选项：
==========================

5.1) 视频=
-----------

**语法：** 视频=<帧缓冲名称>:<子选项...>

<帧缓冲名称>参数指定了帧缓冲的名称，有效的选项有`amifb`、`cyber`、`virge`、`retz3`和`clgen`，前提是相应的帧缓冲设备已经被编译到内核中（或作为可加载模块进行编译）。在2.1.57版本中对<帧缓冲名称>选项的行为进行了更改，因此现在建议指定此选项。
<子选项>是由逗号分隔的以下子选项列表。此选项的组织类似于Atari版的“视频”选项（4.1），但包含较少的子选项。
5.1.1) 视频模式
-----------------

再次，类似于Atari的视频模式（参见4.1.1）。预定义的模式取决于所使用的帧缓冲设备。
OCS、ECS和AGA机器都使用颜色帧缓冲。以下是可以使用的预定义视频模式：

NTSC模式：
 - ntsc            : 640x200, 15 kHz, 60 Hz
 - ntsc-lace       : 640x400, 15 kHz, 60 Hz（交错）
 
PAL模式：
 - pal             : 640x256, 15 kHz, 50 Hz
 - pal-lace        : 640x512, 15 kHz, 50 Hz（交错）

ECS模式：
 - multiscan       : 640x480, 29 kHz, 57 Hz
 - multiscan-lace  : 640x960, 29 kHz, 57 Hz（交错）
 - euro36          : 640x200, 15 kHz, 72 Hz
 - euro36-lace     : 640x400, 15 kHz, 72 Hz（交错）
 - euro72          : 640x400, 29 kHz, 68 Hz
 - euro72-lace     : 640x800, 29 kHz, 68 Hz（交错）
 - super72         : 800x300, 23 kHz, 70 Hz
 - super72-lace    : 800x600, 23 kHz, 70 Hz（交错）
 - dblntsc-ff      : 640x400, 27 kHz, 57 Hz
 - dblntsc-lace    : 640x800, 27 kHz, 57 Hz（交错）
 - dblpal-ff       : 640x512, 27 kHz, 47 Hz
 - dblpal-lace     : 640x1024, 27 kHz, 47 Hz（交错）
 - dblntsc         : 640x200, 27 kHz, 57 Hz（双倍扫描）
 - dblpal          : 640x256, 27 kHz, 47 Hz（双倍扫描）

VGA模式：
 - vga             : 640x480, 31 kHz, 60 Hz
 - vga70           : 640x400, 31 kHz, 70 Hz

请注意，ECS和VGA模式要求使用ECS或AGA芯片组，并且这些模式对于ECS芯片组限于2位色彩，而对于AGA芯片组则限于8位色彩。
5.1.2) 深度
------------

**语法：** 深度:<位平面数>

为选定的视频模式指定位平面的数量。
5.1.3) 反色
--------------

使用反色显示（黑底白字）。其功能与Atari中的“反色”子选项相同。
5.1.4) 字体
-----------

**语法：** 字体:<字体名>

为文本模式指定要使用的字体。其功能与Atari中的“字体”子选项相同，除了如果显示器垂直尺寸小于400像素行时，将使用`PEARL8x8`代替`VGA8x8`。
5.1.5) monitorcap:
-------------------

:语法: monitorcap:<vmin>;<vmax>;<hmin>;<hmax>

这描述了一个多同步显示器的能力。目前，只有彩色帧缓冲区使用“monitorcap:”的设置。
<vmin> 和 <vmax> 分别是显示器可以工作的最小和最大垂直频率，单位为 Hz。<hmin> 和 <hmax> 对于水平频率来说是相同的，单位为 kHz。
默认值为 50;90;15;38（通用Amiga多同步显示器）。

5.2) fd_def_df0=
----------------

:语法: fd_def_df0=<value>

为“静默”的软盘驱动器设置 df0 的值。该值应该是带有 "0x" 前缀的十六进制数。

5.3) wd33c93=
-------------

:语法: wd33c93=<子选项...>

这些选项会影响 A590/A2091、A3000 和 GVP Series II SCSI 控制器。
<子选项> 是由逗号分隔的下面列出的子选项列表。

5.3.1) nosync
-------------

:语法: nosync:bitmask

bitmask 是一个字节，其中前 7 位分别对应 7 个可能的 SCSI 设备。设置某一位以禁止该设备上的同步协商。为了保持向后兼容性，如 "wd33c93=255" 这样的命令行将自动转换为 "wd33c93=nosync:0xff"。默认情况下，禁用所有设备的同步协商，例如 nosync:0xff。

5.3.2) period
-------------

:语法: period:ns

`ns` 是 SCSI 数据传输周期中的最小纳秒数。默认值为 500；可接受的值范围为 250 到 1000。

5.3.3) disconnect
-----------------

:语法: disconnect:x

指定 x = 0 表示永远不允许断开连接，x = 2 表示始终允许断开连接。
x = 1 执行“自适应”断开连接，这是默认选项，并且通常是最好的选择。
5.3.4) 调试
------------

:语法: debug:x

如果定义了 `DEBUGGING_ON`，x 是一个位掩码，它会导致各种类型的调试输出被打印 - 请参阅 wd33c93.h 中的 DB_xxx 定义。
5.3.5) 时钟
------------

:语法: clock:x

x = WD33c93 芯片的输入时钟频率（MHz）。正常值通常在 8 到 20 之间。默认值取决于您的主机适配器，在 A3000 内部控制器中的默认值为 14，在 A2091 中为 8，在 GVP 主机适配器中则可能是 8 或者 14，这取决于主机适配器以及某些 GVP 主机适配器上可能存在的 SCSI 时钟跳线。
5.3.6) 下一个
-----------

无需参数。当系统中有多个基于 wd33c93 的主机适配器时，用于分隔关键字块。
5.3.7) 禁用DMA
------------

:语法: nodma:x

如果 x 为 1（或仅写为 "nodma"），WD33c93 控制器将不会使用 DMA（=直接内存访问）来访问 Amiga 的内存。这对于一些存在使用 DMA 访问芯片内存问题的系统（如 A3000 和带有 A3640 加速器且修订版本为 3.0 的 A4000）非常有用。默认值为 0，即如果可能则使用 DMA。
5.4) gvp11=
-----------

:语法: gvp11=<addr-mask>

早期版本的 GVP 驱动程序未能正确处理 DMA 地址掩码设置，这使得某些用户不得不使用此选项才能使其 GVP 控制器在 Linux 下运行。希望这些问题已经得到解决，因此现在强烈不推荐使用此选项！

不当使用可能导致不可预测的行为，因此请仅在您确切知道您在做什么并且有理由这样做时才使用此选项。如果您遇到问题并且需要使用此选项，请通过邮件告知我们并发送到 Linux/68k 内核邮件列表。
此选项设置的地址掩码指定了哪些地址对于 GVP Series II SCSI 控制器来说是有效的 DMA 地址。一个地址是有效的，除非其位与掩码中设置的位不一致。

某些版本的 GVP 只能在 24 位地址范围内进行 DMA，有些可以访问 25 位地址范围，而其他版本则可以使用整个 32 位地址范围进行 DMA。正确的设置取决于您的控制器，并且应该由驱动程序自动检测。例如，24 位区域可以通过掩码 0x00fffffe 来指定。
