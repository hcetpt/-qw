### SPDX 许可证标识符: GPL-2.0

=====================================
RISC-V Linux 上的虚拟内存布局
=====================================

:作者: Alexandre Ghiti <alex@ghiti.fr>
:日期: 2021年2月12日

本文档描述了 RISC-V Linux 内核使用的虚拟内存布局。

RISC-V Linux 内核 32位
=========================

RISC-V Linux 内核 SV32
------------------------

TODO

RISC-V Linux 内核 64位
=========================

RISC-V 特权架构文档指出，64位地址“必须使第63至48位全部等于第47位，否则将触发页面错误异常。”这将虚拟地址空间分割为两个部分，中间有一个巨大的空洞。较低的部分是用户空间所在的位置，较高的部分是 RISC-V Linux 内核所在的位置。

RISC-V Linux 内核 SV39
------------------------

```
=======================================================================================================================
      起始地址    |   偏移量   |     结束地址     |  大小   | 虚拟内存区域描述
=======================================================================================================================
                    |            |                  |         |
   0000000000000000 |    0       | 0000003FFFFFFFFF |  256 GB | 用户空间虚拟内存，每个内存管理器不同
  __________________|____________|__________________|_________|___________________________________________________________
                    |            |                  |         |
   0000004000000000 | +256    GB | FFFFFFBFFFFFFFFF | ~16M TB | ... 极大的、几乎覆盖整个64位的非规范虚拟内存地址空洞，直到-256 GB
                    |            |                  |         | 的内核映射起始偏移
__________________|____________|__________________|_________|___________________________________________________________
                                                              |
                                                              | 内核空间虚拟内存，所有进程共享：
  ____________________________________________________________|___________________________________________________________
                    |            |                  |         |
   FFFFFFC6FEA00000 | -228    GB | FFFFFFC6FEFFFFFF |    6 MB | 固定映射
   FFFFFFC6FF000000 | -228    GB | FFFFFFC6FFFFFFFF |   16 MB | PCI I/O
   FFFFFFC700000000 | -228    GB | FFFFFFC7FFFFFFFF |    4 GB | vmemmap
   FFFFFFC800000000 | -224    GB | FFFFFFD7FFFFFFFF |   64 GB | vmalloc/ioremap 空间
   FFFFFFD800000000 | -160    GB | FFFFFFF6FFFFFFFF |  124 GB | 所有物理内存的直接映射
   FFFFFFF700000000 |  -36    GB | FFFFFFFEFFFFFFFF |   32 GB | kasan
  __________________|____________|__________________|_________|____________________________________________________________
                                                              |
                                                              |
  ____________________________________________________________|____________________________________________________________
                    |            |                  |         |
   FFFFFFFF00000000 |   -4    GB | FFFFFFFF7FFFFFFF |    2 GB | 模块，BPF
   FFFFFFFF80000000 |   -2    GB | FFFFFFFFFFFFFFFFF |    2 GB | 内核
  __________________|____________|__________________|_________|____________________________________________________________
```

RISC-V Linux 内核 SV48
------------------------

```
=======================================================================================================================
      起始地址    |   偏移量   |     结束地址     |  大小   | 虚拟内存区域描述
=======================================================================================================================
                    |            |                  |         |
   0000000000000000 |    0       | 00007FFFFFFFFFFF |  128 TB | 用户空间虚拟内存，每个内存管理器不同
  __________________|____________|__________________|_________|___________________________________________________________
                    |            |                  |         |
   0000800000000000 | +128    TB | FFFF7FFFFFFFFFFF | ~16M TB | ... 极大的、几乎覆盖整个64位的非规范
                    |            |                  |         | 虚拟内存地址空洞，直到-128 TB
                    |            |                  |         | 的内核映射起始偏移
__________________|____________|__________________|_________|___________________________________________________________
                                                              |
                                                              | 内核空间虚拟内存，所有进程共享：
  ____________________________________________________________|___________________________________________________________
                    |            |                  |         |
   FFFF8D7FFEA00000 |  -114.5 TB | FFFF8D7FFEFFFFFF |    6 MB | 固定映射
   FFFF8D7FFF000000 |  -114.5 TB | FFFF8D7FFFFFFFFF |   16 MB | PCI I/O
   FFFF8D8000000000 |  -114.5 TB | FFFF8F7FFFFFFFFF |    2 TB | vmemmap
   FFFF8F8000000000 |  -112.5 TB | FFFFAF7FFFFFFFFF |   32 TB | vmalloc/ioremap 空间
   FFFFAF8000000000 |  -80.5  TB | FFFFEF7FFFFFFFFF |   64 TB | 所有物理内存的直接映射
   FFFFEF8000000000 |  -16.5  TB | FFFFFFFEFFFFFFFF | 16.5 TB | kasan
  __________________|____________|__________________|_________|____________________________________________________________
                                                              |
                                                              | 此后与 39 位的布局相同：
  ____________________________________________________________|____________________________________________________________
                    |            |                  |         |
   FFFFFFFF00000000 |   -4    GB | FFFFFFFF7FFFFFFF |    2 GB | 模块，BPF
   FFFFFFFF80000000 |   -2    GB | FFFFFFFFFFFFFFFFF |    2 GB | 内核
  __________________|____________|__________________|_________|____________________________________________________________
```

RISC-V Linux 内核 SV57
------------------------

```
=======================================================================================================================
      起始地址    |   偏移量   |     结束地址     |  大小   | 虚拟内存区域描述
=======================================================================================================================
                    |            |                  |         |
   0000000000000000 |   0        | 00FFFFFFFFFFFFFF |   64 PB | 用户空间虚拟内存，每个内存管理器不同
  __________________|____________|__________________|_________|___________________________________________________________
                    |            |                  |         |
   0100000000000000 | +64     PB | FEEFFFFFFFFFFFFF | ~16K PB | ... 极大的、几乎覆盖整个64位的非规范
                    |            |                  |         | 虚拟内存地址空洞，直到-64 PB
                    |            |                  |         | 的内核映射起始偏移
__________________|____________|__________________|_________|___________________________________________________________
                                                              |
                                                              | 内核空间虚拟内存，所有进程共享：
  ____________________________________________________________|___________________________________________________________
                    |            |                  |         |
   FF1BFFFFFEA00000 | -57     PB | FF1BFFFFFEFFFFFF |    6 MB | 固定映射
   FF1BFFFFFF000000 | -57     PB | FF1BFFFFFFFFFFFF |   16 MB | PCI I/O
   FF1C000000000000 | -57     PB | FF1FFFFFFFFFFFFF |    1 PB | vmemmap
   FF20000000000000 | -56     PB | FF5FFFFFFFFFFFFF |   16 PB | vmalloc/ioremap 空间
   FF60000000000000 | -40     PB | FFDEFFFFFFFFFFFFF |   32 PB | 所有物理内存的直接映射
   FFD0000000000000 |  -8     PB | FFFFFFFEFFFFFFFF |    8 PB | kasan
  __________________|____________|__________________|_________|____________________________________________________________
                                                              |
                                                              | 此后与 39 位的布局相同：
  ____________________________________________________________|____________________________________________________________
                    |            |                  |         |
   FFFFFFFF00000000 |  -4     GB | FFFFFFFF7FFFFFFF |    2 GB | 模块，BPF
   FFFFFFFF80000000 |  -2     GB | FFFFFFFFFFFFFFFFF |    2 GB | 内核
  __________________|____________|__________________|_________|____________________________________________________________
```

用户空间虚拟地址 (VAs)
--------------------

为了保持与依赖最大为 48 位的虚拟地址空间的软件兼容性，默认情况下，内核将向用户空间返回来自 48 位范围 (sv48) 的虚拟地址。这种默认行为通过在 mmap 中传递 0 到提示地址参数来实现。对于地址空间小于 sv48 的 CPU，CPU 支持的最大地址空间将是默认值。

软件可以通过向 mmap 提供提示地址选择从另一个虚拟地址空间接收虚拟地址。当向 mmap 传递提示地址时，返回的地址将不会使用超过提示地址的位数。例如，如果将 `1 << 40` 作为提示地址传递给 mmap，则返回的有效地址永远不会使用 41 至 63 位。如果在该范围内没有可映射的地址，则 mmap 将返回 `MAP_FAILED`。
