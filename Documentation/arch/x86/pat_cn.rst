SPDX 许可证标识符: GPL-2.0

==========================
页属性表 (PAT)
==========================

x86 的页属性表 (PAT) 允许以页粒度设置内存属性。PAT 与允许在物理地址范围内设置内存类型的 MTRR 设置相辅相成。然而，PAT 比 MTRR 更灵活，因为它能够在页级别设置属性，并且没有硬件对允许的属性设置数量的限制。增加灵活性的同时，也需要遵循不为同一物理内存的多个虚拟地址设置相同内存类型的指导原则。

PAT 支持多种内存属性类型。目前最常用并支持的几种如下：

===  ==============
WB   写回
UC   未缓存
WC   写合并
WT   写透
UC-  未缓存减
===  ==============

PAT 接口
========

内核中有许多不同的接口允许在页级别设置内存属性。为了避免别名问题，这些接口应该被谨慎使用。下面是一个表格，列出了可用的接口、它们的预期用途以及它们与内存属性的关系。内部，这些 API 使用了一个 `reserve_memtype()` / `free_memtype()` 接口在物理地址范围内工作来避免任何别名问题。
+------------------------+----------+--------------+------------------+
| API                    |    RAM   |  ACPI,...    |  预留/空洞      |
+------------------------+----------+--------------+------------------+
| ioremap                |    --    |    UC-       |       UC-        |
+------------------------+----------+--------------+------------------+
| ioremap_cache          |    --    |    WB        |       WB         |
+------------------------+----------+--------------+------------------+
| ioremap_uc             |    --    |    UC        |       UC         |
+------------------------+----------+--------------+------------------+
| ioremap_wc             |    --    |    --        |       WC         |
+------------------------+----------+--------------+------------------+
| ioremap_wt             |    --    |    --        |       WT         |
+------------------------+----------+--------------+------------------+
| set_memory_uc,         |    UC-   |    --        |       --         |
| set_memory_wb          |          |              |                  |
+------------------------+----------+--------------+------------------+
| set_memory_wc,         |    WC    |    --        |       --         |
| set_memory_wb          |          |              |                  |
+------------------------+----------+--------------+------------------+
| set_memory_wt,         |    WT    |    --        |       --         |
| set_memory_wb          |          |              |                  |
+------------------------+----------+--------------+------------------+
| pci sysfs 资源         |    --    |    --        |       UC-        |
+------------------------+----------+--------------+------------------+
| pci sysfs 资源_wc      |    --    |    --        |       WC         |
| 是否为 IORESOURCE_PREFETCH |          |              |                  |
+------------------------+----------+--------------+------------------+
| pci proc               |    --    |    --        |       UC-        |
| !PCIIOC_WRITE_COMBINE  |          |              |                  |
+------------------------+----------+--------------+------------------+
| pci proc               |    --    |    --        |       WC         |
| PCIIOC_WRITE_COMBINE   |          |              |                  |
+------------------------+----------+--------------+------------------+
| /dev/mem               |    --    |   WB/WC/UC-  |    WB/WC/UC-     |
| 读写                   |          |              |                  |
+------------------------+----------+--------------+------------------+
| /dev/mem               |    --    |    UC-       |       UC-        |
| mmap SYNC 标志         |          |              |                  |
+------------------------+----------+--------------+------------------+
| /dev/mem               |    --    |   WB/WC/UC-  |  WB/WC/UC-       |
| mmap !SYNC 标志        |          |              |                  |
| 并且                   |          |(从现有别名)|  (从现有别名)   |
| 对此区域有任何别名    |          |              |                  |
+------------------------+----------+--------------+------------------+
| /dev/mem               |    --    |    WB        |       WB         |
| mmap !SYNC 标志        |          |              |                  |
| 此区域无别名           |          |              |                  |
| 并且                   |          |              |                  |
| MTRR 表示 WB           |          |              |                  |
+------------------------+----------+--------------+------------------+
| /dev/mem               |    --    |    --        |       UC-        |
| mmap !SYNC 标志        |          |              |                  |
| 此区域无别名           |          |              |                  |
| 并且                   |          |              |                  |
| MTRR 表示 !WB           |          |              |                  |
+------------------------+----------+--------------+------------------+

高级驱动程序接口
=========================

A. 使用 remap_pfn_range、io_remap_pfn_range 和 vmf_insert_pfn 将页面导出到用户空间
希望将某些页面导出到用户空间的驱动程序通过 mmap 接口和以下组合实现：

  1) pgprot_noncached()
  2) io_remap_pfn_range() 或 remap_pfn_range() 或 vmf_insert_pfn()

有了 PAT 支持后，新增了一个名为 pgprot_writecombine 的 API。因此，驱动程序可以继续使用上述序列，在第 1 步中使用 pgprot_noncached() 或 pgprot_writecombine()，然后是第 2 步。
此外，第 2 步内部会跟踪该区域作为 UC 或 WC 存储在 memtype 列表中，以确保不会出现冲突映射。
请注意，这组 API 只适用于 IO（非 RAM）区域。如果驱动程序想要导出一个 RAM 区域，则必须在上面的第 0 步使用 set_memory_uc() 或 set_memory_wc()，并且还要跟踪这些页面的使用情况，并在释放页面前使用 set_memory_wb() 来释放池。

MTRR 在 PAT 和非-PAT 系统上的效果
=====================================

下表提供了在 x86 上使用 ioremap*() 调用时，使用写合并 MTRRs 在非-PAT 和 PAT 系统上的影响。理想情况下，mtrr_add() 的使用将被逐步淘汰，转而使用 arch_phys_wc_add()，后者在启用 PAT 的系统上将是一个无操作。通过 arch_phys_wc_add() 添加的区域应该已经使用 WC 属性或 PAT 条目进行了 ioremapping，这可以通过使用 ioremap_wc() / set_memory_wc() 来完成。需要保持未缓存的 IO 内存区域与需要写合并的区域相结合的设备应考虑使用 ioremap_uc() 后跟 set_memory_wc() 来白名单有效的写合并区域。这种使用方式尽管不鼓励，但作为最后手段可以在设备具有大小受限的区域的情况下使用，否则 MTRR 写合并将无效。
::

  ====  =======  ===  =========================  =====================
  MTRR  非-PAT  PAT  Linux ioremap 值        有效内存类型
  ====  =======  ===  =========================  =====================
        PAT                                        非-PAT |  PAT
        |PCD                                               |
        ||PWT                                              |
        |||                                                |
  WC    000      WB   _PAGE_CACHE_MODE_WB             WC   |   WC
  WC    001      WC   _PAGE_CACHE_MODE_WC             WC*  |   WC
  WC    010      UC-  _PAGE_CACHE_MODE_UC_MINUS       WC*  |   UC
  WC    011      UC   _PAGE_CACHE_MODE_UC             UC   |   UC
  ====  =======  ===  =========================  =====================

  (*) 表示实现定义的，并且不鼓励使用

.. 注意:: 表格中的 "--" 意味着“不建议使用该 API”。其中一些“--”由内核严格强制执行。有些则今天实际上并没有强制执行，但在将来可能会被强制执行。
对于 ioremap 和通过 /sys 或 /proc 的 pci 访问 - 如果存在对该地址的任何现有别名，返回的实际类型可能更为严格。
例如：如果存在现有的未缓存映射，新的 ioremap_wc 可能返回未缓存映射而不是请求的写合并。
`set_memory_[uc|wc|wt]` 和 `set_memory_wb` 应该成对使用，其中驱动程序首先将一个区域设置为 uc、wc 或 wt，并在使用后将其切换回 wb。
随时间推移，对 `/proc/mtrr` 的写入将被废弃，转而支持使用基于 PAT 的接口。建议向 `/proc/mtrr` 写入的用户使用上述接口。
驱动程序应使用 `ioremap_[uc|wc]` 来访问具有 [uc|wc] 访问类型的 PCI BAR。
驱动程序应使用 `set_memory_[uc|wc|wt]` 来为 RAM 区域设置访问类型。

PAT 调试
=============

启用 `CONFIG_DEBUG_FS` 时，可以通过以下方式检查 PAT memtype 列表：

```
# mount -t debugfs debugfs /sys/kernel/debug
# cat /sys/kernel/debug/x86/pat_memtype_list
PAT memtype 列表:
uncached-minus @ 0x7fadf000-0x7fae0000
uncached-minus @ 0x7fb19000-0x7fb1a000
uncached-minus @ 0x7fb1a000-0x7fb1b000
uncached-minus @ 0x7fb1b000-0x7fb1c000
uncached-minus @ 0x7fb1c000-0x7fb1d000
uncached-minus @ 0x7fb1d000-0x7fb1e000
uncached-minus @ 0x7fb1e000-0x7fb25000
uncached-minus @ 0x7fb25000-0x7fb26000
uncached-minus @ 0x7fb26000-0x7fb27000
uncached-minus @ 0x7fb27000-0x7fb28000
uncached-minus @ 0x7fb28000-0x7fb2e000
uncached-minus @ 0x7fb2e000-0x7fb2f000
uncached-minus @ 0x7fb2f000-0x7fb30000
uncached-minus @ 0x7fb31000-0x7fb32000
uncached-minus @ 0x80000000-0x90000000
```

此列表显示了物理地址范围及其对应的 PAT 设置，这些设置用于访问这些物理地址范围。
另一种更详细地获取与 PAT 相关的调试信息的方法是通过 "debugpat" 引导参数。使用此参数时，各种调试信息会被输出到 dmesg 日志中。

PAT 初始化
==================

下表描述了在不同配置下 PAT 的初始化过程。为了支持 WC 和 WT 属性，PAT MSR 必须由 Linux 更新。否则，PAT MSR 将保持固件编程的值。注意，Xen 为来宾启用了 PAT MSR 中的 WC 属性。
==== ===== ==========================  =========  =======
 MTRR PAT   调用序列                PAT 状态  PAT MSR
 ==== ===== ==========================  =========  =======
 E    E     MTRR -> PAT 初始化         启用      操作系统
 E    D     MTRR -> PAT 初始化         禁用       -
 D    E     MTRR -> PAT 禁用          禁用      BIOS
 D    D     MTRR -> PAT 禁用          禁用       -
 -    np/E  PAT  -> PAT 禁用          禁用      BIOS
 -    np/D  PAT  -> PAT 禁用          禁用       -
 E    !P/E  MTRR -> PAT 初始化         禁用      BIOS
 D    !P/E  MTRR -> PAT 禁用          禁用      BIOS
 !M   !P/E  MTRR 存根 -> PAT 禁用     禁用      BIOS
 ==== ===== ==========================  =========  =======

  说明

 ========= =======================================
 E         CPU 中功能已启用
 D         CPU 中功能已禁用/不受支持
 np        指定了 "nopat" 引导选项
 !P        未设置 CONFIG_X86_PAT 选项
 !M        未设置 CONFIG_MTRR 选项
 启用      PAT 状态设置为启用
 禁用      PAT 状态设置为禁用
 操作系统   PAT 使用操作系统设置初始化 PAT MSR
 BIOS      PAT 保持 PAT MSR 的 BIOS 设置
 ========= =======================================
