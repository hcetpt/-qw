Intel® TXT 概览
=====================

Intel 的安全计算技术，即 Intel® 可信执行技术（Intel® TXT），定义了平台级别的增强功能，这些功能为构建可信平台提供了基础组件。Intel TXT 以前的代号为 LaGrande 技术（LT）。
Intel TXT 简介：

- 提供动态测量的信任根（DRTM）
- 在不正常关机时的数据保护
- 启动环境的测量与验证

Intel TXT 是 vPro™ 品牌的一部分，同时也可在一些非 vPro 系统中使用。它目前可用于基于 Q35、X38、Q45 和 Q43 Express 芯片组的桌面系统（例如戴尔 Optiplex 755、惠普 dc7800 等）以及基于 GM45、PM45 和 GS45 Express 芯片组的移动系统。
更多信息，请参阅 http://www.intel.com/technology/security/ 。该网站还提供了一个链接，可以访问更新了新发布的平台信息的 Intel TXT MLE 开发者手册。
过去几年中，Intel TXT 在多个活动中被介绍过，其中包括：

- LinuxTAG 2008：
    http://www.linuxtag.org/2008/en/conf/events/vp-donnerstag.html

- TRUST2008：
    http://www.trust-conference.eu/downloads/Keynote-Speakers/
    3_David-Grawrock_The-Front-Door-of-Trusted-Computing.pdf

- IDF 上海：
    http://www.prcidf.com.cn/index_en.html

- 2006 年和 2007 年的 IDF
    （不确定是否/在哪里可在线获取）

可信启动项目概览
=============================

可信启动（tboot）是一个开源的预内核/虚拟机监控模块，利用 Intel TXT 来实现操作系统内核/虚拟机监控程序的测量和验证启动。它托管在 SourceForge 上：http://sourceforge.net/projects/tboot 。
Mercurial 源代码库位于 http://www.bughost.org/repos.hg/tboot.hg 。
Tboot 目前支持启动 Xen（自 v3.2 版本起支持 TXT 的开源虚拟机监控程序/虚拟机管理程序）和 Linux 内核。
对于 Linux 的价值主张或“为何你应该关心？”
=====================================================

虽然有许多产品和技术试图度量或保护运行中的内核的完整性，但它们都假设内核从一开始就是“良好”的。完整性测量架构（IMA）和 Linux 完整性模块接口是此类解决方案的例子。
为了在不使用Intel TXT的情况下获得对初始内核的信任，必须使用静态的信任根。这基于从系统复位开始的BIOS信任，并需要测量从系统复位到内核启动完成期间执行的所有代码以及这些代码使用的数据对象。对于Linux内核而言，这意味着包括所有BIOS、任何选项ROM、引导加载程序和启动配置在内的全部内容。实际上，这涉及大量的代码/数据，其中许多可能从一次启动到下一次启动发生变化（例如，更换网络接口卡可能会改变选项ROM）。如果没有参考哈希值，这些变化很难评估或确认为无害。这个过程也无法提供DMA保护、内存配置/别名检查和锁定、崩溃保护或策略支持。

通过使用Intel TXT提供的硬件信任根，许多这些问题可以得到缓解。具体来说：许多预启动组件可以从信任链中移除，为所有启动的组件提供了DMA保护，执行了大量的平台配置检查并锁定相关值，在不当关机情况下为任何数据提供了保护，并且支持基于策略的执行/验证。

这提供了一个更稳定的度量标准和更高的系统配置及初始状态保证，这是其他方式无法实现的。由于tboot项目是开源的，除了SMM和Intel提供的固件之外，信任链几乎所有部分的源代码都是可用的。
它是如何工作的？
==================

- tboot是一个由引导加载程序作为“内核”启动的可执行文件（即引导加载程序执行的二进制文件）。
- 它执行所有必要的工作来确定平台是否支持Intel TXT，如果支持，则执行GETSEC[SENTER]处理器指令以启动动态信任根。
- 如果tboot确定系统不支持Intel TXT或配置不正确（例如，SINIT AC模块不正确），它将直接启动内核而不改变任何状态。
- tboot会向终端、串行端口和/或内存日志输出各种有关其进度的信息；输出位置可以通过命令行开关进行配置。
- GETSEC[SENTER]指令会返回控制权给tboot，然后tboot验证环境的某些方面（例如TPM NV锁定、e820表没有无效条目等）。
- 它将AP从GETSEC[SENTER]指令使其进入的特殊睡眠状态唤醒，并将它们置于等待SIPI的状态。
- 由于处理器在TXT环境中不会响应INIT或SIPI信号，因此有必要为AP创建一个小型VT-x虚拟机。当它们在这个虚拟机中运行时，只会等待INIT-SIPI-SIPI序列，这将导致VM退出，然后禁用VT并跳转到SIPI向量。这种方法似乎比不得不在内核的多处理器唤醒序列中插入特殊代码要好。
- Tboot随后应用一个（可选的）用户定义的启动策略来验证内核和initrd。
- 这一策略根植于TPM NV中，并在tboot项目中有详细描述。tboot项目还包含了用于创建和配置该策略的工具代码。
- 策略完全由用户控制，如果未设置策略，则任何内核都将被启动。
- 策略的操作非常灵活，可以包括在失败时停止或仅仅记录错误并继续执行。
- Tboot调整由引导加载程序提供的e820表，以预留其在内存中的位置以及某些其他与TXT相关的区域。
- 在启动过程中，Tboot通过DMA保护整个RAM（使用VT-d PMRs）。因此，内核必须使用'intel_iommu=on'参数启动，以便取消这种全面保护，并使用VT-d的页面级保护功能。
- Tboot会在共享页中填充一些关于自身的数据，并在传递控制权时将这些信息传递给Linux内核。
- 共享页的位置是通过boot_params结构作为物理地址传递的。
- 内核会查找tboot共享页的地址，如果存在，则将其映射到内存中。
- 作为TXT提供的检查/保护措施之一，它会在一个DMA保护的内存区域中复制VT-d DMARs，并验证它们的正确性。VT-d代码会检测内核是否通过Tboot启动，并使用这个副本而不是ACPI表中的原始版本。
- 在此阶段，tboot 和 TXT 不再发挥作用，直到下一次关机 (S<n>)。
- 要在 TXT 启动后将系统置于任何休眠状态，必须首先退出 TXT。这是为了防止试图使系统崩溃以在重启时获取控制权并窃取内存中遗留数据的攻击。
- 内核将执行所有休眠准备，并填充共享页面中的 ACPI 数据，这些数据用于将平台置于所需的休眠状态。
- 然后内核通过共享页面中指定的向量跳转到 tboot。
- tboot 将清理环境并禁用 TXT，然后使用内核提供的 ACPI 信息将平台实际置于所需的休眠状态。
- 对于 S3 状态，tboot 还会注册自身为恢复向量。这是必要的，因为它必须在恢复时重新建立受测环境。一旦 TXT 环境被恢复，它将恢复 TPM PCR（可编程随机数发生器），然后将控制权交还给内核的 S3 恢复向量。
- 为了确保 S3 过程中的系统完整性，内核会提供一组内存范围（e820 表中的 RAM 和 RESERVED_KERN，但不包括 BIOS 可能在 S3 过渡过程中修改的任何内存）给 tboot，tboot 将计算一个 MAC（消息认证码）并使用 TPM 进行密封。在恢复且受测环境已重新建立后，tboot 将重新计算 MAC 并与密封值进行验证。
- 如果验证失败，tboot 的策略将决定接下来会发生什么。
- 需要注意的是，tboot 的 c/s 194 版本包含了新的 MAC 代码，支持这一功能。
- 这基本上就是 TXT 支持的全部内容了。
- **系统配置**
- ==============
- 此代码适用于 32 位、32 位 PAE 和 64 位 (x86_64) 内核。
在BIOS中，用户必须开启：TPM、TXT、VT-x、VT-d。并非所有的BIOS都允许这些选项单独启用/禁用，并且查找它们的界面是BIOS特定的。
`grub.conf`需要按如下方式修改：

        标题 Linux 2.6.29-tip with tboot
          根分区 (hd0,0)
                内核 /tboot.gz logging=serial,vga,memory
                模块 /vmlinuz-2.6.29-tip intel_iommu=on 只读
                       根分区=LABEL=/ rhgb 控制台=ttyS0,115200 3
                模块 /initrd-2.6.29-tip.img
                模块 /Q35_SINIT_17.BIN

启用Intel TXT支持的内核选项可以在安全主菜单下找到，名为"启用Intel® 可信执行技术 (TXT)"。它被视为实验性功能，并依赖于通用x86支持（以允许在内核构建选项方面具有最大的灵活性），因为tboot代码会检测平台是否实际支持Intel TXT，从而决定内核代码是否被执行。
`Q35_SINIT_17.BIN`文件是Intel TXT所指的认证代码模块。它是针对系统中的芯片组而特定的，也可以在Trusted Boot网站上找到。它是一个由Intel签名的（未加密）模块，用于DRTM过程的一部分来验证和配置系统。它之所以被签名是因为它在系统中拥有比其他任何宏代码更高的权限级别，其正确运行对于建立DRTM至关重要。确定系统正确的SINIT ACM的过程记录在tboot SourceForge站点下的SINIT ACM下载部分的`SINIT-guide.txt`文件中。
