### SPDX 许可证标识符: GPL-2.0

#### 五级分页

##### 概览
原始的 x86-64 架构受限于四级分页，其虚拟地址空间最大为 256 TiB，物理地址空间最大为 64 TiB。我们已经开始触及这一限制：一些厂商已经提供了内存容量达 64 TiB 的服务器。
为了克服这一限制，即将推出的硬件将支持五级分页。这是对当前页表结构的一种直接扩展，添加了一个额外的翻译层。
它将虚拟地址空间的限制提升到了 128 PiB，物理地址空间的限制提升到了 4 PiB。这“应该足够任何人使用” ©
QEMU 2.9 及以上版本支持五级分页。
关于五级分页下的虚拟内存布局，请参阅 `Documentation/arch/x86/x86_64/mm.rst`。

##### 启用五级分页
设置 `CONFIG_X86_5LEVEL=y` 可以启用此功能。
配置了 `CONFIG_X86_5LEVEL=y` 的内核仍然可以在四级硬件上启动。
在这种情况下，额外的页表层级（p4d）将在运行时进行折叠。

##### 用户空间与大虚拟地址空间
在 x86 上，五级分页使得用户空间虚拟地址空间可达 56 位。
并非所有的用户空间都准备好处理宽地址。已知至少某些即时编译器会在指针中使用高位来编码信息。这与五级分页下有效的指针相冲突，导致崩溃。
为了缓解这一问题，默认情况下我们不会分配高于 47 位的虚拟地址空间。
但用户空间可以通过指定提示地址（无论是否带有MAP_FIXED）高于47位来请求从完整的地址空间进行分配。
如果提示地址设置在47位以上，但没有指定MAP_FIXED，我们会尝试根据指定的地址查找未映射的区域。如果该区域已被占用，我们将在*完整*地址空间中查找未映射的区域，而不是从47位窗口开始。
一个较高的提示地址只会影响当前的分配，而不会影响任何未来的mmap()调用。
在较旧的内核上或在不支持5级分页的机器上指定高提示地址是安全的。该提示将被忽略，并且内核会回退到从47位地址空间进行分配。
这种方法有助于轻松地使应用程序的内存分配器了解大地址空间，而无需手动跟踪已分配的虚拟地址空间。
这里我们需要处理的一个重要情况是与MPX的交互。
MPX（没有MAWA扩展）无法处理47位以上的地址，因此我们需要确保在已经有超过边界限制的VMA时MPX不能被启用，并且一旦启用了MPX，就禁止创建这样的VMA。
