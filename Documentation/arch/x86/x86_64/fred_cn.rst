SPDX 许可证标识符: GPL-2.0

=========================================
灵活的返回与事件传递 (FRED)
=========================================

概述
========

FRED 架构定义了简单的新的转换，这些转换可以改变权限级别（环转换）。FRED 架构的设计目标如下：

1) 通过用更低延迟的转换替换中断描述表中的事件传递（IDT 事件传递）和由 IRET 指令执行的事件返回来提高整体性能和响应时间。
2) 通过确保事件传递建立完整的监管器上下文以及事件返回建立完整的用户上下文来增强软件的稳健性。

FRED 架构定义的新转换包括 FRED 事件传递以及两种用于从事件返回的 FRED 返回指令。FRED 事件传递可以实现从环 3 到环 0 的转换，但同时也用于向环 0 传递事件。一种 FRED 指令 (ERETU) 实现从环 0 到环 3 的返回，而另一种 (ERETS) 在保持在环 0 中时返回。总体来说，FRED 事件传递和 FRED 返回指令一起构成了 FRED 转换。

除了这些转换之外，FRED 架构还定义了一个新的指令 (LKGS)，用于管理 GS 段寄存器的状态。

LKGS 指令可以被 64 位操作系统使用，即使这些系统不使用新的 FRED 转换。

此外，FRED 架构易于为未来的 CPU 架构进行扩展。

基于软件的事件调度
================================

FRED 在处理事件方面与 IDT 运作方式不同。它不是直接根据事件向量将事件调度到其处理器，而是要求软件根据事件的类型和向量将其调度到处理器。因此，需要实现一个事件调度框架以方便事件到处理器的调度过程。当事件发生时，FRED 事件调度框架接管控制，并采用两级调度机制。

第一级调度基于事件类型，第二级调度基于事件向量。

完整的监管器/用户上下文
============================

FRED 事件传递在事件传递和返回时原子地保存和恢复完整的监管器/用户上下文。这样就避免了由于 %cr2 和/或 %dr6 导致的瞬态状态问题，并且不再需要处理因部分初始化的进入状态造成的各种棘手情况。
FRED允许通过新的事件返回指令ERETS/ERETU显式解除NMI的阻塞，避免了由IRET无条件解除NMI阻塞所导致的问题，例如，在处理NMI期间发生异常时。
当启用FRED时，FRED始终恢复%rsp的完整值，因此不再需要ESP修复（ESPFIX）。
LKGS
====

LKGS的行为类似于将值移动到GS寄存器的MOV指令，但它是将基地址加载到IA32_KERNEL_GS_BASE MSR中，而不是GS段的描述符缓存中。使用LKGS后，可以避免对内核GS的干扰，即操作系统可以始终使用自己的GS基地址。
由于FRED从Ring 3进行事件传递和ERETU都会交换GS基地址和IA32_KERNEL_GS_BASE MSR的值，并且引入了LKGS指令，所以在启用FRED的情况下不再需要SWAPGS指令，因此禁止使用它（#UD）。
堆栈级别
============

引入了4个堆栈级别0~3来替代不可重入的IST用于事件处理，并且每个堆栈级别应配置为使用专用堆栈。
在FRED事件传递时，当前堆栈级别可以保持不变或提高。如果保持不变，则CPU继续使用当前的事件堆栈；如果提高，则CPU切换到由新堆栈级别的MSR指定的新事件堆栈，即MSR_IA32_FRED_RSP[123]。
只有执行FRED返回指令ERET[US]才能降低当前堆栈级别，使得CPU切换回之前事件传递提升堆栈级别前所使用的堆栈。
