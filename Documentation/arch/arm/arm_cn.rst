=======================
ARM Linux 2.6 及以上版本
=======================

    请访问 <ftp://ftp.arm.linux.org.uk/pub/armlinux> 查看更新
内核编译
---------------------

  为了编译 ARM Linux，您需要一个能够生成带有 GNU 扩展的 ARM ELF 代码的编译器。GCC 3.3 是一个很好的选择。幸运的是，您无需猜测。如果您的编译器是已知的问题源，内核会报告错误。
要本机编译 ARM Linux，您不必更改顶层 Makefile 中的 ARCH = 行。但是，如果您没有将 ARM Linux ELF 工具作为默认安装，则应按以下方式更改 CROSS_COMPILE 行：
如果您希望进行交叉编译，则在顶层 Makefile 中更改如下行：

    ARCH = <无论什么>

  改为：

    ARCH = arm

  和：

    CROSS_COMPILE=

  改为：

    CROSS_COMPILE=<您的编译器路径但不包括gcc>

  例如：

    CROSS_COMPILE=arm-linux-

  运行 'make config'，然后运行 'make Image' 来构建内核（arch/arm/boot/Image）。可以通过 'make zImage' 构建压缩映像而不是 'make Image'。
错误报告等
---------------

  请将补丁发送到补丁系统。更多信息，请参阅 http://www.arm.linux.org.uk/developer/patches/info.php 总是附带一些解释，说明补丁的作用及其必要性。
错误报告应发送至 linux-arm-kernel@lists.arm.linux.org.uk，或者通过网页表单提交至 http://www.arm.linux.org.uk/developer/
发送错误报告时，请确保包含所有相关信息，例如，在问题发生之前或期间打印的内核消息、您正在做什么等。
包含文件
--------------

  在 include/asm-arm 下创建了多个新的包含目录，以减少顶层目录中的杂乱。这些目录及其目的如下所示：

  ============= ==========================================================
   `arch-*`	机器/平台特定的头文件
   `hardware`	驱动内部的 ARM 特定数据结构/定义
   `mach`	通用 ARM 到特定机器接口的描述
   `proc-*`	处理器依赖的头文件（目前只有两类）
  ============= ==========================================================

机器/平台支持
------------------------

  ARM 树中包含对许多不同类型的机器的支持。为了继续支持这些差异，有必要按目录拆分特定于机器的部分。为此，使用机器类别来选择包含哪些目录和文件（我们将使用 $(MACHINE) 来指代类别）。

  因此，我们现在有了 arch/arm/mach-$(MACHINE) 目录，用于存放特定机器的非驱动文件（如 PCI、内存管理、架构定义等）。对于所有未来的机器，都应该有一个对应的 arch/arm/mach-$(MACHINE)/include/mach 目录。
模块
-------

  尽管支持模块化（并且对于 FP 模拟器是必需的），但在 ARM2/ARM250/ARM3 机器上加载每个模块时会占用到下一个 32k 边界的内存，这是因为页面大小的原因。
因此，在这些机器上模块化真的值得吗？

  然而，ARM6 及以上版本的机器允许模块占用 4k 的倍数，因此 Acorn RiscPC 和其他使用这些处理器的架构可以充分利用模块化。
ADFS 映像文件
----------------

  您可以通过挂载 ADFS 分区并使用循环设备驱动程序来访问 ADFS 分区上的映像文件。您必须安装 losetup。
请注意，PCEmulator DOS 分区在开始处有一个分区表，因此您必须向 `losetup` 提供 `-o offset`。

对于开发者的请求
-------------------

编写包含独立汇编文件的设备驱动程序时，请将该汇编文件与 C 文件一起包含，而不是放在 `arch/arm/lib` 目录中。这样可以让驱动程序作为可加载模块进行编译，而无需将一半的代码编译到内核映像中。

一般来说，除非确实必要，尽量避免使用汇编语言。它使得驱动程序更难以移植到其他硬件上。

ST506 硬盘驱动器
-------------------

ST506 硬盘控制器似乎工作良好（尽管有点慢）。目前它们只能在 A4x0 的主板上的控制器上工作，但如果要在 Podule 上工作，则只需要有人为中断屏蔽地址和 HDC 基址添加源代码即可。

截至 1996 年 3 月 31 日，它已经可以支持两个硬盘驱动器（你应该把 ADFS 的 `*configure` 中的硬盘设置为 2）。我有一个内置的 20MB 和一个巨大的外部 5.25" FH 64MB 驱动器（谁还能需要更多呢 :-)）

我刚刚测得的速度是每秒 240K（使用 bs=128k 的 dd 测试）；这大约只有 RiscOS 的一半；但比上周的 50K/s 快多了 :-)

已知问题：磁盘数据错误可能导致系统挂起，包括控制器使用 ECC 纠正错误的情况。（可能仅在这种情况发生...嗯）

1772 软驱
------------

这个也看起来工作正常，但最近没有经过充分的压力测试。目前还没有关于检测换盘的代码，这可能会是个问题！欢迎提出正确的实现方法。

`CONFIG_MACH_` 和 `CONFIG_ARCH_`
---------------------------------

2003 年对新机器的宏名称进行了更改。

历史上，`CONFIG_ARCH_` 用于真正的架构，例如 SA1100，以及架构的实现，例如 Assabet。决定将实现相关的宏名称更改为 `CONFIG_MACH_` 以增加清晰度。此外，并未进行追溯性修复，因为这会增加打补丁的复杂性。

之前的注册记录可以在网上找到。
内核入口（head.S）
---------------------
  内核的初始入口是通过head.S，它使用与机器无关的代码。机器的选择由进入时'r1'的值确定，该值必须保持唯一。
由于Linux的ARM端口支持大量的机器，我们有一套管理方法以确保不会大量复制代码。
我们将机器（或平台）支持代码按机器类别分组。一个类别通常基于一种或多种片上系统（SoC）设备，并作为实际实现的自然容器。这些类别被赋予目录 - arch/arm/mach-<class> - 包含支持机器类别的源文件和include/mach/。
例如，SA1100类别基于SA1100和SA1110 SoC设备，并包含支持板载和非板载设备的使用方式或设备设置的代码，提供了特定于机器的“特性”。

对于支持设备树（DT）的平台，机器选择在运行时通过将设备树二进制传递给内核来控制。在编译时，需要选择对机器类型的支持。这允许使用单一的多平台内核构建为几种机器类型服务。
对于不使用设备树的平台，这种机器选择由机器类型ID控制，它同时作为运行时和编译时的代码选择方法。您可以通过以下网站注册新的机器：

    <http://www.arm.linux.org.uk/developer/machines/>

注意：请不要为仅支持设备树的平台注册机器类型。如果您的平台仅支持设备树，则无需注册机器类型。

---

Russell King (2004年03月15日)
