启动 ARM Linux

=================

作者: Russell King

日期: 2002 年 5 月 18 日

以下文档适用于 2.4.18-rmk6 及以上版本。

为了启动 ARM Linux，您需要一个引导加载程序，这是一个在主内核运行之前执行的小型程序。引导加载程序应初始化各种设备，并最终调用 Linux 内核，向内核传递信息。

基本上，引导加载程序应该提供（至少）以下功能：

1. 设置并初始化 RAM
2. 初始化一个串行端口
3. 检测机器类型
4. 设置内核标签列表
5. 加载初始 RAM 文件系统(initramfs)
6. 调用内核映像

1. 设置并初始化 RAM
---------------------------

现有引导加载程序:
   必须

新引导加载程序:
   必须

引导加载程序需要查找并初始化内核将用于系统中易失性数据存储的所有 RAM。它以机器依赖的方式完成此操作。（它可以使用内部算法自动定位和确定所有 RAM 的大小，或者利用对机器中 RAM 的了解，或者采用引导加载程序设计者认为合适的任何其他方法。）

2. 初始化一个串行端口
-----------------------------

现有引导加载程序:
   可选，推荐

新引导加载程序:
   可选，推荐

引导加载程序应初始化并启用目标上的一个串行端口。这允许内核串行驱动程序自动检测用于内核控制台的串行端口（通常用于调试目的或与目标进行通信）。

作为替代方案，引导加载程序可以通过标签列表将相关的 "console=" 选项传递给内核，指定端口以及如在下述文档中描述的串行格式选项：

       文档/admin-guide/kernel-parameters.rst

3. 检测机器类型
--------------------------

现有引导加载程序:
   可选

新引导加载程序:
   必须（除非是仅使用设备树(Device Tree, DT)的平台）

引导加载程序应通过某种方式检测其运行的机器类型。这是否是一个硬编码值或通过查看连接硬件的某些算法超出了本文档的范围。
启动加载器最终必须能够向内核提供一个 MACH_TYPE_xxx 值（参见 linux/arch/arm/tools/mach-types）。这应当通过寄存器 r1 传递给内核。

对于仅使用设备树（DT）的平台，机器类型将由设备树确定。可以将机器类型设置为全1（~0）。虽然这不是严格必要的，但它确保了该值不会与任何现有类型匹配。

4. 设置启动数据
------------------

现有启动加载器：
    可选，强烈推荐
新开发的启动加载器：
    必须

启动加载器必须提供标签列表或设备树二进制文件（dtb）以向内核传递配置数据。启动数据的物理地址应通过寄存器 r2 传递给内核。

4a. 创建并初始化内核的标签列表
---------------------------------

启动加载器必须创建和初始化内核的标签列表。
有效的标签列表以 ATAG_CORE 开始，并以 ATAG_NONE 结束。
ATAG_CORE 标签可以为空也可以不为空。如果 ATAG_CORE 标签为空，则其大小字段设置为 '2'（0x00000002）。ATAG_NONE 必须将其大小字段设置为零。
可以在列表中放置任意数量的标签。重复标签的行为是未定义的：它可能追加到前一个标签携带的信息之后，也可能完全替换前一个标签的信息；某些标签按前者行为，而其他标签则按后者行为。
启动加载器至少需要传递系统内存的大小和位置以及根文件系统的地址。因此，最小的标签列表应如下所示：

        +-----------+
base ->  | ATAG_CORE |  |
        +-----------+  |
        | ATAG_MEM  |  | 地址递增
        +-----------+  |
        | ATAG_NONE |  |
        +-----------+  v

标签列表应存储在系统 RAM 中。
标签列表必须放在内存的一个区域中，这个区域不会被内核解压程序或 initrd 的 'bootp' 程序覆盖。推荐的放置位置是在 RAM 的前 16KiB 中。

4b. 设置设备树
-------------------------

启动加载器必须将设备树图像（dtb）加载到系统 RAM 中一个 64 位对齐的地址，并用启动数据对其进行初始化。dtb 格式文档位于 https://www.devicetree.org/specifications/
内核会在设备树映像（dtb）的物理地址处查找 dtb 魔数值 0xd00dfeed，以确定传递的是 dtb 而不是标签列表。

引导加载程序至少需要传递系统内存的大小和位置以及根文件系统的地址。dtb 必须放置在内核解压缩器不会覆盖的内存区域中，同时该区域必须位于内核低内存映射所覆盖的范围内。

一个安全的位置是在 RAM 开始位置之上 128MiB 边界的上方。
5. 加载初始 ramdisk (initramfs)
-------------------------------

现有引导加载程序:
	可选
新的引导加载程序:
	可选

如果使用了 initramfs，则与 dtb 类似，它也必须放置在一个内核解压缩器不会覆盖的内存区域中，并且这个区域必须位于内核低内存映射所覆盖的范围内。

一个安全的位置是在设备树映像上方，而设备树映像本身将如上推荐的那样，在 RAM 开始位置之上 128MiB 边界的上方加载。
6. 调用内核镜像
-----------------

现有引导加载程序:
	必需
新的引导加载程序:
	必需

调用内核 zImage 有两种选择。如果 zImage 存储在闪存中，并且正确链接以便从闪存运行，则引导加载程序可以直接从闪存调用 zImage。

zImage 也可以放在系统 RAM 中并在那里被调用。内核应该放置在 RAM 的前 128MiB 中。建议将其加载到高于 32MiB 的位置，以避免在解压前进行重定位的需求，这会使启动过程稍微快一些。

当启动原始（非 zImage）内核时，约束条件更严格。在这种情况下，内核必须加载到系统中的偏移量等于 TEXT_OFFSET - PAGE_OFFSET。
无论如何，必须满足以下条件：

- 使所有能够进行DMA（直接内存访问）的设备处于静默状态，以防止因错误的网络数据包或磁盘数据导致内存损坏。这将为您节省大量的调试时间。
- CPU寄存器设置

  - r0 = 0，
  - r1 = 在上述(3)中发现的机器类型编号
- r2 = 系统RAM中标记列表的物理地址，或者系统RAM中设备树块（dtb）的物理地址

- CPU模式

  必须禁用所有形式的中断（IRQ和FIQ）

  对于不包含ARM虚拟化扩展功能的CPU，CPU必须处于SVC模式。（对于Angel存在一个特殊例外）

  包含虚拟化扩展支持的CPU可以进入HYP模式，以便内核能充分利用这些扩展功能。这是此类CPU推荐的启动方式，除非虚拟化扩展已经被预装的hypervisor使用
如果由于任何原因内核没有进入HYP模式，则必须进入SVC模式
- 缓存、MMU（存储管理单元）

  MMU必须关闭
指令缓存可以开启也可以关闭
数据缓存必须关闭
如果内核进入HYP模式，上述要求适用于HYP模式配置以及普通的PL1（特权内核模式）配置。此外，必须禁用所有进入hypervisor的陷阱，并且尽可能为所有外围设备和CPU资源授予PL1访问权限。除了进入HYP模式外，系统配置应使得即使不包含虚拟化扩展支持的内核也能正确启动，无需额外的帮助
- 预期启动加载程序将通过直接跳转到内核映像的第一条指令来调用内核映像
在支持ARM指令集的CPU上，即使对于Thumb-2内核，也必须以ARM状态进入。
在仅支持Thumb指令集的CPU上，如Cortex-M系列CPU，必须在Thumb状态下进入。
