========================
PowerPC 引导包装器
========================

版权所有 (C) Secret Lab Technologies Ltd
PowerPC 映像目标会压缩内核映像（vmlinux）并用引导包装器将其包裹起来，以便系统固件可以使用。没有标准的 PowerPC 固件接口，因此引导包装器被设计为适应需要构建的各种映像类型。
引导包装器可以在 arch/powerpc/boot/ 目录中找到。该目录中的 Makefile 包含了所有可用映像类型的构建目标。
不同的映像类型用于支持 PowerPC 平台上发现的各种固件接口。OpenFirmware 是在苹果、IBM 和其他厂商的一般用途 PowerPC 系统上最常用的固件类型。U-Boot 通常出现在嵌入式 PowerPC 硬件上，但也有一些其他的固件实现同样很受欢迎。每个固件接口都需要一种不同的映像格式。
引导包装器是通过 arch/powerpc/boot/Makefile 中的 Makefile 构建的，并且它使用包装脚本（arch/powerpc/boot/wrapper）来生成目标映像。构建系统的详细信息将在下一部分讨论。
目前，存在以下映像格式的目标：

   ==================== ========================================================
   cuImage.%:		为旧版本 U-Boot 提供向后兼容的 uImage（对于不理解设备树的版本）。此映像将设备树二进制文件嵌入到映像内部。引导包装器、内核和设备树都嵌入在 U-Boot 的 uImage 文件格式中，并带有引导包装器代码，该代码从旧的 bd_info 结构中提取数据并将数据加载到设备树中，然后跳转到内核。
由于旧 U-Boot 接口中使用的 bd_info 结构中存在一系列 #ifdefs，
			cuImages 是平台特定的。每个具体的 U-Boot 平台都有一个不同的平台初始化文件，该文件将来自平台特定的 bd_info 文件的数据填充到嵌入的设备树中。平台特定的 cuImage 平台初始化代码可以在 `arch/powerpc/boot/cuboot.*.c` 中找到。为特定板卡选择正确的 cuImage 初始化代码可以在包装结构中找到。
dtbImage.%:		类似于 zImage，只是设备树二进制文件被嵌入到映像内部而不是由固件提供。输出映像文件可以是 ELF 文件或根据平台的不同而定的扁平二进制文件。
dtbImages 被用于那些没有直接传递设备树接口的系统。
dtbImages 与 simpleImages 类似，除了 dtbImages 具有从板载固件提取数据的平台特定代码，而 simpleImages 完全不与固件通信。
PlayStation 3 支持使用 `dtbImage`。同样地，使用 PlanetCore 固件的 Embedded Planet 板卡也使用 `dtbImage`。特定于板卡的初始化代码通常可以在名为 `arch/powerpc/boot/<platform>.c` 的文件中找到；但这可以通过包装脚本 `simpleImage` 进行覆盖。

`simpleImage.%`: 不依赖于任何特定固件接口的固件独立压缩映像，并且嵌入了一个设备树块。此映像是一个平坦的二进制文件，可以加载到 RAM 中的任何位置并跳转到该位置。
固件无法通过这种类型的映像向内核传递任何配置数据，它完全依赖于嵌入式设备树来获取所有信息。

`treeImage.%;`: 用于与某些 ppc4xx 硬件上找到的 OpenBIOS 固件一起使用的映像格式。此映像在其内部嵌入了一个设备树块。

`uImage`: 由 U-Boot 使用的原生映像格式。`uImage` 目标不添加任何引导代码。它只是将压缩的 `vmlinux` 包装在 `uImage` 数据结构中。此映像需要一个能够启动时向内核传递设备树的 U-Boot 版本。如果使用的是旧版本的 U-Boot，则需要使用 `cuImage`。

`zImage.%`: 不嵌入设备树的映像格式。由 OpenFirmware 和其他能够提供设备树的固件接口使用。此映像期望固件在启动时提供设备树。通常，如果您有通用的 PowerPC 硬件，那么您想要使用这种映像格式。

==================== ========================================================

嵌入了设备树块的映像类型（`simpleImage`、`dtbImage`、`treeImage` 和 `cuImage`）都会从 `arch/powerpc/boot/dts/` 目录中的文件生成设备树块。Makefile 根据目标名称选择正确的设备树源。因此，如果使用 `make treeImage.walnut` 构建内核，那么构建系统将使用 `arch/powerpc/boot/dts/walnut.dts` 来构建 `treeImage.walnut`。

还存在两个特殊的构建目标称为 `zImage` 和 `zImage.initrd`。这些目标根据内核配置选择构建所有的默认映像。
默认图像由启动包装器的 Makefile (位于 arch/powerpc/boot/Makefile) 通过向 $image-y 变量添加目标来选择。查看 Makefile 以了解哪些默认图像目标可用。

如何构建
-----------
arch/powerpc 设计用于支持多平台内核，这意味着单个 vmlinux 图像可以在许多不同的目标板上启动。这也意味着启动包装器必须能够在单次构建中为多种类型的图像进行包装。设计决策是不在启动包装器源代码中使用任何条件编译代码（如 #ifdef 等）。所有的启动包装器组件都可以在任何时候根据内核配置进行构建。每次构建内核时都构建所有包装器组件也确保了即使是最不常用的包装器部分至少在各种环境中进行了编译测试。

通过链接时仅链接适合图像类型的包装器部分，包装器被适应不同类型的图像。'包装器脚本'（位于 arch/powerpc/boot/wrapper 中）由 Makefile 调用，并负责根据图像类型选择正确的包装器部分。参数在脚本的注释块中有很好的文档说明，在这里不再重复。然而，值得注意的是，脚本使用 -p（平台）参数作为决定编译哪些包装器部分的主要方法。在脚本中间寻找大型的 'case "$platform" in' 块。这也是通过更改链接顺序来选择特定于平台的修复的地方。

特别是，在处理 cuImages 时需要格外小心。cuImage 包装器部分非常依赖于具体的板卡，因此在尝试构建的目标时，要确保它得到了包装器部分的支持。
