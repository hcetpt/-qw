下面是给定内容的中文翻译：

======================
Linux/PA-RISC 的寄存器使用
======================

[星号(*)表示计划中的用途，但目前尚未实现]

根据 ABI 规定的一般寄存器
=====================================

控制寄存器
-------------

===============================	===============================================
CR 0 (恢复计数器)		用于 ptrace
CR 1-CR 7(未定义)		未使用
CR 8 (保护 ID)		每进程值*
CR 9, 12, 13 (PIDS)		未使用
CR10 (CCR)			FPU 懒惰保存*
CR11				由 ABI 规定(SAR)
CR14 (中断向量)		初始化为 fault_vector
CR15 (EIEM)			初始化为全一*
CR16 (间隔定时器)		读取周期计数/写入启动间隔定时器
CR17-CR22			中断参数
CR19				中断指令寄存器
CR20				中断空间寄存器
CR21				中断偏移寄存器
CR22				中断 PSW
CR23 (EIRR)			读取待处理中断/写清除位
CR24 (TR 0)			内核空间页目录指针
CR25 (TR 1)			用户空间页目录指针
CR26 (TR 2)			未使用
CR27 (TR 3)			线程描述符指针
CR28 (TR 4)			未使用
CR29 (TR 5)			未使用
CR30 (TR 6)			当前 / 0
CR31 (TR 7)			临时寄存器，在多个地方使用
===============================	===============================================

空间寄存器（内核模式）
-----------------------------

===============================	===============================================
SR0				临时空间寄存器
SR4-SR7 			设置为 0
SR1				临时空间寄存器
SR2				内核不应破坏此寄存器
SR3				用于用户空间访问（当前进程）
===============================	===============================================

空间寄存器（用户模式）
---------------------------

===============================	===============================================
SR0				临时空间寄存器
SR1				临时空间寄存器
SR2				包含 Linux 网关页面的空间
SR3				在内核中包含用户地址空间值
SR4-SR7			定义用户/内核的短地址空间
===============================	===============================================


处理器状态字
---------------------

===============================	===============================================
W (64 位地址)		0
E (小端)		0
S (安全间隔定时器)		0
T (已取分支陷阱)		0
H (更高权限陷阱)		0
L (较低权限陷阱)		0
N (使下一条指令无效)		C 代码使用
X (数据内存中断禁用)		0
B (已取分支)		C 代码使用
C (代码地址转换)		1, 0 在执行实模式代码时
V (除法步长修正)		C 代码使用
M (HPMC 掩码)		0, 1 在执行 HPMC 处理程序时*
C/B (进位/借位位)		C 代码使用
O (有序引用)		1*
F (性能监控)		0
R (恢复计数器陷阱)		0
Q (收集中断状态)		1 (在直接前于 rfi 的代码中为 0)
P (保护标识符)		1*
D (数据地址转换)		1, 0 在执行实模式代码时
I (外部中断屏蔽)		由 cli()/sti() 宏使用
===============================	===============================================

“隐形”寄存器
---------------------

===============================	===============================================
PSW 默认 W 值		0
PSW 默认 E 值		0
影子寄存器		中断处理程序代码使用
TOC 启用位		1
===============================	===============================================

-------------------------------------------------------------------------

PA-RISC 架构定义了 7 个寄存器作为“影子寄存器”
这些寄存器在 RETURN FROM INTERRUPTION AND RESTORE 指令中使用，以通过消除在中断处理程序中对通用寄存器 (GR) 的保存和恢复的需求来减少状态保存和恢复的时间。
影子寄存器是 GRs 1、8、9、16、17、24 和 25。
-------------------------------------------------------------------------

寄存器使用说明，最初来自 John Marvin，并附有一些 Randolph Chung 添加的注释
对于一般寄存器：

r1、r2、r19-r26、r28、r29 及 r31 可以在不先保存它们的情况下使用。当然，如果你关心这些寄存器的值，在调用其他过程之前你需要保存它们。上述某些寄存器具有特殊含义，你应该注意这些：

    r1:
	addil 指令被硬连线为将其结果放入 r1，
	因此如果你使用该指令，请注意这一点。
r2:
	这是返回指针。通常你不想使用它，因为你需要该指针回到你的调用者。然而，它被归类为此组寄存器中，因为调用者不能依赖返回时的相同值，即你可以将 r2 复制到另一个寄存器中，并且在破坏 r2 后通过该寄存器返回，这不应该对调用例程造成问题。
r19-r22:
	这些通常被视为临时寄存器
请注意，在 64 位中它们是 arg7-arg4。
r23-r26:
	这些是 arg3-arg0，即如果你不在乎传递的值，你可以使用它们。
r28、r29:
	是 ret0 和 ret1。你通过这些寄存器传递返回值。
r28 是主要返回值。当返回小型结构时，r29 也可以用来向调用者传递数据。
R30:
	堆栈指针

R31:
	ble 指令将返回指针存放在其中。

R3-R18、R27、R30 需要被保存和恢复。R3-R18 只是
	通用寄存器。R27 是数据指针，用于使对全局变量的引用更加简单。R30
	是堆栈指针。
