DWC3 驱动
========

待办事项
~~~~~~~

请在阅读时挑选一些内容 :)

- 将中断处理程序转换为每端点线程中断

  经过测试，发现某些 DWC3 命令需要大约 1 毫秒才能完成。目前我们一直在循环等待直到命令完成，这是不理想的。
实现思路：

  - DWC 核心实现了一个针对每个端点的中断分发器。这些中断编号是在探测阶段分配并属于设备的。如果 MSI 提供了针对每个端点的中断，则这个虚拟的中断芯片可以被“真实的”中断替换。
- 中断请求/分配在 `usb_ep_enable()` 时进行，并在 `usb_ep_disable()` 时移除。最坏情况下需要 32 个中断，最少也需要两个用于 ep0/1。
- `dwc3_send_gadget_ep_cmd()` 将在 `wait_for_completion_timeout()` 中睡眠，直到命令完成。
- 中断处理程序被拆分成以下几部分：

    - 设备的主要中断处理程序
      处理所有事件，并为每个事件调用 `generic_handle_irq()`。从 `generic_handle_irq()` 返回后，它会确认事件计数器，使中断消失（最终）。
- 设备的线程化处理程序
      没有

    - 端点中断的主要处理程序
      读取事件并尝试处理。需要睡眠的所有操作将交给线程处理。事件保存在一个针对每个端点的数据结构中。
我们可能需要注意，在我们将某项任务交给线程处理之后不要处理任何事件，以避免处理顺序混乱（例如，优先级为 Y 的事件 X 在 Y 之前被处理）
- 端点中断的线程化处理程序
      处理剩余的端点工作，这可能包括睡眠，如等待命令完成。
延迟：

   不应增加延迟，因为中断线程具有高优先级，将在用户空间中的平均任务之前运行（除非用户更改了优先级）。
