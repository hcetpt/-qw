页面片段
==========

页面片段是指位于0级或更高级复合页面内的任意长度、任意偏移的内存区域。页面中的多个片段分别由页面的引用计数器进行计数。page_frag函数（page_frag_alloc和page_frag_free）提供了一个简单的页面片段分配框架。网络堆栈和网络设备驱动程序使用这些函数来提供一个内存备份区域，用作sk_buff->head或skb_shared_info的“frags”部分。

为了使用页面片段API，需要一个页面片段缓存作为支持。这提供了一个集中点用于片段分配，并且允许多次调用利用缓存页面。这样做的优点是可以避免在分配时多次调用get_page，因为这在分配时可能会很昂贵。然而，由于这种缓存的特性，任何对缓存的调用都需要受到每个CPU限制的保护，或者每个CPU限制加上在执行片段分配时禁用中断的保护。

网络堆栈为每个CPU使用两个独立的缓存来处理片段分配。netdev_alloc_cache被netdev_alloc_frag和__netdev_alloc_skb调用者使用，而napi_alloc_cache则被__napi_alloc_frag和napi_alloc_skb调用者使用。这两种调用的主要区别在于它们可以被调用的上下文。带有“netdev”前缀的函数可以在任何上下文中使用，因为这些函数会禁用中断，而带有“napi”前缀的函数只能在软中断上下文中使用。

许多网络设备驱动程序使用类似的方法来分配页面片段，但页面片段是在环或描述符级别缓存的。为了使这些情况得以实现，有必要提供一种通用的方式来清理页面缓存。因此实现了__page_frag_cache_drain。它允许通过一次调用来释放单个页面上的多个引用。这样做的优点是能够清理添加到页面上的多个引用，从而避免每次分配时都调用get_page。

Alexander Duyck, 2016年11月29日
