====== zsmalloc ======
此分配器专为与 zram 配合使用而设计。因此，该分配器在内存不足的情况下表现良好。特别是，它从不尝试更高阶的页面分配，因为这种操作在内存压力下很可能失败。另一方面，如果我们仅使用单个（0 阶）页面，则会遭受极高的碎片化问题——任何大小为 PAGE_SIZE/2 或更大的对象将占用整个页面。这是其前身（xvmalloc）的主要问题之一。
为了解决这些问题，zsmalloc 分配一组 0 阶页面，并使用各种“struct page”字段将它们链接在一起。这些链接的页面作为一个更高阶的页面工作，即一个对象可以跨越 0 阶页面边界。代码把这些链接的页面称为一个单一实体，称为 zspage。
为了简化起见，zsmalloc 只能分配最大为 PAGE_SIZE 的对象，因为这满足了所有当前用户的需求（在最坏情况下，页面是不可压缩的，因此以未压缩的形式存储）。对于大于此大小的分配请求，返回失败（参见 zs_malloc）。
此外，zs_malloc() 不返回可解除引用的指针。相反，它返回一个不透明句柄（unsigned long），其中编码了已分配对象的实际位置。这样做的原因是 zsmalloc 不会永久映射 zspages，因为这样做会在 32 位系统上造成问题，在这些系统中，内核空间映射的 VA 区域非常小。因此，在使用分配的内存之前，需要使用 zs_map_object() 将对象映射以获得可用指针，随后使用 zs_unmap_object() 解映射。

== 统计 ==
使用 CONFIG_ZSMALLOC_STAT，我们可以通过 `/sys/kernel/debug/zsmalloc/<user name>` 查看 zsmalloc 的内部信息。以下是一个统计输出示例：

```
# cat /sys/kernel/debug/zsmalloc/zram0/classes

class  size       10%       20%       30%       40%       50%       60%       70%       80%       90%       99%      100% obj_allocated   obj_used pages_used pages_per_zspage freeable
...
...
30   512         0        12         4         1         0         1         0         0         1         0       414          3464       3346        433                1       14
31   528         2         7         2         2         1         0         1         0         0         2       117          4154       3793        536                4       44
32   544         6         3         4         1         2         1         0         0         0         1       260          4170       3965        556                2       26
...
...
```
类
索引
大小
zspage 存储的对象大小
10%
使用率低于 10% 的 zspage 数量（见下文）
20%
使用率在 10% 到 20% 之间的 zspage 数量
30%
使用率在 20% 到 30% 之间的 zspage 数量
40%
使用率在 30% 到 40% 之间的 zspage 数量
50%
使用率在 40% 到 50% 之间的 zspage 数量
60%
使用率在 50% 到 60% 之间的 zspage 数量
70%
使用率在 60% 到 70% 之间的 zspage 数量
80%
使用率在 70% 到 80% 之间的 zspage 数量
90%
使用率在 80% 到 90% 之间的 zspage 数量
99%
使用率在 90% 到 99% 之间的 zspage 数量
100%
使用率为 100% 的 zspage 数量
obj_allocated
已分配的对象数量
obj_used
分配给用户的对象数量
pages_used
为该类分配的页面数
pages_per_zspage
构成一个 zspage 的 0 级页面数
freeable
该类整理后可以释放的大致页面数

每个 zspage 都维护了一个 inuse 计数器，用于跟踪该 zspage 中存储的对象数量。inuse 计数器决定了 zspage 的“满度组”，这通过将“inuse”对象的数量与 zspage 可以容纳的总对象数量（objs_per_zspage）的比率来计算。inuse 计数器越接近 objs_per_zspage，表示利用率越高。

内部实现
==========

zsmalloc 有 255 个大小类，每个类可以包含多个 zspage。
每个 zspage 最多可以包含 ZSMALLOC_CHAIN_SIZE 物理（0 级）页面。
每个大小类的最佳 zspage 链接大小在创建 zsmalloc 池时计算（参见 calculate_zspage_chain_size()）。
为了优化，zsmalloc 将具有相似特性的大小类合并，这些特性包括每 zspage 的页面数和每个 zspage 可以存储的对象数。
例如，考虑以下大小类：

| 类 | 大小 | 10% | ... | 100% | obj_allocated | obj_used | pages_used | pages_per_zspage | freeable |
|----|------|-----|-----|------|---------------|----------|------------|------------------|----------|
| ...| ...  | ... | ... | ...  | ...           | ...      | ...        | ...              | ...      |
| 94 | 1536 | 0   | ... | 0    | 0             | 0        | 0          | 3                | 0        |
| 100| 1632 | 0   | ... | 0    | 0             | 0        | 0          | 2                | 0        |
| ...| ...  | ... | ... | ...  | ...           | ...      | ...        | ...              | ...      |

大小类 #95 到 #99 与大小类 #100 合并。这意味着当需要存储一个大小为 1568 字节的对象时，我们最终会使用大小类 #100 而不是大小类 #96。大小类 #100 是为大小为 1632 字节的对象设计的，因此每个大小为 1568 字节的对象浪费了 1632 - 1568 = 64 字节。
大小类 #100 包含每个 zspage 有 2 个物理页面，总共可以存储 5 个对象。如果需要存储 13 个大小为 1568 字节的对象，我们会分配三个 zspage，即 6 个物理页面。
然而，如果我们仔细查看大小类 #96（这是为大小为 1568 字节的对象设计的），并追踪 `calculate_zspage_chain_size()` 函数，我们会发现对于此类最理想的 zspage 配置是一个包含 5 个物理页面的链：

| 每个 zspage 页面数 | 浪费字节数 | 使用率% |
|------------------|-----------|---------|
| 1                | 960       | 76      |
| 2                | 352       | 95      |
| 3                | 1312      | 89      |
| 4                | 704       | 95      |
| 5                | 96        | 99      |

这意味着大小类 #96 配置中包含 5 个物理页面的 zspage 可以在一个 zspage 中存储 13 个大小为 1568 字节的对象，总共使用 5 个物理页面。
这比配置为#100的类更高效，后者需要使用6个物理页来存储相同数量的对象。
随着#96类的zspage链大小增加，其关键特性如每zspage的页面数和每zspage的对象数也会发生变化。这导致了更少的类合并，从而使得类的分组更加紧凑，减少了内存浪费。
让我们仔细看看`/sys/kernel/debug/zsmalloc/zramX/classes`的底部内容：

```
  类  大小      10%   ....    100% obj_allocated   obj_used pages_used pages_per_zspage freeable

  ..
202  3264         0   ..         0             0          0          0                4        0
    254  4096         0   ..         0             0          0          0                1        0
  ..
```

大小类#202存储3264字节的对象，并且每个zspage最多有4个页面。任何大于3264字节的对象被视为巨大的，并属于大小类#254，该类将每个对象存储在单独的物理页中（巨大类中的对象不共享页面）。
增加zspage链的大小也会提高巨大大小类的水印值，并减少总体的巨大类数量。这允许更高效地存储大对象。
对于zspage链大小为8的情况，巨大类的水印值变为3632字节：

```
  类  大小      10%   ....    100% obj_allocated   obj_used pages_used pages_per_zspage freeable

  ..
202  3264         0   ..         0             0          0          0                4        0
    211  3408         0   ..         0             0          0          0                5        0
    217  3504         0   ..         0             0          0          0                6        0
    222  3584         0   ..         0             0          0          0                7        0
    225  3632         0   ..         0             0          0          0                8        0
    254  4096         0   ..         0             0          0          0                1        0
  ..
```

对于zspage链大小为16的情况，巨大类的水印值变为3840字节：

```
  类  大小      10%   ....    100% obj_allocated   obj_used pages_used pages_per_zspage freeable

  ..
202  3264         0   ..         0             0          0          0                4        0
    206  3328         0   ..         0             0          0          0               13        0
    207  3344         0   ..         0             0          0          0                9        0
    208  3360         0   ..         0             0          0          0               14        0
    211  3408         0   ..         0             0          0          0                5        0
    212  3424         0   ..         0             0          0          0               16        0
    214  3456         0   ..         0             0          0          0               11        0
    217  3504         0   ..         0             0          0          0                6        0
    219  3536         0   ..         0             0          0          0               13        0
    222  3584         0   ..         0             0          0          0                7        0
    223  3600         0   ..         0             0          0          0               15        0
    225  3632         0   ..         0             0          0          0                8        0
    228  3680         0   ..         0             0          0          0                9        0
    230  3712         0   ..         0             0          0          0               10        0
    232  3744         0   ..         0             0          0          0               11        0
    234  3776         0   ..         0             0          0          0               12        0
    235  3792         0   ..         0             0          0          0               13        0
    236  3808         0   ..         0             0          0          0               14        0
    238  3840         0   ..         0             0          0          0               15        0
    254  4096         0   ..         0             0          0          0                1        0
  ..
```
总体上，zspage 链大小对 zsmalloc 池配置的综合影响如下：

| 每个 zspage 的页数 | 大小类（簇）的数量 | 巨大尺寸类水印 |
|------------------|-----------------|--------------|
| 4                | 69              | 3264         |
| 5                | 86              | 3408         |
| 6                | 93              | 3504         |
| 7                | 112             | 3584         |
| 8                | 123             | 3632         |
| 9                | 140             | 3680         |
| 10               | 143             | 3712         |
| 11               | 159             | 3744         |
| 12               | 164             | 3776         |
| 13               | 180             | 3792         |
| 14               | 183             | 3808         |
| 15               | 188             | 3840         |
| 16               | 191             | 3840         |

合成测试
--------

zram 作为构建工件存储（Linux 内核编译）

* `CONFIG_ZSMALLOC_CHAIN_SIZE=4`

  zsmalloc 类统计信息:::

    class  size       10%   ....    100% obj_allocated   obj_used pages_used pages_per_zspage freeable

    ..
    Total              13   ..        51        413836     412973     159955                         3

  zram mm_stat:::

    1691783168 628083717 655175680        0 655175680       60        0    34048    34049

* `CONFIG_ZSMALLOC_CHAIN_SIZE=8`

  zsmalloc 类统计信息:::

    class  size       10%   ....    100% obj_allocated   obj_used pages_used pages_per_zspage freeable

    ..
    Total              18   ..        87        414852     412978     156666                         0

  zram mm_stat:::

    1691803648 627793930 641703936        0 641703936       60        0    33591    33591

使用较大的 zspage 链可能会减少物理页的使用量，如示例所示，使用的物理页数从 159955 减少到 156666，同时最大 zsmalloc 池内存使用量从 655175680 字节降低到 641703936 字节。然而，这种优势可能会被系统内存压力增加所抵消（因为某些 zspage 有较大的链大小），在内部碎片严重且 zspool 紧凑无法重新定位对象和释放 zspage 的情况下尤其如此。在这种情况下，建议减小 zspage 链大小的限制（由 CONFIG_ZSMALLOC_CHAIN_SIZE 选项指定）。

函数
====

.. kernel-doc:: mm/zsmalloc.c
