内存平衡
==========

开始于2000年1月，作者：Kanoj Sarcar <kanoj@sgi.com>

内存平衡对于 !__GFP_HIGH 和 !__GFP_KSWAPD_RECLAIM 以及非 __GFP_IO 分配是必需的。
第一个原因可能是调用者由于持有自旋锁或处于中断上下文而无法进入睡眠状态。第二个原因可能是调用者愿意在不承担页面回收开销的情况下失败分配。这可能会发生在有 order-0 回退选项的高阶分配请求中。在这种情况下，调用者可能还希望避免唤醒 kswapd。
__GFP_IO 分配请求是为了防止文件系统死锁。
在没有不可睡眠分配请求的情况下，进行平衡似乎是有害的。页面回收可以懒惰地启动，也就是说，只有在需要时（即分区空闲内存为零）才启动，而不是将其作为一个主动的过程。
话虽如此，内核应尽量从直接映射池中满足对直接映射页面的请求，而不是回退到 dma 池，以便使 dma 池保持满状态以供 dma 请求（原子或非原子）。类似的论点也适用于高内存和直接映射页面。
另一方面，如果有很多空闲的 dma 页面，则最好通过从 dma 池分配来满足常规内存请求，而不是承担常规分区平衡的开销。
在 2.2 版本中，只有当总的空闲页面数量低于总内存的 1/64 时，才会启动内存平衡/页面回收。在适当的 dma 和常规内存比例下，即使 dma 分区完全为空，也可能不会进行平衡。2.2 版本已经在各种内存大小的生产机器上运行，并且即使存在这个问题，似乎也能正常工作。在 2.3 版本中，由于 HIGHMEM，这个问题变得更加严重。
在 2.3 版本中，分区平衡可以通过两种方式之一实现：根据分区大小（以及可能的低级别分区大小），我们可以在初始化时决定在平衡任何分区时应该达到多少空闲页面。好的一面是，在平衡过程中不需要查看低级别分区的大小；坏的一面是，由于忽略了低级别分区可能较低的使用率，可能会过于频繁地进行平衡。此外，通过稍微修改分配例程，可以将 memclass() 宏简化为简单的等式。
另一种可能的解决方案是在某个分区及其所有低级别分区的空闲内存均低于该分区及其低级别分区总内存的 1/64 时进行平衡。这解决了 2.2 版本的平衡问题，并尽可能接近 2.2 的行为。此外，这种平衡算法在具有不同数量和类型的分区的各种架构上都能以相同的方式工作。如果我们想复杂一些，将来可以为不同分区中的空闲页面分配不同的权重。
需要注意的是，如果常规分区的大小与 dma 分区相比非常大，则在决定是否平衡常规分区时考虑空闲的 dma 页面变得不那么重要。这时第一种解决方案就更具吸引力了。
附加的补丁实现了第二种解决方案。它还“修复”了两个问题：首先，在内存不足的情况下，对于不可睡眠的分配，kswapd像2.2版本那样被唤醒。其次，HIGHMEM区域也被平衡，以使`replace_with_highmem()`有机会获得一个HIGHMEM页面，并确保HIGHMEM分配不会回退到常规区域。这也保证了HIGHMEM页面不会泄露（例如，在某个HIGHMEM页面在交换缓存中但未被任何人使用的情况下）。

kswapd还需要知道它应该平衡哪些区域。kswapd主要用于无法进行平衡的情况，可能是因为所有的分配请求都来自中断上下文，而所有进程上下文都在睡眠中。对于2.3版本，kswapd实际上不需要平衡HIGHMEM区域，因为中断上下文不会请求HIGHMEM页面。kswapd通过查看区域结构中的`zone_wake_kswapd`字段来决定是否需要平衡该区域。

从进程内存和共享内存中窃取页面的操作会在页面所在的节点的任何区域低于其水印时执行，以此来缓解内存压力（如果请求中设置了GFP_WAIT标志，则会尝试释放一些页面）。

水印[WMARK_MIN/WMARK_LOW/WMARK_HIGH]、low_on_memory、zone_wake_kswapd：这些是每个区域的字段，用于确定何时需要平衡该区域。当页面数量低于水印[WMARK_MIN]时，hysteric字段`low_on_memory`会被设置。直到空闲页面数量恢复到水印[WMARK_HIGH]之前，这个标志一直保持设置状态。当`low_on_memory`被设置时，页面分配请求将尝试释放该区域中的一些页面（前提是请求中设置了GFP_WAIT标志）。

与此正交的是决定是否唤醒kswapd来释放一些区域中的页面。这个决策不是基于滞后效应的，而是在空闲页面数量低于水印[WMARK_LOW]时做出的；在这种情况下，也会设置`zone_wake_kswapd`。

我听到的一些（好的）想法：

1. 动态经验应影响平衡：可以跟踪一个区域中失败的请求次数，并将其反馈到平衡方案中（jalvo@mbay.net）
2. 实现一个类似于`replace_with_highmem()`的`replace_with_regular()`函数，以保留DMA页面。（lkd@tantalophile.demon.co.uk）
