SPDX 许可证标识符: GPL-2.0

======
设计
======

.. _damon_design_execution_model_and_data_structures:

执行模型和数据结构
===================

监控相关信息（包括监控请求规范和基于 DAMON 的操作方案）存储在一个称为 DAMON “上下文”的数据结构中。DAMON 使用一个名为“kdamond”的内核线程执行每个上下文。多个 kdamonds 可以并行运行，用于不同类型的监控。

总体架构
====================

DAMON 子系统配置了三层：

- 操作集：实现了依赖于给定监控目标地址空间和可用软件/硬件原语集的基本操作。
- 核心：在操作集层之上实现核心逻辑，包括监控开销/准确度控制和访问感知系统操作。
- 模块：实现在核心层之上的内核模块，为用户空间提供接口。

.. _damon_design_configurable_operations_set:

可配置的操作集
---------------------------

为了进行数据访问监控和其他低级工作，DAMON 需要一组针对特定操作的实现，这些操作依赖于并针对给定的目标地址空间进行了优化。另一方面，监控开销与准确度权衡机制是 DAMON 的核心逻辑部分。DAMON 将这两部分分别放在不同的层次中，即 DAMON 操作集层和 DAMON 核心逻辑层，并进一步定义了层之间的接口，允许使用各种操作集来配置核心逻辑。

由于这种设计，用户可以通过配置核心逻辑来使用适当的操作集，从而扩展 DAMON 以支持任何地址空间。如果没有任何合适的操作集，用户可以自行实现一个。

例如，物理内存、虚拟内存、交换空间、特定进程的内存空间、NUMA 节点、文件和后端存储设备等都可以得到支持。此外，如果某些架构或设备支持特殊的优化访问检查原语，这些也可以轻松配置。

可编程模块
--------------------

DAMON 的核心层作为框架实现，并向所有内核空间组件（如子系统和模块）暴露其应用程序编程接口。对于 DAMON 的常见用例，DAMON 子系统提供了基于核心层并通过该 API 构建的内核模块，用户空间最终用户可以轻松使用。

.. _damon_operations_set:

操作集层
====================

监控操作定义为两部分：

1. 确定监控目标地址范围。
2. 在目标空间中对特定地址范围进行访问检查。

DAMON 目前提供了以下三个操作集。下面两个小节描述了它们的工作方式。
- vaddr：监控特定进程的虚拟地址空间
- fvaddr：监控固定的虚拟地址范围
- paddr：监控系统的物理地址空间

 .. _damon_design_vaddr_target_regions_construction:

基于VMA的目标地址范围构造
------------------------------

``vaddr`` DAMON操作集的一种机制，能够自动初始化和更新监控目标地址范围，以覆盖目标进程的整个内存映射。此机制仅适用于``vaddr``操作集。在使用``fvaddr``和``paddr``操作集的情况下，用户需要手动设置监控目标地址范围。在进程的超大虚拟地址空间中，只有小部分区域被映射到物理内存并被访问。因此，跟踪未映射的地址区域只是浪费资源。然而，由于DAMON可以使用自适应区域调整机制处理一定程度的噪声，跟踪每个映射并不是严格必要的，在某些情况下甚至可能导致高开销。尽管如此，监控目标中的巨大未映射区域应该被移除，以免占用自适应机制的时间。

为此，该实现将复杂的映射转换为三个独立的区域，以覆盖地址空间中的所有已映射区域。这三个区域之间的两个间隙是给定地址空间中的两个最大未映射区域。通常情况下，这两个最大的未映射区域将是堆与最高mmap()区域之间的空隙以及最低mmap()区域与栈之间的空隙。因为这些空隙在常规地址空间中异常巨大，排除它们足以达成合理的权衡。详细如下所示：

    <heap>
    <巨大的未映射区域1>
    <最高mmap()区域>
    （小mmap()区域和munmap()区域）
    <最低mmap()区域>
    <巨大的未映射区域2>
    <栈>

基于PTE访问位的访问检查
--------------------------

物理和虚拟地址空间的两种实现都使用PTE访问位进行基本的访问检查。唯一的区别在于从地址找到相关PTE访问位的方式。对于虚拟地址的实现，它会遍历目标任务的页表；而对于物理地址的实现，则会遍历所有具有该地址映射的页表。通过这种方式，实现找到并清除下一个采样目标地址的位，并检查一个采样周期后该位是否再次被设置。这可能会干扰使用访问位的其他内核子系统，即空闲页面跟踪和回收逻辑。DAMON不做任何事情来避免干扰空闲页面跟踪，因此处理这种干扰是系统管理员的责任。然而，它使用与空闲页面跟踪相同的`PG_idle`和`PG_young`页面标志解决了与回收逻辑的冲突。
核心逻辑
========

监控
----

以下四个部分分别描述了DAMON的核心机制和五个监控属性：“采样间隔”、“聚合间隔”、“更新间隔”、“最小区域数”和“最大区域数”。

访问频率监控
~~~~~~~~~~~~~~

DAMON的输出说明了在给定时间内哪些页面被访问了多少次。访问频率的分辨率由设置“采样间隔”和“聚合间隔”来控制。具体来说，DAMON每“采样间隔”检查一次每个页面的访问情况，并汇总结果。换句话说，计算每个页面的访问次数。在每个“聚合间隔”结束后，DAMON调用之前由用户注册的回调函数，以便用户读取汇总结果并清空结果。可以用以下简单的伪代码表示：

    当监控开启时：
        对于监控目标中的每个页面：
            如果页面被访问：
                nr_accesses[页面] += 1
        如果时间() % 聚合间隔 == 0：
            对于每个用户注册的回调函数：
                回调函数(监控目标, nr_accesses)
            对于监控目标中的每个页面：
                nr_accesses[页面] = 0
        睡眠(采样间隔)

此机制的监控开销会随着目标工作负载大小的增加而任意增加。
.. _damon_design_region_based_sampling:

基于区域的采样
~~~~~~~~~~~~~~

为了避免开销无限制地增加，DAMON将相邻且假定具有相同访问频率的页面分组为一个区域。只要假设成立（区域内的页面具有相同的访问频率），只需要检查区域内的一张页面即可。因此，对于每个“采样间隔”，DAMON随机选择每个区域中的一页，等待一个“采样间隔”，检查这段时间内页面是否被访问，并如果被访问则增加该区域的访问频率计数器。这个计数器称为该区域的“nr_regions”。因此，通过设置区域的数量可以控制监控开销。DAMON允许用户设置最小和最大区域数量来进行权衡。
然而，如果假设不成立，此方案无法保持输出质量。

自适应区域调整
~~~~~~~~~~~~~~

即使初始监控目标区域很好地构建以满足假设（同一区域内的页面具有相似的访问频率），数据访问模式也可能动态变化。这将导致监控质量下降。为了尽可能保持假设，DAMON根据访问频率自适应地合并和拆分每个区域。对于每个“聚合间隔”，它比较相邻区域的访问频率，并在频率差异较小的情况下合并这些区域。然后，在报告并清除每个区域的聚合访问频率之后，如果拆分后的总区域数量不超过用户指定的最大区域数量，则将其拆分为两个或三个区域。
通过这种方式，DAMON 提供了尽力而为的质量和最小的开销，同时保持用户设定的权衡界限。

.. _damon_design_age_tracking:

年龄跟踪
~~~~~~~~~~~~

通过分析监控结果，用户还可以找到一个区域的当前访问模式已经维持了多长时间。这有助于更好地理解访问模式。例如，利用频率和最近性（recency）的页面放置算法可以使用这种方法实现。为了简化这种访问模式持续时间的分析，DAMON 在每个区域中维护了一个称为“年龄”（age）的计数器。对于每个“聚合间隔”，DAMON 检查该区域的大小和访问频率（`nr_accesses`）是否发生了显著变化。如果发生变化，则将计数器重置为零；否则，增加计数器。
动态目标空间更新处理
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

监控目标地址范围可能会动态改变。例如，虚拟内存可以动态映射和取消映射，物理内存可以热插拔。由于这些变化在某些情况下可能非常频繁，DAMON 允许监控操作检查动态变化（包括内存映射变化），并在用户指定的时间间隔（`更新间隔`）内将其应用于与监控操作相关的数据结构，如抽象的监控目标内存区域。
.. _damon_design_damos:

操作方案
-----------------

数据访问监控的一个常见目的是进行访问感知的系统效率优化。例如，

- 将超过两分钟未被访问的内存区域分页出去

或

- 对于大于 2 MiB 并且在过去一分钟内显示出高访问频率的内存区域使用透明大页（THP）

对于这类方案的一种直接方法是基于配置文件的优化。也就是说，使用 DAMON 获取工作负载或系统的数据访问监控结果，通过分析监控结果找到具有特殊特征的内存区域，并对这些区域进行系统操作更改。这些更改可以通过修改或提供对软件（应用程序和/或内核）的建议，或者重新配置硬件来完成。离线和在线方法均可使用。

在这些方法中，在运行时向内核提供建议是灵活且有效的，因此广泛被使用。然而，实施此类方案可能会导致不必要的冗余和低效。如果感兴趣类型很常见，那么配置文件的生成可能是冗余的。在内核和用户空间之间交换信息（包括监控结果和操作建议）可能会低效。

为了让用户通过卸载工作来减少这种冗余和低效，DAMON 提供了一种称为基于数据访问监控的操作方案（DAMOS）的功能。它允许用户以高层次的方式指定他们希望应用的方案。对于这样的规范，DAMON 开始监控，找到具有感兴趣的访问模式的区域，并在每个用户指定的时间间隔（`apply_interval`）内对该区域应用用户期望的操作动作。
.. _damon_design_damos_action:

操作动作
~~~~~~~~~~~~~~~~

用户希望对其感兴趣的区域应用的管理动作。例如，分页出去、优先考虑下次回收的受害者选择、建议 `khugepaged` 合并或拆分，或者仅仅是收集这些区域的统计信息而不做其他操作。
支持的操作列表在DAMOS中定义，但每个操作的具体实现位于DAMON操作集层，因为实现通常依赖于监控目标的地址空间。例如，特定虚拟地址范围的换出代码与物理地址范围的换出代码不同。此外，监控操作实现集不要求支持所有列出的操作。因此，特定DAMOS操作的可用性取决于所选择使用的一组操作。

支持的操作列表、其含义以及支持每个操作的DAMON操作集如下：

- ``willneed``：为该区域调用带有`MADV_WILLNEED`标志的`madvise()`
  受到`vaddr`和`fvaddr`操作集的支持

- ``cold``：为该区域调用带有`MADV_COLD`标志的`madvise()`
  受到`vaddr`和`fvaddr`操作集的支持

- ``pageout``：回收该区域
  受到`vaddr`、`fvaddr`和`paddr`操作集的支持

- ``hugepage``：为该区域调用带有`MADV_HUGEPAGE`标志的`madvise()`
  受到`vaddr`和`fvaddr`操作集的支持
- ``nohugepage``: 对该区域调用 ``madvise()`` 并设置 ``MADV_NOHUGEPAGE``
由 ``vaddr`` 和 ``fvaddr`` 操作集支持
- ``lru_prio``: 提高该区域在其 LRU 列表中的优先级
由 ``paddr`` 操作集支持
- ``lru_deprio``: 降低该区域在其 LRU 列表中的优先级
由 ``paddr`` 操作集支持
- ``stat``: 仅计数统计信息而不执行其他操作
由所有操作集支持

将除 ``stat`` 之外的操作应用于某个区域被视为改变了该区域的特性。因此，当对这些区域应用此类操作时，DAMOS 会重置这些区域的年龄。

.. _damon_design_damos_access_pattern:

目标访问模式
~~~~~~~~~~~~~~

方案感兴趣的访问模式。这些模式是根据 DAMON 监控结果提供的属性构建的，具体包括大小、访问频率和年龄。用户可以通过设置这三个属性的最小值和最大值来描述他们感兴趣的访问模式。如果一个区域的这三个属性在指定范围内，DAMOS 将其分类为该方案感兴趣的一个区域。
### 配额

#### 配额

DAMOS 提供的上限开销控制功能。如果目标访问模式没有适当调整，DAMOS 可能会产生较高的开销。例如，如果在一个具有感兴趣访问模式的大内存区域中应用该方案的动作，则可能会消耗大量系统资源。通过调整访问模式来防止这些问题可能具有挑战性，特别是在工作负载的访问模式高度动态变化的情况下。

为了缓解这种情况，DAMOS 提供了一个名为“配额”的上限开销控制功能。它允许用户指定 DAMOS 应用动作的时间上限和/或在用户指定的时间段内可应用动作的最大内存区域字节数。

#### 优先级

##### 优先级

一种在配额限制下做出良好决策的机制。当由于配额限制无法对所有感兴趣的区域应用动作时，DAMOS 会对这些区域进行优先级排序，并仅对具有足够高优先级的区域应用动作，以确保不超过配额。

优先级机制应根据不同的动作而有所不同。例如，对于页面置换（page-out）方案，很少被访问（较冷的）内存区域会被优先考虑；而在大页折叠（huge page collapse）方案中，较冷的区域则会被降级。因此，每个 DAMON 操作集中的每个动作都实现了相应的优先级机制。

虽然具体的实现取决于 DAMON 操作集，但通常会使用区域的访问模式属性来计算优先级。一些用户希望这些机制能够针对他们的具体情况个性化。例如，某些用户希望机制更多地考虑访问时间（`age`）而不是访问频率（`nr_accesses`）。DAMOS 允许用户指定每个访问模式属性的权重，并将这些信息传递给底层机制。然而，是否以及如何使用这些权重取决于底层优先级机制的实现。

#### 目标导向的反馈驱动自动调优

##### 目标导向的反馈驱动自动调优

自动反馈驱动的配额调优。用户可以指定他们感兴趣的度量指标及其目标值，DAMOS 将自动调整相应方案的激进程度（即配额）。例如，如果 DAMOS 未能达到目标，它将自动增加配额；如果 DAMOS 超过目标，则减少配额。

目标可以通过三个参数来定义：`target_metric`、`target_value` 和 `current_value`。自动调优机制试图使 `target_metric` 的 `current_value` 与 `target_value` 相等。

目前提供了两种 `target_metric`：

- `user_input`：用户提供的值。用户可以使用任何他们感兴趣的度量指标。例如，主工作负载的延迟或吞吐量、系统指标如空闲内存比例或内存压力停滞时间（PSI）等。需要注意的是，在这种情况下，用户需要显式设置 `current_value`。换句话说，用户需要反复提供反馈。
``some_mem_psi_us``：系统范围的“some”内存压力停顿信息，以微秒为单位，从上一次配额重置到下一次配额重置进行测量。
DAMOS 自行进行测量，因此用户只需在初始时设置 `target_value`。换句话说，DAMOS 进行自我反馈。

.. _damon_design_damos_watermarks:

水印
~~~~~~~~~~

条件性 DAMOS（启/禁用）自动化。用户可能希望仅在某些情况下运行 DAMOS。例如，在保证有足够的空闲内存的情况下，运行用于主动回收的方案只会消耗不必要的系统资源。为了避免这种消耗，用户需要手动监控一些指标，如空闲内存比例，并根据情况开启或关闭 DAMON/DAMOS。
DAMOS 允许用户通过三个水印来卸载此类工作。它允许用户配置他们感兴趣的指标和三个水印值，即高、中、低。如果指标的值高于高水印或低于低水印，则方案被禁用。如果指标的值低于中间水印但高于低水印，则方案被激活。如果所有方案都被水印禁用，则监控也会被禁用。在这种情况下，DAMON 工作线程仅周期性地检查水印，因此几乎不产生开销。

.. _damon_design_damos_filters:

过滤器
~~~~~~~

基于非访问模式的目标内存区域过滤。如果用户运行自编写的程序或拥有良好的剖析工具，他们可以了解内核之外的信息，比如未来的访问模式或特定类型内存的一些特殊要求。例如，有些用户可能知道只有匿名页面会影响其程序的性能。他们还可以有一份延迟敏感进程的列表。
为了让用户利用这些特殊知识优化 DAMOS 方案，DAMOS 提供了一个称为 DAMOS 过滤器的功能。该功能允许用户为每个方案设置任意数量的过滤器。每个过滤器指定目标内存的类型以及是否应排除该类型的内存（过滤出），还是除了该类型的所有内存（过滤入）。
为了高效处理过滤器，某些类型的过滤器由核心层处理，而其他类型的过滤器则由操作集处理。在后一种情况下，过滤器类型的支持取决于 DAMON 操作集。对于核心层处理的过滤器，被过滤器排除的内存区域不会计入方案尝试的区域。相反，如果内存区域被操作集层处理的过滤器过滤，则会被计入方案尝试。这种差异会影响统计数据。
目前支持以下类型的过滤器：
- 匿名页面
    - 应用于包含未存储在文件中的数据的页面
- 由操作集层处理。目前仅支持 `paddr` 集。
### 内存 cgroup
- 应用于属于某个特定 cgroup 的页面
- 由操作集层处理。仅支持 ``paddr`` 集

### 年轻页面
- 应用于在上次访问检查后被访问的页面
- 由操作集层处理。仅支持 ``paddr`` 集

### 地址范围
- 应用于属于某个特定地址范围的页面
- 由核心逻辑处理

### DAMON 监控目标
- 应用于属于某个特定 DAMON 监控目标的页面
- 由核心逻辑处理

### 应用程序编程接口
---------------------------------

内核空间数据访问感知应用程序的编程接口

DAMON 是一个框架，因此它本身不做任何事情。相反，它帮助其他内核组件（如子系统和模块）使用 DAMON 的核心特性构建数据访问感知的应用程序。为此，DAMON 通过其应用程序编程接口（即 ``include/linux/damon.h``）将其所有功能暴露给其他内核组件。请参阅 API 文档 :doc:`document </mm/damon/api>` 获取接口的详细信息。
### 模块
======

由于DAMON的核心是一个内核组件框架，因此它不提供任何直接的用户空间接口。此类接口应由每个使用DAMON API的内核组件来实现。相反，DAMON子系统本身实现了这样的DAMON API用户模块，这些模块旨在用于通用的DAMON控制和特定的数据访问感知系统操作，并为用户空间提供了稳定的二进制应用接口（ABI）。用户空间可以利用这些接口构建高效的数据访问感知应用程序。

### 通用用户界面模块
----------------------

这些DAMON模块在运行时为通用的DAMON使用提供了用户空间ABI。
DAMON用户界面模块，即“DAMON sysfs接口”和“DAMON debugfs接口”，是提供ABI给用户空间的DAMON API用户内核模块。请注意，DAMON debugfs接口目前已被弃用。

像许多其他ABI一样，这些模块在sysfs和debugfs中创建文件，允许用户通过写入和读取这些文件来指定请求并获取DAMON的响应。作为对这种I/O的响应，DAMON用户界面模块通过DAMON API控制DAMON并根据用户的请求检索结果，并将结果返回给用户空间。

这些ABI设计用于用户空间应用程序开发，而不是供人类手动使用。建议人类用户使用这样的用户空间工具。一个用Python编写的用户空间工具可以在GitHub（https://github.com/awslabs/damo）、PyPI（https://pypistats.org/packages/damo）和Fedora（https://packages.fedoraproject.org/pkgs/python-damo/damo/）上找到。

请参阅ABI文档：`<doc:/admin-guide/mm/damon/usage>`以了解接口的详细信息。

### 特定用途的数据访问感知内核模块
-------------------------------------------

这些DAMON模块为特定用途的DAMON使用提供了用户空间ABI。
DAMON sysfs/debugfs用户界面可以在运行时全面控制所有DAMON功能。对于特定的全局数据访问感知系统操作（如主动回收或LRU列表平衡），可以通过去除不必要的参数来简化接口，并扩展到引导时间和甚至编译时间控制。对于这些用途，还需要优化DAMON控制参数的默认值。

为了支持这些情况，还有更多的DAMON API用户内核模块提供更简单和优化的用户空间接口。目前，提供了两个用于主动回收和LRU列表操作的模块。更多细节，请阅读相应的使用文档（`<doc:/admin-guide/mm/damon/reclaim>` 和 `<doc:/admin-guide/mm/damon/lru_sort>`）。
