```
SPDX 许可证标识符: GPL-2.0

==========================
文件锁定发行说明
==========================

        Andy Walker <andy@lysaker.kvaerner.no>

                1997年5月12日

1. 新特性
==============

1.1 修复的 Flock 模拟
--------------------------

内核中旧的 flock(2) 模拟在 1.3.x 版本系列中被替换为兼容 BSD 的 flock(2) 支持。随着 2.1.x 内核系列的发布，对旧模拟的支持已完全移除，这样我们就不再需要永远携带这个包袱。
这不应该给任何人带来问题，因为使用 2.1.x 内核的用户应该已经将其 C 库更新到了合适的版本（参见文档文件 "Documentation/process/changes.rst"）。

1.2 再次允许混合锁
---------------------------

1.2.1 典型问题 - Sendmail
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
由于 Sendmail 无法使用旧的 flock() 模拟，许多 Sendmail 安装使用 fcntl() 而不是 flock()。例如，Slackware 3.0 就是如此。如果 Sendmail 配置为重建别名文件，则会引发一些其他微妙的问题。Sendmail 试图用 fcntl() 锁定 aliases.dir 文件，同时 GDBM 例程试图用 flock() 锁定此文件。在 1.3.96 之前的内核中，这可能导致死锁，随着时间的推移或在非常大的邮件负载下，最终会导致内核因死锁进程而卡住。
1.2.2 解决方案
^^^^^^^^^^^^^^
经过大量实验和讨论后，我选择的解决方案是让 flock() 和 fcntl() 锁互不干扰。两者可以共存，且彼此之间没有任何影响。
我希望这两种锁风格能够协同工作，但由于存在很多竞争条件和死锁情况，当前的解决方案是唯一可行的。这使我们处于与 SunOS 4.1.x 及其他几个商业 Unix 系统相同的位置。支持协作 flock()/fcntl() 的操作系统是那些使用 fcntl() 模拟 flock() 的系统，但这带来了所有相关的问题。

1.3 强制锁定作为挂载选项
---------------------------------------

强制锁定在此发布之前是一个通用配置选项，适用于所有已挂载的文件系统。这存在一些固有的危险，其中最严重的是通过请求具有强制锁的文件来冻结 NFS 服务器。
这种选项已在内核 v5.14 中移除。
```
