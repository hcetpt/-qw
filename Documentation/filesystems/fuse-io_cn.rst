SPDX 许可证标识符: GPL-2.0

==============
Fuse I/O 模式
==============

Fuse 支持以下 I/O 模式：

- 直接 I/O (direct-io)
- 缓存模式 (cached)
  + 写直达模式 (write-through)
  + 回写缓存模式 (writeback-cache)

直接 I/O 模式可以通过在 FUSE_OPEN 响应中使用 FOPEN_DIRECT_IO 标志来选择。在直接 I/O 模式下，读取和写入完全绕过页面缓存，不进行预读操作。默认情况下禁用共享 mmap。要允许共享 mmap，可以在 FUSE_INIT 响应中启用 FUSE_DIRECT_IO_ALLOW_MMAP 标志。

在缓存模式下，读取可以从页面缓存中满足，并且内核可能会提前读取数据以填充缓存。任何对文件的写入后都会保持缓存的一致性。所有 mmap 模式都得到支持。

缓存模式有两个子模式来控制如何处理写入。默认模式是写直达模式，并且在所有内核上都受支持。可以通过在 FUSE_INIT 响应中使用 FUSE_WRITEBACK_CACHE 标志来选择回写缓存模式。

在写直达模式下，每个写入会立即作为一条或多条 WRITE 请求发送到用户空间，并更新任何已缓存的页面（以及缓存之前未缓存但已完全写入的页面）。对于写入操作，不会发送任何 READ 请求，因此当一个未缓存的页面被部分写入时，该页面会被丢弃。

在回写缓存模式下（通过 FUSE_WRITEBACK_CACHE 标志启用），写入只进入缓存，这意味着 write(2) 系统调用通常可以非常快地完成。脏页面会在后台隐式地回写（例如，在内存压力下的背景回写或页面回收）或显式地回写（由 close(2)、fsync(2) 或在 munmap(2) 释放文件的最后一个引用时触发）。此模式假设对文件系统的所有更改都通过 Fuse 内核模块进行（大小和 atime/ctime/mtime 属性由内核维护），因此通常不适合网络文件系统。如果写入了一个部分页面，则需要首先从用户空间读取该页面。这意味着即使对于以 O_WRONLY 方式打开的文件，内核也可能生成 READ 请求。
