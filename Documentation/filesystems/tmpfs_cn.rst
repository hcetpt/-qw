SPDX 许可证标识符: GPL-2.0

=====
Tmpfs
=====

Tmpfs 是一种文件系统，它将所有文件都保存在虚拟内存中。
在 Tmpfs 中的一切都是临时的，这意味着不会在硬盘上创建任何文件。如果你卸载一个 Tmpfs 实例，其中存储的所有内容都会丢失。
Tmpfs 将所有内容放入内核内部缓存，并根据其包含的文件扩展或缩小大小。如果启用了 Tmpfs 挂载的交换功能，还可以将不需要的页面交换到交换空间。Tmpfs 还支持透明大页 (THP)。
与 ramfs 相比，Tmpfs 增加了一些用户空间可配置的选项，这些选项在下面进一步列出和解释。其中一些可以在挂载时动态重新配置（使用 `mount -o remount ...`）。一个 Tmpfs 文件系统可以调整大小，但不能调整到当前使用量以下。Tmpfs 还支持 POSIX 访问控制列表（ACL）以及 trusted.*、security.* 和 user.* 命名空间中的扩展属性。Ramfs 不使用交换空间，你也不能修改 ramfs 文件系统的任何参数。Ramfs 文件系统的大小限制是你可用的内存总量，因此使用时必须小心，以免耗尽内存。
另一种替代方案是使用 brd 创建 RAM 磁盘（/dev/ram*），这允许你在物理 RAM 中模拟块设备磁盘。为了写入数据，你只需要在这个 RAM 磁盘上创建一个常规文件系统即可。与 ramfs 类似，brd RAM 磁盘也不能进行交换。Brd RAM 磁盘在初始化时配置大小，你无法动态调整它们的大小。
与 brd RAM 磁盘不同的是，Tmpfs 有自己的文件系统，并不依赖于块层。
由于 Tmpfs 完全存在于页缓存中，并且可选地存在于交换空间中，所有 Tmpfs 页面在 /proc/meminfo 中都会显示为“Shmem”，在 free(1) 中会显示为“Shared”。请注意，这些计数器还包括共享内存（shmem，参见 ipcs(1)）。最可靠的方法是使用 df(1) 和 du(1) 来获取计数。
Tmpfs 的用途如下：

1) 总有一个内核内部挂载点，你完全看不到。这个挂载点用于共享匿名映射和 SYSV 共享内存。
这个挂载点并不依赖于 CONFIG_TMPFS。如果未设置 CONFIG_TMPFS，则不会构建用户可见部分的 Tmpfs。但是内部机制始终存在。
2) glibc 2.2 及以上版本期望在 `/dev/shm` 挂载 tmpfs 以支持 POSIX 共享内存（shm_open, shm_unlink）。在 `/etc/fstab` 中添加以下行可以解决这个问题：

```
tmpfs	/dev/shm	tmpfs	defaults	0 0
```

请记得创建你打算挂载 tmpfs 的目录（如果需要的话）。

此挂载对于 SYSV 共享内存来说是不必要的。内部挂载用于此目的。（在 2.3 内核版本中，为了使用 SYSV 共享内存，有必要挂载 tmpfs 的前身（shm fs）。）

3) 一些人（包括我）发现将 tmpfs 挂载到 `/tmp` 和 `/var/tmp` 并且拥有一个大的交换分区是非常方便的。现在对 tmpfs 文件的循环挂载已经可以工作了，因此大多数发行版提供的 mkinitrd 应该可以在 tmpfs `/tmp` 下成功运行。

4) 而且可能还有很多我不知道的东西 :-)

tmpfs 有三个用于调整大小的挂载选项：

=========  ============================================================
size       为这个 tmpfs 实例分配的字节限制。默认值是物理 RAM 的一半（不包括交换）。如果你过度设置 tmpfs 实例的大小，机器将会死锁，因为 OOM 处理器无法释放这些内存。
nr_blocks  与 size 相同，但以 PAGE_SIZE 大小的块为单位。
nr_inodes  该实例的最大inode数量。默认值是物理 RAM 页面数的一半，或者（在高内存机器上）低内存 RAM 页面数，取较小值。
=========  ============================================================

这些参数接受后缀 `k`、`m` 或 `g` 来表示千字节、兆字节和吉字节，并且可以在重新挂载时更改。size 参数还接受后缀 `%` 来限制此 tmpfs 实例占物理 RAM 的百分比：当未指定 size 或 nr_blocks 时，默认值是 size=50%。

如果 nr_blocks=0（或 size=0），则在该实例中不会限制块的数量；如果 nr_inodes=0，则不会限制 inode 的数量。通常情况下，使用这样的选项挂载是不明智的，因为这允许任何具有写权限的用户占用机器上的所有内存；但在多 CPU 系统中，大量使用该实例时会提高其可扩展性。如果 nr_inodes 不为 0，那么有限的 inode 空间也会被扩展属性所占用：“df -i”的 IUsed 和 IUse% 增加，IFree 减少。当内存不足时，tmpfs 块可能会被换出。

tmpfs 还有一个挂载选项来禁用其使用交换空间：

======  ===========================================================
noswap  禁用交换。重新挂载必须遵守原始设置。
默认情况下，交换是启用的。
======  ===========================================================
===== ========================================================================

tmpfs 还支持透明大页（Transparent Huge Pages），这需要一个配置了 CONFIG_TRANSPARENT_HUGEPAGE 的内核，并且系统支持大页（通过 has_transparent_hugepage() 检查，该函数是架构特定的）。挂载选项如下：

===== ==================================================================================
huge=never       不分配大页。这是默认设置。
huge=always      每次需要新页面时尝试分配大页。
huge=within_size 如果大页完全在 i_size 范围内，则分配大页。同时尊重 madvise(2) 提示。
huge=advise      只有在通过 madvise(2) 请求时才分配大页。
===== ==================================================================================

请参阅文档中的 `Documentation/admin-guide/mm/transhuge.rst`，其中描述了 sysfs 文件 `/sys/kernel/mm/transparent_hugepage/shmem_enabled`：可以在紧急情况下用于禁止所有 tmpfs 挂载的大页，或者在测试时强制所有 tmpfs 挂载使用大页。

tmpfs 还支持配额，并提供以下挂载选项：

======================== ===============================================================================
quota                    启用挂载点上的用户和组配额统计和强制执行。tmpfs 使用隐藏的系统配额文件，在挂载时初始化。
usrquota                 启用挂载点上的用户配额统计和强制执行。
grpquota                 启用挂载点上的组配额统计和强制执行。
======================== ===============================================================================

希望这些信息对你有帮助。
```plaintext
usrquota_block_hardlimit 设置全局用户磁盘块硬限制
usrquota_inode_hardlimit 设置全局用户inode硬限制
grpquota_block_hardlimit 设置全局组磁盘块硬限制
grpquota_inode_hardlimit 设置全局组inode硬限制
======================== =================================================

所有与配额相关的挂载选项都无法在重新挂载时设置或更改
配额限制参数接受后缀 k、m 或 g，分别表示千字节、兆字节和吉字节，并且不能在重新挂载时更改。默认的全局配额限制在首次访问用户/组/项目的配额条目时生效——通常是在挂载后首次创建具有特定 ID 的inode时。换句话说，这些限制不是初始化为零，而是用这些挂载选项提供的特定值进行初始化。对于任何用户/组 ID，可以在任何时候更改这些限制，就像通常可以做的那样。
请注意，tmpfs 配额不支持用户命名空间，因此如果在用户命名空间内启用了配额，则不会进行 UID/GID 转换。
如果启用了 CONFIG_NUMA，则 tmpfs 有一个用于设置该实例中所有文件的 NUMA 内存分配策略的挂载选项（可以通过 'mount -o remount ...' 动态调整）。

======================== ==============================================
mpol=default             使用进程分配策略
                         （参见 set_mempolicy(2)）
mpol=prefer:Node         优先从指定节点分配内存
mpol=bind:NodeList       仅从 NodeList 中的节点分配内存
mpol=interleave          依次从每个节点分配内存
mpol=interleave:NodeList 依次从 NodeList 中的每个节点分配内存
mpol=local               优先从本地节点分配内存
======================== ==============================================

NodeList 格式是一个由逗号分隔的十进制数字和范围列表，范围是由两个短横线分隔的两个十进制数字，表示范围内的最小和最大节点编号。例如，mpol=bind:0-3,5,7,9-15

具有有效 NodeList 的内存策略将按指定的方式保存，以便在文件创建时使用。当任务在文件系统中分配文件时，将应用挂载选项的内存策略，并根据调用任务的 cpuset 约束对 NodeList 进行修改（请参阅 Documentation/admin-guide/cgroup-v1/cpusets.rst）。如果结果 NodeList 是空集，则文件的有效内存策略将恢复为“default”策略。
NUMA 内存分配策略有可选标志，可以与它们的模式一起使用。这些可选标志可以在挂载 tmpfs 时通过在模式前加上它们并在 NodeList 前指定。请参阅 Documentation/admin-guide/mm/numa_memory_policy.rst 以获取所有可用的内存分配策略模式标志及其对内存策略的影响。
```
=static 等效于 MPOL_F_STATIC_NODES  
=relative 等效于 MPOL_F_RELATIVE_NODES  

例如，mpol=bind=static:NodeList 等效于分配策略 MPOL_BIND | MPOL_F_STATIC_NODES。请注意，如果当前内核不支持 NUMA，则尝试使用 mpol 选项挂载 tmpfs 将会失败；并且如果其节点列表指定了一个未在线的节点也会失败。如果你的系统依赖于该 tmpfs 被挂载，但偶尔运行的是没有 NUMA 功能的内核（可能是安全恢复内核），或者有较少的节点在线，那么建议从自动挂载选项中省略 mpol 选项。可以在 tmpfs 已经在 MountPoint 上挂载后，通过 'mount -o remount,mpol=Policy:NodeList MountPoint' 添加该选项。

要指定初始根目录，可以使用以下挂载选项：

====	==================================
mode	权限为八进制数字
uid	用户 ID
gid	组 ID
====	==================================

这些选项对重新挂载没有影响。你可以在已挂载的文件系统上使用 chmod(1)，chown(1) 和 chgrp(1) 更改这些参数。
tmpfs 有一个挂载选项来选择是否在 32 位或 64 位 inode 编号处循环：

=======   ========================
inode64   使用 64 位 inode 编号
inode32   使用 32 位 inode 编号
=======   ========================

在 32 位内核上，inode32 是隐式的，并且在挂载时拒绝 inode64。
在 64 位内核上，CONFIG_TMPFS_INODE64 设置默认值。inode64 避免了在同一设备上有多个具有相同 inode 编号的文件的可能性；但如果 32 位应用程序如此古老以至于打开大于 2GiB 的文件会失败，inode64 可能会在达到 33 位 inode 编号时导致 glibc 报错 EOVERFLOW。

因此，'mount -t tmpfs -o size=10G,nr_inodes=10k,mode=700 tmpfs /mytmpfs' 将为你在 /mytmpfs 上提供一个实例，它可以分配 10GB 的 RAM/SWAP，在 10240 个 inode 中，并且只有 root 用户可以访问。

:作者:
   Christoph Rohland <cr@sap.com>，版本 1.12.01
:更新:
   Hugh Dickins，2007 年 6 月 4 日
:更新:
   KOSAKI Motohiro，2010 年 3 月 16 日
:更新:
   Chris Down，2020 年 7 月 13 日
