XFS 维护者入门简介
============================

概述
--------
XFS 是 Linux 内核中一个知名的高性能文件系统。本项目的目标是提供并维护一个稳健且高性能的文件系统。补丁通常会被合并到相应 Git 仓库的 for-next 分支。经过一段时间的测试后，for-next 分支会被合并到 master 分支。内核代码会被合并到 xfs-linux 树[0]。用户空间代码会被合并到 xfsprogs 树[1]。测试用例会被合并到 xfstests 树[2]。磁盘格式文档会被合并到 xfs-documentation 树[3]。所有涉及 XFS 的补丁集必须完整地抄送给邮件列表 linux-xfs@vger.kernel.org。
角色
-----
XFS 项目中有八个关键角色：
一个人可以承担多个角色，而一个角色也可以由多个人来担任。
任何承担角色的人都应定期检查自己和他人的工作状态，以防过度劳累。

- **外部贡献者**：提交补丁但不经常参与XFS项目的人。
这些人通常是从事其他文件系统或内核社区其他方面工作的人员。

- **开发者**：熟悉XFS代码库并能编写新代码、文档和测试的人。
开发者通常可以在内核MAINTAINERS文件中的``C:``条目所提及的IRC频道中找到。

- **高级开发者**：非常熟悉XFS代码库的一部分和/或其他内核子系统的人。
这些人共同决定项目的长期目标，并推动社区朝着这个方向发展。
他们应该帮助确定每个发布周期的工作优先级并审查相关工作。
高级开发者往往是IRC频道中更活跃的参与者。
- **评审者**：评审者通常是开发者，他们阅读代码提交以决定：
  0. 提交的想法是否合理？
  1. 这个想法是否符合项目的目标？
  2. 提交的设计是否正确？
  3. 提交的内容是否经过了打磨？
  4. 提交的内容能否有效地进行测试？

  评审者应在内核和 fstests 的 MAINTAINERS 文件中通过 ``R:`` 条目来标识自己。

- **测试负责人**：这个人负责设定项目的测试覆盖率目标，与开发者协商以确定新功能的新测试，并确保开发者和发布经理执行测试。
  测试负责人应在 fstests MAINTAINERS 文件的 XFS 部分通过 ``M:`` 条目来标识自己。

- **Bug 分类员**：这个角色负责查看新进的 Bug 报告，以识别应将报告转发给的人。
  Bug 分类员应在内核的 MAINTAINERS 文件中通过 ``B:`` 条目来标识自己。

- **发布经理**：这个人将经过评审的补丁集合并入集成分支，在本地测试结果，将分支推送到公共 Git 仓库，并发送进一步的拉取请求。
  发布经理不期望处理新的功能补丁集。如果开发者和评审者在某个问题上未能达成一致，发布经理必须有能力介入以尝试解决问题。
  发布经理应在内核的 MAINTAINERS 文件中通过 ``M:`` 条目来标识自己。

- **社区经理**：这个人召集并主持尽可能多的 XFS 参与者的会议，当邮件列表讨论不足以进行集体决策时。
他们还可以作为赞助XFS任何部分工作的组织经理之间的联络人。

- **长期支持维护者（LTS Maintainer）**：负责将上游的错误修复回退并测试，然后应用到长期支持（LTS）内核的人。
任何时候通常会有六个不同的长期支持分支。
对于特定的长期支持版本，其维护者应在该LTS分支的`MAINTAINERS`文件中以“M:”条目标识自己。
无人维护的长期支持内核应在同一文件中标记为“S: Orphan”。

提交检查清单补充说明
-----------------------
向XFS提交时，请遵循以下附加规则：

- 只影响文件系统本身的补丁应基于最新的-rc或for-next分支。
这些补丁将被合并到for-next分支。
- 影响其他子系统的补丁作者需要与XFS及其相关子系统的维护者协调，以决定如何进行合并。
- 任何改变XFS的补丁集应完整地抄送给linux-xfs。
不要发送部分补丁集；这会使分析变更的整体上下文变得不必要的困难。
- 任何对内核进行更改并涉及相应用户空间工具更改的人，应在提交内核补丁集之后立即以单独的补丁集提交用户空间更改。
- 虫子修复补丁的作者应使用fstests[2]执行A/B测试，以确定补丁不会引入回归。
- 在可能的情况下，应为fstests编写一个新的回归测试用例。
- 新功能补丁集的作者必须确保fstests包含针对新功能的适当的功能性和输入边缘情况测试用例。
- 实现新功能时，强烈建议开发人员编写设计文档来回答以下问题：

  * **要解决的问题是什么？**

  * **谁将从这个解决方案中受益？他们将在哪里访问它？**

  * **这个新功能将如何工作？** 这应该在代码注释之上更高层次地讨论支持解决方案的主要数据结构和算法。
  * 实现新功能所需的用户空间接口有哪些？

  * **如何测试这项工作以确保它解决了设计文档中提出的问题而不引发新的问题？**

  设计文档应提交到内核文档目录中。如果该功能已经为社区所熟知，则可以省略设计文档。
- 新测试的补丁集应作为单独的补丁集，在提交内核和用户空间代码补丁集之后立即提交。
- 对XFS磁盘格式的更改必须在磁盘格式文档[3]中描述，并在提交fstests补丁集之后提交为一个补丁集。
- 实现虫子修复和进一步代码清理的补丁集应将虫子修复放在系列的开头，以便于回退。
关键发布周期日期
-----------------------
错误修复可以在任何时候提交，但是当下一个合并窗口即将开启时，发布管理者可能会决定推迟某个补丁的合并。
针对下一个合并窗口的代码提交应在-rc1到-rc6之间发送。
这为社区提供了审查更改、提出其他更改建议以及作者重新测试这些更改的时间。
同时需要对fs/iomap进行更改并针对下一个合并窗口的代码提交应在-rc1到-rc4之间发送。
这使得更广泛的内核社区有足够的时间来测试基础设施的更改。

审查节奏
--------------
通常，请在请求反馈之前至少等待一周。
要找到评审者，可以查阅MAINTAINERS文件，或者请那些有Reviewed-by标签的XFS变更开发者查看并提供他们的意见。

参考链接
----------
| [0] https://git.kernel.org/pub/scm/fs/xfs/xfs-linux.git/
| [1] https://git.kernel.org/pub/scm/fs/xfs/xfsprogs-dev.git/
| [2] https://git.kernel.org/pub/scm/fs/xfs/xfstests-dev.git/
| [3] https://git.kernel.org/pub/scm/fs/xfs/xfs-documentation.git/
