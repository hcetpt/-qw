SPDX 许可证标识符: GPL-2.0

布局
------

标准块组的布局大致如下（每个字段将在下面单独讨论）：

|  组0填充 | ext4超级块 | 块组描述符 | 预留GDT块 | 数据块位图 | inode位图 | inode表 | 数据块 |
| --- | --- | --- | --- | --- | --- | --- | --- |
| 1024字节 | 1个块 | 多个块 | 多个块 | 1个块 | 1个块 | 多个块 | 更多块 |

对于特殊的块组0，前1024字节未使用，以便安装x86引导扇区和其他特殊需求。超级块将从1024字节偏移处开始，无论这个块是哪一个（通常是第0块）。然而，如果由于某种原因块大小=1024字节，则标记块0为已使用，超级块位于第1块中。对于所有其他块组，没有填充。

ext4驱动程序主要处理位于块组0中的超级块和块组描述符。为了防止磁盘开头部分被破坏，超级块和块组描述符的冗余副本会写入磁盘上的一些块组中，但并非所有块组都包含冗余副本（详见下文）。如果没有冗余副本，块组则以数据块位图开始。需要注意的是，在文件系统新格式化时，mkfs会在块组描述符之后、位图之前分配“预留GDT块”空间，以便将来扩展文件系统。默认情况下，文件系统允许增长到原始大小的1024倍。

inode表的位置由`grp.bg_inode_table_*`给出。它是一个足够大的连续块范围，可以容纳`sb.s_inodes_per_group * sb.s_inode_size`字节。

关于块组中项目的顺序，通常规定超级块和块组描述符表（如果存在）位于块组的开头。位图和inode表可以位于任何位置，并且位图可能在inode表之后，或者两者位于不同的组（flex_bg）。剩余的空间用于文件数据块、间接块映射、范围树块和扩展属性。

灵活块组
---------------------

从ext4开始，引入了一个名为灵活块组（flex_bg）的新功能。在flex_bg中，几个块组作为单个逻辑块组绑定在一起；flex_bg中第一个块组的位图空间和inode表空间扩展以包括flex_bg中所有其他块组的位图和inode表。例如，如果flex_bg大小为4，则第0组将包含（按顺序）超级块、块组描述符、0-3组的数据块位图、0-3组的inode位图、0-3组的inode表，以及第0组的剩余空间用于文件数据。这样做的效果是将块组元数据紧密分组在一起以加快加载速度，并使大文件在磁盘上连续存储。即使启用了flex_bg，超级块和块组描述符的备份始终位于块组的开头。组成一个flex_bg的块组数量由`2 ^ sb.s_log_groups_per_flex`给出。

元块组
-----------------

如果不启用META_BG选项，出于安全考虑，所有块组描述符副本都保存在第一个块组中。考虑到默认的128MB（2^27字节）块组大小和64字节的组描述符，ext4最多可以有2^27/64 = 2^21个块组。这限制了整个文件系统的大小为2^21 * 2^27 = 2^48字节或256TiB。

解决此问题的方法是使用元块组（META_BG）功能，该功能已经在ext3的所有2.6版本中提供。使用META_BG功能，ext4文件系统被划分为多个元块组。每个元块组是一组块组，其组描述符结构可以存储在一个磁盘块中。对于具有4KB块大小的ext4文件系统，一个元块组分区包含64个块组，即8GB的磁盘空间。元块组功能将组描述符的位置从整个文件系统的拥挤的第一个块组移动到每个元块组的第一个组。备份位于每个元块组的第二个和最后一个组中。这将最大块组数从2^21增加到硬限制2^32，支持512PiB的文件系统。

文件系统格式的变化取代了当前的方案，即超级块后面跟着一组可变长度的块组描述符。相反，超级块和一个块组描述符块放置在元块组的第一个、第二个和最后一个块组的开头。元块组是一组可以用一个块组描述符块描述的块组。由于块组描述符结构的大小为64字节，对于具有1KB块大小的文件系统，一个元块组包含16个块组；对于具有4KB块大小的文件系统，包含64个块组。文件系统既可以使用这种新的块组描述符布局创建，也可以在线调整现有文件系统的大小，超级块中的`s_first_meta_bg`字段将指示使用这种新布局的第一个块组。
请参阅关于“BLOCK_UNINIT”的重要注释，位于块和inode位图部分。

懒惰的块组初始化
------------------

ext4 的一个新特性是三个块组描述符标志，这些标志允许 `mkfs` 跳过初始化块组元数据的其他部分。具体来说，INODE_UNINIT 和 BLOCK_UNINIT 标志表示该组的inode位图和块位图可以被计算出来，因此磁盘上的位图块不需要被初始化。这通常适用于空的块组或仅包含固定位置块组元数据的块组。INODE_ZEROED 标志表示inode表已经被初始化；`mkfs` 会取消设置这个标志，并依赖内核在后台初始化inode表。
通过不向位图和inode表写入零值，`mkfs` 的时间显著减少。请注意，此功能标志为 RO_COMPAT_GDT_CSUM，但 `dumpe2fs` 输出将其打印为“uninit_bg”。它们实际上是相同的概念。
