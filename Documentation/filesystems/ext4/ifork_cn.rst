SPDX 许可证标识符: GPL-2.0

inode.i_block 的内容
------------------------

根据节点描述的文件类型，inode.i_block 中的 60 字节存储空间可以有不同的用途。一般来说，普通文件和目录会使用它来存储文件块索引信息，而特殊文件则会用作特殊用途。

符号链接
~~~~~~~~~~~~~~

如果目标字符串长度小于 60 字节，则符号链接的目标将存储在此字段中。否则，将使用扩展区或块映射来分配数据块以存储链接目标。

直接/间接块寻址
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

在 ext2/3 中，文件块编号通过最多三层的一对一块映射来转换为逻辑块编号。为了找到存储特定文件块的逻辑块，代码需要遍历这个越来越复杂的结构。需要注意的是，这里既没有魔数也没有校验和来提供任何信心保证这些块不是垃圾数据。

.. ifconfig:: builder != 'latex'

   .. include:: blockmap.rst

.. ifconfig:: builder == 'latex'

   [由于 LaTeX 不支持嵌套表格，因此省略了此表。]

请注意，使用这种块映射方案时，即使是大型连续文件也需要填充大量的映射数据！这种低效导致了扩展映射方案的创建，如下所述。

此外，请注意，使用这种映射方案的文件不能放置在超过 2^32 块的位置上。

扩展树
~~~~~~~~~~~

在 ext4 中，文件到逻辑块的映射已经被扩展树所取代。在旧方案下，分配一个连续的 1000 块需要一个间接块来映射所有 1000 个条目；而在使用扩展的情况下，映射被简化为单个 `struct ext4_extent`，其中 `ee_len = 1000`。如果启用了 flex_bg，那么可以使用单个扩展来分配非常大的文件，从而显著减少元数据块的使用，并提高磁盘效率。节点必须设置扩展标志（0x80000）才能启用此功能。

扩展按树状结构排列。树中的每个节点都以 `struct ext4_extent_header` 开始。如果该节点是内部节点（`eh.eh_depth` > 0），则头后面跟着 `eh.eh_entries` 个 `struct ext4_extent_idx` 实例；每个索引条目指向包含更多扩展树节点的一个块。如果该节点是叶节点（`eh.eh_depth == 0`），则头后面跟着 `eh.eh_entries` 个 `struct ext4_extent` 实例；这些实例指向文件的数据块。扩展树的根节点存储在 `inode.i_block` 中，这允许前四个扩展无需使用额外的元数据块即可记录。

扩展树的头部记录在 `struct ext4_extent_header` 中，其长度为 12 字节：

.. list-table::
   :widths: 8 8 24 40
   :header-rows: 1

   * - 偏移量
     - 大小
     - 名称
     - 描述
   * - 0x0
     - __le16
     - eh_magic
     - 魔数，0xF30A
* - 0x2
     - __le16
     - eh_entries
     - 头部后跟随的有效条目数量
* - 0x4
     - __le16
     - eh_max
     - 可能跟随头部的最大条目数量
* - 0x6
     - __le16
     - eh_depth
     - 此范围节点在范围树中的深度。0 表示此范围节点指向数据块；否则，此范围节点指向其他范围节点。范围树最多可以有 5 层深：逻辑块号最大为 `2^32`，满足 `4*(((blocksize - 12)/12)^n) >= 2^32` 的最小的 `n` 是 5。
* - 0x8
     - __le32
     - eh_generation
     - 树的代数。（由 Lustre 使用，但不是标准 ext4）

范围树的内部节点（也称为索引节点）记录为 `struct ext4_extent_idx`，长度为 12 字节：

.. list-table::
   :widths: 8 8 24 40
   :header-rows: 1

   * - 偏移量
     - 大小
     - 名称
     - 描述
   * - 0x0
     - __le32
     - ei_block
     - 此索引节点覆盖从 'block' 开始的文件块
* - 0x4
     - __le32
     - ei_leaf_lo
     - 树中下一层范围节点的块号低 32 位。指向的节点可以是另一个内部节点或下面描述的叶节点
* - 0x8
     - __le16
     - ei_leaf_hi
     - 上一个字段的高 16 位
* - 0xA
     - __u16
     - ei_unused
     -

范围树的叶节点记录为 `struct ext4_extent`，长度也为 12 字节：

.. list-table::
   :widths: 8 8 24 40
   :header-rows: 1

   * - 偏移量
     - 大小
     - 名称
     - 描述
   * - 0x0
     - __le32
     - ee_block
     - 此范围覆盖的第一个文件块号
* - 0x4
     - __le16
     - ee_len
     - 范围覆盖的块数。如果此字段的值 <= 32768，则范围已初始化。如果字段的值 > 32768，则范围未初始化，实际的范围长度为 `ee_len` - 32768。因此，已初始化范围的最大长度为 32768 块，未初始化范围的最大长度为 32767 块。
* - 0x6
     - __le16
     - ee_start_hi
     - 此范围指向的块号的高 16 位
* - 0x8
     - __le32
     - ee_start_lo
     - 此范围指向的块号的低 32 位

在引入元数据校验和之前，范围头 + 范围条目始终在每个范围树数据块末尾留至少 4 字节的未分配空间（因为 (2^x % 12) >= 4）。因此，32 位校验和被插入到这个空间中。inode 中的 4 个范围不需要校验和，因为 inode 已经经过了校验。
校验和是根据文件系统UUID、inode编号、inode生成号以及整个范围块（但不包括校验和本身）计算得出的。

``struct ext4_extent_tail`` 结构体长度为4字节：

.. list-table::
   :widths: 8 8 24 40
   :header-rows: 1

   * - 偏移量
     - 大小
     - 名称
     - 描述
   * - 0x0
     - __le32
     - eb_checksum
     - 范围块的校验和，crc32c(uuid + inum + igeneration + extentblock)

内联数据
~~~~~~~~~~~

如果文件系统的内联数据功能已启用，并且inode设置了相应的标志，则文件的前60个字节的数据可能会存储在这里。
