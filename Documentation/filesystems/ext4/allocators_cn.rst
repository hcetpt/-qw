SPDX 许可证标识符: GPL-2.0

块和inode分配策略
------------------

ext4 比 ext3 更好地认识到数据局部性通常是文件系统的一个理想特性。在机械硬盘上，将相关块保持在一起可以减少磁头执行器和磁盘为了访问数据块而需要移动的距离，从而加快磁盘 I/O 速度。在固态硬盘（SSD）上，虽然没有活动部件，但局部性可以增加每次传输请求的大小，同时减少总请求数量。这种局部性还可能使写入集中在单个擦除块中，这可以显著加快文件重写的速度。因此，尽可能减少碎片是非常有用的。

ext4 用来对抗碎片的第一个工具是多块分配器。当文件首次创建时，块分配器会推测性地为文件分配 8 KiB 的磁盘空间，假设这些空间很快会被写入。当文件关闭时，未使用的推测性分配当然会被释放，但如果猜测正确（通常对于小文件的全写操作是这样），那么文件数据将以单一的多块范围被写入。ext4 使用的第二个相关技巧是延迟分配。在这种方案下，当文件需要更多块来吸收文件写入时，文件系统会推迟决定在磁盘上的确切放置位置，直到所有脏缓冲区被写入磁盘。通过不在绝对必要时（如提交超时、调用 sync() 或内核内存耗尽）做出特定放置决策，希望文件系统能够做出更好的位置决策。

第三个技巧是 ext4（以及 ext3）尝试将文件的数据块保留在其 inode 所在的同一块组中。这减少了文件系统在首次读取文件的 inode 以了解文件数据块的位置，然后寻址到文件的数据块开始 I/O 操作时的寻道开销。

第四个技巧是在可行的情况下，目录中的所有 inode 都被放置在同一块组中。这里的假设是目录中的所有文件都可能相关，因此尝试将它们保持在一起是有用的。

第五个技巧是将磁盘卷分割成 128 MB 的块组；这些迷你容器用于如上所述尝试维持数据局部性。然而，有一个刻意的设计——当在根目录中创建目录时，inode 分配器会扫描块组并将该目录放入最不繁忙的块组。这鼓励目录在整个磁盘上分布开来；随着顶级目录/文件块填满一个块组，分配器会简单地转移到下一个块组。据说这种方案可以均衡块组上的负载，尽管作者怀疑那些不幸落在机械硬盘末尾的目录在性能上吃了亏。

当然，如果所有这些机制都失败了，还可以使用 e4defrag 来进行文件去碎片处理。
