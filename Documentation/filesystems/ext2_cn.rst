SPDX 许可证标识符: GPL-2.0


==============================
第二个扩展文件系统
==============================

ext2 最初发布于 1993 年 1 月。由 Remy Card、Theodore Ts'o 和 Stephen Tweedie 开发，它是对扩展文件系统的重大重写。截至 2001 年 4 月，它仍然是 Linux 中最主要的文件系统。此外，NetBSD、FreeBSD、GNU HURD、Windows 95/98/NT、OS/2 和 RISC OS 也都有其实现。

选项
=======

大多数默认值由文件系统的超级块确定，并且可以使用 tune2fs(8) 进行设置。内核决定的默认值用 (*) 表示。
====================    ===     ================================================
bsddf			(*)	使 `df` 行为像 BSD
minixdf				使 `df` 行为像 Minix
check=none, nocheck	(*)	在挂载时不进行额外的位图检查
				（check=normal 和 check=strict 选项已移除）

dax				使用直接访问（不使用页缓存）。详见
				Documentation/filesystems/dax.rst
debug				发送额外调试信息到内核日志系统。对于开发者有用
errors=continue			在文件系统错误时继续运行
errors=remount-ro		在错误时将文件系统重新挂载为只读
errors=panic			在发生错误时恐慌并停止机器
grpid, bsdgroups		给对象与其父目录相同的组 ID
nogrpid, sysvgroups       新对象将具有创建者的组ID。
nouid32               使用16位的UID和GID。
oldalloc              启用旧的块分配器。Orlov应该有更好的性能，我们希望得到您的反馈，如果它对您来说表现不佳的话。
orlov                (*) 使用Orlov块分配器
（参见 http://lwn.net/Articles/14633/ 和 http://lwn.net/Articles/14446/.）

resuid=n              可以使用预留块的用户ID。
resgid=n              可以使用预留块的组ID。
sb=n                  在此位置使用备用超级块。
user_xattr            启用“user.” POSIX扩展属性（需要CONFIG_EXT2_FS_XATTR）。
nouser_xattr          不支持“user.” 扩展属性。
acl                   启用POSIX访问控制列表支持（需要CONFIG_EXT2_FS_POSIX_ACL）。
noacl                不支持 POSIX 访问控制列表 (ACL)
quota, usrquota      启用用户磁盘配额支持
                （需要 CONFIG_QUOTA）
grpquota             启用组磁盘配额支持
                （需要 CONFIG_QUOTA）

====================    ===     ================================================
noquota 选项在 ext2 中被静默忽略
规范
=============

ext2 与传统的 Unix 文件系统有许多共同的特性。它具有块、inode 和目录的概念。虽然目前尚未实现，但其规范中预留了访问控制列表（ACL）、碎片、未删除和压缩的空间（有些功能可以通过单独的补丁获得）。此外，还有一个版本机制，允许以最大限度兼容的方式添加新功能（如日志记录）。
块
------

设备或文件中的空间被分割成块。这些块的大小是固定的，为 1024、2048 或 4096 字节（Alpha 系统上为 8192 字节），在创建文件系统时决定。较小的块意味着每个文件浪费的空间较少，但也需要稍微更多的管理开销，并且对文件和文件系统的大小施加了其他限制。
块组
------------

为了减少碎片并尽量减少读取大量连续数据时的磁头移动，块被聚集成块组。每个块组的信息存储在一个描述符表中，该表位于超级块之后的块中。
每个块组开始附近有两个块被保留用于块使用位图和 inode 使用位图，这些位图显示哪些块和 inode 正在使用。由于每个位图限于单个块，这意味着块组的最大大小是块大小的 8 倍。
每个块组中的位图后面的块被指定为该块组的 inode 表，其余部分是数据块。块分配算法试图将数据块分配到包含它们的 inode 所在的相同块组中。
超级块
--------------

超级块包含了有关文件系统配置的所有信息。超级块的主要副本存储在设备起始位置偏移 1024 字节处，对于挂载文件系统至关重要。由于它如此重要，因此在文件系统中的各个块组中存储了超级块的备份副本。
ext2文件系统的第一个版本（修订版0）在每个块组的开始处存储一个副本，同时备份组描述符块。由于这对大型文件系统来说会占用大量空间，后来的修订版可以选择性地减少备份副本的数量，只在特定的组中放置备份（这是稀疏超级块功能）。所选的组为0、1以及3、5和7的幂次。

超级块中的信息包含了一些字段，如文件系统中的inode总数和块数以及它们的空闲数量，每个块组中的inode和块的数量，文件系统挂载的时间（及其是否被干净地卸载），修改时间，文件系统的版本（见下面的修订部分）以及创建它的操作系统。

如果文件系统是修订版1或更高版本，则会有额外的字段，如卷名、唯一识别号、inode大小以及用于存储可选文件系统功能以保存配置信息的空间。

超级块中的所有字段（如同ext2结构中的其他部分）都以小端格式存储在磁盘上，因此可以在不知道文件系统是在哪个机器上创建的情况下，在不同机器之间进行移植。

### Inode

inode（索引节点）是ext2文件系统中的基本概念。文件系统中的每个对象都由一个inode表示。inode结构包含了指向该对象数据所在的文件系统块的指针以及关于该对象的所有元数据，除了名称。这些元数据包括权限、所有者、所属组、标志、大小、使用的块数、访问时间、更改时间、修改时间、删除时间、链接数、碎片、版本（适用于NFS）及扩展属性（EAs）和/或访问控制列表（ACLs）。

inode结构中有一些目前未使用的保留字段和几个重载字段。其中一个字段保留用于目录ACL（如果inode是目录），或者用于普通文件时作为文件大小的高32位（允许文件大小超过2GB）。在Linux下，translator字段未使用，但在HURD中用于引用将用于解释此对象的程序的inode。大多数剩余的保留字段已经在Linux和HURD中用于更大的所有者和组字段。HURD还有一个更大的模式字段，因此它使用另一个剩余字段来存储额外的更多位。

inode中包含指向包含文件数据的第一个12个块的指针。有一个间接块指针（其中包含指向下一组块的指针）、一个双间接块指针（其中包含指向间接块的指针）以及一个三重间接块指针（其中包含指向双间接块的指针）。

标志字段包含一些标准chmod标志未涵盖的ext2特定标志。这些标志可以使用lsattr列出，并通过chattr命令更改，允许对每个文件进行特定的文件系统行为设置。这些标志包括安全删除、不可删除、压缩、同步更新、不可变性、追加只读、可转储、不记录访问时间、索引目录以及数据日志记录。并非所有这些功能都已支持。
目录
------------

目录是一个文件系统对象，和文件一样具有inode。它是一种特殊格式的文件，包含将每个名称与inode编号关联的记录。后来的文件系统版本还编码了对象类型（文件、目录、符号链接、设备、fifo、套接字），以避免需要检查inode本身获取这些信息（Glibc 2.2尚不支持利用此功能）。inode分配代码试图为新创建的目录中的inode分配同一个块组内的inode。

ext2的当前实现使用单链表来存储目录中的文件名；一个待定的增强功能是使用哈希算法来查找文件名，从而无需扫描整个目录。当前实现从不删除已分配用于存放更多文件的空目录块。

特殊文件
------------

符号链接也是具有inode的文件系统对象。它们值得特别提及，因为如果符号链接小于60字节，则其数据会存储在inode本身内。它使用了通常用来存储指向数据块指针的字段。这是一个有价值的优化，因为我们避免为符号链接分配一个完整的块，而大多数符号链接都小于60个字符。

字符和块特殊设备从不分配数据块。相反，它们的设备号存储在inode中，再次重用了通常用来指向数据块的字段。

预留空间
------------

在ext2中，有一种机制可以为特定用户（通常是超级用户）预留一定数量的块。这是为了即使非特权用户占满了他们可用的所有空间，系统仍能继续运行（这独立于文件系统配额）。这也防止了文件系统的完全填满，有助于减少碎片化。

文件系统检查
------------

启动时，大多数系统会对文件系统运行一致性检查（e2fsck）。ext2文件系统的超级块包含几个字段，指示是否应该运行fsck（因为如果文件系统很大，在启动时进行检查可能需要很长时间）。如果文件系统没有干净卸载，或者达到最大挂载次数，或者超过最大检查时间间隔，fsck将会运行。
特性兼容性
---------------------

ext2 使用的特性兼容机制非常复杂。它安全地允许向文件系统添加新特性，同时不会牺牲与旧版本文件系统代码的兼容性。最初的修订版 0（EXT2_GOOD_OLD_REV）不支持此特性兼容机制，但该机制在修订版 1 中被引入。有三个 32 位字段：一个用于兼容特性（COMPAT），一个用于只读兼容特性（RO_COMPAT），一个用于不兼容特性（INCOMPAT）。这些特性标志对内核具有特定的意义：

- COMPAT 标志表示文件系统中存在某个特性，但磁盘格式与旧的磁盘格式完全兼容，因此不知道该特性的内核仍然可以读写文件系统，而不会损坏文件系统（或使其变得不一致）。这基本上是一个标志，表示“这个文件系统有一个（隐藏的）特性”，内核或 e2fsck 可能需要了解（稍后会详细介绍 e2fsck 和特性标志）。ext3 的 HAS_JOURNAL 特性是一个 COMPAT 标志，因为 ext3 日志只是一个包含数据块的普通文件，因此如果内核不了解 ext3 日志，也不需要特别注意。
- RO_COMPAT 标志表示磁盘格式对于读取是完全兼容的（即该特性不会改变可见的磁盘格式）。但是，旧内核向此类文件系统写入数据时可能会损坏文件系统，因此这是不允许的。最常见的此类特性是 SPARSE_SUPER，因为它允许超级块/组描述符备份所在的位置存储文件数据块，而 ext2_free_blocks() 拒绝释放这些块，这会导致位图不一致。旧内核如果尝试释放一组跨越组边界的块，也会出错，但在 SPARSE_SUPER 文件系统中这是合法布局。
- INCOMPAT 标志表示磁盘格式发生了某种变化，使得旧内核无法读取或会在尝试挂载时出现问题。FILETYPE 是一个 INCOMPAT 标志，因为旧内核会认为文件名长度超过 256 个字符，这会导致目录列表损坏。COMPRESSION 标志显然是一个 INCOMPAT 标志，因为如果内核不理解压缩，从 read() 返回的数据将是垃圾而不是自动解压缩的数据。ext3 的 RECOVER 标志是为了防止不了解 ext3 日志的内核在未重播日志的情况下挂载文件系统。

对于 e2fsck，处理这些标志需要比内核更严格。如果它不理解任何 COMPAT、RO_COMPAT 或 INCOMPAT 标志，则会拒绝检查文件系统，因为它无法验证给定特性是否有效。允许 e2fsck 在未知特性的文件系统上成功运行会给用户一种虚假的安全感。拒绝检查具有未知特性的文件系统是促使用户更新到最新 e2fsck 的良好激励。这也意味着任何向 ext2 添加特性标志的人都需要更新 e2fsck 以验证这些特性。

元数据
--------

经常有人声称 ext2 实现的异步元数据写入比 ffs 的同步元数据方案更快但可靠性较低。这两种方法都可以通过各自的 fsck 程序解决。如果你特别担心，可以通过以下三种方式使 ext2 的元数据写入同步：

- 按文件进行同步（如果有程序源码）：使用 O_SYNC 标志打开文件
- 按文件进行同步（如果没有源码）：使用 "chattr +S" 命令设置文件属性
- 按文件系统进行同步：在挂载选项中添加 "sync"（或在 /etc/fstab 中设置）

前两种和最后一种方法不是 ext2 特有的，但确实强制元数据同步写入。有关更多详细信息，请参阅下面的日志记录部分。

限制
-----------

ext2 的磁盘布局施加了各种限制。其他限制则由当前内核代码实现所施加。
许多限制是在文件系统首次创建时确定的，并且取决于所选择的块大小。inode与数据块的比例在文件系统创建时是固定的，因此增加inode数量的唯一方法是扩大文件系统的大小。目前没有任何工具可以改变inode与块的比例。通过稍微修改磁盘上的格式并使用兼容性标志来指示格式变化，大多数这些限制都可以克服（但这会牺牲一些兼容性）。

| 文件系统块大小 | 1kB | 2kB | 4kB | 8kB |
|----------------|-----|-----|-----|-----|
| 文件大小限制   | 16GB | 256GB | 2048GB | 2048GB |
| 文件系统大小限制 | 2047GB | 8192GB | 16384GB | 32768GB |

目前内核2.4版本对单个块设备的限制为2048GB，因此目前无法创建超过这个大小的文件系统。内核的页面大小也对块大小施加了上限，因此8kB的块只允许在Alpha系统上使用（以及其他支持更大页面的架构）。一个目录中的子目录数量上限为32000个。当前线性链表目录实现下，单个目录中的文件数量有一个“软”上限，大约为10-15K个。这一限制源于在创建、删除以及查找文件时在如此大的目录中出现的性能问题。使用哈希目录索引（正在开发中）可以在单个目录中容纳100K-1M+个文件而不会出现性能问题（尽管此时RAM大小成为一个问题）。单个目录中的文件绝对上限（由于文件大小的限制，实际的上限显然要低得多）超过130万亿个。之所以没有更高是因为没有足够的4字符名称来组成唯一的目录条目，因此必须使用8字符的文件名，即便如此，我们已经相当接近用尽所有唯一文件名的情况。

### 日志记录

Stephen Tweedie 开发了一个针对ext2代码的日志扩展。它避免了元数据损坏的风险，并且不需要在崩溃后等待e2fsck完成检查，同时也不需要更改磁盘上的ext2布局。简而言之，日志是一个普通的文件，用于存储被修改过的整个元数据（和可选的数据）块，在写入文件系统之前。这意味着可以在不进行数据转换的情况下将日志添加到现有的ext2文件系统中。当对文件系统进行更改（例如重命名文件）时，这些更改会以事务的形式存储在日志中，并且在崩溃时要么是完整的要么是不完整的。如果一个事务在崩溃时是完整的（或正常情况下系统没有崩溃），则该事务中的任何块都保证代表一个有效的文件系统状态，并被复制到文件系统中。如果一个事务在崩溃时是不完整的，则该事务中的块没有一致性保证，因此会被丢弃（这意味着它们所代表的任何文件系统更改也会丢失）。

如需了解更多关于ext4和日志的信息，请查阅 `Documentation/filesystems/ext4/`。
参考文献
==========

=======================	===============================================
内核源码文件           /usr/src/linux/fs/ext2/
e2fsprogs（e2fsck）      http://e2fsprogs.sourceforge.net/
设计与实现             http://e2fsprogs.sourceforge.net/ext2intro.html
日志记录（ext3）         ftp://ftp.uk.linux.org/pub/linux/sct/fs/jfs/
文件系统扩展            http://ext2resize.sourceforge.net/
压缩 [1]_                http://e2compr.sourceforge.net/
=======================	===============================================

实现如下：

=======================	===========================================================
Windows 95/98/NT/2000    http://www.chrysocome.net/explore2fs
Windows 95 [1]_          http://www.yipton.net/content.html#FSDEXT2
DOS 客户端 [1]_          ftp://metalab.unc.edu/pub/Linux/system/filesystems/ext2/
OS/2 [2]_                ftp://metalab.unc.edu/pub/Linux/system/filesystems/ext2/
RISC OS 客户端            http://www.esw-heim.tu-clausthal.de/~marco/smorbrod/IscaFS/
=======================	===========================================================

.. [1] 不再积极开发/支持（截至2001年4月）
.. [2] 不再积极开发/支持（截至2009年3月）
