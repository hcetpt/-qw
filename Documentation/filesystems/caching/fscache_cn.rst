```
SPDX 许可证标识符: GPL-2.0

==========================
通用文件系统缓存
==========================

概述
========

此功能是一个为网络文件系统设计的通用缓存，尽管它也可以用于缓存其他类型的内容，例如ISO9660文件系统。FS-Cache充当缓存后端（如CacheFiles）与网络文件系统之间的中介：

	+---------+
	|         |                                    +--------------+
	|   NFS   |--+                                 |              |
	|         |  |                             +-->|   CacheFS    |
	+---------+  |               +----------+  |   |  /dev/hda5   |
	             |               |          |  |   +--------------+
	+---------+  |               |          |--+
	|         |      +-------+   |          |  |
	|   AFS   |----->|       |   | FS-Cache |  |
	|         |      | netfs |-->|          |--+
	+---------+  +-->|  lib  |   |          |  |   +--------------+
	             |   |       |   |          |  |   |              |
	+---------+  |   +-------+   +----------+  |   |  CacheFiles  |
	|         |  |                             +-->|  /var/cache  |
	|   9P    |--+                                 |              |
	|         |                                    +--------------+
	+---------+

或者从另一个角度来看，FS-Cache是一个提供缓存功能给网络文件系统的模块，使得用户在使用时不会察觉到缓存的存在：

	+---------+
	|         |
	| Server  |
	|         |
	+---------+
	     |                  NETWORK
	~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	     |
	     |           +----------+
	     V           |          |
	+---------+      |          |
	|         |      |          |
	|   NFS   |----->| FS-Cache |
	|         |      |          |--+
	+---------+      |          |  |   +--------------+   +--------------+
	     |           |          |  |   |              |   |              |
	     V           +----------+  +-->|  CacheFiles  |-->|  Ext3        |
	+---------+                        |  /var/cache  |   |  /dev/sda6   |
	|         |                        +--------------+   +--------------+
	|   VFS   |                                ^                     ^
	|         |                                |                     |
	+---------+                                +--------------+      |
	     |                  KERNEL SPACE                      |      |
	~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~|~~~~
	     |                  USER SPACE                        |      |
	     V                                                    |      |
	+---------+                                           +--------------+
	|         |                                           |              |
	| Process |                                           | cachefilesd  |
	|         |                                           |              |
	+---------+                                           +--------------+

FS-Cache不采用完全加载每个打开的netfs文件到缓存中的想法，然后再从缓存中提供页面而不是从netfs节点提供，原因如下：

1. 必须能够在没有缓存的情况下实际运行。
2. 可访问文件的大小不应受限于缓存的大小。
3. 所有已打开文件（包括映射库）的总大小不应受限于缓存的大小。
4. 用户不应被迫下载整个文件，仅仅是为了访问其中一小部分（如使用“file”程序）。

相反，FS-Cache会根据网络文件系统的需求分块地提供缓存服务。
FS-Cache提供了以下功能：

* 可以同时使用多个缓存。可以通过标签显式选择缓存。
* 缓存可以在任何时候添加或移除，即使在被访问时也是如此。
* 网络文件系统被提供了一个接口，允许任何一方撤回对某个文件的缓存功能（这是为了满足第2点的要求）。
* 网络文件系统的接口尽可能少地返回错误，更倾向于让网络文件系统保持无感知状态。
```
* 存在三种类型的cookie：缓存cookie、卷cookie和数据文件cookie。
缓存cookie代表整个缓存，通常对netfs不可见；netfs获得一个卷cookie来表示一组文件（通常是netfs为超级块获取的内容）；而数据文件cookie用于缓存数据（通常是为inode获取的内容）。

* 卷通过一个键进行匹配。这是一个可打印的字符串，用于编码所有可能需要用来区分一个超级块与其他超级块的信息。这可以包含诸如单元格名称或服务器地址、卷名称或共享路径等信息。它必须是一个有效的路径名。

* cookie通过一个键进行匹配。这是一个二进制块，用于表示卷内的对象（因此卷键不必成为该块的一部分）。这可能包括inode编号和唯一标识符或文件句柄等信息。

* 通过标记cookie为使用中来设置并固定cookie资源。这样可以防止底层资源被回收。采用定时垃圾收集机制来消除一段时间内未使用的cookie，从而减少资源过载。这主要用于文件打开或关闭时。

一个cookie可以同时被多次标记为使用中；每次标记都必须被取消使用。

* 提供了开始/结束访问函数，以延迟操作期间的缓存回收，并防止在查看结构体时释放这些结构体。

* 数据I/O通过异步直接I/O从netfs描述的缓冲区进行读写，使用iov_iter进行描述。

* 提供了一个失效机制，用于丢弃缓存中的数据，并处理正在访问旧数据的正在进行的I/O操作。
* Cookie 可以在释放时“退役”，从而导致对象从缓存中移除。

Netfs API 到 FS-Cache 可以在以下位置找到：

	Documentation/filesystems/caching/netfs-api.rst

缓存后端 API 到 FS-Cache 可以在以下位置找到：

	Documentation/filesystems/caching/backend-api.rst

统计信息
=========

如果 FS-Cache 编译时启用了以下选项：

	CONFIG_FSCACHE_STATS=y

那么它将收集某些统计数据，并通过以下路径显示：

	/proc/fs/fscache/stats

这会显示 FS-Cache 中可能发生的多个事件的计数：

+--------------+-------+-------------------------------------------------------+
| 类别         | 事件  | 含义                                                  |
+==============+=======+=======================================================+
| Cookies      | n=N   | 分配的数据存储 Cookie 数量                             |
+              +-------+-------------------------------------------------------+
|              | v=N   | 分配的卷索引 Cookie 数量                               |
+              +-------+-------------------------------------------------------+
|              | vcol=N| 卷索引键冲突次数                                       |
+              +-------+-------------------------------------------------------+
|              | voom=N| 在分配卷 Cookie 时发生的内存不足事件次数               |
+--------------+-------+-------------------------------------------------------+
| Acquire      | n=N   | 处理的获取 Cookie 请求数量                             |
+              +-------+-------------------------------------------------------+
|              | ok=N  | 成功的获取请求数量                                     |
+              +-------+-------------------------------------------------------+
|              | oom=N | 因内存不足失败的获取请求数量                           |
+--------------+-------+-------------------------------------------------------+
| LRU          | n=N   | 当前在 LRU 上的 Cookie 数量                             |
+              +-------+-------------------------------------------------------+
|              | exp=N | 从 LRU 上过期的 Cookie 数量                             |
+              +-------+-------------------------------------------------------+
|              | rmv=N | 从 LRU 上移除的 Cookie 数量                             |
+              +-------+-------------------------------------------------------+
|              | drp=N | 已放弃或撤回的 LRU Cookie 数量                         |
+              +-------+-------------------------------------------------------+
|              | at=N  | 下一次 LRU 清理的时间（滴答数）                        |
+--------------+-------+-------------------------------------------------------+
| Invals       | n=N   | 无效化次数                                             |
+--------------+-------+-------------------------------------------------------+
| Updates      | n=N   | 处理的更新 Cookie 请求数量                             |
+              +-------+-------------------------------------------------------+
|              | rsz=N | 调整大小请求次数                                       |
+              +-------+-------------------------------------------------------+
|              | rsn=N | 被跳过的调整大小请求次数                               |
+--------------+-------+-------------------------------------------------------+
| Relinqs      | n=N   | 处理的放弃 Cookie 请求数量                             |
+              +-------+-------------------------------------------------------+
|              | rtr=N | 带有 retire=true 的放弃请求数量                        |
+              +-------+-------------------------------------------------------+
|              | drop=N| 不再阻止重新获取的 Cookie 数量                         |
+--------------+-------+-------------------------------------------------------+
| NoSpace      | nwr=N | 因为空间不足被拒绝的写请求数量                         |
+              +-------+-------------------------------------------------------+
|              | ncr=N | 因为空间不足被拒绝的创建请求数量                       |
+              +-------+-------------------------------------------------------+
|              | cull=N| 为了腾出空间而清理的对象数量                           |
+--------------+-------+-------------------------------------------------------+
| IO           | rd=N  | 缓存中的读操作次数                                     |
+              +-------+-------------------------------------------------------+
|              | wr=N  | 缓存中的写操作次数                                     |
+--------------+-------+-------------------------------------------------------+

Netfslib 还会添加一些自己的统计计数器。

缓存列表
==========

FS-Cache 提供了一个缓存 Cookie 列表：

	/proc/fs/fscache/cookies

这看起来像这样：

	# cat /proc/fs/fscache/caches
	CACHE    REF   VOLS  OBJS  ACCES S NAME
	======== ===== ===== ===== ===== = ===============
	00000001     2     1  2123     1 A default

其中列如下：

	=======	===============================================================
	COLUMN	DESCRIPTION
	=======	===============================================================
	CACHE	缓存 Cookie 的调试 ID（也会出现在跟踪中）
	REF	缓存 Cookie 的引用数量
	VOLS	此缓存中的卷 Cookie 数量
	OBJS	正在使用的缓存对象数量
	ACCES	固定缓存的访问次数
	S	状态
	NAME	缓存的名称
=======	===============================================================

状态可以是 (-) 非活动、(P)reparing、(A)ctive、(E)rror 或 (W)ithdrawing。

卷列表
==========

FS-Cache 提供了一个卷 Cookie 列表：

	/proc/fs/fscache/volumes

这看起来像这样：

	VOLUME   REF   nCOOK ACC FL CACHE           KEY
	======== ===== ===== === == =============== ================
	00000001    55    54   1 00 default         afs,example.com,100058

其中列如下：

	=======	===============================================================
	COLUMN	DESCRIPTION
	=======	===============================================================
	VOLUME	卷 Cookie 的调试 ID（也会出现在跟踪中）
	REF	卷 Cookie 的引用数量
	nCOOK	卷中的 Cookie 数量
	ACC	固定缓存的访问次数
	FL	卷 Cookie 的标志
	CACHE	缓存的名称或 "-"
	KEY	卷的索引键
	=======	===============================================================

Cookie 列表
==========

FS-Cache 提供了一个 Cookie 列表：

	/proc/fs/fscache/cookies

这看起来像这样：

	# head /proc/fs/fscache/cookies
	COOKIE   VOLUME   REF ACT ACC S FL DEF
	======== ======== === === === = == ================
	00000435 00000001   1   0  -1 - 08 0000000201d080070000000000000000, 0000000000000000
	00000436 00000001   1   0  -1 - 00 0000005601d080080000000000000000, 0000000000000051
	00000437 00000001   1   0  -1 - 08 00023b3001d0823f0000000000000000, 0000000000000000
	00000438 00000001   1   0  -1 - 08 0000005801d0807b0000000000000000, 0000000000000000
	00000439 00000001   1   0  -1 - 08 00023b3201d080a10000000000000000, 0000000000000000
	0000043a 00000001   1   0  -1 - 08 00023b3401d080a30000000000000000, 0000000000000000
	0000043b 00000001   1   0  -1 - 08 00023b3601d080b30000000000000000, 0000000000000000
	0000043c 00000001   1   0  -1 - 08 00023b3801d080b40000000000000000, 0000000000000000

其中列如下：

	=======	===============================================================
	COLUMN	DESCRIPTION
	=======	===============================================================
	COOKIE	Cookie 的调试 ID（也会出现在跟踪中）
	VOLUME	父卷 Cookie 的调试 ID
	REF	卷 Cookie 的引用数量
	ACT	Cookie 被标记为使用中的次数
	ACC	Cookie 中的访问固定次数
	S	Cookie 的状态
	FL	Cookie 的标志
	DEF	键，辅助数据
	=======	===============================================================

调试
=========

如果启用了 CONFIG_FSCACHE_DEBUG，可以通过调整以下路径中的值来启用 FS-Cache 设施的运行时调试：

	/sys/module/fscache/parameters/debug

这是一个调试流的位掩码：

	=======	=======	===============================	=======================
	BIT	VALUE	STREAM				POINT
	=======	=======	===============================	=======================
	0	1	缓存管理			函数入口跟踪
	1	2					函数出口跟踪
	2	4					通用
	3	8	Cookie 管理			函数入口跟踪
	4	16					函数出口跟踪
	5	32					通用
	6-8						（未使用）
	9	512	I/O 操作管理		函数入口跟踪
	10	1024					函数出口跟踪
	11	2048					通用
	=======	=======	===============================	=======================

应将相应的值进行 OR 操作并将结果写入控制文件。例如：

	echo $((1|8|512)) >/sys/module/fscache/parameters/debug

将启用所有函数入口调试。
