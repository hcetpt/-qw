SPDX 许可声明标识符: GPL-2.0

=====
spufs
=====

名称
====

       spufs - SPU 文件系统

描述
===========

       SPU 文件系统用于实现 Cell 宽带引擎架构的 PowerPC 机器上，以便访问协同处理器单元 (SPUs)。
该文件系统提供了一个类似于 POSIX 共享内存或消息队列的命名空间。拥有写权限的用户可以使用 `spu_create(2)` 在 spufs 根目录中建立 SPU 上下文。
每个 SPU 上下文由一个包含预定义文件集的目录表示。这些文件可用于操作逻辑 SPU 的状态。用户可以更改这些文件的权限，但不能实际添加或删除文件。

挂载选项
=============

       uid=<uid>
              设置拥有挂载点的用户，默认为 0（root）
gid=<gid>
              设置拥有挂载点的组，默认为 0（root）

文件
=====

       spufs 中的文件主要遵循标准系统调用如 `read(2)` 或 `write(2)` 的行为，但通常仅支持常规文件系统上的部分操作。此列表详细说明了支持的操作以及与各自手册页中行为的偏差。
所有支持 `read(2)` 操作的文件也支持 `readv(2)`，所有支持 `write(2)` 操作的文件也支持 `writev(2)`。
所有文件都支持 `access(2)` 和 `stat(2)` 系列操作，但 `struct stat` 中只有 `st_mode`、`st_nlink`、`st_uid` 和 `st_gid` 字段包含可靠信息。
所有文件都支持 `chmod(2)`/`fchmod(2)` 和 `chown(2)`/`fchown(2)` 操作，但无法授予与可能的操作相矛盾的权限，例如 wbox 文件的读取权限。
当前的文件集包括：

   /mem
       SPU 本地存储内存的内容。这可以像常规共享内存文件一样访问，并且包含 SPU 地址空间中的代码和数据。对打开的 mem 文件支持的操作有：

       `read(2)`，`pread(2)`，`write(2)`，`pwrite(2)`，`lseek(2)`
              这些操作按文档所述工作，例外情况是 `seek(2)`、`write(2)` 和 `pwrite(2)` 不支持在文件末尾之外进行操作。文件大小等于 SPU 的本地存储大小，通常是 256 千字节。
`mmap(2)`  
将内存映射到进程地址空间可以访问SPU本地存储。只允许使用`MAP_SHARED`类型的映射。

/mbox  
第一个SPU到CPU的通信邮箱。这个文件是只读的，并且可以按32位为单位进行读取。该文件只能在非阻塞模式下使用，即使是`poll()`也不会阻塞。对打开的mbox文件可能的操作如下：

read(2)  
如果请求的字节数小于4，则`read`返回-1并将`errno`设置为`EINVAL`。如果邮箱中没有数据可用，则返回值设置为-1并将`errno`设置为`EAGAIN`。当数据成功读取时，4个字节会被放入数据缓冲区，并返回值4。

/ibox  
第二个SPU到CPU的通信邮箱。这个文件与第一个邮箱文件类似，但可以在阻塞I/O模式下读取，并且可以使用`poll`系列系统调用来等待数据。对打开的ibox文件可能的操作如下：

read(2)  
如果请求的字节数小于4，则`read`返回-1并将`errno`设置为`EINVAL`。如果邮箱中没有数据可用且文件描述符是以`O_NONBLOCK`模式打开的，则返回值设置为-1并将`errno`设置为`EAGAIN`。如果邮箱中没有数据可用且文件描述符不是以`O_NONBLOCK`模式打开的，则调用会阻塞直到SPU写入其中断邮箱通道。当数据成功读取时，4个字节会被放入数据缓冲区，并返回值4。

poll(2)  
对ibox文件的`poll`操作在有数据可供读取时返回`(POLLIN | POLLRDNORM)`。

/wbox  
CPU到SPU的通信邮箱。它是只写的，并且可以按32位为单位进行写入。如果邮箱已满，`write()`会阻塞，并且可以使用`poll`来等待其再次变为空。对打开的wbox文件可能的操作如下：

write(2)  
如果请求的字节数小于4，则`write`返回-1并将`errno`设置为`EINVAL`。如果邮箱中没有可用的空间且文件描述符是以`O_NONBLOCK`模式打开的，则返回值设置为-1并将`errno`设置为`EAGAIN`。如果邮箱中没有可用的空间且文件描述符不是以`O_NONBLOCK`模式打开的，则调用会阻塞直到SPU从其PPE邮箱通道读取。当数据成功写入时，4个字节会被放入数据缓冲区，并返回值4。

poll(2)  
对wbox文件的`poll`操作在有可用空间进行写入时返回`(POLLOUT | POLLWRNORM)`。
/mbox_stat, /ibox_stat, /wbox_stat  
只读文件，包含当前队列的长度，即可以从mbox或ibox中读取多少个单词，或者可以写入wbox多少个单词而不会阻塞。这些文件只能以4字节为单位读取，并返回一个大端序的二进制整数。打开的 ``*box_stat`` 文件可能的操作如下：

- read(2)
  如果请求的count小于四，则read返回-1并将errno设置为EINVAL。否则，将一个四字节的值放入数据缓冲区，其中包含可以从（对于mbox_stat和ibox_stat）或写入（对于wbox_stat）相应邮箱的元素数量，而不会导致阻塞或EAGAIN。

/npc, /decr, /decr_status, /spu_tag_mask, /event_mask, /srr0  
SPU的内部寄存器。表示为ASCII字符串，包含下一个要执行的指令的数值。这些可以在读/写模式下用于调试，但程序的正常运行不应依赖它们，因为访问除npc之外的任何寄存器都需要保存SPU上下文，因此效率非常低。

这些文件的内容如下：

- npc                 下一条程序计数器
- decr                SPU递减器
- decr_status         递减器状态
- spu_tag_mask        SPU DMA的MFC标签掩码
- event_mask          SPU中断事件掩码
- srr0                中断返回地址寄存器

打开的npc、decr、decr_status、spu_tag_mask、event_mask或srr0文件可能的操作如下：

- read(2)
  当提供给read调用的count短于指针值加换行符所需的长度时，从同一文件描述符的后续读取将完成该字符串，无论正在运行的SPU任务如何更改寄存器。当读取了一个完整的字符串后，所有后续的读操作将返回零字节，并且需要重新打开一个新的文件描述符来再次读取该值。
- write(2)
  对文件的写入操作将寄存器设置为字符串中的值。从字符串开头解析到第一个非数字字符或缓冲区末尾。对同一文件描述符的后续写入会覆盖之前的设置。

/fpcr  
此文件提供了对浮点状态和控制寄存器的访问，作为一个四字节长的文件。fpcr文件上的操作如下：

- read(2)
  如果请求的count小于四，则read返回-1并将errno设置为EINVAL。否则，将一个四字节的值放入数据缓冲区，其中包含fpcr寄存器的当前值。
- write(2)
  如果请求的count小于四，则write返回-1并将errno设置为EINVAL。否则，从数据缓冲区复制一个四字节的值，更新fpcr寄存器的值。

/signal1, /signal2  
SPU的两个信号通知通道。这些是读写文件，操作于32位字上。向其中一个文件写入将触发SPU上的中断。写入信号文件的值可以通过通道读取或通过主机用户空间从文件读取。在SPU读取该值后，它会被重置为零。打开的signal1或signal2文件可能的操作如下：

- read(2)
  如果请求的count小于四，则read返回-1并将errno设置为EINVAL。否则，将一个四字节的值放入数据缓冲区，其中包含指定信号通知寄存器的当前值。
- write(2)
  如果请求的count小于四，则write返回-1并将errno设置为EINVAL。否则，从数据缓冲区复制一个四字节的值，更新指定信号通知寄存器的值。信号通知寄存器将被输入数据替换或更新为旧值与输入数据的按位或结果，具体取决于signal1_type或signal2_type文件的内容。

/signal1_type, /signal2_type  
这两个文件改变了signal1和signal2通知文件的行为。它们包含一个数字ASCII字符串，读取为“1”或“0”。在模式0（覆盖）下，硬件将信号通道的内容替换为写入的数据。在模式1（逻辑或）下，硬件累积随后写入的位。打开的signal1_type或signal2_type文件可能的操作如下：

- read(2)
  当提供给read调用的count短于数字加换行符所需的长度时，从同一文件描述符的后续读取将完成该字符串。当读取了一个完整的字符串后，所有后续的读操作将返回零字节，并且需要重新打开一个新的文件描述符来再次读取该值。
- write(2)
  对文件的写入操作将寄存器设置为字符串中的值。从字符串开头解析到第一个非数字字符或缓冲区末尾。对同一文件描述符的后续写入会覆盖之前的设置。
示例
========
       /etc/fstab 配置项
              none      /spu      spufs     gid=spu   0    0

作者
=======
       Arnd Bergmann <arndb@de.ibm.com>, Mark Nutter <mnutter@us.ibm.com>,
       Ulrich Weigand <Ulrich.Weigand@de.ibm.com>

参见
========
       capabilities(7), close(2), spu_create(2), spu_run(2), spufs(7)
