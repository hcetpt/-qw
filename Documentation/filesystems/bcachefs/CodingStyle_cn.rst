SPDX 许可证标识符: GPL-2.0

bcachefs 编码风格
==================

优秀的开发就像园艺，而代码库就是我们的花园。每天都要照料它们；寻找那些不合适或需要整理的小地方。
偶尔除除草会有很大帮助；不要等到事情失控了才去做。
事情不总是要完美——过分挑剔往往弊大于利。但当你看到美好的事物时，要懂得欣赏——并且让别人知道。
你害怕触及的代码是最需要重构的代码。
偶尔做一些整理会有很大帮助。
认真思考如何组织代码。
好的代码是可读性强的代码，其结构简单，没有可以让错误藏身之处。
断言是我们编写可靠代码最重要的工具之一。如果在编写补丁集的过程中遇到一个不应该发生的情况（如果发生会导致不可预测或未定义的行为），或者不确定是否会发生成并且不知道如何处理——那就把它变成一个 BUG_ON()。不要让未定义或未指定的行为潜伏在代码库中。
到你完成补丁集时，你应该更好地理解哪些断言需要被处理并转换为带有错误路径的检查，哪些在逻辑上是不可能发生的。对于那些逻辑上不可能发生的情况，保留 BUG_ON()。（或者，如果它们代价很高，可以将它们变为调试模式下的断言——但不要把所有东西都变成调试模式下的断言，以免我们不得不在实际中调试未定义行为）
断言是不会过时的文档。好的断言是非常宝贵的。
良好的断言可以显著减少所需的测试工作量，以发现并修复程序中的错误。
良好的断言基于状态而不是逻辑。要编写良好的断言，你需要思考状态的不变性是什么。
良好的不变性和断言在整个代码库中都应成立。这意味着在提交版本中只需在少数几个地方运行它们，但如果你需要调试导致断言失败的问题，你可以迅速将它们广泛应用于各处，找到破坏不变性的代码路径。
一个好的断言检查的是编译器能够为我们验证的内容，并且可以省略——如果我们使用的是具有内嵌正确性证明的语言，编译器可以进行这样的检查。这种技术现在确实存在，但在系统编程语言中普及可能还需要几十年的时间。但我们仍然可以在代码中融入这种思维方式，并通过运行时检查来记录这些不变性——就像动态类型语言开发者逐渐添加类型注解，使其代码变得静态类型化一样。
寻找简化断言的方法——使其更高级——通常会促使你简化整个系统并提高其健壮性。
好的代码是可以让你随意查看其行为的——即自省。如果无法看到正在发生什么，我们就无法调试任何问题。
每当我们在调试时，解决方案并不明显，而问题在于我们不知道问题所在是因为看不到发生了什么——首先要解决这个问题。
我们有工具可以高效地在运行时使任何东西可见，例如RCU和每个CPU的数据结构。不要让事情保持隐藏。
最重要的自省工具是简单的漂亮打印器——在bcachefs中，这意味着`*_to_text()`函数，它们输出到打印缓冲区。
漂亮的打印器非常棒，因为它们可以组合使用并且可以在任何地方应用。拥有可以打印你正在处理的对象的函数会使你的错误信息更容易编写（因此它们实际上存在）并且更具信息量。它们还可以从sysfs/debugfs以及跟踪点使用。
运行时信息和调试工具应该附带清晰的描述和标签，并且具有良好的结构——我们不希望看到像在 `/proc` 文件系统中那样的纯整数列表。调试工具的一部分工作是教育用户和新开发者了解系统的运作方式。

尽可能地，错误信息应该告诉您调试问题所需的一切。在这方面投入努力是值得的。

追踪点（tracepoints）不应该是你首先想到的东西。它们是一个重要的工具，但总是要先寻找更直接的方法来使问题变得可见。当我们不得不依赖于追踪时，我们必须知道我们在寻找哪些追踪点，然后必须运行有问题的工作负载，最后还要筛选日志。当用户遇到问题时，这需要经过许多步骤，如果问题是间歇性的，甚至可能无法实现。

简单的计数器是一个非常有用的工具。它们使用成本低且简单易用，许多复杂的内部操作（例如涉及内存回收的操作）在每个不同的代码路径上加上计数器后，调试起来会变得异常容易。持久化的计数器更好。

在调试时，尽量从每次遇到的每个bug中获得最大的收益；不要急于修复最初的问题。寻找那些能让相关bug下次更容易解决的方法——例如内省、新的断言、更好的错误信息、新的调试工具，并优先处理这些。寻找让系统行为更好的方法；通常一个bug会通过下游效应暴露出其他几个bug。

首先解决这些问题，最后再解决原始的bug——即使这意味着让用户等待。从长远来看，他们会感谢你的，当你解释清楚你在做什么时，你会发现他们愿意多么耐心地等待。用户喜欢帮忙——否则他们一开始就不会报告这个bug了。

与你的用户交流。不要孤立自己。

用户注意到各种有趣的事情，通过与他们的交流和互动，你可以从他们的经验中受益。

花时间做支持和帮助台工作。不仅仅写代码——代码直到无故障使用才算完成。
这也会激励你尽可能地改进调试工具，甚至可能还包括文档。和其他事情一样，你花在上面的时间越多，你就越能做得好，而作为开发者的你是最能够改进工具以使调试变得快速和简单的人。

在接受并承诺大型项目时要小心。不要让开发变成产品经理导向的。很多时候，一个想法是好的，但需要等待合适的时机——但除非你开始编写代码，否则你不会知道这个想法是否是时候实现了。

预计会丢弃很多东西，或者把它们留到以后再完成一半。
没有人能写出全部完美的代码并且全部上线，如果你能早点注意到这一点并转向其他事情，从长远来看你会更加高效。所获得的经验和教训将对你所做的其他工作非常有价值。

但也不要害怕去处理那些需要对现有代码进行重大重构的项目。有时候这些项目可能是最好的，因为它们可以促使我们使现有代码变得更通用、更灵活、更多用途，也许还更健壮。只是如果看起来会搞砸一切的话，不要犹豫放弃这个想法。

复杂的特性往往可以通过一系列重构来实现，最终实现该特性的改动可能只是一个很小的补丁。当这种情况发生时是非常美妙的，尤其是当这些重构本身就能改善代码库的时候。这时，即使最终特性没有实现，也不会有太多浪费的努力。

始终力求增量式地工作。始终力求将大项目分解成小的、易于管理的部分，从而证明它们各自的价值。

与其总是着手那些大项目，不如寻找一些有用的小事，从而使大项目更容易进行。

关于什么可能是有用的这一问题，初级开发者最容易犯错——因为某些事情看似有用而去做的时候往往会过度设计。知道什么是有用的来自多年的经验，或者与有这种经验的人交流——或者仅仅是通过阅读大量代码并寻找常见的模式和问题。不要害怕丢弃一些东西去做一些更简单的事情。

与你的同事开发者讨论你的想法；很多时候，最好的想法来自于轻松的交谈中，人们不害怕说“如果……怎么样”。
不要忽视你的工具
最重要的工具（除了编译器和文本编辑器）就是我们用于测试的工具。尽可能短的编辑/测试/调试周期对于高效工作至关重要。通过运行代码并观察结果，我们能够学习、积累经验，并发现思维中的错误。如果你的时间因为工具不好或速度太慢而被浪费——不要接受这种状况，而是去改进它。

努力做好文档、提交信息和代码注释——但也不要过度。一个好的提交信息是很棒的，但如果这些信息足够重要到需要写入提交信息，不妨问问自己是否更适合将它作为代码注释。

一个好的代码注释是很好的，但更好的是那些无需存在的注释，因为代码本身已经足够简单明了；代码被组织成小而整洁的模块，函数和变量都有清晰且描述性的名称，每一行代码都有明确的目的。
