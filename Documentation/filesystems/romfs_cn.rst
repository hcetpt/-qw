SPDX 许可证标识符: GPL-2.0

=======================
ROMFS - 只读文件系统
=======================

这是一个相当简单的只读文件系统，主要用于安装磁盘的初始 RAM 磁盘。它最初是为了满足在启动时加载模块的需求而发展起来的。使用这个文件系统，你可以获得类似的功能，并且即使是一个小内核也能实现，同时这个文件系统不会占用办公室底层路由器功能所需的宝贵内存。

作为对比，旧的 Minix 和 Xiafs（后者现在已经不再使用）这两个文件系统，编译成模块需要超过 20000 字节，而 ROMFS 不到一页，大约 4000 字节（假设是 i586 代码）。在相同条件下，MSDOS 文件系统需要大约 30K（并且不支持设备节点或符号链接），而带有 NFSROOT 的 NFS 模块大约需要 57K。此外，作为一个不太公平的比较，一个实际的救援磁盘使用 Ext2 占用了 3202 块，而使用 ROMFS 只需要 3079 块。

要创建这样一个文件系统，你需要一个名为 genromfs 的用户程序。你可以在 http://romfs.sourceforge.net/ 上找到它。

正如其名所示，ROMFS 也可以高效地用于各种只读介质上，比如（E）PROM 磁盘，如果有人有动力的话。

然而，ROMFS 的主要目的是拥有一个非常小的内核，这个内核只有这个文件系统被链接进去，然后可以稍后加载任何模块，使用当前的模块工具。它还可以用来运行一些程序来决定是否需要 SCSI 设备，甚至 IDE 或软盘驱动器也可以稍后通过“initrd”——初始 RAM 磁盘——特性加载。这并不是什么新闻，但有了 ROMFS，你可以推迟使用 Ext2、Minix 甚至是 AFFS 文件系统，直到你确实需要它们。

例如，一个发行版启动磁盘可以只包含 CD 驱动程序（以及可能的 SCSI 驱动程序）和 ISO 9660 文件系统模块。内核可以足够小，因为它没有其他文件系统，如相当大的 Ext2fs 模块，这个模块可以在安装过程的后期从 CD 加载。另一个用途是在网络上重新安装工作站时使用的恢复磁盘，你将从附近的服务器获取所有工具/模块，因此不需要携带两块磁盘，仅仅因为它们不能放入 Ext2 中。

ROMFS 如你所期待的那样在块设备上运行，并且底层结构非常简单。每个可访问的结构都以 16 字节对齐，以便快速访问。一个文件占用的最小空间是 32 字节（这是一个空文件，名称少于 16 个字符）。任何非空文件的最大开销是头部和名称及内容的 16 字节填充，总共 16 + 14 + 15 = 45 字节。然而这种情况很少见，因为大多数文件名长度大于 3 个字符，小于 15 个字符。

文件系统的布局如下：

```
偏移量    内容

  +---+---+---+---+
  0  | - | r | o | m |  \
  +---+---+---+---+  这些字节的 ASCII 表示
  4  | 1 | f | s | - |  /  （即“-rom1fs-”）
  +---+---+---+---+
  8  |   完整大小   |  这个文件系统中可访问字节数
+---+---+---+---+
 12  |    校验和    |  第一个 512 字节的校验和
+---+---+---+---+
 16  | 卷名         |  卷名，以零结尾，并填充至 16 字节对齐
      :             :
+---+---+---+---+
 xx  |   文件头     |
      :              :

每一个多字节值（32 位字，我将使用长字术语）必须是大端序。
前八个字节标识了文件系统，即使是随便查看的人也能识别。之后，在第三个长字中包含了从该文件系统开始处可访问的字节数。第四个长字是前 512 字节（或可访问字节数，以较小者为准）的校验和。所应用的算法与 AFFS 文件系统中的相同，即简单求和（假设大端序）。详情请参阅源代码。选择这个算法是因为尽管它不太可靠，但它不需要任何表格，并且非常简单。
```
以下字节现在是文件系统的一部分；每个文件头必须从一个16字节对齐的位置开始：

偏移量    内容

      +---+---+---+---+
  0   | 下一个文件头|X| 文件头的下一个偏移量（如果没有更多文件则为零）
      +---+---+---+---+
  4   | spec.info | 目录/硬链接/设备的信息
      +---+---+---+---+
  8   | 文件大小 | 文件的字节数
      +---+---+---+---+
 12   | 校验和 | 覆盖元数据，包括文件名及其填充
      +---+---+---+---+
 16   | 文件名 | 文件名以零结尾，并填充至16字节对齐
      :               :
 xx   | 文件数据 |
      :              :

由于文件头始终从16字节对齐位置开始，因此在下一个文件头指针中最低的4位总是零。这四位用于模式信息。位0..2指定文件类型；而位4表示文件是否可执行。如果该位未设置，则假定权限为世界可读；如果设置了，则为世界可执行；除了字符设备和块设备，它们仅对所有者可用。每个文件的所有者都是用户和组0，对于预期用途，这不应该成为问题。8种可能值到文件类型的映射如下：

==	=============== ============================================
      映射          spec.info 的含义
==	=============== ============================================
 0  硬链接       链接目标[文件头]
 1  目录         第一个文件的头
 2  普通文件     未使用，必须为零 [MBZ]
 3  符号链接      未使用，MBZ（文件数据是链接内容）
 4  块设备       16/16位主次编号
 5  字符设备       - " -
 6  套接字        未使用，MBZ
 7  FIFO         未使用，MBZ
==	=============== ============================================

请注意，硬链接在这个文件系统中特别标记，但它们将按预期行为（即共享inode编号）。请注意，您有责任不创建硬链接环，并为目录创建所有 . 和 .. 链接。这通常由genromfs程序正确完成。请不要在套接字和FIFO特殊文件上使用可执行位进行特殊用途，它们将来可能会有其他用途。此外，请记住，只有普通文件和符号链接应该具有非零大小字段；它们包含直接位于（已填充）文件名之后的字节数。
另一个需要注意的是，romfs处理文件头和数据时以16字节对齐，但大多数硬件设备和块设备驱动无法处理小于块大小的数据。为了克服这一限制，整个文件系统的大小必须填充到1024字节对齐。
如果您有关于此文件系统的任何问题或建议，请联系我。但是，在要求我添加功能和代码之前，请三思，因为这个文件系统的主要优势是代码量小。另一方面，不要担心，我并没有收到太多与romfs相关的邮件。现在我可以理解为什么Avery会在ARCnet文档中写诗来获得更多的反馈了。

romfs还有一个邮件列表，到目前为止还没有任何流量，所以欢迎您加入讨论您的想法。

它由ezmlm运行，因此您可以发送邮件至romfs-subscribe@shadow.banki.hu订阅，内容无关紧要。
待解决问题：

- 权限和所有者信息是一个类Unix系统的非常基本的功能，但romfs没有提供全部可能性。我从未发现这是个限制，但其他人可能会觉得如此。
- 文件系统只读，因此它可以非常小，但如果有人想向文件系统写入任何东西，他仍然需要一个可写的文件系统，从而抵消了大小优势。可能的解决方案：作为编译选项实现写访问，或者为RAM磁盘实现一个新的同样小的可写文件系统。
- 由于文件只需要16字节对齐，目前从文件系统读取或执行文件可能是次优的。可以通过重新排列文件数据来解决这个问题，使其大部分（即除开头和结尾外）位于“自然”边界上，从而可以直接将文件内容的大部映射到mm子系统。
- 压缩可能是一个有用的功能，但在我的看法中，内存是一个相当大的限制因素。
当然，以下是翻译：

---

在哪里使用？

- 在非英特尔和摩托罗拉架构上能工作吗？

祝愉快，

Janos Farkas <chexum@shadow.banki.hu>

---
