SPDX 许可证标识符: GPL-2.0

===============
UBI 文件系统
===============

介绍
============

UBIFS 文件系统代表 UBI 文件系统。UBI 代表 “Unsorted Block Images”（未排序的块图像）。UBIFS 是一种闪存文件系统，这意味着它是为与闪存设备一起工作而设计的。重要的是要理解，UBIFS 完全不同于 Linux 中的任何传统文件系统，如 Ext2、XFS、JFS 等。UBIFS 代表了一类与 MTD 设备而不是块设备一起工作的文件系统。这一类的另一个 Linux 文件系统是 JFFS2。

为了更清楚地说明这一点，以下是一个关于 MTD 设备和块设备的小型对比：

1. MTD 设备代表闪存设备，并且由大小相对较大的擦除块组成，通常约为 128KiB。块设备由较小的块组成，通常为 512 字节。
2. MTD 设备支持三种主要操作：从擦除块内的某个偏移量读取、向擦除块内的某个偏移量写入以及擦除整个擦除块。块设备支持两种主要操作：读取整个块和写入整个块。
3. 在重新写入其内容之前，必须擦除整个擦除块。块可以直接被重写。
4. 擦除块在经过一定数量的擦除周期后会磨损——对于 SLC NAND 和 NOR 闪存通常是 100K 到 1G 次，而对于 MLC NAND 闪存则是 1K 到 10K 次。块没有这种磨损特性。
5. 擦除块可能会变坏（仅在 NAND 闪存上），软件需要处理这种情况。硬盘上的块通常不会变坏，因为硬件有机制来替换坏块，至少在现代 LBA 磁盘中是这样。

显而易见，为什么 UBIFS 与传统文件系统非常不同。

UBIFS 基于 UBI 工作。UBI 是一个独立的软件层，可以在 `drivers/mtd/ubi` 找到。UBI 基本上是一个卷管理和磨损均衡层。它提供了所谓的 UBI 卷，这是比 MTD 设备更高层次的抽象。UBI 设备的编程模型与 MTD 设备非常相似——它们仍然由大的擦除块组成，并具有读/写/擦除操作，但 UBI 设备没有磨损和坏块的限制（上述列表中的第 4 和第 5 项）。

从某种意义上说，UBIFS 是 JFFS2 文件系统的下一代版本，但它与 JFFS2 非常不同且不兼容。以下是主要的区别：
* JFFS2 基于 MTD 设备工作，而 UBIFS 依赖于 UBI 并在 UBI 卷之上工作。
* JFFS2 没有介质上的索引，在挂载时需要构建索引，这需要对整个介质进行扫描。而 UBIFS 在闪存介质上维护文件系统索引信息，不需要全介质扫描，因此比 JFFS2 快很多倍地完成挂载。
* JFFS2 是一种写透文件系统，而 UBIFS 支持回写，这使得 UBIFS 在写入方面快得多。
与 JFFS2 类似，UBIFS 支持即时压缩，使其能够将大量数据存储到闪存中。
与 JFFS2 类似，UBIFS 对非正常重启和断电具有容忍性。它不需要像 `fsck.ext2` 这样的工具。UBIFS 自动重放日志并从崩溃中恢复，确保闪存中的数据结构保持一致。
UBIFS 的扩展性是基于对数增长的（它使用的大多数数据结构都是树形的），因此挂载时间和内存消耗并不像 JFFS2 那样线性依赖于闪存大小。这是因为它在闪存介质上维护文件系统索引。然而，UBIFS 依赖于 UBI，而 UBI 的扩展性是线性的。所以整体上 UBI/UBIFS 栈仍然是线性扩展的。
尽管如此，UBI/UBIFS 的扩展性仍然比 JFFS2 好得多。
UBIFS 的开发者认为，有可能开发出 UBI2，使其也能以对数方式扩展。UBI2 将支持与 UBI 相同的 API，但与 UBI 二进制不兼容。因此 UBIFS 不需要修改就可以使用 UBI2。

挂载选项
==========

(*) == 默认
-------------------	---------------------------------------------------------
bulk_read			一次读取更多内容以利用闪存介质的顺序读取速度
no_bulk_read (*)		不批量读取
no_chk_data_crc (*)		跳过数据节点上的 CRC 检查以提高读取性能。仅当闪存介质高度可靠时才使用此选项。此选项的效果是文件内容的损坏可能不会被发现
```
chk_data_crc		不要跳过数据节点的CRC校验
compr=none              覆盖默认压缩器并设置为“无”
compr=lzo               覆盖默认压缩器并设置为“lzo”
compr=zlib              覆盖默认压缩器并设置为“zlib”
auth_key=		指定用于验证文件系统的密钥
传递此选项将使验证成为必需
传递的密钥必须存在于内核密钥环中
且类型必须为 'logon'
auth_hash_name=		用于验证的哈希算法。同时用于哈希和创建HMAC。典型值包括 "sha256" 或 "sha512"
====================	=======================================================


快速使用说明
========================

要挂载的UBI卷通过 "ubiX_Y" 或 "ubiX:NAME" 语法指定，其中 "X" 是UBI设备号，"Y" 是UBI卷号，"NAME" 是UBI卷名。
将UBI设备0上的卷0挂载到 /mnt/ubifs：

    $ mount -t ubifs ubi0_0 /mnt/ubifs

将UBI设备0上的 "rootfs" 卷挂载到 /mnt/ubifs（"rootfs" 是卷名）：

    $ mount -t ubifs ubi0:rootfs /mnt/ubifs

以下是一个示例内核启动参数，用于将mtd0连接到UBI并挂载 "rootfs" 卷：
ubi.mtd=0 root=ubi0:rootfs rootfstype=ubifs

参考
==========

UBIFS文档和FAQ/HOWTO在MTD网站上：

- http://www.linux-mtd.infradead.org/doc/ubifs.html
- http://www.linux-mtd.infradead.org/faq/ubifs.html
```
