重新导出NFS文件系统
===========================

概述
--------

可以将一个NFS文件系统通过NFS重新导出。然而，此功能存在一些限制。在尝试之前，我们建议进行仔细的研究以确定它是否符合您的需求。以下是一些已知限制的讨论。

### `fsid=` 必须使用，`crossmnt` 无法正常工作
---------------------------------

我们要求任何重新导出的NFS文件系统必须使用 `fsid=` 导出选项。您可以使用 `uuidgen -r` 来生成一个唯一的参数。
`crossmnt` 导出不会传递 `fsid=`，因此不允许进入更深层的NFS文件系统；如果您希望导出已挂载在导出文件系统下的NFS文件系统，则需要显式地导出它们，并为每个文件系统分配其唯一的 `fsid=` 选项。

### 重启恢复
--------------

当重新导出服务器重启时，NFS协议的标准重启恢复机制不起作用。客户端会失去重启前持有的所有锁，进一步的I/O操作会导致错误。关闭并重新打开文件应该能清除这些错误。

### 文件句柄限制
-----------------

如果原始服务器为给定对象使用X字节的文件句柄，那么重新导出服务器为重新导出的对象使用的文件句柄将是X+22字节，并向上取整到最接近的四字节倍数。
结果必须符合RFC规定的文件句柄大小限制：

+-------+-----------+
| NFSv2 |  32 字节  |
+-------+-----------+
| NFSv3 |  64 字节  |
+-------+-----------+
| NFSv4 | 128 字节  |
+-------+-----------+

例如，您只有在原始服务器提供的文件句柄长度不超过10字节的情况下才能通过NFSv2重新导出文件系统——这不太可能。
通常情况下，除非询问服务器供应商，否则无法知道NFS服务器发出的最大文件句柄大小。
但下表给出了一些示例。第一列是Linux服务器导出给定文件系统时文件句柄的典型长度，第二列是在该NFS导出被另一个Linux主机重新导出后的长度：

+--------+-------------------+----------------+
|        | 文件句柄长度      | 重新导出后      |
+========+===================+================+
| ext4:  | 28 字节           | 52 字节         |
+--------+-------------------+----------------+
| xfs:   | 32 字节           | 56 字节         |
+--------+-------------------+----------------+
| btrfs: | 40 字节           | 64 字节         |
+--------+-------------------+----------------+

因此，所有这些在重新导出后都可以放入NFSv3或NFSv4文件句柄中，但没有一个可以通过NFSv2重新导出。
Linux 服务器的文件句柄比这要复杂一些；例如：

- （非默认的）“subtreecheck”导出选项通常需要在文件句柄中额外增加 4 到 8 字节。
- 如果你导出了文件系统中的一个子目录（而不是导出文件系统的根目录），这也通常会增加 4 到 8 字节。
- 如果通过 NFSv2 导出，knfsd 通常使用较短的文件系统标识符，可以节省 8 字节。
- 导出的根目录使用较短的文件句柄。

正如你所看到的，128 字节的 NFSv4 文件句柄足够大，以至于你不太可能在使用 NFSv4 重新导出来自 Linux 服务器的任何文件系统时遇到问题。一般来说，如果原始服务器也支持 NFSv3，你**大概率**是没问题的。通过 NFSv3 重新导出可能会更棘手，而通过 NFSv2 重新导出可能永远不会成功。

对于 Linux 文件句柄结构的更多细节，最好的参考是源代码和注释；特别是：

- `include/linux/exportfs.h`: `enum fid_type`
- `include/uapi/linux/nfsd/nfsfh.h`: `struct nfs_fhbase_new`
- `fs/nfsd/nfsfh.c`: `set_version_and_fsid_type`
- `fs/nfs/export.c`: `nfs_encode_fh`

忽略 Open DENY 位
-------------------

自从 NFSv4 开始，NFS 支持来自 Windows 的 ALLOW 和 DENY 位，这些位允许你以某种方式打开文件，禁止其他用户进行读或写操作。Linux 客户端不使用它们，并且服务器的支持一直不完整：这些位仅对其他 NFS 用户生效，不对本地访问导出文件系统的进程生效。重新导出服务器也不会将这些位传递给原始服务器，因此它们不会在不同重新导出服务器的客户端之间生效。
