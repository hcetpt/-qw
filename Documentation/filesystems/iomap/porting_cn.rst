SPDX 许可证标识符: GPL-2.0
.. _iomap_porting:

.
保持作者理智的简陋风格说明：
        请尝试在单独的行上开始句子，以便在 diff 中句子更改不会导致颜色混杂
标题装饰在 sphinx.rst 中有文档说明
=======================
移植您的文件系统
=======================

.. contents:: 目录
   :local:

为什么转换？
============

将文件系统转换为 iomap 有几个原因：

1. 经典的 Linux I/O 路径效率不高
页缓存操作一次锁定一个基础页面，然后调用文件系统仅返回该页面的映射
直接 I/O 操作一次构建一个文件块的 I/O 请求
这对于 ext2 这样的直接/间接映射文件系统来说效果还不错，但对于 XFS 这样的基于范围的文件系统来说非常低效

2. 大型 folio 只能通过 iomap 支持；没有计划将旧的 buffer_head 路径转换为使用它们

3. 对类似内存设备（fsdax）的存储直接访问只能通过 iomap 支持

4. 减少个别文件系统维护者的维护开销
iomap 自身处理了常见的页缓存相关操作，例如分配、实例化、锁定和解锁 folio。
不需要实现 `->write_begin()`、`->write_end()` 或直接 I/O 的 `address_space_operations`。
使用 iomap 的文件系统无需实现这些函数。

如何转换文件系统？
==============================

首先，在源代码中添加 `#include <linux/iomap.h>`，并在文件系统的 Kconfig 选项中添加 `select FS_IOMAP`。
构建内核，并使用 `-g all` 选项运行 fstests，以广泛测试文件系统支持的配置，建立哪些测试通过、哪些测试失败的基础数据。
推荐的方法是首先实现 `->iomap_begin`（如果需要的话，也实现 `->iomap_end`），以便让 iomap 获得文件范围的只读映射。
在大多数情况下，这仅仅是将现有的 `get_block()` 函数转换为只读映射的相对简单的任务。
`FS_IOC_FIEMAP` 是一个很好的起点，因为它很容易实现支持，并且可以从用户空间确定 extent map 迭代是否正确。
如果 FIEMAP 返回了正确的信息，那么这是一个很好的信号，表明其他只读映射操作也会正常工作。
接下来，修改文件系统的 `get_block(create = false)` 实现，使用新的 `->iomap_begin` 实现来映射文件空间，用于选定的读取操作。
在调试开关后面隐藏切换 iomap 映射函数的能力，以便在选定的调用路径中启用它。
有必要编写一些代码来填充基于缓冲区头部（bufferhead）的映射信息，这些信息来自 `iomap` 结构，但是可以在不需要实现任何 `iomap` API 的情况下测试新函数。
一旦只读函数能够正常工作，逐步将每个高级文件操作转换为使用 `iomap` 本地 API 而不是通过 `get_block()` 来完成。
每次完成一个功能时，回退（regressions）应该显而易见。
你确实有用于 fstests 的回归测试基准，对吧？
建议先转换交换文件激活、`SEEK_DATA` 和 `SEEK_HOLE`，然后再处理 I/O 路径。
此时的一个可能复杂性是由于缓冲区头部的存在，需要转换缓冲读取 I/O 路径。
不过，缓冲读取 I/O 路径暂时不需要转换，但直接读取 I/O 路径应在这一阶段进行转换。
到这一步时，你应该检查你的 `->iomap_begin` 函数。
如果该函数根据 `flags` 参数的分派切换大量代码块，你应该考虑将其拆分为更小且更连贯的操作函数。
XFS 是这方面的良好示例。
接下来要做的是在 `->iomap_begin` 和 `->iomap_end` 方法中实现 `get_blocks(create == true)` 功能。
强烈建议为写操作创建单独的映射函数和iomap操作。
然后将直接I/O写路径转换为iomap，并开始在文件系统上认真运行fsx，启用DIO。
这将暴露出新写映射实现引入的许多数据完整性边缘情况的bug。
接下来，将任何剩余的文件操作转换为调用iomap函数。
这样整个文件系统将使用新的映射函数，在此步骤之后，它们应该大部分已被调试并正确工作。
此时，很可能仍然需要转换带缓冲的读取和写入路径。
映射函数应该都能正确工作，因此只需重写所有与bufferhead接口的代码，使其与iomap和folios接口即可。
首先转换常规文件I/O（不包含任何高级功能，如fscrypt、fsverity、压缩或data=journaling）以使用iomap会更容易。
iomap中尚未实现某些高级功能（如fscrypt和压缩）。
对于使用页缓存处理符号链接和目录的非日志文件系统，你也可以尝试将其处理转换为iomap。
其余部分留给读者作为练习，因为每个文件系统都会有所不同。
如果遇到问题，请给 ``get_maintainers.pl`` 中的人员和邮件列表发送电子邮件寻求帮助。
