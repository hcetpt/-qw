=====================
LED 瞬时触发器
=====================

当前的 LED 定时触发器没有接口来激活单次定时器。现有的支持允许设置两个定时器，一个用于指定状态开启的时间长度，另一个用于指定状态关闭的时间长度。`delay_on` 值指定了 LED 应该保持开启状态的时间，之后是 `delay_off` 值，指定了 LED 应该保持关闭状态的时间。开启和关闭周期会一直重复，直到触发器被停用。没有单次激活的机制来实现需要仅保持一次开启或关闭状态然后永远保持原状态的功能。

没有单次定时器接口的情况下，用户空间仍然可以使用定时触发器来设置定时器以保持某种状态，但是如果用户空间应用程序崩溃或在没有停用定时器的情况下退出，硬件将永久处于那种状态。

瞬时触发器解决了单次定时器激活的需求。瞬时触发器可以像其他 LED 触发器一样被启用和禁用。

当 LED 类设备驱动程序注册自己时，它可以指定它支持的所有 LED 触发器和默认触发器。在注册过程中，默认触发器的激活例程会被调用。在 LED 类设备注册期间，LED 状态不会改变。

当驱动程序注销时，当前活动触发器的停用例程会被调用，并且 LED 状态将变为 LED_OFF。驱动程序挂起时会将 LED 状态更改为 LED_OFF，恢复时不会改变状态。请注意，挂起和恢复动作与当前启用的触发器之间没有明确的交互。当驱动程序处于挂起状态时，LED 状态变化被暂停。任何在驱动程序挂起时仍处于活动状态的定时器将继续运行，但无法实际改变 LED 状态。一旦驱动程序恢复，触发器开始再次工作。

LED 状态的变化通过亮度控制，这是 LED 类设备的一个通用属性。当通过 `echo 0 > brightness` 从用户空间将亮度设置为 0 时，会导致当前触发器停用。

瞬时触发器使用标准的注册和注销接口。在触发器注册过程中，对于每个指定此触发器为其默认触发器的 LED 类设备，触发器的激活例程会被调用。在注册过程中，除非有其他触发器处于活动状态，在这种情况下 LED 状态变更为 LED_OFF，否则 LED 状态不会改变。

在触发器注销过程中，LED 状态会变更为 LED_OFF。

瞬时触发器的激活例程不会改变 LED 状态。它创建其属性并进行初始化。瞬时触发器的停用例程会在清理和移除其创建的属性之前取消任何活动的定时器。它将恢复 LED 的非瞬时状态。当驱动程序被挂起时，无论瞬时状态如何，LED 状态都会变更为 LED_OFF。
瞬时触发器可以在支持此触发器的 LED 类设备上从用户空间启用和禁用，如下所示：

```shell
echo transient > trigger
echo none > trigger
```

注意：
添加一个新的属性 `trigger state` 来控制状态。

此触发器导出了三个属性：`activate`、`state` 和 `duration`。当瞬时触发器被激活时，这些属性会被设置为默认值：
- `duration` 允许设置以毫秒为单位的计时器值。初始值为 0。
- `activate` 允许根据需要激活或禁用由 `duration` 指定的计时器。初始值和默认值为 0，这允许在触发器激活后设置 `duration`。
- `state` 允许用户指定一个要在指定持续时间内保持的瞬时状态。

`activate`
- 单次计时器激活机制
激活时为 1，未激活时为 0
默认值为零，当瞬时触发器启用时，允许设置 `duration`。
激活状态表示有一个具有指定时长的计时器正在运行。
未激活状态表示没有活动计时器正在运行。
### 翻译

**duration**
- 单次定时器的值。当 `activate` 被设置时，`duration` 的值用于启动一个只运行一次的定时器。这个值不会被触发器改变，除非用户通过 `echo new_value > duration` 进行设置。

**state**
- 要保持的临时状态。它有两个值：0 或 1。0 对应 `LED_OFF`，1 对应 `LED_FULL`。指定的状态将在单次定时器持续时间内保持，然后状态会变为非临时状态，即临时状态的反状态。
- 如果 `state = LED_FULL`，当定时器结束时，状态将回到 `LED_OFF`。
- 如果 `state = LED_OFF`，当定时器结束时，状态将回到 `LED_FULL`。
- 请注意，在更改状态之前不会检查当前的 LED 状态。
- 驱动程序可以根据其在 `brightness_set()` 接口中为 LED 定义的默认状态来映射这些值，该接口从 `led brightness_set()` 接口调用以控制 LED 状态。
- 当定时器到期时，`activate` 会回到未激活状态，`duration` 保持设置的值，以便将来再次设置 `activate` 时使用。这允许用户应用程序一次性设置时间，并根据需要激活一次定时器。当定时器到期时，状态恢复到非临时状态，即临时状态的反状态。

### 操作说明

```
echo 1 > activate    开始定时器 = duration（当 duration 不为 0 时）
echo 0 > activate    取消当前正在运行的定时器
echo n > duration    存储要用于下次激活的定时器值。当前活动的定时器（如果有）将继续运行指定的时间
echo 0 > duration    存储要用于下次激活的定时器值。当前活动的定时器（如果有）将继续运行指定的时间
echo 1 > state       存储希望在指定持续时间内保持的临时状态 LED_FULL
```
```
echo 0 > state      将所需的瞬时状态 LED_OFF 保存以持续指定的时长
=================   ===============================================

不支持的功能
=============

- 定时器激活为单次触发，并且不支持延长或缩短定时器
示例
=====

用例 1::

    echo transient > trigger
    echo n > duration
    echo 1 > state

根据需要重复以下步骤::

    echo 1 > activate - 启动定时器 = 持续时长运行一次
    echo 1 > activate - 启动定时器 = 持续时长运行一次
    echo none > trigger

此触发器旨在用于以下示例场景：

- 用户空间应用程序使用 LED 作为活动指示器
- 用户空间应用程序使用 LED 作为一种看门狗指示器 —— 只要应用程序还活着，它可以保持 LED 点亮；如果应用程序死亡，LED 将自动熄灭
- 任何需要瞬时 GPIO 输出的用户空间应用程序
```
