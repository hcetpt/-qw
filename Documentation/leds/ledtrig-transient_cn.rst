=====================
LED 瞬态触发器
=====================

目前，LED 定时触发器没有提供接口来激活单次定时器。当前的支持允许设置两个定时器：一个用于指定 LED 处于开启状态的时间长度，另一个用于指定 LED 处于关闭状态的时间长度。`delay_on` 值指定了 LED 应该保持在开启状态的时间段，随后是 `delay_off` 值，它指定了 LED 应该保持在关闭状态的时长。开和关的循环将持续到触发器被停用为止。没有提供单次激活的功能来实现那些需要将 LED 的开启或关闭状态仅保持一次然后永远回到原始状态的功能。
没有单次定时器接口，用户空间仍然可以使用定时触发器来设置定时器以保持某个状态，但如果用户空间应用程序崩溃或在未停用定时器的情况下退出，硬件将会永久停留在该状态下。
瞬态触发器解决了单次定时器激活的需求。瞬态触发器可以像其他 LED 触发器一样被启用和禁用。
当 LED 类设备驱动程序注册自身时，它可以指定支持的所有触发器及其默认触发器。在注册过程中，默认触发器的激活例程会被调用。在 LED 类设备注册期间，LED 的状态不会发生变化。
当驱动程序卸载时，当前激活的触发器的停用例程将被调用，并且 LED 的状态将变为 LED_OFF。
驱动程序挂起会将 LED 状态更改为 LED_OFF，而恢复操作不会改变状态。请注意，挂起和恢复操作与当前启用的触发器之间没有直接的交互。在驱动程序处于挂起状态时，LED 状态的变化会被暂停。任何在驱动程序挂起时仍在运行的定时器将继续运行，但无法实际改变 LED 的状态。一旦驱动程序恢复，触发器将重新开始工作。
LED 状态的变化通过亮度控制，这是 LED 类设备的一个通用属性。当从用户空间通过 `echo 0 > brightness` 设置亮度为 0 时，会导致当前触发器被停用。
瞬态触发器使用标准的注册和卸载接口。在触发器注册期间，对于每个将此触发器指定为其默认触发器的 LED 类设备，触发器的激活例程将被调用。在注册过程中，除非有其他触发器处于活动状态，在这种情况下 LED 状态将变为 LED_OFF，否则 LED 的状态不会发生变化。
在触发器卸载期间，LED 的状态将变为 LED_OFF。
瞬态触发器的激活例程不会改变 LED 的状态。它创建其属性并进行初始化。瞬态触发器的停用例程将在清理和移除其创建的属性之前取消任何活动的定时器。它将 LED 状态恢复到非瞬态状态。当驱动程序被挂起时，无论瞬态状态如何，LED 的状态都将变为 LED_OFF。
瞬时触发器可以在支持此类触发器的 LED 类设备的用户空间中启用和禁用，如下所示：

```
echo transient > trigger
echo none > trigger
```

**注：**
添加一个新的属性 `trigger state` 来控制状态。
此触发器导出了三个属性：`activate`、`state` 和 `duration`。当瞬时触发器被激活时，这些属性被设置为默认值：
- `duration` 允许设置毫秒级别的定时器值。初始值为 0。
- `activate` 允许根据需要激活或停用由 `duration` 指定的定时器。初始值和默认值为 0，这允许在触发器激活后设置 `duration` 的值。
- `state` 允许用户指定一个要保持的瞬时状态，该状态持续的时间由 `duration` 指定。

**activate**
- 单次定时器激活机制
- 当被激活时为 1，当被停用时为 0
- 当瞬时触发器被启用时，默认值为零，以允许设置 `duration` 的值。
- 激活状态表示正在运行具有指定 `duration` 值的定时器。
- 停用状态表示没有活动的定时器正在运行。
### 说明

- **Duration（持续时间）**  
  - 单次计时器的值。当`activate`被设置时，`duration`的值会被用来启动一个仅运行一次的计时器。此值除非用户通过`echo new_value > duration`的方式进行更改，否则不会被触发器改变。

- **State（状态）**  
  - 要保持的临时状态。它有两个值：0 或 1。0 映射到`LED_OFF`，而 1 映射到`LED_FULL`。指定的状态会维持整个单次计时器的持续时间，然后状态将变为非临时状态，即临时状态的相反状态。
  - 如果`state = LED_FULL`，当计时器结束时，状态将回到`LED_OFF`。
  - 如果`state = LED_OFF`，当计时器结束时，状态将回到`LED_FULL`。
  - 请注意，在改变状态至指定状态之前，并不检查当前 LED 的状态。
  - 驱动程序可以根据其在`brightness_set()`接口中为 LED 定义的默认状态来映射这些值（反转或非反转）。`brightness_set()`接口是从`led brightness_set()`接口调用来控制 LED 状态的。
  - 当计时器到期时，`activate`回到非激活状态，`duration`保留为已设置的值，以便在未来设置`activate`时使用。这允许用户应用程序一次性设置时间，并根据需要激活它以按指定值运行一次。当计时器到期时，状态恢复为非临时状态，即临时状态的相反状态。

### 使用方法

| 操作 | 描述 |
| --- | --- |
| `echo 1 > activate` | 当`duration`非零时，开始计时器 = `duration` |
| `echo 0 > activate` | 取消当前正在运行的计时器 |
| `echo n > duration` | 存储计时器值，用于下一次激活。如果当前有活跃计时器，则继续运行指定的时间 |
| `echo 0 > duration` | 存储计时器值，用于下一次激活。如果有活跃计时器，则继续运行指定的时间 |
| `echo 1 > state` | 存储期望的临时状态`LED_FULL`，并维持指定的持续时间 |
将给定的文本翻译成中文如下：

将 `state` 设置为 0 > echo 0 > state，这会存储期望的瞬态状态 LED_OFF，并保持指定的持续时间。

不支持的功能
=============

- 定时器激活是一次性的，并且不支持延长或缩短定时器。

示例
====

用例 1::
  
  echo transient > trigger
  echo n > duration
  echo 1 > state

根据需要重复以下步骤::

  echo 1 > activate - 开始定时器 = 持续时间运行一次
  echo 1 > activate - 开始定时器 = 持续时间运行一次
  echo none > trigger

此触发器预期用于以下示例场景：

- 用户空间应用程序使用LED作为活动指示器。
- 用户空间应用程序使用LED作为一种看门狗指示器 —— 只要应用程序还活着，它就可以使LED保持点亮状态；如果应用程序死亡，则LED将自动熄灭。
- 任何需要瞬态GPIO输出的用户空间应用程序都可以使用。
