SPDX 许可证标识符: GPL-2.0

==================================
_DSD 设备属性使用规则
==================================

属性、属性集和属性子集
==============================================

在 ACPI 5.1 中引入的 _DSD（设备特定数据）配置对象允许通过 ACPI 命名空间提供任何类型的设备配置数据。原则上，数据格式可以是任意的，但必须通过一个 UUID 进行标识，并且该 UUID 必须被处理 _DSD 输出的驱动程序识别。然而，在 Linux 内核中定义了由 ACPI 子系统自动处理的通用 UUID，这些 UUID 会自动处理与之相关的数据包，并将这些数据作为“设备属性”提供给设备驱动程序。
设备属性是一个包含字符串键和特定类型值的数据项。
在 ACPI _DSD 的上下文中，它是一个子包的元素，位于 _DSD 返回包中的通用设备属性 UUID 后面，具体格式如《_DSD（设备特定数据）实现指南》文档 [1] 中“已知 _DSD UUID 及数据结构格式”小节下的“设备属性 UUID”部分所述。
它也可以视为设备属性 UUID 子包中可以返回的键及其关联数据类型的定义。
属性集是一组适用于硬件实体（如设备）的属性。在 ACPI _DSD 上下文中，它是为特定设备返回的所有属性集合。
属性子集是嵌套的属性集合。每个子集都与一个额外的键（名称）相关联，使得子集可以作为一个整体进行引用（并作为单独的实体处理）。属性子集的规范表示方式是在《_DSD（设备特定数据）实现指南》文档 [1] 中“已知 _DSD UUID 及数据结构格式”小节下的“分层数据扩展 UUID”部分中指定的机制。
属性集可以是分层的。也就是说，一个属性集可以包含多个属性子集，而每个属性子集又可以包含自己的子集等等。

属性集的有效性规则
=======================================

有效的属性集必须遵循设备属性 UUID 定义文档 [1] 中给出的指导原则。
_DSD 属性旨在作为现有 ACPI 规范定义的机制的补充而不是替代。因此，通常情况下，只有当 ACPI 规范没有直接规定处理底层用例时，才应使用它们。通常来说，从与设备属性 UUID 相关的数据包中返回不遵循此规则的属性集是无效的。

其他考虑事项
-------------------------
存在一些情况，即使原则上遵循上述一般规则，属性集仍可能被视为无效。
例如，这适用于可能导致内核代码（无论是设备驱动程序还是库/子系统）以可能与 ACPI 命名空间中的 AML 方法产生冲突的方式访问硬件的设备属性。特别地，如果内核代码使用设备属性来操作通常由与电源管理相关的 ACPI 方法（如 _PSx 和 _DSW（对于设备对象）或 _ON 和 _OFF（对于电源资源对象））控制的硬件，或者由 ACPI 设备禁用/启用方法（如 _DIS 和 _SRS）控制的硬件，就可能会发生这种情况。

在所有内核代码因使用设备属性而导致 AML 混乱的情况下，这些设备属性不适合 ACPI 环境，因此它们不能属于一个有效的属性集。

属性集和设备树绑定
===================

通常情况下，让 _DSD 返回遵循设备树（Device Tree）绑定的属性集是有用的。然而，在这种情况下，首先必须考虑上述的有效性问题，并且应避免从 _DSD 返回无效的属性集。因此，可能无法让 _DSD 完全按给定的设备树绑定字面意义返回属性集。然而，为了代码重用的目的，提供尽可能多的配置数据作为设备属性，并辅以适合当前使用场景的 ACPI 特定机制，仍然是有意义的。

无论如何，不应期望字面上遵循设备树绑定的属性集无论其内容如何都能自动在 ACPI 环境中工作。

参考文献
=========

.. [1] https://github.com/UEFI/DSD-Guide
