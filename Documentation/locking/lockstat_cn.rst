锁统计
===============

是什么
====

顾名思义，它提供了关于锁的统计数据。

为什么
===

因为锁竞争等问题会严重影响性能。

如何实现
===

锁依赖（Lockdep）已经在锁函数中添加了钩子，并将锁实例映射到锁类别。我们在此基础上进行构建（详见Documentation/locking/lockdep-design.rst）。
下面的图展示了锁函数及其内部各种钩子之间的关系：

```
        __acquire
            |
           lock _____
            |        \
            |    __contended
            |         |
            |       <wait>
            | _______/
            |/
            |
       __acquired
            |
<hold>
|
       __release
            |
         unlock
```

- `lock`, `unlock` - 常规的锁函数
- `__*` - 钩子
- `<>` - 状态

通过这些钩子，我们提供了以下统计数据：

- `con-bounces` - 涉及跨CPU数据的锁竞争次数
- `contentions` - 在获取锁时需要等待的次数
- `wait time`
  - `min` - 最短（非零）等待时间
  - `max` - 最长等待时间
  - `total` - 总等待时间
  - `avg` - 平均等待时间
- `acq-bounces` - 涉及跨CPU数据的锁获取次数
- `acquisitions` - 获取锁的次数
- `hold time`
  - `min` - 最短（非零）持有时间
  - `max` - 最长持有时间
  - `total` - 总持有时间
  - `avg` - 平均持有时间

这些统计数据是按锁类别和读写状态（适用时）收集的。
每个类别还跟踪四个竞争点。一个竞争点是指在获取锁时需要等待的调用位置。

配置
------

锁统计功能通过CONFIG_LOCK_STAT启用。

使用方法
-----

启用统计信息收集：
```
# echo 1 >/proc/sys/kernel/lock_stat
```

禁用统计信息收集：
```
# echo 0 >/proc/sys/kernel/lock_stat
```

查看当前锁统计信息：
```
( 行号不是实际输出的一部分，只是为了解释清楚 )
# less /proc/lock_stat

01 lock_stat version 0.4
02-------------------------------------------------------------------------------------------------------------------------------------------------------------
03                              class name    con-bounces    contentions   waittime-min   waittime-max waittime-total   waittime-avg    acq-bounces   acquisitions   holdtime-min   holdtime-max holdtime-total   holdtime-avg
04-------------------------------------------------------------------------------------------------------------------------------------------------------------
05
06                         &mm->mmap_sem-W:            46             84           0.26         939.10       16371.53         194.90          47291        2922365           0.16     2220301.69 17464026916.32        5975.99
07                         &mm->mmap_sem-R:            37            100           1.31      299502.61      325629.52        3256.30         212344       34316685           0.10        7744.91    95016910.20           2.77
08                         ---------------
09                           &mm->mmap_sem              1          [<ffffffff811502a7>] khugepaged_scan_mm_slot+0x57/0x280
10                           &mm->mmap_sem             96          [<ffffffff815351c4>] __do_page_fault+0x1d4/0x510
11                           &mm->mmap_sem             34          [<ffffffff81113d77>] vm_mmap_pgoff+0x87/0xd0
12                           &mm->mmap_sem             17          [<ffffffff81127e71>] vm_munmap+0x41/0x80
13                         ---------------
14                           &mm->mmap_sem              1          [<ffffffff81046fda>] dup_mmap+0x2a/0x3f0
15                           &mm->mmap_sem             60          [<ffffffff81129e29>] SyS_mprotect+0xe9/0x250
16                           &mm->mmap_sem             41          [<ffffffff815351c4>] __do_page_fault+0x1d4/0x510
17                           &mm->mmap_sem             68          [<ffffffff81113d77>] vm_mmap_pgoff+0x87/0xd0
18
19............................................................................................................................................................................................................................
20
21                         unix_table_lock:           110            112           0.21          49.24         163.91           1.46          21094          66312           0.12         624.42       31589.81           0.48
22                         ---------------
23                         unix_table_lock             45          [<ffffffff8150ad8e>] unix_create1+0x16e/0x1b0
24                         unix_table_lock             47          [<ffffffff8150b111>] unix_release_sock+0x31/0x250
25                         unix_table_lock             15          [<ffffffff8150ca37>] unix_find_other+0x117/0x230
26                         unix_table_lock              5          [<ffffffff8150a09f>] unix_autobind+0x11f/0x1b0
27                         ---------------
28                         unix_table_lock             39          [<ffffffff8150b111>] unix_release_sock+0x31/0x250
29                         unix_table_lock             49          [<ffffffff8150ad8e>] unix_create1+0x16e/0x1b0
30                         unix_table_lock             20          [<ffffffff8150ca37>] unix_find_other+0x117/0x230
31                         unix_table_lock              4          [<ffffffff8150a09f>] unix_autobind+0x11f/0x1b0
```

这段摘录显示了前两个锁类别的统计数据。第01行显示输出版本——每次格式更改时都会更新。第02-04行显示带有列描述的表头。第05-18行和20-31行显示实际的统计数据。这些统计数据分为两部分：实际统计数据由一个短分割符（第08行、13行）与竞争点分开。
行09-12显示了前4个记录的竞争点（试图获取锁的代码），而行14-17显示了前4个记录的被竞争点（持有锁的代码）。最大连续反弹点（max con-bounces）可能在统计信息中缺失。
第一个锁（05-18）是一个读写锁，在短分隔符上方显示两行。竞争点不匹配列描述符，它们有两个：contentions 和 [<IP>] 符号。第二组竞争点是我们正在争夺的点。
时间值的小数部分以微秒为单位。
处理嵌套锁时，子类可能会出现：

  32..........................................................................................................................................................................................................................
33
  34                               &rq->lock:       13128          13128           0.43         190.53      103881.26           7.91          97454        3453404           0.00         401.11    13224683.11           3.82
  35                               ---------
  36                               &rq->lock          645          [<ffffffff8103bfc4>] task_rq_lock+0x43/0x75
  37                               &rq->lock          297          [<ffffffff8104ba65>] try_to_wake_up+0x127/0x25a
  38                               &rq->lock          360          [<ffffffff8103c4c5>] select_task_rq_fair+0x1f0/0x74a
  39                               &rq->lock          428          [<ffffffff81045f98>] scheduler_tick+0x46/0x1fb
  40                               ---------
  41                               &rq->lock           77          [<ffffffff8103bfc4>] task_rq_lock+0x43/0x75
  42                               &rq->lock          174          [<ffffffff8104ba65>] try_to_wake_up+0x127/0x25a
  43                               &rq->lock         4715          [<ffffffff8103ed4b>] double_rq_lock+0x42/0x54
  44                               &rq->lock          893          [<ffffffff81340524>] schedule+0x157/0x7b8
  45
  46..........................................................................................................................................................................................................................
47
  48                             &rq->lock/1:        1526          11488           0.33         388.73      136294.31          11.86          21461          38404           0.00          37.93      109388.53           2.84
  49                             -----------
  50                             &rq->lock/1        11526          [<ffffffff8103ed58>] double_rq_lock+0x4f/0x54
  51                             -----------
  52                             &rq->lock/1         5645          [<ffffffff8103ed4b>] double_rq_lock+0x42/0x54
  53                             &rq->lock/1         1224          [<ffffffff81340524>] schedule+0x157/0x7b8
  54                             &rq->lock/1         4336          [<ffffffff8103ed58>] double_rq_lock+0x4f/0x54
  55                             &rq->lock/1          181          [<ffffffff8104ba65>] try_to_wake_up+0x127/0x25a

第48行显示了&rq->lock类的第二个子类（/1）的统计信息（子类从0开始），因为如第50行所示，实际上`double_rq_lock`获取了一个嵌套锁，即两个自旋锁。
查看顶级竞争锁：

  # grep : /proc/lock_stat | head
			clockevents_lock:       2926159        2947636           0.15       46882.81  1784540466.34         605.41        3381345        3879161           0.00        2260.97    53178395.68          13.71
		     tick_broadcast_lock:        346460         346717           0.18        2257.43    39364622.71         113.54        3642919        4242696           0.00        2263.79    49173646.60          11.59
		  &mapping->i_mmap_mutex:        203896         203899           3.36      645530.05 31767507988.39      155800.21        3361776        8893984           0.17        2254.15    14110121.02           1.59
			       &rq->lock:        135014         136909           0.18         606.09      842160.68           6.15        1540728       10436146           0.00         728.72    17606683.41           1.69
	       &(&zone->lru_lock)->rlock:         93000          94934           0.16          59.18      188253.78           1.98        1199912        3809894           0.15         391.40     3559518.81           0.93
			 tasklist_lock-W:         40667          41130           0.23        1189.42      428980.51          10.43         270278         510106           0.16         653.51     3939674.91           7.72
			 tasklist_lock-R:         21298          21305           0.20        1310.05      215511.12          10.12         186204         241258           0.14        1162.33     1179779.23           4.89
			      rcu_node_1:         47656          49022           0.16         635.41      193616.41           3.95         844888        1865423           0.00         764.26     1656226.96           0.89
       &(&dentry->d_lockref.lock)->rlock:         39791          40179           0.15        1302.08       88851.96           2.21        2790851       12527025           0.10        1910.75     3379714.27           0.27
			      rcu_node_0:         29203          30064           0.16         786.55     1555573.00          51.74          88963         244254           0.00         398.87      428872.51           1.76

清除统计信息：

  # echo 0 > /proc/lock_stat
