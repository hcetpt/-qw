### SPDX 许可证标识符: GPL-2.0

===================================
从用户空间运行 BPF 程序
===================================

本文档描述了 `BPF_PROG_RUN` 设施，用于从用户空间运行 BPF 程序。
.. contents::
    :local:
    :depth: 2


概述
--------

`BPF_PROG_RUN` 命令可以通过 `bpf()` 系统调用来执行内核中的 BPF 程序，并将结果返回给用户空间。这可以用于单元测试用户提供的上下文对象上的 BPF 程序，以及作为明确地在内核中执行程序以产生副作用的方式。该命令以前被称为 `BPF_PROG_TEST_RUN`，这两个常量继续在用户空间 API 头文件中定义为相同的值。
`BPF_PROG_RUN` 命令可用于执行以下类型的 BPF 程序：

- `BPF_PROG_TYPE_SOCKET_FILTER`
- `BPF_PROG_TYPE_SCHED_CLS`
- `BPF_PROG_TYPE_SCHED_ACT`
- `BPF_PROG_TYPE_XDP`
- `BPF_PROG_TYPE_SK_LOOKUP`
- `BPF_PROG_TYPE_CGROUP_SKB`
- `BPF_PROG_TYPE_LWT_IN`
- `BPF_PROG_TYPE_LWT_OUT`
- `BPF_PROG_TYPE_LWT_XMIT`
- `BPF_PROG_TYPE_LWT_SEG6LOCAL`
- `BPF_PROG_TYPE_FLOW_DISSECTOR`
- `BPF_PROG_TYPE_STRUCT_OPS`
- `BPF_PROG_TYPE_RAW_TRACEPOINT`
- `BPF_PROG_TYPE_SYSCALL`

使用 `BPF_PROG_RUN` 命令时，用户空间提供一个输入上下文对象和（对于处理网络数据包的程序类型）包含 BPF 程序将操作的数据包数据的缓冲区。内核随后会执行该程序并将结果返回给用户空间。需要注意的是，在这种模式下运行的程序不会有任何副作用；特别是，数据包实际上不会被重定向或丢弃，程序的返回码只是被返回给用户空间。对于 XDP 程序的实时执行提供了单独的模式，下面单独进行说明。

在“实时帧模式”下运行 XDP 程序
----------------------------------------

`BPF_PROG_RUN` 命令有一个单独的模式用于运行实时 XDP 程序，可以用来以一种实际数据包会被内核处理的方式来执行 XDP 程序，就像它们是从物理接口到达的一样。通过在向 `BPF_PROG_RUN` 提供 XDP 程序时设置 `BPF_F_TEST_XDP_LIVE_FRAMES` 标志来激活此模式。
实时数据包模式针对多次高性能执行提供的 XDP 程序进行了优化（适合用作流量生成器），这意味着语义不像常规测试模式那样直接。具体来说：

- 当以实时帧模式执行 XDP 程序时，执行的结果不会返回给用户空间；相反，内核将执行由程序返回码指示的操作（丢弃数据包、重定向它等）。因此，在此模式下运行时设置参数中的 `data_out` 或 `ctx_out` 属性将被拒绝。此外，并非所有失败都会直接报告给用户空间；特别地，只有在设置或执行期间的致命错误（如内存分配错误）才会中断执行并返回错误。如果在数据包处理中发生错误，例如无法重定向到给定接口，执行将继续下一重复；这些错误可以通过与常规 XDP 程序相同的追踪点检测
- 用户空间可以在上下文对象中提供 ifindex，就像在常规（非实时）模式中一样。XDP 程序将像数据包到达这个接口一样执行；即，上下文对象的 `ingress_ifindex` 将指向该接口。此外，如果 XDP 程序返回 `XDP_PASS`，数据包将像到达该 ifindex 一样注入内核网络堆栈，如果它返回 `XDP_TX`，数据包将从同一个接口传出。但请注意，因为程序执行不是在驱动程序上下文中发生的，`XDP_TX` 实际上会变成与向同一接口的 `XDP_REDIRECT` 相同的操作（即，只有当驱动程序支持 `ndo_xdp_xmit` 驱动操作时才有效）
- 在多次重复运行程序时，执行将以批处理方式进行。批处理大小默认为 64 个数据包（与最大 NAPI 接收批处理大小相同），但用户空间可以通过 `batch_size` 参数指定，最多可达 256 个数据包。对于每个批处理，内核反复执行 XDP 程序，每次调用都获得数据包数据的一个单独副本。对于每次重复，如果程序丢弃数据包，则数据页立即回收（见下文）。否则，数据包将被缓冲直到批处理结束，此时该批处理期间以这种方式缓冲的所有数据包将一次性传输
- 在设置测试运行时，内核将初始化一个与批处理大小相同的内存页池。每个内存页将使用用户空间在调用 `BPF_PROG_RUN` 时提供的初始数据包数据初始化。在可能的情况下，页面将在未来的程序调用中被回收，以提高性能。页面通常一次一个批处理进行回收，除非数据包被丢弃（由于返回码或例如重定向错误），在这种情况下该页面将立即回收。如果数据包最终被传递到常规网络堆栈（因为 XDP 程序返回 `XDP_PASS`，或者因为它最终被重定向到注入堆栈的接口），页面将被释放，并在池为空时分配一个新的页面
当进行回收时，页面内容不会重写；仅上下文对象中的数据包边界指针（`data`、`data_end` 和 `data_meta`）将重置为原始值。这意味着如果程序重写了数据包的内容，它必须准备好在后续调用中看到原始内容或修改后的版本。
