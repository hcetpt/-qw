下面是给定的图形描述语言（Graphviz DOT language）代码翻译成中文版本：

```dot
// SPDX-许可证标识符: GPL-2.0-only
// 版权所有 (C) 2022-2023 Isovalent, Inc
digraph {
  node [颜色方案=accent4,样式=填充] # 将颜色方案应用于所有节点
  graph [样条=ortho, 节点间隔=1]

  子图 cluster_key {
    标签 = "键\n(操作期间持有的锁)";
    排列方向 = TB;

    远程锁 [形状=矩形,填充颜色=4,标签="远程 CPU LRU 锁"]
    哈希锁 [形状=矩形,填充颜色=3,标签="哈希表锁"]
    lru锁 [形状=矩形,填充颜色=2,标签="LRU 锁"]
    本地锁 [形状=矩形,填充颜色=1,标签="本地 CPU LRU 锁"]
    无锁 [形状=矩形,标签="没有持有的锁"]
  }

  开始 [形状=椭圆,标签="开始\nbpf_map_update()"]

  // 下面带有 'fn_' 前缀的节点大致按内核/bpf/bpf_lru_list.c 中相应逻辑启动的 C 函数名称进行标记
// 数字后缀和 errno 后缀处理该函数中编写时的子部分逻辑
// 参见 __local_list_pop_free() / bpf_percpu_lru_pop_free()
  本地空闲列表检查 [形状=菱形,填充颜色=1,
    标签="本地空闲列表\n节点可用？"];
  使用本地节点 [形状=矩形,
    标签="使用属于\n此 CPU 的节点"]

  // 参见 bpf_lru_pop_free()
  共用lru检查 [形状=菱形,
    标签="使用共用 LRU 创建映射？\n(!BPF_F_NO_COMMON_LRU)"];

  fn_bpf_lru_list_pop_free_to_local [形状=矩形,填充颜色=2,
    标签="清空本地待处理项,\n旋转全局列表,移动\nLOCAL_FREE_TARGET\n从全局 -> 本地"]
  // 同样对应于：
  // fn__local_list_flush()
  // fn_bpf_lru_list_rotate()
  fn___bpf_lru_node_move_to_free[形状=菱形,填充颜色=2,
    标签="能否释放\nLOCAL_FREE_TARGET\n节点？"]

  fn___bpf_lru_list_shrink_inactive [形状=矩形,填充颜色=3,
    标签="缩小非活动列表\n最多剩余\nLOCAL_FREE_TARGET\n(全局 LRU -> 本地)"]
  fn___bpf_lru_list_shrink [形状=菱形,填充颜色=2,
    标签="本地空闲列表\n中有 > 0 个条目？"]
  fn___bpf_lru_list_shrink2 [形状=矩形,填充颜色=2,
    标签="从非活动项中窃取一个节点，或如果为空，\n则从全局活动列表中窃取"]
  fn___bpf_lru_list_shrink3 [形状=矩形,填充颜色=3,
    标签="尝试从哈希表\n中移除节点"]

  本地空闲列表检查2 [形状=菱形,标签="哈希表移除\n成功？"]
  共用lru检查2 [形状=菱形,
    标签="使用共用 LRU 创建映射？\n(!BPF_F_NO_COMMON_LRU)"];

  子图 cluster_remote_lock {
    标签 = "遍历 CPU\n(从当前 CPU 开始)";
    样式 = 点划线;
    排列方向=LR;

    本地空闲列表检查5 [形状=菱形,填充颜色=4,
      标签="从每 CPU 空闲列表中\n窃取一个节点？"]
    本地空闲列表检查6 [形状=矩形,填充颜色=4,
      标签="从 (1) 未引用的待处理项中窃取, 或\n(2) 任何待处理节点"]
    本地空闲列表检查7 [形状=矩形,填充颜色=3,
      标签="尝试从哈希表\n中移除节点"]
    fn_htab_lru_map_update_elem [形状=菱形,
      标签="从远程\nCPU 中窃取节点？"]
    fn_htab_lru_map_update_elem2 [形状=菱形,标签="遍历\n所有 CPU？"]
    // 同样对应于：
    // 使用本地节点()
    // fn__local_list_pop_pending()
  }

  fn_bpf_lru_list_pop_free_to_local2 [形状=矩形,
    标签="使用最近\n未引用的节点"]
  本地空闲列表检查4 [形状=矩形,
    标签="使用在全局列表中\n主动引用的节点"]
  fn_htab_lru_map_update_elem_ENOMEM [形状=椭圆,标签="返回 -ENOMEM"]
  fn_htab_lru_map_update_elem3 [形状=矩形,
    标签="使用在 (另一个?) CPU 缓存中\n主动引用的节点"]
  fn_htab_lru_map_update_elem4 [形状=矩形,填充颜色=3,
    标签="更新哈希表\n与新元素"]
  fn_htab_lru_map_update_elem5 [形状=椭圆,标签="返回 0"]
  fn_htab_lru_map_update_elem_EBUSY [形状=椭圆,标签="返回 -EBUSY"]
  fn_htab_lru_map_update_elem_EEXIST [形状=椭圆,标签="返回 -EEXIST"]
  fn_htab_lru_map_update_elem_ENOENT [形状=椭圆,标签="返回 -ENOENT"]

  开始 -> 本地空闲列表检查
  本地空闲列表检查 -> 使用本地节点 [边标签="Y"]
  本地空闲列表检查 -> 共用lru检查 [边标签="N"]
  共用lru检查 -> fn_bpf_lru_list_pop_free_to_local [边标签="Y"]
  共用lru检查 -> fn___bpf_lru_list_shrink_inactive [边标签="N"]
  fn_bpf_lru_list_pop_free_to_local -> fn___bpf_lru_node_move_to_free
  fn___bpf_lru_node_move_to_free ->
    fn_bpf_lru_list_pop_free_to_local2 [边标签="Y"]
  fn___bpf_lru_node_move_to_free ->
    fn___bpf_lru_list_shrink_inactive [边标签="N"]
  fn___bpf_lru_list_shrink_inactive -> fn___bpf_lru_list_shrink
  fn___bpf_lru_list_shrink -> fn_bpf_lru_list_pop_free_to_local2 [边标签 = "Y"]
  fn___bpf_lru_list_shrink -> fn___bpf_lru_list_shrink2 [边标签="N"]
  fn___bpf_lru_list_shrink2 -> fn___bpf_lru_list_shrink3
  fn___bpf_lru_list_shrink3 -> 本地空闲列表检查2
  本地空闲列表检查2 -> 本地空闲列表检查4 [边标签 = "Y"]
  本地空闲列表检查2 -> 共用lru检查2 [边标签 = "N"]
  共用lru检查2 -> 本地空闲列表检查5 [边标签 = "Y"]
  共用lru检查2 -> fn_htab_lru_map_update_elem_ENOMEM [边标签 = "N"]
  本地空闲列表检查5 -> fn_htab_lru_map_update_elem [边标签 = "Y"]
  本地空闲列表检查5 -> 本地空闲列表检查6 [边标签 = "N"]
  本地空闲列表检查6 -> 本地空闲列表检查7
  本地空闲列表检查7 -> fn_htab_lru_map_update_elem

  fn_htab_lru_map_update_elem -> fn_htab_lru_map_update_elem3 [边标签 = "Y"]
  fn_htab_lru_map_update_elem -> fn_htab_lru_map_update_elem2  [边标签 = "N"]
  fn_htab_lru_map_update_elem2 ->
    fn_htab_lru_map_update_elem_ENOMEM [边标签 = "Y"]
  fn_htab_lru_map_update_elem2 -> 本地空闲列表检查5 [边标签 = "N"]
  fn_htab_lru_map_update_elem3 -> fn_htab_lru_map_update_elem4

  使用本地节点 -> fn_htab_lru_map_update_elem4
  fn_bpf_lru_list_pop_free_to_local2 -> fn_htab_lru_map_update_elem4
  本地空闲列表检查4 -> fn_htab_lru_map_update_elem4

  fn_htab_lru_map_update_elem4 -> fn_htab_lru_map_update_elem5 [头标签="成功"]
  fn_htab_lru_map_update_elem4 ->
    fn_htab_lru_map_update_elem_EBUSY [边标签="哈希表锁失败"]
  fn_htab_lru_map_update_elem4 ->
    fn_htab_lru_map_update_elem_EEXIST [边标签="设置了 BPF_EXIST 并且\n键已存在"]
  fn_htab_lru_map_update_elem4 ->
    fn_htab_lru_map_update_elem_ENOENT [头标签="设置了 BPF_NOEXIST\n并且没有此类条目"]

  // 创建不可见的填充节点以对齐各种节点
  pad0 [样式=不可见]
  pad1 [样式=不可见]
  pad2 [样式=不可见]
  pad3 [样式=不可见]
  pad4 [样式=不可见]

  // 对齐键与图形顶部
  无锁 -> 本地锁 [样式=不可见]
  本地锁 -> lru锁 [样式=不可见]
  lru锁 -> 哈希锁 [样式=不可见]
  哈希锁 -> 远程锁 [样式=不可见]
  远程锁 -> 本地空闲列表检查5 [样式=不可见]
  远程锁 -> fn___bpf_lru_list_shrink [样式=不可见]

  // 在图形底部对齐返回码节点
  fn_htab_lru_map_update_elem -> pad0 [样式=不可见]
  pad0 -> pad1 [样式=不可见]
  pad1 -> pad2 [样式=不可见]
  //pad2-> fn_htab_lru_map_update_elem_ENOMEM [样式=不可见]
  fn_htab_lru_map_update_elem4 -> pad3 [样式=不可见]
  pad3 -> fn_htab_lru_map_update_elem5  [样式=不可见]
  pad3 -> fn_htab_lru_map_update_elem_EBUSY  [样式=不可见]
  pad3 -> fn_htab_lru_map_update_elem_EEXIST  [样式=不可见]
  pad3 -> fn_htab_lru_map_update_elem_ENOENT  [样式=不可见]

  // 通过强制某些节点出现在其他节点上方来减小图表宽度
  本地空闲列表检查4 -> fn_htab_lru_map_update_elem3 [样式=不可见]
  共用lru检查2 -> pad4 [样式=不可见]
  pad4 -> 本地空闲列表检查5 [样式=不可见]
}
```

请注意，DOT 语言本身不支持中文字符作为关键字，因此上述翻译中的“形状”、“填充颜色”等是根据上下文进行的意译。实际生成图形时，需要将这些关键词替换为 Graphviz 支持的英文关键字。
