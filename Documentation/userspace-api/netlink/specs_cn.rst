SPDX 许可证标识符: BSD-3-Clause

=========================================
Netlink 协议规范（使用 YAML）
=========================================

Netlink 协议规范是对 Netlink 协议的完整、可读性高的描述，采用 YAML 编写。规范的目标是将 Netlink 解析与用户空间逻辑分离，并尽量减少为每个新的族、命令和属性编写的手动 Netlink 代码量。Netlink 规范应该是完整的，不依赖于任何其他规范或 C 头文件，这使得它在无法直接包含内核头文件的语言中也能方便使用。

内核内部使用 YAML 规范来生成：

- C 用户空间 API（uAPI）头文件
- 协议文档（作为 ReST 文件）- 参见 :ref:`Documentation/networking/netlink_spec/index.rst <specs>`
- 输入属性验证的策略表
- 操作表

YAML 规范可以在 ``Documentation/netlink/specs/`` 目录下找到。

本文档详细描述了该模式。
参见 :doc:`intro-specs` 获取实用的入门指南。
所有规范必须在 ``((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)`` 许可下发布，以便用户空间代码能够轻松采纳。

兼容性级别
====================

Netlink 规范有四个模式级别，从最简单的用于新族的级别到覆盖旧族所有特性的最复杂的级别。每个后续级别继承前一个级别的特性，这意味着能够解析更复杂 ``genetlink`` 模式的用户也兼容更简单的模式。这些级别包括：

- ``genetlink`` - 最简洁，应由所有新族使用
- ``genetlink-c`` - 是 ``genetlink`` 的超集，带有额外的属性以允许自定义定义和枚举类型及值名称；对于不直接与 C uAPI 头文件交互的所有实现来说，此模式应等同于 ``genetlink``
- ``genetlink-legacy`` - 支持所有旧 genetlink 家族的通用 Netlink 兼容模式，支持奇怪的属性格式、二进制结构等
- ``netlink-raw`` - 支持如 ``NETLINK_ROUTE`` 这样的非 Generic Netlink 协议

模式定义（使用 ``jsonschema``）可以在 ``Documentation/netlink/`` 下找到。

模式结构
================

YAML 模式包含以下概念部分：

- 全局设置
- 定义
- 属性
- 操作
- 组播组

模式中的大多数属性接受（实际上需要）一个 ``doc`` 子属性，用于记录所定义的对象。
以下部分描述了最现代的 ``genetlink`` 模式的属性。有关如何从名称属性派生 C 名称的信息，请参阅 :doc:`genetlink-c <c-code-gen>` 的文档。
请参阅 :ref:`Documentation/core-api/netlink.rst <kernel_netlink>`，了解仅与内核空间相关、不属于用户空间 API 的 Netlink 规范属性。

genetlink
=========

全局变量
--------

在规范文件根级别直接列出的属性

名称
~~~~

家族名称。名称以唯一方式标识家族，因为家族 ID 是动态分配的。
协议
~~~~~~~~

模式级别，默认是 ``genetlink``，这是新 ``genetlink`` 家族允许的唯一值。

定义
-------------

类型和常量定义的数组

名称
~~~~

类型的名称 / 常量
类型
~~~~

以下类型之一：

- const - 单个独立的常量
- enum - 定义一个整数枚举，每个条目的值递增 1（例如 0, 1, 2, 3）
- flags - 定义一个整数枚举，每个条目的值占用一个比特位，从比特位 0 开始（例如 1, 2, 4, 8）

值
~~~~~

``const`` 的值
值起始
~~~~~~~~~~~

``enum`` 和 ``flags`` 的第一个值，允许覆盖默认的起始值 ``0``（对于 ``enum``）和起始比特位（对于 ``flags``）。对于 ``flags``，``value-start`` 选择的是起始比特位，而不是移位后的值。稀疏枚举不被支持。
### entries
``enum`` 和 ``flags`` 的条目名称数组。

### header
对于与 C 兼容的语言，已经定义了该值的头文件。如果定义被多个家族共享（例如 ``IFNAMSIZ``），与 C 兼容的语言的代码生成器可能更倾向于添加适当的包含文件而不是重新定义新的定义。

### attribute-sets
此属性包含有关该家族的 netlink 属性的信息。所有家族至少有一个属性集，大多数有多个。``attribute-sets`` 是一个数组，每个条目描述一个单独的属性集。请注意，规范是“扁平化”的，并不是为了在视觉上类似于 netlink 消息的格式（不像内核注释中看到的某些自定义文档格式）。在规范中，子属性集不是作为嵌套项内联定义的，而是在通过容器的 ``nested-attributes`` 属性引用的单独属性集中定义的。

规范中还可能包含部分集——包含 ``subset-of`` 属性的集合。这样的集合描述了一个完整集合的一部分，允许缩小嵌套中允许的属性范围或细化验证标准。部分集只能在嵌套中使用。它们不会以任何形式渲染到用户空间 API（uAPI）中。

### name
唯一标识属性集、操作和嵌套属性。操作和嵌套属性通过 ``name`` 引用这些集合。
子集（subset-of）
~~~~~~~~~~~~~~~~~

重新定义另一个集合的一部分（分数集合）
允许缩小字段范围并更改验证标准，甚至根据其所包含的嵌套更改属性类型。分数集合中每个属性的`值`隐式地与主集合中的属性值相同。
属性
~~~~~~~~~~

集合中的属性列表
.. _attribute_properties:

属性特性
--------------------

名称（name）
~~~~

标识属性，在集合内唯一。
类型（type）
~~~~

Netlink 属性类型，参见 :ref:`attr_types`
.. _assign_val:

值（value）
~~~~~

数值属性ID，用于序列化的 Netlink 消息中。
`值` 属性可以省略，在这种情况下，属性ID将是前一个属性值加一（递归），对于属性集合中的第一个属性其值为 `1`。
属性（及其操作）使用 `1` 作为第一个条目的默认值（不同于从 `0` 开始的定义中的枚举），因为条目 `0` 几乎总是被保留为未定义。如果需要，规范可以显式地将值设置为 `0`。
请注意，属性的 `值` 只在其主集合中定义（不在子集中）。
枚举（enum）
~~~~

对于整数类型，指定属性中的值属于 `definitions` 部分中的 `enum` 或 `flags`。
### 将 `enum` 作为 `flags` 处理

无论 `enum` 的类型如何，在 `definitions` 中将其视为 `flags`。当需要同时使用 `enum` 和 `flags` 形式时，`definitions` 应包含一个 `enum`，而需要 `flags` 形式的属性应使用此属性。

### 嵌套属性

标识给定属性内的嵌套属性空间。仅适用于可能具有子属性的复杂属性。

### 多属性（数组）

布尔属性，表示该属性可以多次出现。允许属性重复是实现数组（无需额外嵌套）的推荐方法。

### 字节序

对于整数类型，指定属性的字节序——`little-endian` 或 `big-endian`。

### 检查

内核使用的输入验证约束。用户空间应该通过通用 Netlink 反射查询运行中的内核策略，而不是依赖于规范文件中指定的内容。内核中的验证策略是由类型定义（`type` 和 `nested-attributes`）和 `checks` 子类型组合形成的。

### 子类型

传统家族有特殊的数组表达方式。`sub-type` 可用于定义数组成员的类型，尤其是在数组成员未完全作为属性定义（在一个真实的属性空间中）的情况下。例如，一个 C 语言中的 u32 数组可以用 `type: binary` 和 `sub-type: u32` 来指定。二进制类型和传统数组格式在 :doc:`genetlink-legacy` 中有更详细的描述。
### display-hint

可选的格式指示符，仅用于选择显示此类型值时的正确格式化机制。当前支持的提示包括 `hex`、`mac`、`fddi`、`ipv4`、`ipv6` 和 `uuid`。

### 操作

本节描述了内核与用户空间之间传递的消息。本节中有三种类型的条目：操作、通知和事件。

- **操作** 描述最常见的请求-响应通信。用户发送一个请求，内核进行回复。每个操作可以包含任何组合的两种模式，即 netlink 用户熟悉的 `do` 和 `dump`。
  - `do` 和 `dump` 又包含了 `request` 和 `response` 属性的组合。如果没有在给定方向上传递明确的消息（例如不接受过滤器的 `dump` 或者内核只返回 netlink 错误码的 `do`），则可以省略 `request` 或 `response` 部分。
  - `request` 和 `response` 部分列出了消息中允许的属性。列表中只包含由 `attribute-set` 属性引用的一组属性的名字。

- **通知** 和 **事件** 都指的是内核向多播组成员发送的异步消息。两者的区别在于，通知的内容与某个 GET 操作共享（GET 操作的名字指定在 `notify` 属性中）。这种安排通常用于对象的通知，其中通知携带完整的对象定义。
  - 事件更为具体，只携带对象状态的一部分信息，而不是完整的信息（例如，一个只包含接口名称和新链路状态的链路状态变更事件）。事件包含 `event` 属性。事件被认为是 netlink 中不太常见的做法，应优先使用通知。
``operations`` 对于 ``genetlink`` 的唯一属性，持有操作列表、通知等。

操作属性
--------

name
~~~~

标识操作。
value
~~~~~

数值消息ID，用于序列化的Netlink消息中。与 :ref:`属性值<assign_val>` 使用相同的枚举规则。
attribute-set
~~~~~~~~~~~~~

指定消息中包含的属性集。
do
~~~

``doit`` 请求的规范。应包含 ``request``、``reply`` 或这两项属性，每项属性都持有一个 :ref:`attr_list`。
dump
~~~~

``dumpit`` 请求的规范。应包含 ``request``、``reply`` 或这两项属性，每项属性都持有一个 :ref:`attr_list`。
notify
~~~~~~

将消息标记为通知。包含与通知（``do``）共享内容的操作名称（可能是持有此属性的操作的相同名称）。
event
~~~~~

事件中的属性规范，持有一个 :ref:`attr_list`。``event`` 属性与 ``notify`` 互斥。
### mcgrp

与`event`和`notify`一起使用时，指定消息属于哪个多播组。

#### 消息属性列表

``request``、``reply``和``event``属性具有一个名为``attributes``的属性，该属性包含属性名称的列表。消息还可以定义``pre``和``post``属性，这些属性将在内核中渲染为``pre_doit``和``post_doit``调用（这些属性应被用户空间忽略）。

#### 多播组

---

此部分列出了家族中的多播组。

**列表**

``mcast-groups``对于``genetlink``的唯一属性是多播组的列表。

#### 多播组属性

**名称**

唯一地标识家族中的多播组。类似于家族ID，多播组ID需要根据名称在运行时解析。

#### 属性类型

---

本节描述了由``genetlink``兼容级别支持的属性类型。有关其他属性类型的详细信息，请参阅不同级别的文档。

**通用整数类型**

``sint``和``uint``分别表示带符号和无符号的64位整数。如果值可以放在32位内，则在Netlink消息中只携带32位；否则将携带完整的64位。请注意，有效载荷仅对齐到4字节，因此完整的64位值可能是未对齐的！

在大多数情况下，应优先选择通用整数类型而不是固定宽度类型。

**固定宽度整数类型**

固定宽度整数类型包括：
``u8``、``u16``、``u32``、``u64``、``s8``、``s16``、``s32``、``s64``。
注意，小于 32 位的类型应避免使用，因为在 Netlink 消息中使用它们并不会节省任何内存（由于对齐原因）。
参见 :ref:`pad_type` 了解关于 64 位属性填充的信息。
除非 `byte-order` 另有说明，属性的有效载荷是主机字节序下的整数。
64 位值通常由内核对齐，但建议用户空间能够处理未对齐的值。

.. _pad_type:

填充
---

用于需要更大对齐的属性的特殊属性类型（例如 64 位整数），标准的 Netlink 对齐为 4 字节。
在任何属性集中只能有一个 `pad` 类型的属性，并且在需要时应自动用于填充。

标志
----

没有有效载荷的属性，其存在本身即全部信息。

二进制
------

原始二进制数据属性，通用代码对其内容不透明。

字符串
------

字符字符串。除非 `checks` 中的 `unterminated-ok` 设置为 `true`，否则字符串必须以空字符终止。
`checks` 中的 `max-len` 表示最长可能的字符串长度；如果未设置，则字符串长度无限制。
请注意，``max-len`` 不包括终止字符
nest
----

属性中包含其他（嵌套）属性
``nested-attributes`` 指定在内部使用哪一组属性
