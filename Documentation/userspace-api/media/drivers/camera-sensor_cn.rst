SPDX 许可证标识符: GPL-2.0

.. _使用摄像头传感器驱动程序:

使用摄像头传感器驱动程序
============================

本节描述了如何使用 V4L2 子设备接口来控制摄像头传感器驱动程序的一些常见做法。
您可能还会发现 :ref:`编写摄像头传感器驱动程序 <media_writing_camera_sensor_drivers>` 有用。

帧大小
--------

存在两种不同的方法来配置摄像头传感器生成的帧大小：

自由配置的摄像头传感器驱动程序
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

自由配置的摄像头传感器驱动程序将设备的内部处理流水线暴露为一个或多个具有不同裁剪和缩放配置的子设备。设备的输出大小是设备像素阵列大小经过一系列裁剪和缩放操作的结果。
CCS 驱动程序就是一个这样的驱动程序示例。

基于寄存器列表的驱动程序
~~~~~~~~~~~~~~~~~~~~~~~~~~~

基于寄存器列表的驱动程序通常不是根据用户请求来配置其所控制的设备，而是限于一组预设配置。这些配置结合了在硬件级别上独立的多个不同参数。驱动程序选择这些配置的方式基于设备内部流水线末尾处设置的格式。
大多数传感器驱动程序都是以这种方式实现的。

帧间隔配置
-------------

有两种不同的方法来获取不同的帧间隔的可能性以及配置帧间隔。选择哪种方法取决于设备类型。

原始摄像头传感器
~~~~~~~~~~~~~~~~~~

帧间隔不是作为高级参数，而是由多个摄像头传感器实现特定参数的配置结果。幸运的是，这些参数对于几乎所有现代原始摄像头传感器来说往往是相同的。
帧间隔通过以下公式计算得出：

```
帧间隔 = (模拟裁剪宽度 + 水平消隐) * (模拟裁剪高度 + 垂直消隐) / 像素速率
```

该公式与总线无关，并适用于除摄像头传感器之外的各种设备上的原始时序参数。没有模拟裁剪的设备使用完整的源图像大小，即像素阵列大小。
水平和垂直消隐分别由 `V4L2_CID_HBLANK` 和 `V4L2_CID_VBLANK` 指定。`V4L2_CID_HBLANK` 控制的单位是像素，而 `V4L2_CID_VBLANK` 的单位是行。传感器中的 **像素阵列** 的像素速率由同一子设备中的 `V4L2_CID_PIXEL_RATE` 指定。该控制的单位是每秒像素。

基于寄存器列表的驱动程序需要实现只读子设备节点以达到此目的。非基于寄存器列表的设备需要这些节点来配置设备内部处理流水线。

线性流水线中的第一个实体是像素阵列。像素阵列后面可能跟着其他实体，以允许配置分箱、跳过、缩放或数字裁剪，请参阅 :ref:`VIDIOC_SUBDEV_G_SELECTION <VIDIOC_SUBDEV_G_SELECTION>`。

USB摄像头等设备
~~~~~~~~~~~~~~~~~~~~~~~~

USB视频类硬件以及许多提供类似高级接口的摄像头通常在固件或硬件级别使用帧间隔（或帧率）的概念。这意味着原始摄像头实现的低级控制可能不会在 uAPI（甚至 kAPI）上用于控制这些设备上的帧间隔。

旋转、方向和翻转
----------------------------------

某些系统中，摄像头传感器相对于其自然安装方向被倒置安装。在这种情况下，驱动程序应通过 :ref:`V4L2_CID_CAMERA_SENSOR_ROTATION <v4l2-camera-sensor-rotation>` 控制将信息暴露给用户空间。

传感器驱动程序还应报告传感器的安装方向，使用 :ref:`V4L2_CID_CAMERA_SENSOR_ORIENTATION <v4l2-camera-sensor-orientation>` 控制。

如果传感器驱动程序在寄存器编程序列中有任何嵌入的垂直或水平翻转，则应初始化 :ref:`V4L2_CID_HFLIP <v4l2-cid-hflip>` 和 :ref:`V4L2_CID_VFLIP <v4l2-cid-vflip>` 控制，并设置寄存器序列编程的值。这些控制的默认值应为 0（禁用）。特别是，无论传感器的安装方向如何，这些控制不应被反转。
