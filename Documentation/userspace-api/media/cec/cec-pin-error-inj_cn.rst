SPDX 许可证标识符: GFDL-1.1-no-invariants-or-later

.. _cec_pin_error_inj:

CEC 引脚框架错误注入
=============================

CEC 引脚框架是专为仅具有 CEC 总线低级支持的 CEC 硬件设计的核心 CEC 框架。如今大多数硬件都有高级 CEC 支持，即硬件负责驱动 CEC 总线，但是一些较旧的设备则不具备这种功能。然而，该框架还允许您将 CEC 引脚连接到例如树莓派上的 GPIO，并且现在您已经制作了一个 CEC 适配器。这之所以有趣是因为我们完全控制了总线，因此很容易支持错误注入。这对于测试 CEC 适配器处理错误条件的能力非常理想。

目前只有当 CEC 线直接连接到上拉 GPIO 线时的 cec-gpio 驱动程序和 AllWinner A10/A20 的 DRM 驱动程序支持此框架。
如果启用了 ``CONFIG_CEC_PIN_ERROR_INJ``，则可以通过 debugfs 进行错误注入。具体来说，在 ``/sys/kernel/debug/cec/cecX/`` 目录下有一个名为 ``error-inj`` 的文件。

.. note::
    错误注入命令不是一个稳定的 ABI，并且将来可能会发生变化。

通过 ``cat error-inj`` 可以查看可能的命令和当前的错误注入状态：
```
$ cat /sys/kernel/debug/cec/cec0/error-inj
# 清除错误注入:
#   clear          清除所有接收和发送的错误注入
#   rx-clear       清除所有接收的错误注入
#   tx-clear       清除所有发送的错误注入
#   <op> clear     清除 <op> 的所有接收和发送的错误注入
#   <op> rx-clear  清除 <op> 的所有接收的错误注入
#   <op> tx-clear  清除 <op> 的所有发送的错误注入
#
# 接收错误注入:
#   <op>[,<mode>] rx-nack              将消息 NACK 而不是发送 ACK
#   <op>[,<mode>] rx-low-drive <bit>   在该位位置强制低电平状态
#   <op>[,<mode>] rx-add-byte          在接收到的 CEC 消息中添加一个额外字节
#   <op>[,<mode>] rx-remove-byte       从接收到的 CEC 消息中移除最后一个字节
#    any[,<mode>] rx-arb-lost [<poll>] 生成一个 POLL 消息以触发仲裁失败
#
# 发送错误注入设置:
#   tx-ignore-nack-until-eom           忽略早期 NACK 直到 EOM
#   tx-custom-low-usecs <usecs>        定义自定义脉冲的“低”时间
#   tx-custom-high-usecs <usecs>       定义自定义脉冲的“高”时间
#   tx-custom-pulse                    当总线空闲时发送自定义脉冲
#
# 发送错误注入:
#   <op>[,<mode>] tx-no-eom            不设置 EOM 位
#   <op>[,<mode>] tx-early-eom         提前一个字节设置 EOM 位
#   <op>[,<mode>] tx-add-bytes <num>   向消息末尾追加 <num>（1-255）个额外字节
#   <op>[,<mode>] tx-remove-byte       从消息中移除最后一个字节
#   <op>[,<mode>] tx-short-bit <bit>   将此位设置得比允许的时间短
#   <op>[,<mode>] tx-long-bit <bit>    将此位设置得比允许的时间长
#   <op>[,<mode>] tx-custom-bit <bit>  用自定义脉冲代替此位
#   <op>[,<mode>] tx-short-start       发送过短的启动脉冲
#   <op>[,<mode>] tx-long-start        发送过长的启动脉冲
#   <op>[,<mode>] tx-custom-start      用自定义脉冲代替启动脉冲
#   <op>[,<mode>] tx-last-bit <bit>    在发送到此位后停止发送
#   <op>[,<mode>] tx-low-drive <bit>   在该位位置强制低电平状态
#
# <op>       CEC 消息操作码（0-255）或 'any'
# <mode>     'once'（默认）、'always'、'toggle' 或 'off'
# <bit>      CEC 消息位（0-159）
#            每个 '字节' 10 位：位 0-7：数据，位 8：EOM，位 9：ACK
# <poll>     用于测试仲裁失败的 CEC POLL 消息（0x00-0xff，默认 0x0f）
# <usecs>    微秒（0-10000000，默认 1000）

clear
```

您可以使用 ``echo 'cmd' > error-inj`` 或 ``cat cmd.txt > error-inj`` 将错误注入命令写入 ``error-inj``。``cat error-inj`` 的输出包含当前的错误注入命令。您可以将输出保存到文件中，并在稍后作为输入传递给 ``error-inj``。
基本语法
--------------

忽略开头的空格/制表符。如果下一个字符是 ``#`` 或者已到达行尾，则忽略整行。否则期望一个命令。
错误注入命令主要分为两大类：与接收 CEC 消息相关的命令以及与发送 CEC 消息相关的命令。此外，还有清除现有错误注入命令和在 CEC 总线上创建自定义脉冲的命令。
大多数错误注入命令可以针对特定的 CEC 操作码执行或针对所有操作码（``any``）。每个命令还有一个 '模式'，可以是 ``off``（可用于关闭现有的错误注入命令），``once``（默认），这将在接收到或发送下一个消息时只触发一次错误注入，``always`` 用于始终触发错误注入，以及 ``toggle`` 用于在每次发送或接收时切换错误注入的开启或关闭状态。
因此，'``any rx-nack``' 将 NACK 接收到的下一个 CEC 消息；'``any,always rx-nack``' 将 NACK 所有接收到的 CEC 消息；而 '``0x82,toggle rx-nack``' 将仅在接收到活动源消息时进行 NACK，并且仅对每第二个接收到的消息进行此操作。
在使用模式 `"once"` 注入错误后，错误注入命令会自动清除，因此 `"once"` 只能一次性生效。
所有 `<op>` 和错误注入命令的组合可以共存。因此以下情况是允许的：

	0x9e tx-add-bytes 1
	0x9e tx-early-eom
	0x9f tx-add-bytes 2
	any rx-nack

所有四个错误注入命令将同时生效。
但是，如果指定了相同的 `<op>` 和命令但参数不同：

	0x9e tx-add-bytes 1
	0x9e tx-add-bytes 2

那么第二个将会覆盖第一个。

清除错误注入
--------------

``clear``
    清除所有错误注入
``rx-clear``
    清除所有接收错误注入

``tx-clear``
    清除所有发送错误注入

``<op> clear``
    清除指定操作码的所有错误注入
``<op> rx-clear``
    清除指定操作码的所有接收错误注入

``<op> tx-clear``
    清除指定操作码的所有发送错误注入

接收消息
---------

``<op>[,<mode>] rx-nack``
    对广播消息和指向此CEC适配器的消息进行NACK处理
如果发送方在第一个字节被NACK之后继续传输，则消息中的每个字节都将被NACK处理

``<op>[,<mode>] rx-low-drive <bit>``
    在该位位置强制低电平驱动条件。如果 `<op>` 指定了具体的CEC操作码，则位位置必须至少为18，否则操作码尚未接收到。这测试了发送方是否能够正确处理低电平驱动条件并正确报告错误。需要注意的是，在前4位的低电平驱动也可能被发送方解释为仲裁丢失条件。
这是实现相关的。
``<op>[,<mode>] rx-add-byte``
    如果接收的CEC消息长度不超过15字节，则向其添加一个多余的0x55字节。这对于测试高层协议很有用，因为多余的字节应该被忽略。
``<op>[,<mode>] rx-remove-byte``
    如果接收的CEC消息至少有两个字节，则移除最后一个字节。这对于测试高层协议很有用，因为过短的消息应该被忽略。
``<op>[,<mode>] rx-arb-lost <poll>``
    生成一个POLL消息以触发仲裁失败条件。
    此命令仅允许使用``next``或``all``作为``<op>``值。
    一旦接收到起始位，CEC适配器将切换到发送模式并发送一个POLL消息。默认情况下，这是0x0f，但也可以通过``<poll>``参数显式指定。
    此命令可用于测试远程CEC发射器中的仲裁失败条件。当两个CEC适配器同时开始发送消息时会发生仲裁。在这种情况下，具有最多前导零的发起者获胜，而另一个发射器必须停止发送（“仲裁失败”）。除了使用此错误注入命令外，这很难测试。
    如果远程CEC发射器的逻辑地址为0（“电视”），则此方法无效，因为它总是会获胜。

发送消息
---------

``tx-ignore-nack-until-eom``
    此设置会改变发送CEC消息的行为。通常，一旦接收方对某个字节发出NACK信号，发送就会停止，但规范也允许完整发送整个消息，并且只有在最后才查看ACK位。这种行为不推荐，因为没有必要让CEC总线忙于不必要的长时间工作，特别是考虑到总线速度较慢。
    此设置可用于测试接收方如何处理那些直到消息末尾才忽略NACK信号的发射器。
``<op>[,<mode>] tx-no-eom``
    不设置EOM位。通常消息的最后一个字节会设置EOM（消息结束）位。使用此命令时，传输将在不发送任何EOM的情况下停止。这可以用来测试接收器在这种情况下如何处理。通常接收器在一段时间后会有超时，然后返回空闲状态。

``<op>[,<mode>] tx-early-eom``
    提前一个字节设置EOM位。这显然只适用于两个或更多字节的消息。EOM位将被设置在倒数第二个字节上，而不是最后一个字节。在这种情况下，接收器应该忽略最后一个字节。由于消息可能会因此变得太短，通常整个消息会被忽略。接收器应在接收到最后一个字节后进入空闲状态。

``<op>[,<mode>] tx-add-bytes <num>``
    在消息末尾追加``<num>``（1-255）个无效字节。额外的字节值为它们在消息中的位置。例如，如果你发送一个两字节的消息（例如获取CEC版本消息），并添加2个字节，则远程CEC适配器接收到的完整消息为``0x40 0x9f 0x02 0x03``。
此命令可用于测试接收器中的缓冲区溢出。例如，当它接收到超过最大消息长度16字节的消息时会发生什么。

``<op>[,<mode>] tx-remove-byte``
    如果消息至少有两个字节，则移除最后一个字节。接收器应该忽略过短的消息。

``<op>[,<mode>] tx-short-bit <bit>``
    使这个比特周期比允许的时间更短。比特位置不能是Ack位。如果<op>指定了一个特定的CEC操作码，则比特位置必须至少为18，否则操作码尚未被接收。
通常数据位的周期在2.05到2.75毫秒之间。使用此命令时，该比特的周期为1.8毫秒，这是通过减少CEC总线高电平时间实现的。这个比特周期小于允许的时间，接收器应以低驱动条件作出响应。
对于比特位置0到3中的0位，此命令被忽略。这是因为接收器在这前四个比特中还会检查仲裁丢失情况，如果看到过短的0比特，结果是不确定的。
``<op>[,<mode>] tx-long-bit <bit>``
使该位的持续时间超过有效范围。该位的位置不能是Ack位。如果<op>指定了特定的CEC指令码，则该位的位置必须至少为18，否则指令码尚未接收完毕。
通常数据位的持续时间为2.05至2.75毫秒。通过此命令，该位的持续时间为2.9毫秒，这是通过增加CEC总线高电平的时间来实现的。
尽管这种位持续时间超出有效范围，但接收端的行为是不确定的。它可能会接受这个位，或者超时并返回空闲状态。不幸的是，CEC规范对此没有明确规定。
对于位位置0到3中的0位，此命令被忽略。这是因为接收端也会在这前四个位中检查仲裁失败条件，如果看到过长的0位，其行为是不确定的。

``<op>[,<mode>] tx-short-start``
使起始位的持续时间短于允许的范围。通常起始位的持续时间为4.3至4.7毫秒。通过此命令，起始位的持续时间为4.1毫秒，这是通过减少CEC总线高电平的时间来实现的。这种起始位的持续时间短于允许的范围，检测到这种情况时，接收端应该返回空闲状态。

``<op>[,<mode>] tx-long-start``
使起始位的持续时间超过有效范围。通常起始位的持续时间为4.3至4.7毫秒。通过此命令，起始位的持续时间为5毫秒，这是通过增加CEC总线高电平的时间来实现的。这种起始位的持续时间超出有效范围，检测到这种情况时，接收端应该返回空闲状态。
尽管这种起始位的持续时间超出有效范围，但接收端的行为是不确定的。它可能会接受这个位，或者超时并返回空闲状态。不幸的是，CEC规范对此没有明确规定。

``<op>[,<mode>] tx-last-bit <bit>``
在传输完这个位后停止传输。如果<op>指定了特定的CEC指令码，则该位的位置必须至少为18，否则指令码尚未接收完毕。此命令可用于测试当消息突然停止时接收端的反应。它应该会超时并返回空闲状态。

``<op>[,<mode>] tx-low-drive <bit>``
在该位位置强制低电平驱动条件。如果<op>指定了特定的CEC指令码，则该位的位置必须至少为18，否则指令码尚未接收完毕。这可用于测试接收端如何处理低电平驱动条件。请注意，如果这种情况发生在位位置0-3之间，接收端可能会将其解释为仲裁失败条件。这取决于具体实现。
自定义脉冲
------------

``tx-custom-low-usecs <usecs>``
    这定义了自定义脉冲将CEC线路拉低的持续时间（微秒）。默认值为1000微秒。
``tx-custom-high-usecs <usecs>``
    这定义了自定义脉冲保持CEC线路高电平的持续时间（微秒）（除非在此期间其他CEC适配器将其拉低）。默认值为1000微秒。自定义脉冲的总周期为 ``tx-custom-low-usecs + tx-custom-high-usecs``。
``<op>[,<mode>] tx-custom-bit <bit>``
    发送自定义位而不是常规数据位。位位置不能是Ack位。如果<op>指定了一个具体的CEC操作码，则位位置必须至少为18，否则操作码尚未接收完毕。
``<op>[,<mode>] tx-custom-start``
    发送自定义位而不是常规起始位。
``tx-custom-pulse``
    在CEC总线空闲时立即传输一个自定义脉冲。
