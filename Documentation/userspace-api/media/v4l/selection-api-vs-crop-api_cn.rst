SPDX 许可声明标识符: GFDL-1.1-no-invariants-or-later

.. _selection-vs-crop:

********************************
与旧裁剪 API 的比较
********************************

选择 API 是为了应对旧的 :ref:`裁剪 API <crop>` 的不足而引入的，该旧裁剪 API 设计用于控制简单的捕捉设备。后来，裁剪 API 被视频输出驱动程序采用。这些 ioctl 用于选择显示信号插入的部分。这应该被视为 API 滥用，因为所描述的操作实际上是合成。选择 API 通过设置适当的靶标来明确区分合成和裁剪操作。裁剪 API 缺乏对内存缓冲区内的图像合成和裁剪的支持。应用程序可以通过滥用 V4L2 API 来配置一个捕捉设备，使其仅填充图像的一部分。从较大的图像中裁剪较小的图像是通过设置结构 :c:type:`v4l2_pix_format` 中的字段 `bytesperline` 实现的。通过修改结构 :c:type:`v4l2_buffer` 中的字段 `m_userptr` 并在调用 :ref:`VIDIOC_QBUF <VIDIOC_QBUF>` 之前进行图像偏移设置。这些操作应避免，因为它们不具备可移植性（字节序问题），并且不适用于宏块格式、拜耳格式和 mmap 缓冲区。

选择 API 以清晰、直观且可移植的方式处理缓冲区裁剪/合成的配置。此外，选择 API 引入了填充靶标和约束标志的概念。最后，结构 :c:type:`v4l2_crop` 和结构 :c:type:`v4l2_cropcap` 没有保留字段，因此无法扩展其功能。新的结构 :c:type:`v4l2_selection` 提供了大量的空间用于未来的扩展。

鼓励驱动开发者仅实现选择 API。旧的裁剪 API 可以使用新的选择 API 进行模拟。
