```SPDX 许可声明标识符: GFDL-1.1-no-invariants-or-later

.. _v4l2-pix-fmt-pisp-comp1-rggb:
.. _v4l2-pix-fmt-pisp-comp1-grbg:
.. _v4l2-pix-fmt-pisp-comp1-gbrg:
.. _v4l2-pix-fmt-pisp-comp1-bggr:
.. _v4l2-pix-fmt-pisp-comp1-mono:
.. _v4l2-pix-fmt-pisp-comp2-rggb:
.. _v4l2-pix-fmt-pisp-comp2-grbg:
.. _v4l2-pix-fmt-pisp-comp2-gbrg:
.. _v4l2-pix-fmt-pisp-comp2-bggr:
.. _v4l2-pix-fmt-pisp-comp2-mono:

**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
V4L2_PIX_FMT_PISP_COMP1_RGGB ('PC1R')，V4L2_PIX_FMT_PISP_COMP1_GRBG ('PC1G')，V4L2_PIX_FMT_PISP_COMP1_GBRG ('PC1g')，V4L2_PIX_FMT_PISP_COMP1_BGGR ('PC1B)，V4L2_PIX_FMT_PISP_COMP1_MONO ('PC1M')，V4L2_PIX_FMT_PISP_COMP2_RGGB ('PC2R')，V4L2_PIX_FMT_PISP_COMP2_GRBG ('PC2G')，V4L2_PIX_FMT_PISP_COMP2_GBRG ('PC2g')，V4L2_PIX_FMT_PISP_COMP2_BGGR ('PC2B)，V4L2_PIX_FMT_PISP_COMP2_MONO ('PC2M')
**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************

================================================
Raspberry Pi PiSP 压缩的 8 位 Bayer 格式
================================================

描述
===========

Raspberry Pi ISP（PiSP）使用一组三种固定速率压缩的 Bayer 格式。可以减去黑电平偏移以提高压缩效率；名义黑电平和偏移量必须通过带外信号传送。每行扫描线填充到 8 像素的倍数宽度，并且每个包含 8 个水平连续像素的块使用 8 字节编码。
模式 1 使用量化和基于差值的编码方案，保留最多 12 位有效数字。模式 2 是一个简单的类似于平方根的压缩方案，具有 6 段线性分段（PWL），保留最多 12 位有效数字。模式 3 结合了压缩（4 段线性分段）和差值方案，保留最多 14 位有效数字。
以下描述适用于模式 1 和模式 3。
每个包含 8 个像素的块被分为 4 个像素的偶数相位和奇数相位，分别由内存中连续位置处的 32 位字独立编码。
每个 32 位字的最低两位表示其“量化模式”。
在量化模式 0 中，最低 321 个量化级别是 FSD/4096 的倍数，剩余的级别是 FSD/2048 的连续倍数。
量化模式 1 和 2 使用步长分别为 FSD/1024 和 FSD/512 的线性量化。四个像素各自独立量化，四舍五入到最近的级别。
在量化模式 2 中，中间两个样本的量化值（q1，q2）都在范围 [384..511] 内时，它们使用 9 位编码 q1 后跟 7 位编码 (q2 & 127)。否则，对于量化模式 0、1 和 2：一个 9 位字段编码 MIN(q1, q2)，该值必须在范围 [0..511] 内，一个 7 位字段编码 (q2 - q1 + 64)，该值必须在 [0..127] 内。
每个外部样本（q0，q3）基于其相邻的内部样本 q1 或 q2 使用一个 7 位字段编码。在量化模式 2 中，如果内部样本的量化值在范围 [448..511] 内，则字段值为 (q0 - 384)。否则，在量化模式 0、1 和 2 中：外部样本编码为 (q0 - MAX(0, q1 - 64))。q3 同样基于 q2 编码。
这些值中的每一个必须在范围 [0..127] 内。所有这些 2 位、9 位、7 位、7 位、7 位的字段按小端字节顺序打包，形成一个 32 位字。
```
量化模式 3 有一个“7.5 位”的逃逸机制，用于在上述编码都不适用时。每个像素值被量化为最接近的 176 个级别之一，其中最低的 95 个级别是 FSD/256 的倍数，其余级别是 FSD/128 的倍数（级别 175 表示非常接近 FSD 的值，可能需要饱和算术来解码）。每对量化像素 (q0, q1) 或 (q2, q3) 通过一个 15 位字段联合编码：2816 * (q0 >> 4) + 16 * q1 + (q0 & 15)。三个字段分别为 2 位、15 位和 15 位，以小端顺序打包 {15, 15, 2}。

压缩格式的软件解码器实现可以在 Raspberry Pi 相机应用程序代码库中找到：
<https://github.com/raspberrypi/rpicam-apps/blob/main/image/dng.cpp>
