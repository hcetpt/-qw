.. 许可证标识符: GFDL-1.1-no-invariants-or-later

.. _field-order:

***********
场顺序
***********

我们需要区分逐行扫描视频和隔行扫描视频。
逐行扫描视频按顺序传输视频图像的所有行。
隔行扫描视频将一帧图像分为两个场，分别包含图像的奇数行和偶数行。交替传输所谓的奇数场和偶数场，并且由于两场之间有很小的时间延迟，阴极射线管电视可以交错显示这些行，从而形成原始帧。这种奇特的技术是因为在与电影类似的刷新率下，图像会迅速消失。传输场可以在不加倍帧率及其所需带宽的情况下减少闪烁。
重要的是要理解摄像机并不是一次曝光一帧，而仅仅是将帧分成场进行传输。实际上，这些场是在两个不同的时间点捕获的。屏幕上的物体可能在一个场到另一个场之间移动。对于分析运动的应用来说，识别一个帧中的哪个场是较早的（*时间顺序*）至关重要。
当驱动程序提供或接收图像时是以场为单位而不是交错的方式时，应用程序也必须理解场如何组合成帧。我们区分顶部（又称奇数）场和底部（又称偶数）场，即*空间顺序*：顶部场的第一行是隔行扫描帧的第一行，底部场的第一行是该帧的第二行。
然而，因为场是一个接一个捕获的，争论一帧是先开始于顶部场还是底部场是没有意义的。任何连续的顶部和底部场或底部和顶部场合起来都构成一个有效的帧。只有当源本身是逐行扫描时（例如，从电影转为视频），两个场才可能来自同一帧，从而形成自然顺序。
与直觉相反，顶部场并不一定是较早的场。
较早的场是否包含顶部行或底部行是由视频标准决定的惯例。因此，需要区分场的时间顺序和空间顺序。下面的图示应该能更清楚地说明这一点。
在 V4L 中，默认假设所有视频摄像机在媒体总线上按它们被捕获的相同顺序传输场，因此如果顶部场首先被捕获（是较早的场），则在总线上也是首先传输顶部场。
所有视频捕获和输出设备必须报告当前的场顺序。某些驱动程序可能允许选择不同的顺序，在这种情况下，应用程序在调用 :ref:`VIDIOC_S_FMT <VIDIOC_G_FMT>` ioctl 之前初始化结构体 :c:type:`v4l2_pix_format` 的 `field` 字段。如果不希望这样做，应将其值设置为 `V4L2_FIELD_ANY`（0）。
```markdown
枚举 v4l2_field
===============

.. c:type:: v4l2_field

.. tabularcolumns:: |p{5.8cm}|p{0.6cm}|p{10.9cm}|

.. cssclass:: longtable

.. flat-table::
    :header-rows:  0
    :stub-columns: 0
    :widths:       3 1 4

    * - ``V4L2_FIELD_ANY``
      - 0
      - 应用程序请求此场序，表示可以接受任何场格式。驱动程序根据硬件能力或例如请求的图像大小来选择实际的场序，并返回实际使用的场序。驱动程序绝不能返回 ``V4L2_FIELD_ANY``。如果存在多个可能的场序，驱动程序必须在执行 :ref:`VIDIOC_S_FMT <VIDIOC_G_FMT>` 或 :ref:`VIDIOC_TRY_FMT <VIDIOC_G_FMT>` 时选择其中一个可能的场序。结构体 :c:type:`v4l2_buffer` 的成员 ``field`` 永远不能是 ``V4L2_FIELD_ANY``。
    * - ``V4L2_FIELD_NONE``
      - 1
      - 图像是逐行（基于帧）格式，而不是隔行（基于场）格式。
    * - ``V4L2_FIELD_TOP``
      - 2
      - 图像仅包含顶部（即奇数）场。
    * - ``V4L2_FIELD_BOTTOM``
      - 3
      - 图像仅包含底部（即偶数）场。应用程序可能希望防止设备捕获隔行图像，因为它们会在移动物体周围产生“梳状”或“羽毛状”伪影。
    * - ``V4L2_FIELD_INTERLACED``
      - 4
      - 图像包含两个场，逐行交错存储。场的时间顺序（哪个场更旧）取决于当前的视频标准。在 M/NTSC 标准中，底部场是更旧的场。在所有其他标准中，顶部场是更旧的场。
    * - ``V4L2_FIELD_SEQ_TB``
      - 5
      - 图像包含两个场，顶部场的行首先在内存中存储，紧随其后的是底部场的行。场始终按时间顺序存储，更旧的场先存储在内存中。图像尺寸指的是整个帧，而不是单个场。
    * - ``V4L2_FIELD_SEQ_BT``
      - 6
      - 图像包含两个场，底部场的行首先在内存中存储，紧随其后的是顶部场的行。场始终按时间顺序存储，更旧的场先存储在内存中。图像尺寸指的是整个帧，而不是单个场。
```
* - ``V4L2_FIELD_ALTERNATE``
      - 7
      - 帧的两个场分别通过不同的缓冲区传递，按时间顺序，即较早的那个场先传递。为了指示场的奇偶性（当前场是上场还是下场），根据数据方向，驱动程序或应用程序必须将结构体 :c:type:`v4l2_buffer` 的 `field` 设置为 ``V4L2_FIELD_TOP`` 或 ``V4L2_FIELD_BOTTOM``。任意两个连续的场组成一个帧。如果场是连续的，没有丢弃任何场（场可以单独丢弃），可以通过结构体 :c:type:`v4l2_buffer` 的 `sequence` 字段来确定。由于无法通信某一场是上场还是下场，因此在使用读写 I/O 方法时无法选择此格式。
* - ``V4L2_FIELD_INTERLACED_TB``
      - 8
      - 图像包含两个场，逐行交错排列，上场在前。上场是较早的场。
* - ``V4L2_FIELD_INTERLACED_BT``
      - 9
      - 图像包含两个场，逐行交错排列，上场在前。下场是较早的场。

.. _fieldseq-tb:

场顺序，上场先传输
=====================

.. kernel-figure:: fieldseq_tb.svg
    :alt:    fieldseq_tb.svg
    :align:  center

    场顺序，上场先传输

.. _fieldseq-bt:

场顺序，下场先传输
=====================

.. kernel-figure:: fieldseq_bt.svg
    :alt:    fieldseq_bt.svg
    :align:  center

    场顺序，下场先传输
