SPDX 许可证标识符: GPL-2.0

======================================
海思 PCIe 调优与追踪设备
======================================

介绍
============

海思 PCIe 调优与追踪设备（PTT）是一种 PCIe 根复合体集成端点（RCiEP）设备，提供了动态监控和调整 PCIe 链路事件（调优）以及追踪 TLP 头部（追踪）的能力。这两个功能是独立的，但建议一起使用以分析和增强 PCIe 链路的性能。
在鲲鹏 930 SoC 中，PCIe 根复合体由多个 PCIe 核心组成。每个 PCIe 核心包含多个根端口和一个 PTT RCiEP，如下所示。PTT 设备能够对所属 PCIe 核心的链路进行调优和追踪：
::

          +--------------Core 0-------+
          |       |       [   PTT   ] |
          |       |       [Root Port]---[Endpoint]
          |       |       [Root Port]---[Endpoint]
          |       |       [Root Port]---[Endpoint]
    Root Complex  |------Core 1-------+
          |       |       [   PTT   ] |
          |       |       [Root Port]---[Switch]---[Endpoint]
          |       |       [Root Port]---[Endpoint] `-[Endpoint]
          |       |       [Root Port]---[Endpoint]
          +---------------------------+

PTT 设备驱动为每个 PTT 设备注册了一个 PMU 设备。每个 PTT 设备的名称由前缀 'hisi_ptt' 加上它所在 SICL 和核心的 ID 组成。鲲鹏 930 SoC 封装了多个 CPU 晶粒（SCCL，超级 CPU 集群）和 IO 晶粒（SICL，超级 IO 集群），每个 SICL 包含一个 PCIe 根复合体：
::

    /sys/bus/event_source/devices/hisi_ptt<sicl_id>_<core_id>

调优
====

PTT 调优旨在监控和调整 PCIe 链路参数（事件）。目前我们支持两类事件，这些事件的范围覆盖了 PTT 设备所属的 PCIe 核心。
每个事件在 $(PTT PMU 目录)/tune 下表现为一个文件，并通过简单的打开/读取/写入/关闭周期来调整该事件：
::

    $ cd /sys/bus/event_source/devices/hisi_ptt<sicl_id>_<core_id>/tune
    $ ls
    qos_tx_cpl    qos_tx_np    qos_tx_p
    tx_path_rx_req_alloc_buf_level
    tx_path_tx_req_alloc_buf_level
    $ cat qos_tx_dp
    1
    $ echo 2 > qos_tx_dp
    $ cat qos_tx_dp
    2

事件的当前值（数值）可以直接从文件中读取，而期望的值则可以写入文件来进行调优。
1. Tx Path QoS 控制
------------------------

以下文件用于调整 PCIe 核心的 Tx 路径的 QoS：
- qos_tx_cpl：Tx 完成 TLP 的权重
- qos_tx_np：Tx 非发布 TLP 的权重
- qos_tx_p：Tx 发布 TLP 的权重

权重影响了特定数据包在 PCIe 链路上的比例。
例如，对于存储场景，增加链路上完成包的比例以提升性能，因为更多的完成包会被消耗。
这些事件的可用调整数据为 [0, 1, 2]。
写入负值将返回错误，超出范围的值将被转换为 2。请注意，事件值仅表示可能的级别，但并不精确。

2. 发送路径缓冲区控制
-------------------------
以下文件用于调整 PCIe 核心的发送路径缓冲区：
- rx_alloc_buf_level：接收请求的水印
- tx_alloc_buf_level：发送请求的水印

这些事件会影响分配给每种类型的缓冲区水印。Rx 表示入站，Tx 表示出站。数据包将首先存储在缓冲区中，然后在达到水印或超时时进行传输。对于繁忙的方向，应增加相关缓冲区的水印以避免频繁发布，从而提升性能。大多数情况下保持默认值即可。
上述事件的可用调整数据为 [0, 1, 2]。
写入负值将返回错误，超出范围的值将被转换为 2。请注意，事件值仅表示可能的级别，但并不精确。

跟踪
=====
PTT 跟踪设计用于将 TLP 头部信息转储到内存中，可用于分析 PCIe 链路的事务和使用情况。您可以选择通过请求者 ID 或同一 PTT 设备核心上一组根端口的下游来过滤跟踪的头部信息。还支持跟踪特定类型和特定方向的头部信息。
您可以使用 perf 命令 `perf record` 设置参数、开始跟踪并获取数据。还可以使用 `perf report` 解码跟踪数据。跟踪控制参数作为每个事件的事件代码输入，将在后面进一步说明。
一个示例用法如下：
```
$ perf record -e hisi_ptt0_2/filter=0x80001,type=1,direction=1,format=1/ -- sleep 5
```

这将跟踪下游根端口 0000:00:10.1（事件代码为 0x80001）的带有发布 TLP 请求类型的入站数据包，并且跟踪数据格式为 8DW。
### 1. 过滤
------

可以使用根端口（Root Port）或位于同一内核上的终结点（Endpoint）的请求者ID（Requester ID）来过滤要追踪的TLP头。你可以通过指定`filter`参数来设置过滤器，这是启动追踪所需的参数。该参数值为20位。第19位表示过滤器类型：1 表示根端口过滤器，0 表示请求者过滤器。位[15:0]表示过滤值。对于根端口，其值是一个内核端口号掩码，根据其PCI插槽ID计算得出：(slotid & 7) * 2。对于请求者，其值是请求者ID（PCIe功能的设备ID）。位[18:16]目前保留用于扩展。

例如，如果所需的过滤器是终结点功能 0000:01:00.1，则过滤值为 0x00101。如果所需的过滤器是根端口 0000:00:10.0，则过滤值计算为 0x80001。

驱动程序还通过 sysfs 提供所有支持的根端口和请求者过滤器。每个过滤器都是一个单独的文件，其名称与相关的 PCIe 设备名称（域:总线:设备.功能）相同。根端口过滤器文件位于 $(PTT PMU dir)/root_port_filters 下，请求者过滤器文件位于 $(PTT PMU dir)/requester_filters 下。

请注意，可以同时指定多个根端口，但一次只能指定一个终结点功能。同时指定根端口和功能是不支持的。驱动程序维护一个可用过滤器列表，并会检查无效输入。

可用过滤器将动态更新，这意味着在热插拔事件发生时或手动移除/重新扫描设备时，你总是可以获得正确的过滤信息。

### 2. 类型
------

可以通过指定`type`参数来追踪特定类型的TLP头，这是启动追踪所需的参数。该参数值为8位。当前支持的类型及其相关值如下：

- 8'b00000001: 已发布的请求（P）
- 8'b00000010: 未发布的请求（NP）
- 8'b00000100: 完成（CPL）

在追踪入站TLP头时可以指定多个类型，但在追踪出站TLP头时只能指定一个类型。

### 3. 方向
------------

可以通过指定`direction`参数来追踪特定方向的TLP头，这相对于根端口或 PCIe 内核而言。这是可选的，默认参数为入站。该参数值为4位。当所需格式为4DW时，支持的方向及其相关值如下：

- 4'b0000: 入站TLP头（P、NP、CPL）
- 4'b0001: 出站TLP头（P、NP、CPL）
- 4'b0010: 出站TLP头（P、NP、CPL）和入站TLP头（P、NP、CPL B）
- 4'b0011: 出站TLP头（P、NP、CPL）和入站TLP头（CPL A）

当所需格式为8DW时，支持的方向及其相关值如下：

- 4'b0000: 保留
- 4'b0001: 出站TLP头（P、NP、CPL）
- 4'b0010: 入站TLP头（P、NP、CPL B）
- 4'b0011: 入站TLP头（CPL A）

入站完成分为两种类型：

- 完成 A（CPL A）：CHI/DMA/Native 非发布请求的完成，除了 CPL B
- 完成 B（CPL B）：DMA remote2local 和 P2P 非发布请求的完成

### 4. 格式
--------------

可以通过指定`format`参数来更改追踪的TLP头格式。默认格式为4DW。该参数值为4位。当前支持的格式及其相关值如下：

- 4'b0000: 每个TLP头4DW长度
- 4'b0001: 每个TLP头8DW长度

追踪的TLP头格式不同于PCIe标准。
当使用8DW数据格式时，整个TLP头会被记录（如下所示的Header DW0-3）。例如，PCIe r5.0中图2-17显示了带有64位地址的内存读取的TLP头；配置请求的头则显示在图2.20中等。此外，8DW跟踪缓冲区条目包含一个时间戳，并可能包含一个用于PASID TLP前缀的前缀（参见PCIe r5.0中的图6-20）。否则该字段将全部为0。DW0的比特位[31:11]始终为0x1FFFFF，这可以用来区分数据格式。8DW格式如下：

    比特 [                 31:11                 ][       10:0       ]
         |---------------------------------------|-------------------|
     DW0 [                0x1FFFFF               ][ 保留 (0x7FF)     ]
     DW1 [                       前缀                                   ]
     DW2 [                     Header DW0                            ]
     DW3 [                     Header DW1                            ]
     DW4 [                     Header DW2                            ]
     DW5 [                     Header DW3                            ]
     DW6 [                   保留 (0x0)                             ]
     DW7 [                        时间                                ]

当使用4DW数据格式时，跟踪缓冲区条目的DW0包含TLP的DW0中的选定字段及时间戳。跟踪缓冲区条目中的DW1-DW3直接包含TLP头中的DW1-DW3。
4DW格式如下：

    比特 [31:30] [ 29:25 ][24][23][22][21][    20:11   ][    10:0    ]
         |-----|---------|---|---|---|---|-------------|-------------|
     DW0 [ 格式 ][ 类型  ][T9][T8][TH][SO][   长度   ][    时间    ]
     DW1 [                     Header DW1                            ]
     DW2 [                     Header DW2                            ]
     DW3 [                     Header DW3                            ]

5. 内存管理
--------------------

被追踪的TLP头将写入由驱动程序分配的内存中。硬件接受四个具有相同大小的DMA地址，并按顺序写入缓冲区，如下所示。如果DMA地址3完成并且追踪仍在继续，则返回到地址0。

    +->[DMA地址0]->[DMA地址1]->[DMA地址2]->[DMA地址3]-+
    +---------------------------------------------------------+

驱动程序将为每个DMA缓冲区分配4MB。完成的缓冲区将复制到由perf核心分配的perf AUX缓冲区。一旦AUX缓冲区满了且追踪仍在继续，驱动程序会先提交AUX缓冲区然后申请一个新的同样大小的缓冲区。AUX缓冲区的默认大小为16MB。用户可以通过指定perf命令的`-m`参数来调整大小。

6. 解码
-----------

您可以使用`perf report -D`命令解码被追踪的数据（目前仅支持转储原始追踪数据）。根据前面描述的格式（以8DW为例），追踪数据将被解码如下：

    [...perf头部和其他信息]
    . ... HISI PTT数据：大小4194304字节
    .  00000000: 00 00 00 00                                 前缀
    .  00000004: 01 00 00 60                                 Header DW0
    .  00000008: 0f 1e 00 01                                 Header DW1
    .  0000000c: 04 00 00 00                                 Header DW2
    .  00000010: 40 00 81 02                                 Header DW3
    .  00000014: 33 c0 04 00                                 时间
    .  00000020: 00 00 00 00                                 前缀
    .  00000024: 01 00 00 60                                 Header DW0
    .  00000028: 0f 1e 00 01                                 Header DW1
    .  0000002c: 04 00 00 00                                 Header DW2
    .  00000030: 40 00 81 02                                 Header DW3
    .  00000034: 02 00 00 00                                 时间
    .  00000040: 00 00 00 00                                 前缀
    .  00000044: 01 00 00 60                                 Header DW0
    .  00000048: 0f 1e 00 01                                 Header DW1
    .  0000004c: 04 00 00 00                                 Header DW2
    .  00000050: 40 00 81 02                                 Header DW3
    [...]
