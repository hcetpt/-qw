SPDX 许可证标识符: GPL-2.0

=======================
英特尔® 迹线中心 (TH)
=======================

概述
--------

英特尔® 迹线中心 (TH) 是一组硬件模块，用于生成、切换并输出来自多个硬件和软件源的迹线数据，通过多种类型的迹线输出端口以系统迹线协议（MIPI STPv2）编码，并旨在进行全系统调试。有关硬件的更多信息，请参阅英特尔® 迹线中心开发者手册 [1]。
它包括迹线源、迹线目标（输出）以及一个交换机（全局迹线中心，GTH）。这些设备位于自己的总线上（“intel_th”），可以通过 sysfs 属性发现并配置。
目前支持以下英特尔 TH 子设备（模块）：
  - 软件迹线中心 (STH)，迹线源，是一个系统迹线模块 (STM) 设备，
  - 内存存储单元 (MSU)，迹线输出，允许将迹线中心的输出存储在系统内存中，
  - 并行迹线接口输出 (PTI)，通过 PTI 端口向外部调试主机输出迹线，
  - 全局迹线中心 (GTH)，是一个交换机并且是英特尔® 迹线中心架构的核心组件。
输出设备的通用属性描述见 `Documentation/ABI/testing/sysfs-bus-intel_th-output-devices`，其中最值得注意的是 "active"，它可以启用或禁用特定输出设备的迹线输出。
GTH 可以通过其 "masters" 属性组将不同的 STP 主设备导向不同的输出端口。更详细的 GTH 接口描述见 `Documentation/ABI/testing/sysfs-bus-intel_th-devices-gth`。
STH 注册了一个 stm 类设备，通过该设备为用户空间和内核空间软件迹线源提供接口。更多相关信息见 `Documentation/trace/stm.rst`。
MSU 可以被配置为收集迹线数据到系统内存缓冲区中，之后可以通过读取其设备节点的 `read()` 或 `mmap()` 接口获取数据，并将其导向 “软件接收器” 驱动程序来消费或进一步传递。
总体来说，英特尔® 迹线中心不需要任何特殊的用户空间软件即可运行；所有配置、启动和收集都可以通过 sysfs 属性和设备节点完成。
[1] https://software.intel.com/sites/default/files/managed/d3/3c/intel-th-developer-manual.pdf

总线和子设备
------------------

对于系统中的每个英特尔 TH 设备，都会创建一个专用的总线，并分配一个编号，该编号反映了 TH 设备枚举的顺序。所有 TH 子设备（intel_th 总线上的设备）都以这个 ID 开头：0-gth、0-msc0、0-msc1、0-pti、0-sth，随后是设备名称和一个可选索引。
输出设备还会在 `/dev/intel_thN` 中获得一个设备节点，其中 N 是英特尔 TH 设备的 ID。例如，当 MSU 的内存缓冲区被分配时，可以通过 `/dev/intel_th0/msc{0,1}` 访问。
快速示例
-------------

# 确定哪个 GTH 端口是第一个内存控制器：

	$ cat /sys/bus/intel_th/devices/0-msc0/port
	0

# 看起来是端口 0，将主设备 33 配置为向端口 0 发送数据：

	$ echo 0 > /sys/bus/intel_th/devices/0-gth/masters/33

# 在第一个内存控制器上分配一个包含两个窗口的多块缓冲区，每个窗口包含 64 页：

	$ echo multi > /sys/bus/intel_th/devices/0-msc0/mode
	$ echo 64,64 > /sys/bus/intel_th/devices/0-msc0/nr_pages

# 启用该控制器的循环模式：

	$ echo 1 > /sys/bus/intel_th/devices/0-msc0/wrap

# 启用向此端口发送跟踪数据：

	$ echo 1 > /sys/bus/intel_th/devices/0-msc0/active

# .. 向主设备 33 发送数据，更多详细信息请参阅 stm.txt。
# .. 等待跟踪数据累积。
# .. 停止跟踪：

	$ echo 0 > /sys/bus/intel_th/devices/0-msc0/active

# 现在可以从设备节点收集跟踪数据：

	$ cat /dev/intel_th0/msc0 > my_stp_trace

主机调试模式
------------------

可以配置 Trace Hub，并通过硬件调试接口连接到远程调试主机来控制其跟踪数据捕获。然后，该接口将用于同时控制 Intel Trace Hub 并将跟踪数据传输到调试主机。驱动程序需要被告知这种安排正在进行中，以便不触碰任何捕获/端口配置，并避免与调试主机的配置访问冲突。在这种模式下，驱动程序唯一执行的操作是收集到软件跟踪中心（一个 stm 类型设备）的软件跟踪数据。用户仍然需要负责设置适当的主设备/通道映射，以便接收端解码器能够识别这些映射。

为了启用主机模式，请将 'intel_th' 内核模块的 'host_mode' 参数设置为 'y'。此时 intel_th 总线上的所有虚拟输出设备都不会出现。此外，'gth' 设备的跟踪配置和捕获控制属性组也不会暴露。'sth' 设备将正常运行。

软件接收器
--------------

内存存储单元 (MSU) 驱动程序提供了一个内核 API，供其他驱动程序注册为跟踪数据的软件接收器。这样的驱动程序可以通过其他设备（如 USB 设备控制器或网卡）进一步导出数据。

API 主要包括两部分：
- 通知软件接收器某个窗口已满，并“锁定”该窗口，即使其无法继续收集跟踪数据；当这种情况发生时，如果下一个窗口未被锁定，MSU 驱动程序会自动切换到下一个窗口，否则停止跟踪数据捕获；
- 跟踪窗口的“锁定”状态，并提供一种机制让软件接收器驱动程序通知 MSU 驱动程序某个窗口已解锁且可以再次用于收集跟踪数据。

一个示例接收器驱动程序 msu-sink 展示了软件接收器的实现。功能上，它在窗口填满后立即将其解锁，使 MSU 以循环缓冲区模式持续运行。与“multi”模式不同的是，它会填充缓冲区中的所有窗口，而不仅仅是第一个窗口。可以通过写入 "sink" 到 "mode" 文件来启用该模式（假设已加载 msu-sink.ko）。
