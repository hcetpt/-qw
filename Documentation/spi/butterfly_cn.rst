======================
spi_butterfly - 并口至Butterfly适配器驱动
======================

这是一个硬件和软件项目，包括构建并使用一个并行端口适配器线缆，结合一个“AVR Butterfly”来运行用户界面或传感器相关的固件。Butterfly是一张价值20美元的电池供电卡片，内置AVR微控制器以及众多组件：传感器、LCD显示屏、切换杆等。你可以使用AVR-GCC来为它开发固件，并通过这个适配器线缆将其烧录进去。
你可以从旧打印机线缆中制作这个适配器，并直接将部件焊接到Butterfly上。或者（如果你有相应的零件和技能），你可以设计更复杂的版本，为Butterfly和并行端口提供电路保护，或者提供比仅靠并行端口的两个信号针更好的电源供应。当然，你也可以用类似的线缆与许多AVR板卡甚至面包板通信。
这比“ISP编程”线缆更为强大，因为它允许内核中的SPI协议驱动程序与AVR交互，并且甚至可以让AVR向它们发出中断。之后，你的协议驱动程序应该可以轻松地与“真正的SPI控制器”配合使用，而不仅仅是这种位控制方式。
最初的线缆连接会将Linux连接到一条SPI总线上，该总线上连接有AVR和DataFlash芯片；同时还会连接到AVR的复位线。这些就是刷新固件所需的全部内容，所使用的针脚是标准Atmel“ISP”连接器针脚（在非Butterfly的AVR板卡上也有）。在并行端口一侧，这类似于“sp12”编程线缆。
======	  =============	  ===================
	信号名称	  Butterfly端口	  并行端口（DB-25）
	======	  =============	  ===================
	SCK	  J403.PB1/SCK	  第2针/D0
	RESET	  J403.nRST	  第3针/D1
	VCC	  J403.VCC_EXT	  第8针/D6
	MOSI	  J403.PB2/MOSI	  第9针/D7
	MISO	  J403.PB3/MISO	  第11针/S7,nBUSY
	GND	  J403.GND	  第23针/GND
	======	  =============	  ===================

然后为了使Linux能够主控这条总线以与DataFlash芯片通信，你需要：
(a) 刷新新的固件以禁用SPI（设置PRR.2，并通过清除PORTB.[0-3]来禁用上拉电阻）；
(b) 配置mtd_dataflash驱动程序；
(c) 连接片选信号。
======	  ============	  ===================
	信号名称	  Butterfly端口	  并行端口（DB-25）
	======	  ============	  ===================
	VCC	  J400.VCC_EXT	  第7针/D5
	SELECT	  J400.PB0/nSS	  第17针/C3,nSELECT
	GND	  J400.GND	  第24针/GND
	======	  ============	  ===================

或者，你可以刷新固件以将AVR配置为SPI从设备（保持DataFlash处于复位状态），并调整spi_butterfly驱动程序以使其与自定义SPI协议驱动程序绑定。
“USI”控制器（使用J405）也可以用于第二个SPI总线。这将使你能够在使用自定义的SPI-with-USI固件与AVR通信的同时，让Linux或AVR使用DataFlash。有许多空闲的并行端口引脚可用于连线，例如：

	======	  =============	  ===================
	信号名称	  Butterfly端口	  并行端口（DB-25）
	======	  =============	  ===================
	SCK	  J403.PE4/USCK	  第5针/D3
	MOSI	  J403.PE5/DI	  第6针/D4
	MISO	  J403.PE6/DO	  第12针/S5,nPAPEROUT
	GND	  J403.GND	  第22针/GND

	IRQ	  J402.PF4	  第10针/S6,ACK
	GND	  J402.GND(P2)	  第25针/GND
	======	  =============	  ===================
