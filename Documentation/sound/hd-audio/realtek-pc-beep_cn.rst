Realtek PC Beep 隐藏寄存器
==================================

本文档介绍了“PC Beep 隐藏寄存器”，该寄存器存在于某些 Realtek HDA 编解码器中，用于控制一个复用器和一对直通混音器，可以实现音频在不同引脚间的路由，但这些组件本身并未作为 HDA 组件公开。据我所知，这些隐藏的路由设计允许具有灵活的 PC Beep 输出功能，对于那些输出路径中没有混音器组件的编解码器来说尤其有用。为什么通过一个未公开的供应商寄存器来隐藏混音器比直接将其作为组件暴露出来要更容易，我不得而知。

寄存器描述
==================

该寄存器是通过 NID 20h 上的处理系数 0x36 访问的。以下未标识的位在我的机器（Dell XPS 13 9350）上没有明显的效果：

  MSB                           LSB
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | |h|S|L|         | B |R|       | 已知位
  +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
  |0|0|1|1|  0x7  |0|0x0|1|  0x7  | 重置值
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

1Ah 输入选择 (B): 2 位
  当为零时，在 1Ah 引脚节点上暴露 PC Beep 线路（来自内部的 Beep 生成器，当通过 NID 01h 上的设置 Beep 生成命令启用时，或来自外部的 PCBEEP 引脚）。当非零时，暴露耳机插孔（或者某些机器上的线路输入）的输入。如果选择了 PC Beep，则 1Ah 增益控制不起作用。
放大 1Ah 环回，左声道 (L): 1 位
  在根据 h 和 S 位将 1Ah 的左声道混合到输出之前对其进行放大。不会影响 1Ah 对其他组件暴露的级别。
放大 1Ah 环回，右声道 (R): 1 位
  在根据 h 和 S 位将 1Ah 的右声道混合到输出之前对其进行放大。不会影响 1Ah 对其他组件暴露的级别。
环回 1Ah 到 21h [低电平有效] (h): 1 位
  当为零时，将 1Ah（可能经过放大，取决于 L 和 R 位）混合到 21h（在我的机器上是耳机插孔）。混合信号遵循 21h 的静音设置。
环回 1Ah 到 14h (S): 1 位
  当为一（高电平）时，将 1Ah（可能经过放大，取决于 L 和 R 位）混合到 14h（在我的机器上是内置扬声器）。混合信号**忽略**14h 的静音设置，并在 14h 被配置为输出时始终存在。

路径图
=============

1Ah 输入选择（DIV 是在 NID 01h 上设置的 PC Beep 分频器）:

```
  <Beep 生成器>   <PCBEEP 引脚>    <耳机插孔>
          |                |                |
          +--DIV--+--!DIV--+       {1Ah 增益控制}
                  |                         |
                  +--(b == 0)--+--(b != 0)--+
                               |
               >1Ah (Beep/耳机麦克风/线路输入)<
```

1Ah 环回到 21h/14h:

```
               <1Ah (Beep/耳机麦克风/线路输入)>
                               |
                        {如果 L/R 则放大}
                               |
                  +-----!h-----+-----S-----+
                  |                        |
          {21h 静音控制}               |
                  |                        |
          >21h (耳机)<     >14h (内置扬声器)<
```

背景
==========

所有 Realtek HDA 编解码器都有一个节点 ID 为 20h 的供应商定义的组件，它提供了对一组寄存器的访问，这些寄存器控制着编解码器的各种功能。寄存器是通过标准的 HDA 处理系数命令（设置/获取系数索引、设置/获取处理系数）读写。在公共数据表中的命令列表中，该节点被命名为“Realtek 供应商寄存器”，除此之外，它是完全未公开的。
这个特定的寄存器，在系数 0x36 中公开并且在 Realtek 的提交记录中被命名，值得关注：与大多数似乎用于控制超出 HDA 规范范围的放大器详细参数的寄存器不同，它控制的是音频路由，这些功能本可以使用标准的 HDA 混音器和选择器组件来定义。
具体来说，它在两个源之间进行选择，以供节点 ID（NID）为 1Ah 的输入引脚组件使用：该组件的信号可以来自一个音频插孔（在我的笔记本电脑 Dell XPS 13 9350 上是耳机插孔，但 Realtek 提交记录中的注释表明，在某些机器上可能是线路输入），也可以来自 PC Beep 线路（其本身在编解码器的内部 Beep 生成器和外部 PCBEEP 引脚之间进行复用，这取决于是否通过 NID 01h 上的命令启用了 Beep 生成器）。此外，它可以将该信号（可选地进行放大）混合到 21h 和/或 14h 输出引脚上。
该寄存器的复位值为0x3717，对应于PC蜂鸣声的1Ah输入，随后被放大并混入耳机和扬声器中。这不仅违反了HDA规范，该规范指出“[供应商定义的蜂鸣输入引脚]连接只能在链路复位（**RST#**）有效时保持”，这意味着如果我们关注1Ah原本会暴露的输入，或者PCBEEP线路屏蔽不良导致拾取机箱噪声（这两种情况在我的机器上都存在），我们不能忽略这个寄存器。
不幸的是，有很多方式会导致这个寄存器配置出错，
似乎Linux已经经历了其中的大多数问题。其中一个问题是，该寄存器会在S3挂起后复位：根据现有代码判断，这并不是所有供应商寄存器都会遇到的情况，并且导致了一些修复措施，这些措施虽然改善了冷启动时的行为，但在挂起后效果无法持续。其他一些修复成功地将1Ah输入从PC蜂鸣声切换出去，但未能禁用两个回环路径。在我的机器上，这意味着耳机输入被放大并回环到耳机输出，使用的是完全相同的引脚！正如你可能预料的那样，这会导致严重的耳机噪音，其特性由1Ah增益控制来决定。（如果你在网上看到过通过更改ALSA中的“耳机麦克风增益”来解决XPS 13耳机噪音的指导，现在你应该明白原因了。）

这里的信息是通过ALC256编解码器行为的黑盒逆向工程获得的，不一定正确。这些信息很可能也适用于ALC255、ALC257、ALC235和ALC236等编解码器，因为它们似乎是ALC256的近亲。（它们都共享一个初始化函数。）此外，根据`patch_realtek.c`中存在的修复，像ALC225和ALC285这样的其他编解码器也有这个寄存器，但对于这些编解码器的具体数据（例如节点ID、位位置、引脚映射）可能与我在这里描述的不同。
