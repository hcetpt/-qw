Realtek PC Beep 隐藏寄存器
===============================

此文件记录了“PC Beep 隐藏寄存器”，该寄存器存在于某些 Realtek HDA 解码器中，并控制一个复用器和一对直通混音器，这些混音器可以将音频在引脚之间路由，但它们本身并不作为 HDA 小部件暴露。据我所知，这些隐藏的路径设计是为了让那些输出路径中没有混音器小部件的解码器能够灵活地输出 PC Beep 声音。为什么隐藏一个混音器比直接将其作为一个小部件暴露出来更容易，我也不清楚。

寄存器描述
====================

该寄存器通过 NID 20h 上的处理系数 0x36 访问。以下未标识的位在我的机器（Dell XPS 13 9350）上没有任何明显的效果：

  MSB                           LSB
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | |h|S|L|         | B |R|       | 已知位
  +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
  |0|0|1|1|  0x7  |0|0x0|1|  0x7  | 复位值
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

1Ah 输入选择 (B): 2 位
  当为零时，将 PC Beep 线（来自内部蜂鸣声生成器，当启用 NID 01h 上的设置蜂鸣声生成动词时，或者来自外部 PCBEEP 引脚）暴露到 1Ah 引脚节点。当非零时，暴露耳机插孔（或某些机器上的线路输入）。如果选择了 PC Beep，则 1Ah 增益控制无效。
放大 1Ah 回环，左声道 (L): 1 位
  在根据 h 和 S 位混合到输出之前，放大 1Ah 的左声道。不影响其他小部件暴露的 1Ah 水平。
放大 1Ah 回环，右声道 (R): 1 位
  在根据 h 和 S 位混合到输出之前，放大 1Ah 的右声道。不影响其他小部件暴露的 1Ah 水平。
回环 1Ah 到 21h [低电平有效] (h): 1 位
  当为零时，将 1Ah（可能带有放大，取决于 L 和 R 位）混合到 21h（我的机器上的耳机插孔）。混合信号会遵循 21h 的静音设置。
回环 1Ah 到 14h (S): 1 位
  当为一时，将 1Ah（可能带有放大，取决于 L 和 R 位）混合到 14h（我的机器上的内置扬声器）。混合信号**忽略**14h 的静音设置，并且只要 14h 被配置为输出就会存在。

路径图
=============

1Ah 输入选择（DIV 是 NID 01h 上的 PC Beep 分频器）:

```
  <蜂鸣声生成器>   <PCBEEP 引脚>    <耳机插孔>
          |                |                |
          +--DIV--+--!DIV--+       {1Ah 增益控制}
                  |                         |
                  +--(b == 0)--+--(b != 0)--+
                               |
               >1Ah (蜂鸣声/耳机麦克风/线路输入)<
```

1Ah 回环到 21h/14h:

```
               <1Ah (蜂鸣声/耳机麦克风/线路输入)>
                               |
                        {如果 L/R 放大}
                               |
                  +-----!h-----+-----S-----+
                  |                        |
          {21h 静音控制}               |
                  |                        |
          >21h (耳机)<     >14h (内置扬声器)<
```

背景
==========

所有 Realtek HDA 解码器都有一个具有节点 ID 20h 的厂商定义的小部件，该小部件提供了访问一组寄存器的接口，这些寄存器控制各种解码器功能。寄存器通过标准的 HDA 处理系数动词（设置/获取系数索引，设置/获取处理系数）读写。在公开的数据手册中的动词列表中，该节点被命名为“Realtek 厂商寄存器”，除此之外，它是完全未文档化的。
这个特定的寄存器，通过系数 0x36 暴露并在 Realtek 提交中命名，值得注意：与大多数似乎控制不在 HDA 规范范围内的详细放大器参数的寄存器不同，它控制的是音频路由，这同样可以用标准的 HDA 混音器和选择器小部件来定义。
具体来说，它为节点 ID (NID) 1Ah 的输入引脚小部件选择两个源之一：小部件的信号可以来自音频插孔（在我的笔记本电脑 Dell XPS 13 9350 上，是耳机插孔，但 Realtek 提交中的注释表明，在某些机器上可能是线路输入）或来自 PC Beep 线（其本身在解码器的内部蜂鸣声生成器和外部 PCBEEP 引脚之间多路复用，取决于是否通过 NID 01h 上的动词启用了蜂鸣声生成器）。此外，它可以将该信号（可选地放大）混合到 21h 和/或 14h 输出引脚上。
寄存器的复位值为 0x3717，对应于 PC 嘟嘟声（PC Beep）的 1Ah，然后该声音会被放大并混合到耳机和扬声器中。这不仅违反了 HDA 规范，该规范规定“[供应商定义的嘟嘟声输入引脚] 连接只能在链路复位（**RST#**）有效时保持”，这意味着如果我们关心 1Ah 否则会暴露的输入或 PCBEEP 线路屏蔽不良而拾取机箱噪声（在我的机器上这两种情况都存在），我们不能忽略这个寄存器。

不幸的是，有很多方法会导致这个寄存器配置出错，似乎 Linux 已经经历了其中的大部分问题。首先，在 S3 挂起后寄存器会复位：根据现有代码，这并不是所有供应商寄存器的情况，并且导致了一些修复措施，虽然改善了冷启动时的行为，但在挂起后效果无法持续。其他修复措施成功地将 1Ah 输入从 PC 嘟嘟声切换出去，但未能禁用两个环回路径。在我的机器上，这意味着耳机输入被放大并环回到耳机输出，使用的是完全相同的引脚！正如你所预料的那样，这会导致严重的耳机噪音，其特性由 1Ah 增益控制决定。（如果你在网上看到过通过更改 ALSA 中的“耳机麦克风增益”来修复 XPS 13 耳机噪音的说明，现在你知道为什么了。）

这里的这些信息是通过对 ALC256 编解码器行为的黑盒逆向工程获得的，不一定正确。它很可能也适用于 ALC255、ALC257、ALC235 和 ALC236，因为这些编解码器似乎是 ALC256 的近亲。（它们共享一个初始化函数。）此外，根据 `patch_realtek.c` 中现有的修复措施，其他编解码器如 ALC225 和 ALC285 也有这个寄存器，但对于这些编解码器的具体数据（例如节点 ID、位位置、引脚映射）可能与我在这里描述的不同。
