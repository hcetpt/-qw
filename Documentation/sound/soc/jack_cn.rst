ASoC (Audio System on Chip) 接口检测
==================================

ALSA (Advanced Linux Sound Architecture) 提供了一个标准的API来向用户空间表示物理接口，内核端可见于 `include/sound/jack.h`。ASoC 提供了这个API的一个版本，并增加了两个额外的功能：

- 它允许多个接口检测方法协同工作在一个用户可见的接口上。在嵌入式系统中，一个物理接口可能同时支持多种功能，但这些功能由不同的硬件部分处理。
- 与DAPM（Digital Audio Power Management）集成，允许根据检测到的接口状态自动更新DAPM终端（例如，如果没有耳机插入，则关闭耳机输出）。

这是通过将接口分成三个协同工作的部分实现的：由 `struct snd_soc_jack` 表示的接口本身、代表要更新的DAPM终端的 `snd_soc_jack_pins` 集合以及提供接口报告机制的代码块。
例如，一个系统可能有一个立体声耳机接口，它有两种报告机制，一种用于耳机，另一种用于麦克风。有些系统在耳机连接时无法使用扬声器输出，因此需要确保在耳机接口状态发生变化时同时更新扬声器和耳机的状态。

接口 - `struct snd_soc_jack`
=============================

这表示系统上的一个物理接口，是用户空间可见的部分。接口本身是完全被动的，由机器驱动程序设置并由接口检测方法更新。
接口由机器驱动程序通过调用 `snd_soc_jack_new()` 创建。

`snd_soc_jack_pin`
==================

这些表示根据接口支持的一些状态位来更新的DAPM针脚。每个 `snd_soc_jack` 可以有零个或多个这样的针脚，它们会自动更新。这些针脚由机器驱动程序创建，并通过 `snd_soc_jack_add_pins()` 与接口关联。如果需要的话，可以配置终端的状态为接口状态的相反情况（例如，在没有通过接口连接麦克风的情况下启用内置麦克风）。

接口检测方法
=============

实际的接口检测是由能够监控系统输入并调用 `snd_soc_jack_report()` 来更新接口的代码完成的，指定要更新的一组子位。接口检测代码应该由机器驱动程序设置，包括要更新的接口配置以及接口连接时要报告的一组信息。
通常，这是基于GPIO状态来完成的——为此提供了一个处理器 `snd_soc_jack_add_gpio()`。也有其他的方法可用，例如集成在CODEC中的方法。WM8350驱动程序中就有一个CODEC集成接口检测的例子。
每个接口可能有多个报告机制，但它至少需要一个才能发挥作用。
机器驱动程序
==============

这些全部由机器驱动程序根据系统硬件进行连接。机器驱动程序将设置 `snd_soc_jack` 和需要更新的引脚列表，然后设置一个或多个插孔检测机制来根据它们当前的状态更新该插孔。
