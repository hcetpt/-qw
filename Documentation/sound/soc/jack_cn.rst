ASoC 插孔检测
===================

ALSA 提供了一个标准的 API 用于将物理插孔表示给用户空间，内核部分可以在 `include/sound/jack.h` 中看到。ASoC 提供了该 API 的一个版本，并增加了两个额外的功能：

- 它允许多个插孔检测方法共同作用于同一个用户可见的插孔。在嵌入式系统中，通常一个插孔上会存在多个信号，但由不同的硬件部分处理。
- 与 DAPM 集成，允许根据检测到的插孔状态自动更新 DAPM 端点（例如，在没有耳机插入时关闭耳机输出）。

这是通过将插孔拆分为三个协同工作的部分来实现的：一个由 `struct snd_soc_jack` 表示的插孔、一组代表要更新的 DAPM 端点的 `snd_soc_jack_pins` 和提供插孔报告机制的一块代码。

例如，一个系统可能有一个立体声耳机插孔，具有两个报告机制，一个用于耳机，另一个用于麦克风。某些系统在耳机连接时无法使用扬声器输出，因此需要确保在耳机插孔状态变化时同时更新扬声器和耳机的状态。

插孔 - `struct snd_soc_jack`
==============================

这代表系统上的一个物理插孔，并且是用户空间所能看到的部分。插孔本身是完全被动的，由机器驱动程序设置并通过插孔检测方法更新。

插孔由机器驱动程序通过调用 `snd_soc_jack_new()` 创建。

`snd_soc_jack_pin`
==================

这些代表根据插孔支持的一些状态位来更新的 DAPM 引脚。每个 `snd_soc_jack` 可以有零个或多个这样的引脚，它们会被自动更新。这些引脚由机器驱动程序创建，并通过 `snd_soc_jack_add_pins()` 与插孔关联。如果需要的话，端点的状态可以配置为与插孔状态相反（例如，当没有通过插孔连接麦克风时启用内置麦克风）。

插孔检测方法
======================

实际的插孔检测是由能够监控系统输入并调用 `snd_soc_jack_report()` 更新插孔的代码完成的，指定要更新的一组子位。插孔检测代码应由机器驱动程序设置，提供要更新的插孔配置以及插孔连接时要报告的内容。

通常这是基于 GPIO 状态完成的 —— 为此提供了一个处理器函数 `snd_soc_jack_add_gpio()`。还有其他方法可用，例如集成到 CODEC 中的方法。一个集成到 CODEC 中的插孔检测示例可以在 WM8350 驱动程序中找到。

每个插孔可能有多个报告机制，但至少需要一个才能发挥作用。
机器驱动程序
===============

这些都通过机器驱动程序根据系统硬件连接在一起。机器驱动程序将设置 `snd_soc_jack` 和需要更新的引脚列表，然后设置一个或多个插孔检测机制，根据当前状态来更新该插孔。
